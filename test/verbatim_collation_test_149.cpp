// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_149_000)
{
    uint32_t const cps[2] = { 0xFD54, 0x0062 };

    // FD54 0062;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD54 0062;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_001)
{
    uint32_t const cps[2] = { 0xFDA2, 0x0021 };

    // FDA2 0021;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA2 0021;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2393, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_002)
{
    uint32_t const cps[2] = { 0xFDA2, 0x003F };

    // FDA2 003F;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA2 003F;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2393, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_003)
{
    uint32_t const cps[2] = { 0xFDA2, 0x0061 };

    // FDA2 0061;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA2 0061;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_004)
{
    uint32_t const cps[2] = { 0xFDA2, 0x0041 };

    // FDA2 0041;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA2 0041;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_005)
{
    uint32_t const cps[2] = { 0xFDA2, 0x0062 };

    // FDA2 0062;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA2 0062;	
    // (‎‎ﶢ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM	[2383 2393 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_006)
{
    uint32_t const cps[2] = { 0xFDA1, 0x0021 };

    // FDA1 0021;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA1 0021;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2393, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_007)
{
    uint32_t const cps[2] = { 0xFDA1, 0x003F };

    // FDA1 003F;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA1 003F;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2393, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_008)
{
    uint32_t const cps[2] = { 0xFDA1, 0x0061 };

    // FDA1 0061;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA1 0061;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_009)
{
    uint32_t const cps[2] = { 0xFDA1, 0x0041 };

    // FDA1 0041;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA1 0041;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_010)
{
    uint32_t const cps[2] = { 0xFDA1, 0x0062 };

    // FDA1 0062;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA1 0062;	
    // (‎‎ﶡ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM	[2383 2393 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_011)
{
    uint32_t const cps[2] = { 0xFC70, 0x0021 };

    // FC70 0021;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC70 0021;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x23AC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_012)
{
    uint32_t const cps[2] = { 0xFC70, 0x003F };

    // FC70 003F;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC70 003F;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x23AC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_013)
{
    uint32_t const cps[2] = { 0xFC70, 0x0061 };

    // FC70 0061;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC70 0061;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_014)
{
    uint32_t const cps[2] = { 0xFC70, 0x0041 };

    // FC70 0041;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC70 0041;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_015)
{
    uint32_t const cps[2] = { 0xFC70, 0x0062 };

    // FC70 0062;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC70 0062;	
    // (‎‎ﱰ‎‎) ARABIC LIGATURE TEH WITH REH FINAL FORM	[2383 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_016)
{
    uint32_t const cps[2] = { 0xFC71, 0x0021 };

    // FC71 0021;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC71 0021;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x23AD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_017)
{
    uint32_t const cps[2] = { 0xFC71, 0x003F };

    // FC71 003F;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC71 003F;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x23AD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_018)
{
    uint32_t const cps[2] = { 0xFC71, 0x0061 };

    // FC71 0061;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC71 0061;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_019)
{
    uint32_t const cps[2] = { 0xFC71, 0x0041 };

    // FC71 0041;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC71 0041;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_020)
{
    uint32_t const cps[2] = { 0xFC71, 0x0062 };

    // FC71 0062;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC71 0062;	
    // (‎‎ﱱ‎‎) ARABIC LIGATURE TEH WITH ZAIN FINAL FORM	[2383 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_021)
{
    uint32_t const cps[2] = { 0xFCA4, 0x0021 };

    // FCA4 0021;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA4 0021;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_022)
{
    uint32_t const cps[2] = { 0xFCE3, 0x0021 };

    // FCE3 0021;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE3 0021;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 | 0020 0020 | 0018 0018 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_023)
{
    uint32_t const cps[2] = { 0xFC72, 0x0021 };

    // FC72 0021;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC72 0021;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_024)
{
    uint32_t const cps[2] = { 0xFC0E, 0x0021 };

    // FC0E 0021;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0E 0021;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_025)
{
    uint32_t const cps[2] = { 0xFCA4, 0x003F };

    // FCA4 003F;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA4 003F;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_026)
{
    uint32_t const cps[2] = { 0xFCE3, 0x003F };

    // FCE3 003F;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE3 003F;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 | 0020 0020 | 0018 0018 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_027)
{
    uint32_t const cps[2] = { 0xFC72, 0x003F };

    // FC72 003F;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC72 003F;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_028)
{
    uint32_t const cps[2] = { 0xFC0E, 0x003F };

    // FC0E 003F;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0E 003F;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_029)
{
    uint32_t const cps[2] = { 0xFCA4, 0x0061 };

    // FCA4 0061;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA4 0061;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_030)
{
    uint32_t const cps[2] = { 0xFCA4, 0x0041 };

    // FCA4 0041;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA4 0041;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_031)
{
    uint32_t const cps[2] = { 0xFCE3, 0x0061 };

    // FCE3 0061;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE3 0061;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_032)
{
    uint32_t const cps[2] = { 0xFCE3, 0x0041 };

    // FCE3 0041;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE3 0041;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_033)
{
    uint32_t const cps[2] = { 0xFC72, 0x0061 };

    // FC72 0061;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC72 0061;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_034)
{
    uint32_t const cps[2] = { 0xFC72, 0x0041 };

    // FC72 0041;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC72 0041;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_035)
{
    uint32_t const cps[2] = { 0xFC0E, 0x0061 };

    // FC0E 0061;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0E 0061;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_036)
{
    uint32_t const cps[2] = { 0xFC0E, 0x0041 };

    // FC0E 0041;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0E 0041;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_037)
{
    uint32_t const cps[2] = { 0xFCA4, 0x0062 };

    // FCA4 0062;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA4 0062;	
    // (‎‎ﲤ‎‎) ARABIC LIGATURE TEH WITH MEEM INITIAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_038)
{
    uint32_t const cps[2] = { 0xFCE3, 0x0062 };

    // FCE3 0062;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE3 0062;	
    // (‎‎ﳣ‎‎) ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_039)
{
    uint32_t const cps[2] = { 0xFC72, 0x0062 };

    // FC72 0062;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC72 0062;	
    // (‎‎ﱲ‎‎) ARABIC LIGATURE TEH WITH MEEM FINAL FORM	[2383 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_040)
{
    uint32_t const cps[2] = { 0xFC0E, 0x0062 };

    // FC0E 0062;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0E 0062;	
    // (‎‎ﰎ‎‎) ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM	[2383 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_041)
{
    uint32_t const cps[2] = { 0xFD55, 0x0021 };

    // FD55 0021;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD55 0021;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x238B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_042)
{
    uint32_t const cps[2] = { 0xFD55, 0x003F };

    // FD55 003F;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD55 003F;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x238B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_043)
{
    uint32_t const cps[2] = { 0xFD55, 0x0061 };

    // FD55 0061;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD55 0061;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_044)
{
    uint32_t const cps[2] = { 0xFD55, 0x0041 };

    // FD55 0041;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD55 0041;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_045)
{
    uint32_t const cps[2] = { 0xFD55, 0x0062 };

    // FD55 0062;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD55 0062;	
    // (‎‎ﵕ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM	[2383 2409 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_046)
{
    uint32_t const cps[2] = { 0xFD56, 0x0021 };

    // FD56 0021;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD56 0021;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_047)
{
    uint32_t const cps[2] = { 0xFD56, 0x003F };

    // FD56 003F;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD56 003F;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_048)
{
    uint32_t const cps[2] = { 0xFD56, 0x0061 };

    // FD56 0061;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD56 0061;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_049)
{
    uint32_t const cps[2] = { 0xFD56, 0x0041 };

    // FD56 0041;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD56 0041;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_050)
{
    uint32_t const cps[2] = { 0xFD56, 0x0062 };

    // FD56 0062;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD56 0062;	
    // (‎‎ﵖ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM	[2383 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_051)
{
    uint32_t const cps[2] = { 0xFD57, 0x0021 };

    // FD57 0021;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD57 0021;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x2393, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_052)
{
    uint32_t const cps[2] = { 0xFD57, 0x003F };

    // FD57 003F;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD57 003F;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x2393, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_053)
{
    uint32_t const cps[2] = { 0xFD57, 0x0061 };

    // FD57 0061;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD57 0061;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_054)
{
    uint32_t const cps[2] = { 0xFD57, 0x0041 };

    // FD57 0041;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD57 0041;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_055)
{
    uint32_t const cps[2] = { 0xFD57, 0x0062 };

    // FD57 0062;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD57 0062;	
    // (‎‎ﵗ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM	[2383 2409 2393 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_056)
{
    uint32_t const cps[2] = { 0xFDA4, 0x0021 };

    // FDA4 0021;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA4 0021;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_057)
{
    uint32_t const cps[2] = { 0xFDA4, 0x003F };

    // FDA4 003F;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA4 003F;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_058)
{
    uint32_t const cps[2] = { 0xFDA4, 0x0061 };

    // FDA4 0061;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA4 0061;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_059)
{
    uint32_t const cps[2] = { 0xFDA4, 0x0041 };

    // FDA4 0041;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA4 0041;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_060)
{
    uint32_t const cps[2] = { 0xFDA4, 0x0062 };

    // FDA4 0062;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA4 0062;	
    // (‎‎ﶤ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2383 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_061)
{
    uint32_t const cps[2] = { 0xFDA3, 0x0021 };

    // FDA3 0021;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA3 0021;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_062)
{
    uint32_t const cps[2] = { 0xFDA3, 0x003F };

    // FDA3 003F;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA3 003F;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x2383, 0x2409, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_063)
{
    uint32_t const cps[2] = { 0xFDA3, 0x0061 };

    // FDA3 0061;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA3 0061;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_064)
{
    uint32_t const cps[2] = { 0xFDA3, 0x0041 };

    // FDA3 0041;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA3 0041;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_065)
{
    uint32_t const cps[2] = { 0xFDA3, 0x0062 };

    // FDA3 0062;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x2383, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA3 0062;	
    // (‎‎ﶣ‎‎) ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM	[2383 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x2383, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_066)
{
    uint32_t const cps[2] = { 0xFC73, 0x0021 };

    // FC73 0021;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC73 0021;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x240D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_067)
{
    uint32_t const cps[2] = { 0xFC73, 0x003F };

    // FC73 003F;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC73 003F;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x240D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_068)
{
    uint32_t const cps[2] = { 0xFC73, 0x0061 };

    // FC73 0061;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC73 0061;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_069)
{
    uint32_t const cps[2] = { 0xFC73, 0x0041 };

    // FC73 0041;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC73 0041;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_070)
{
    uint32_t const cps[2] = { 0xFC73, 0x0062 };

    // FC73 0062;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC73 0062;	
    // (‎‎ﱳ‎‎) ARABIC LIGATURE TEH WITH NOON FINAL FORM	[2383 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_071)
{
    uint32_t const cps[2] = { 0xFCA5, 0x0021 };

    // FCA5 0021;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA5 0021;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 | 0020 0020 | 0017 0017 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_072)
{
    uint32_t const cps[2] = { 0xFCE4, 0x0021 };

    // FCE4 0021;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE4 0021;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 | 0020 0020 | 0018 0018 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_073)
{
    uint32_t const cps[2] = { 0xFCA5, 0x003F };

    // FCA5 003F;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA5 003F;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 | 0020 0020 | 0017 0017 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_074)
{
    uint32_t const cps[2] = { 0xFCE4, 0x003F };

    // FCE4 003F;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE4 003F;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 | 0020 0020 | 0018 0018 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_075)
{
    uint32_t const cps[2] = { 0xFCA5, 0x0061 };

    // FCA5 0061;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA5 0061;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_076)
{
    uint32_t const cps[2] = { 0xFCA5, 0x0041 };

    // FCA5 0041;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA5 0041;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_077)
{
    uint32_t const cps[2] = { 0xFCE4, 0x0061 };

    // FCE4 0061;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE4 0061;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_078)
{
    uint32_t const cps[2] = { 0xFCE4, 0x0041 };

    // FCE4 0041;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE4 0041;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_079)
{
    uint32_t const cps[2] = { 0xFCA5, 0x0062 };

    // FCA5 0062;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA5 0062;	
    // (‎‎ﲥ‎‎) ARABIC LIGATURE TEH WITH HEH INITIAL FORM	[2383 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_080)
{
    uint32_t const cps[2] = { 0xFCE4, 0x0062 };

    // FCE4 0062;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE4 0062;	
    // (‎‎ﳤ‎‎) ARABIC LIGATURE TEH WITH HEH MEDIAL FORM	[2383 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_081)
{
    uint32_t const cps[2] = { 0xFC74, 0x0021 };

    // FC74 0021;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC74 0021;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_082)
{
    uint32_t const cps[2] = { 0xFC0F, 0x0021 };

    // FC0F 0021;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0F 0021;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_083)
{
    uint32_t const cps[2] = { 0xFC74, 0x003F };

    // FC74 003F;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC74 003F;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_084)
{
    uint32_t const cps[2] = { 0xFC0F, 0x003F };

    // FC0F 003F;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0F 003F;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_085)
{
    uint32_t const cps[2] = { 0xFC74, 0x0061 };

    // FC74 0061;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC74 0061;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_086)
{
    uint32_t const cps[2] = { 0xFC74, 0x0041 };

    // FC74 0041;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC74 0041;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_087)
{
    uint32_t const cps[2] = { 0xFC0F, 0x0061 };

    // FC0F 0061;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0F 0061;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_088)
{
    uint32_t const cps[2] = { 0xFC0F, 0x0041 };

    // FC0F 0041;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0F 0041;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_089)
{
    uint32_t const cps[2] = { 0xFC74, 0x0062 };

    // FC74 0062;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC74 0062;	
    // (‎‎ﱴ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM	[2383 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_090)
{
    uint32_t const cps[2] = { 0xFC0F, 0x0062 };

    // FC0F 0062;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC0F 0062;	
    // (‎‎ﰏ‎‎) ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM	[2383 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_091)
{
    uint32_t const cps[2] = { 0xFC75, 0x0021 };

    // FC75 0021;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC75 0021;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_092)
{
    uint32_t const cps[2] = { 0xFC10, 0x0021 };

    // FC10 0021;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC10 0021;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_093)
{
    uint32_t const cps[2] = { 0xFC75, 0x003F };

    // FC75 003F;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC75 003F;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_094)
{
    uint32_t const cps[2] = { 0xFC10, 0x003F };

    // FC10 003F;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC10 003F;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2383, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_095)
{
    uint32_t const cps[2] = { 0xFC75, 0x0061 };

    // FC75 0061;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC75 0061;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_096)
{
    uint32_t const cps[2] = { 0xFC75, 0x0041 };

    // FC75 0041;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC75 0041;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_097)
{
    uint32_t const cps[2] = { 0xFC10, 0x0061 };

    // FC10 0061;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC10 0061;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_098)
{
    uint32_t const cps[2] = { 0xFC10, 0x0041 };

    // FC10 0041;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC10 0041;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_099)
{
    uint32_t const cps[2] = { 0xFC75, 0x0062 };

    // FC75 0062;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC75 0062;	
    // (‎‎ﱵ‎‎) ARABIC LIGATURE TEH WITH YEH FINAL FORM	[2383 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_100)
{
    uint32_t const cps[2] = { 0xFC10, 0x0062 };

    // FC10 0062;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2383, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC10 0062;	
    // (‎‎ﰐ‎‎) ARABIC LIGATURE TEH WITH YEH ISOLATED FORM	[2383 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2383, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_101)
{
    uint32_t const cps[2] = { 0x062B, 0x0021 };

    // 062B 0021;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062B 0021;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_102)
{
    uint32_t const cps[2] = { 0x1EE16, 0x0021 };

    // 1EE16 0021;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE16 0021;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_103)
{
    uint32_t const cps[2] = { 0x1EE36, 0x0021 };

    // 1EE36 0021;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE36 0021;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_104)
{
    uint32_t const cps[2] = { 0x1EE76, 0x0021 };

    // 1EE76 0021;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE76 0021;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_105)
{
    uint32_t const cps[2] = { 0x1EE96, 0x0021 };

    // 1EE96 0021;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE96 0021;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_106)
{
    uint32_t const cps[2] = { 0x1EEB6, 0x0021 };

    // 1EEB6 0021;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEB6 0021;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_107)
{
    uint32_t const cps[2] = { 0xFE9B, 0x0021 };

    // FE9B 0021;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9B 0021;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_108)
{
    uint32_t const cps[2] = { 0xFE9C, 0x0021 };

    // FE9C 0021;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9C 0021;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_109)
{
    uint32_t const cps[2] = { 0xFE9A, 0x0021 };

    // FE9A 0021;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9A 0021;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_110)
{
    uint32_t const cps[2] = { 0xFE99, 0x0021 };

    // FE99 0021;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE99 0021;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_111)
{
    uint32_t const cps[2] = { 0x062B, 0x003F };

    // 062B 003F;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062B 003F;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_112)
{
    uint32_t const cps[2] = { 0x1EE16, 0x003F };

    // 1EE16 003F;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE16 003F;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_113)
{
    uint32_t const cps[2] = { 0x1EE36, 0x003F };

    // 1EE36 003F;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE36 003F;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_114)
{
    uint32_t const cps[2] = { 0x1EE76, 0x003F };

    // 1EE76 003F;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE76 003F;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_115)
{
    uint32_t const cps[2] = { 0x1EE96, 0x003F };

    // 1EE96 003F;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE96 003F;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_116)
{
    uint32_t const cps[2] = { 0x1EEB6, 0x003F };

    // 1EEB6 003F;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEB6 003F;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_117)
{
    uint32_t const cps[2] = { 0xFE9B, 0x003F };

    // FE9B 003F;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9B 003F;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_118)
{
    uint32_t const cps[2] = { 0xFE9C, 0x003F };

    // FE9C 003F;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9C 003F;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_119)
{
    uint32_t const cps[2] = { 0xFE9A, 0x003F };

    // FE9A 003F;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9A 003F;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_120)
{
    uint32_t const cps[2] = { 0xFE99, 0x003F };

    // FE99 003F;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE99 003F;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2384, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_121)
{
    uint32_t const cps[2] = { 0x062B, 0x0061 };

    // 062B 0061;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062B 0061;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_122)
{
    uint32_t const cps[2] = { 0x062B, 0x0041 };

    // 062B 0041;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062B 0041;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_123)
{
    uint32_t const cps[2] = { 0x1EE16, 0x0061 };

    // 1EE16 0061;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE16 0061;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_124)
{
    uint32_t const cps[2] = { 0x1EE36, 0x0061 };

    // 1EE36 0061;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE36 0061;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_125)
{
    uint32_t const cps[2] = { 0x1EE76, 0x0061 };

    // 1EE76 0061;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE76 0061;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_126)
{
    uint32_t const cps[2] = { 0x1EE96, 0x0061 };

    // 1EE96 0061;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE96 0061;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_127)
{
    uint32_t const cps[2] = { 0x1EEB6, 0x0061 };

    // 1EEB6 0061;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEB6 0061;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_128)
{
    uint32_t const cps[2] = { 0x1EE16, 0x0041 };

    // 1EE16 0041;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE16 0041;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_129)
{
    uint32_t const cps[2] = { 0x1EE36, 0x0041 };

    // 1EE36 0041;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE36 0041;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_130)
{
    uint32_t const cps[2] = { 0x1EE76, 0x0041 };

    // 1EE76 0041;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE76 0041;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_131)
{
    uint32_t const cps[2] = { 0x1EE96, 0x0041 };

    // 1EE96 0041;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE96 0041;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_132)
{
    uint32_t const cps[2] = { 0x1EEB6, 0x0041 };

    // 1EEB6 0041;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEB6 0041;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_133)
{
    uint32_t const cps[2] = { 0xFE9B, 0x0061 };

    // FE9B 0061;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9B 0061;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_134)
{
    uint32_t const cps[2] = { 0xFE9B, 0x0041 };

    // FE9B 0041;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9B 0041;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_135)
{
    uint32_t const cps[2] = { 0xFE9C, 0x0061 };

    // FE9C 0061;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9C 0061;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_136)
{
    uint32_t const cps[2] = { 0xFE9C, 0x0041 };

    // FE9C 0041;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9C 0041;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_137)
{
    uint32_t const cps[2] = { 0xFE9A, 0x0061 };

    // FE9A 0061;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9A 0061;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_138)
{
    uint32_t const cps[2] = { 0xFE9A, 0x0041 };

    // FE9A 0041;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9A 0041;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_139)
{
    uint32_t const cps[2] = { 0xFE99, 0x0061 };

    // FE99 0061;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE99 0061;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_140)
{
    uint32_t const cps[2] = { 0xFE99, 0x0041 };

    // FE99 0041;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE99 0041;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_141)
{
    uint32_t const cps[2] = { 0x062B, 0x0062 };

    // 062B 0062;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062B 0062;	
    // (‎‎ث‎‎) ARABIC LETTER THEH	[2384 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_142)
{
    uint32_t const cps[2] = { 0x1EE16, 0x0062 };

    // 1EE16 0062;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE16 0062;	
    // (‎‎𞸖‎‎) ARABIC MATHEMATICAL THEH	[2384 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_143)
{
    uint32_t const cps[2] = { 0x1EE36, 0x0062 };

    // 1EE36 0062;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE36 0062;	
    // (‎‎𞸶‎‎) ARABIC MATHEMATICAL INITIAL THEH	[2384 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_144)
{
    uint32_t const cps[2] = { 0x1EE76, 0x0062 };

    // 1EE76 0062;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE76 0062;	
    // (‎‎𞹶‎‎) ARABIC MATHEMATICAL STRETCHED THEH	[2384 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_145)
{
    uint32_t const cps[2] = { 0x1EE96, 0x0062 };

    // 1EE96 0062;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE96 0062;	
    // (‎‎𞺖‎‎) ARABIC MATHEMATICAL LOOPED THEH	[2384 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_146)
{
    uint32_t const cps[2] = { 0x1EEB6, 0x0062 };

    // 1EEB6 0062;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEB6 0062;	
    // (‎‎𞺶‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THEH	[2384 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_147)
{
    uint32_t const cps[2] = { 0xFE9B, 0x0062 };

    // FE9B 0062;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9B 0062;	
    // (‎‎ﺛ‎‎) ARABIC LETTER THEH INITIAL FORM	[2384 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_148)
{
    uint32_t const cps[2] = { 0xFE9C, 0x0062 };

    // FE9C 0062;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9C 0062;	
    // (‎‎ﺜ‎‎) ARABIC LETTER THEH MEDIAL FORM	[2384 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_149)
{
    uint32_t const cps[2] = { 0xFE9A, 0x0062 };

    // FE9A 0062;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9A 0062;	
    // (‎‎ﺚ‎‎) ARABIC LETTER THEH FINAL FORM	[2384 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_150)
{
    uint32_t const cps[2] = { 0xFE99, 0x0062 };

    // FE99 0062;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE99 0062;	
    // (‎‎ﺙ‎‎) ARABIC LETTER THEH ISOLATED FORM	[2384 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_151)
{
    uint32_t const cps[2] = { 0xFC11, 0x0021 };

    // FC11 0021;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC11 0021;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x238B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_152)
{
    uint32_t const cps[2] = { 0xFC11, 0x003F };

    // FC11 003F;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC11 003F;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x238B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_153)
{
    uint32_t const cps[2] = { 0xFC11, 0x0061 };

    // FC11 0061;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC11 0061;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_154)
{
    uint32_t const cps[2] = { 0xFC11, 0x0041 };

    // FC11 0041;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC11 0041;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_155)
{
    uint32_t const cps[2] = { 0xFC11, 0x0062 };

    // FC11 0062;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC11 0062;	
    // (‎‎ﰑ‎‎) ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM	[2384 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_156)
{
    uint32_t const cps[2] = { 0xFC76, 0x0021 };

    // FC76 0021;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC76 0021;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x23AC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_157)
{
    uint32_t const cps[2] = { 0xFC76, 0x003F };

    // FC76 003F;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC76 003F;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x23AC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_158)
{
    uint32_t const cps[2] = { 0xFC76, 0x0061 };

    // FC76 0061;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC76 0061;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_159)
{
    uint32_t const cps[2] = { 0xFC76, 0x0041 };

    // FC76 0041;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC76 0041;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_160)
{
    uint32_t const cps[2] = { 0xFC76, 0x0062 };

    // FC76 0062;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC76 0062;	
    // (‎‎ﱶ‎‎) ARABIC LIGATURE THEH WITH REH FINAL FORM	[2384 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_161)
{
    uint32_t const cps[2] = { 0xFC77, 0x0021 };

    // FC77 0021;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC77 0021;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x23AD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_162)
{
    uint32_t const cps[2] = { 0xFC77, 0x003F };

    // FC77 003F;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC77 003F;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x23AD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_163)
{
    uint32_t const cps[2] = { 0xFC77, 0x0061 };

    // FC77 0061;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC77 0061;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_164)
{
    uint32_t const cps[2] = { 0xFC77, 0x0041 };

    // FC77 0041;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC77 0041;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_165)
{
    uint32_t const cps[2] = { 0xFC77, 0x0062 };

    // FC77 0062;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC77 0062;	
    // (‎‎ﱷ‎‎) ARABIC LIGATURE THEH WITH ZAIN FINAL FORM	[2384 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_166)
{
    uint32_t const cps[2] = { 0xFCA6, 0x0021 };

    // FCA6 0021;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA6 0021;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_167)
{
    uint32_t const cps[2] = { 0xFCE5, 0x0021 };

    // FCE5 0021;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE5 0021;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 | 0020 0020 | 0018 0018 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_168)
{
    uint32_t const cps[2] = { 0xFC78, 0x0021 };

    // FC78 0021;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC78 0021;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_169)
{
    uint32_t const cps[2] = { 0xFC12, 0x0021 };

    // FC12 0021;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC12 0021;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_170)
{
    uint32_t const cps[2] = { 0xFCA6, 0x003F };

    // FCA6 003F;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA6 003F;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_171)
{
    uint32_t const cps[2] = { 0xFCE5, 0x003F };

    // FCE5 003F;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE5 003F;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 | 0020 0020 | 0018 0018 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_172)
{
    uint32_t const cps[2] = { 0xFC78, 0x003F };

    // FC78 003F;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC78 003F;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_173)
{
    uint32_t const cps[2] = { 0xFC12, 0x003F };

    // FC12 003F;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC12 003F;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_174)
{
    uint32_t const cps[2] = { 0xFCA6, 0x0061 };

    // FCA6 0061;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA6 0061;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_175)
{
    uint32_t const cps[2] = { 0xFCA6, 0x0041 };

    // FCA6 0041;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA6 0041;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_176)
{
    uint32_t const cps[2] = { 0xFCE5, 0x0061 };

    // FCE5 0061;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE5 0061;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_177)
{
    uint32_t const cps[2] = { 0xFCE5, 0x0041 };

    // FCE5 0041;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE5 0041;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_178)
{
    uint32_t const cps[2] = { 0xFC78, 0x0061 };

    // FC78 0061;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC78 0061;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_179)
{
    uint32_t const cps[2] = { 0xFC78, 0x0041 };

    // FC78 0041;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC78 0041;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_180)
{
    uint32_t const cps[2] = { 0xFC12, 0x0061 };

    // FC12 0061;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC12 0061;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_181)
{
    uint32_t const cps[2] = { 0xFC12, 0x0041 };

    // FC12 0041;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC12 0041;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_182)
{
    uint32_t const cps[2] = { 0xFCA6, 0x0062 };

    // FCA6 0062;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA6 0062;	
    // (‎‎ﲦ‎‎) ARABIC LIGATURE THEH WITH MEEM INITIAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_183)
{
    uint32_t const cps[2] = { 0xFCE5, 0x0062 };

    // FCE5 0062;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE5 0062;	
    // (‎‎ﳥ‎‎) ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_184)
{
    uint32_t const cps[2] = { 0xFC78, 0x0062 };

    // FC78 0062;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC78 0062;	
    // (‎‎ﱸ‎‎) ARABIC LIGATURE THEH WITH MEEM FINAL FORM	[2384 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_185)
{
    uint32_t const cps[2] = { 0xFC12, 0x0062 };

    // FC12 0062;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC12 0062;	
    // (‎‎ﰒ‎‎) ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM	[2384 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_186)
{
    uint32_t const cps[2] = { 0xFC79, 0x0021 };

    // FC79 0021;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC79 0021;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x240D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_187)
{
    uint32_t const cps[2] = { 0xFC79, 0x003F };

    // FC79 003F;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC79 003F;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x240D, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_188)
{
    uint32_t const cps[2] = { 0xFC79, 0x0061 };

    // FC79 0061;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC79 0061;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_189)
{
    uint32_t const cps[2] = { 0xFC79, 0x0041 };

    // FC79 0041;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC79 0041;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_190)
{
    uint32_t const cps[2] = { 0xFC79, 0x0062 };

    // FC79 0062;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC79 0062;	
    // (‎‎ﱹ‎‎) ARABIC LIGATURE THEH WITH NOON FINAL FORM	[2384 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_191)
{
    uint32_t const cps[2] = { 0xFCE6, 0x0021 };

    // FCE6 0021;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE6 0021;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 | 0020 0020 | 0018 0018 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_192)
{
    uint32_t const cps[2] = { 0xFCE6, 0x003F };

    // FCE6 003F;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE6 003F;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 | 0020 0020 | 0018 0018 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x2417, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_193)
{
    uint32_t const cps[2] = { 0xFCE6, 0x0061 };

    // FCE6 0061;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE6 0061;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_194)
{
    uint32_t const cps[2] = { 0xFCE6, 0x0041 };

    // FCE6 0041;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE6 0041;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_195)
{
    uint32_t const cps[2] = { 0xFCE6, 0x0062 };

    // FCE6 0062;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCE6 0062;	
    // (‎‎ﳦ‎‎) ARABIC LIGATURE THEH WITH HEH MEDIAL FORM	[2384 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_196)
{
    uint32_t const cps[2] = { 0xFC7A, 0x0021 };

    // FC7A 0021;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7A 0021;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_197)
{
    uint32_t const cps[2] = { 0xFC13, 0x0021 };

    // FC13 0021;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC13 0021;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_198)
{
    uint32_t const cps[2] = { 0xFC7A, 0x003F };

    // FC7A 003F;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7A 003F;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_199)
{
    uint32_t const cps[2] = { 0xFC13, 0x003F };

    // FC13 003F;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC13 003F;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_200)
{
    uint32_t const cps[2] = { 0xFC7A, 0x0061 };

    // FC7A 0061;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7A 0061;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_201)
{
    uint32_t const cps[2] = { 0xFC7A, 0x0041 };

    // FC7A 0041;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7A 0041;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_202)
{
    uint32_t const cps[2] = { 0xFC13, 0x0061 };

    // FC13 0061;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC13 0061;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_203)
{
    uint32_t const cps[2] = { 0xFC13, 0x0041 };

    // FC13 0041;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC13 0041;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_204)
{
    uint32_t const cps[2] = { 0xFC7A, 0x0062 };

    // FC7A 0062;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7A 0062;	
    // (‎‎ﱺ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM	[2384 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_205)
{
    uint32_t const cps[2] = { 0xFC13, 0x0062 };

    // FC13 0062;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC13 0062;	
    // (‎‎ﰓ‎‎) ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM	[2384 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_206)
{
    uint32_t const cps[2] = { 0xFC7B, 0x0021 };

    // FC7B 0021;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7B 0021;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_207)
{
    uint32_t const cps[2] = { 0xFC14, 0x0021 };

    // FC14 0021;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC14 0021;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_208)
{
    uint32_t const cps[2] = { 0xFC7B, 0x003F };

    // FC7B 003F;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7B 003F;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_209)
{
    uint32_t const cps[2] = { 0xFC14, 0x003F };

    // FC14 003F;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC14 003F;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x2384, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_210)
{
    uint32_t const cps[2] = { 0xFC7B, 0x0061 };

    // FC7B 0061;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7B 0061;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_211)
{
    uint32_t const cps[2] = { 0xFC7B, 0x0041 };

    // FC7B 0041;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7B 0041;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_212)
{
    uint32_t const cps[2] = { 0xFC14, 0x0061 };

    // FC14 0061;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC14 0061;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_213)
{
    uint32_t const cps[2] = { 0xFC14, 0x0041 };

    // FC14 0041;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC14 0041;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_214)
{
    uint32_t const cps[2] = { 0xFC7B, 0x0062 };

    // FC7B 0062;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC7B 0062;	
    // (‎‎ﱻ‎‎) ARABIC LIGATURE THEH WITH YEH FINAL FORM	[2384 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_215)
{
    uint32_t const cps[2] = { 0xFC14, 0x0062 };

    // FC14 0062;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x2384, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC14 0062;	
    // (‎‎ﰔ‎‎) ARABIC LIGATURE THEH WITH YEH ISOLATED FORM	[2384 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x2384, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_216)
{
    uint32_t const cps[2] = { 0x0679, 0x0021 };

    // 0679 0021;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0679 0021;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_217)
{
    uint32_t const cps[2] = { 0xFB68, 0x0021 };

    // FB68 0021;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB68 0021;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_218)
{
    uint32_t const cps[2] = { 0xFB69, 0x0021 };

    // FB69 0021;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB69 0021;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_219)
{
    uint32_t const cps[2] = { 0xFB67, 0x0021 };

    // FB67 0021;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB67 0021;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_220)
{
    uint32_t const cps[2] = { 0xFB66, 0x0021 };

    // FB66 0021;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB66 0021;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_221)
{
    uint32_t const cps[2] = { 0x0679, 0x003F };

    // 0679 003F;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0679 003F;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_222)
{
    uint32_t const cps[2] = { 0xFB68, 0x003F };

    // FB68 003F;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB68 003F;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_223)
{
    uint32_t const cps[2] = { 0xFB69, 0x003F };

    // FB69 003F;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB69 003F;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_224)
{
    uint32_t const cps[2] = { 0xFB67, 0x003F };

    // FB67 003F;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB67 003F;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_225)
{
    uint32_t const cps[2] = { 0xFB66, 0x003F };

    // FB66 003F;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB66 003F;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2385, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_226)
{
    uint32_t const cps[2] = { 0x0679, 0x0061 };

    // 0679 0061;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0679 0061;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_227)
{
    uint32_t const cps[2] = { 0x0679, 0x0041 };

    // 0679 0041;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0679 0041;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_228)
{
    uint32_t const cps[2] = { 0xFB68, 0x0061 };

    // FB68 0061;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB68 0061;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_229)
{
    uint32_t const cps[2] = { 0xFB68, 0x0041 };

    // FB68 0041;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB68 0041;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_230)
{
    uint32_t const cps[2] = { 0xFB69, 0x0061 };

    // FB69 0061;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB69 0061;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_231)
{
    uint32_t const cps[2] = { 0xFB69, 0x0041 };

    // FB69 0041;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB69 0041;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_232)
{
    uint32_t const cps[2] = { 0xFB67, 0x0061 };

    // FB67 0061;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB67 0061;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_233)
{
    uint32_t const cps[2] = { 0xFB67, 0x0041 };

    // FB67 0041;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB67 0041;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_234)
{
    uint32_t const cps[2] = { 0xFB66, 0x0061 };

    // FB66 0061;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB66 0061;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_235)
{
    uint32_t const cps[2] = { 0xFB66, 0x0041 };

    // FB66 0041;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB66 0041;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_236)
{
    uint32_t const cps[2] = { 0x0679, 0x0062 };

    // 0679 0062;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0679 0062;	
    // (‎‎ٹ‎‎) ARABIC LETTER TTEH	[2385 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_237)
{
    uint32_t const cps[2] = { 0xFB68, 0x0062 };

    // FB68 0062;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB68 0062;	
    // (‎‎ﭨ‎‎) ARABIC LETTER TTEH INITIAL FORM	[2385 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_238)
{
    uint32_t const cps[2] = { 0xFB69, 0x0062 };

    // FB69 0062;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB69 0062;	
    // (‎‎ﭩ‎‎) ARABIC LETTER TTEH MEDIAL FORM	[2385 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_239)
{
    uint32_t const cps[2] = { 0xFB67, 0x0062 };

    // FB67 0062;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB67 0062;	
    // (‎‎ﭧ‎‎) ARABIC LETTER TTEH FINAL FORM	[2385 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_240)
{
    uint32_t const cps[2] = { 0xFB66, 0x0062 };

    // FB66 0062;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB66 0062;	
    // (‎‎ﭦ‎‎) ARABIC LETTER TTEH ISOLATED FORM	[2385 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_241)
{
    uint32_t const cps[2] = { 0x067A, 0x0021 };

    // 067A 0021;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067A 0021;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_242)
{
    uint32_t const cps[2] = { 0xFB60, 0x0021 };

    // FB60 0021;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB60 0021;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_243)
{
    uint32_t const cps[2] = { 0xFB61, 0x0021 };

    // FB61 0021;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB61 0021;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_244)
{
    uint32_t const cps[2] = { 0xFB5F, 0x0021 };

    // FB5F 0021;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5F 0021;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_245)
{
    uint32_t const cps[2] = { 0xFB5E, 0x0021 };

    // FB5E 0021;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5E 0021;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_246)
{
    uint32_t const cps[2] = { 0x067A, 0x003F };

    // 067A 003F;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067A 003F;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_247)
{
    uint32_t const cps[2] = { 0xFB60, 0x003F };

    // FB60 003F;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB60 003F;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_248)
{
    uint32_t const cps[2] = { 0xFB61, 0x003F };

    // FB61 003F;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB61 003F;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_249)
{
    uint32_t const cps[2] = { 0xFB5F, 0x003F };

    // FB5F 003F;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5F 003F;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_250)
{
    uint32_t const cps[2] = { 0xFB5E, 0x003F };

    // FB5E 003F;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5E 003F;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2386, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_251)
{
    uint32_t const cps[2] = { 0x067A, 0x0061 };

    // 067A 0061;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067A 0061;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_252)
{
    uint32_t const cps[2] = { 0x067A, 0x0041 };

    // 067A 0041;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067A 0041;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_253)
{
    uint32_t const cps[2] = { 0xFB60, 0x0061 };

    // FB60 0061;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB60 0061;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_254)
{
    uint32_t const cps[2] = { 0xFB60, 0x0041 };

    // FB60 0041;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB60 0041;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_255)
{
    uint32_t const cps[2] = { 0xFB61, 0x0061 };

    // FB61 0061;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB61 0061;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_256)
{
    uint32_t const cps[2] = { 0xFB61, 0x0041 };

    // FB61 0041;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB61 0041;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_257)
{
    uint32_t const cps[2] = { 0xFB5F, 0x0061 };

    // FB5F 0061;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5F 0061;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_258)
{
    uint32_t const cps[2] = { 0xFB5F, 0x0041 };

    // FB5F 0041;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5F 0041;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_259)
{
    uint32_t const cps[2] = { 0xFB5E, 0x0061 };

    // FB5E 0061;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5E 0061;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_260)
{
    uint32_t const cps[2] = { 0xFB5E, 0x0041 };

    // FB5E 0041;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5E 0041;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_261)
{
    uint32_t const cps[2] = { 0x067A, 0x0062 };

    // 067A 0062;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067A 0062;	
    // (‎‎ٺ‎‎) ARABIC LETTER TTEHEH	[2386 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_262)
{
    uint32_t const cps[2] = { 0xFB60, 0x0062 };

    // FB60 0062;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB60 0062;	
    // (‎‎ﭠ‎‎) ARABIC LETTER TTEHEH INITIAL FORM	[2386 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_263)
{
    uint32_t const cps[2] = { 0xFB61, 0x0062 };

    // FB61 0062;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB61 0062;	
    // (‎‎ﭡ‎‎) ARABIC LETTER TTEHEH MEDIAL FORM	[2386 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_264)
{
    uint32_t const cps[2] = { 0xFB5F, 0x0062 };

    // FB5F 0062;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5F 0062;	
    // (‎‎ﭟ‎‎) ARABIC LETTER TTEHEH FINAL FORM	[2386 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_265)
{
    uint32_t const cps[2] = { 0xFB5E, 0x0062 };

    // FB5E 0062;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB5E 0062;	
    // (‎‎ﭞ‎‎) ARABIC LETTER TTEHEH ISOLATED FORM	[2386 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_266)
{
    uint32_t const cps[2] = { 0x067C, 0x0021 };

    // 067C 0021;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067C 0021;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2387, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_267)
{
    uint32_t const cps[2] = { 0x067C, 0x003F };

    // 067C 003F;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067C 003F;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2387, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_268)
{
    uint32_t const cps[2] = { 0x067C, 0x0061 };

    // 067C 0061;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067C 0061;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_269)
{
    uint32_t const cps[2] = { 0x067C, 0x0041 };

    // 067C 0041;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067C 0041;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_270)
{
    uint32_t const cps[2] = { 0x067C, 0x0062 };

    // 067C 0062;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067C 0062;	
    // (‎‎ټ‎‎) ARABIC LETTER TEH WITH RING	[2387 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_271)
{
    uint32_t const cps[2] = { 0x067D, 0x0021 };

    // 067D 0021;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067D 0021;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2388, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_272)
{
    uint32_t const cps[2] = { 0x067D, 0x003F };

    // 067D 003F;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067D 003F;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2388, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_273)
{
    uint32_t const cps[2] = { 0x067D, 0x0061 };

    // 067D 0061;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067D 0061;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_274)
{
    uint32_t const cps[2] = { 0x067D, 0x0041 };

    // 067D 0041;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067D 0041;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_275)
{
    uint32_t const cps[2] = { 0x067D, 0x0062 };

    // 067D 0062;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067D 0062;	
    // (‎‎ٽ‎‎) ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS	[2388 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_276)
{
    uint32_t const cps[2] = { 0x067F, 0x0021 };

    // 067F 0021;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067F 0021;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_277)
{
    uint32_t const cps[2] = { 0xFB64, 0x0021 };

    // FB64 0021;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB64 0021;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_278)
{
    uint32_t const cps[2] = { 0xFB65, 0x0021 };

    // FB65 0021;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB65 0021;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_279)
{
    uint32_t const cps[2] = { 0xFB63, 0x0021 };

    // FB63 0021;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB63 0021;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_280)
{
    uint32_t const cps[2] = { 0xFB62, 0x0021 };

    // FB62 0021;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB62 0021;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_281)
{
    uint32_t const cps[2] = { 0x067F, 0x003F };

    // 067F 003F;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067F 003F;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_282)
{
    uint32_t const cps[2] = { 0xFB64, 0x003F };

    // FB64 003F;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB64 003F;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_283)
{
    uint32_t const cps[2] = { 0xFB65, 0x003F };

    // FB65 003F;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB65 003F;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_284)
{
    uint32_t const cps[2] = { 0xFB63, 0x003F };

    // FB63 003F;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB63 003F;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_285)
{
    uint32_t const cps[2] = { 0xFB62, 0x003F };

    // FB62 003F;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB62 003F;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x2389, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_286)
{
    uint32_t const cps[2] = { 0x067F, 0x0061 };

    // 067F 0061;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067F 0061;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_287)
{
    uint32_t const cps[2] = { 0x067F, 0x0041 };

    // 067F 0041;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067F 0041;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_288)
{
    uint32_t const cps[2] = { 0xFB64, 0x0061 };

    // FB64 0061;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB64 0061;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_289)
{
    uint32_t const cps[2] = { 0xFB64, 0x0041 };

    // FB64 0041;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB64 0041;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_290)
{
    uint32_t const cps[2] = { 0xFB65, 0x0061 };

    // FB65 0061;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB65 0061;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_291)
{
    uint32_t const cps[2] = { 0xFB65, 0x0041 };

    // FB65 0041;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB65 0041;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_292)
{
    uint32_t const cps[2] = { 0xFB63, 0x0061 };

    // FB63 0061;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB63 0061;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_293)
{
    uint32_t const cps[2] = { 0xFB63, 0x0041 };

    // FB63 0041;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB63 0041;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_294)
{
    uint32_t const cps[2] = { 0xFB62, 0x0061 };

    // FB62 0061;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB62 0061;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_295)
{
    uint32_t const cps[2] = { 0xFB62, 0x0041 };

    // FB62 0041;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB62 0041;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_296)
{
    uint32_t const cps[2] = { 0x067F, 0x0062 };

    // 067F 0062;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 067F 0062;	
    // (‎‎ٿ‎‎) ARABIC LETTER TEHEH	[2389 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_297)
{
    uint32_t const cps[2] = { 0xFB64, 0x0062 };

    // FB64 0062;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB64 0062;	
    // (‎‎ﭤ‎‎) ARABIC LETTER TEHEH INITIAL FORM	[2389 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_298)
{
    uint32_t const cps[2] = { 0xFB65, 0x0062 };

    // FB65 0062;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB65 0062;	
    // (‎‎ﭥ‎‎) ARABIC LETTER TEHEH MEDIAL FORM	[2389 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_299)
{
    uint32_t const cps[2] = { 0xFB63, 0x0062 };

    // FB63 0062;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB63 0062;	
    // (‎‎ﭣ‎‎) ARABIC LETTER TEHEH FINAL FORM	[2389 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_300)
{
    uint32_t const cps[2] = { 0xFB62, 0x0062 };

    // FB62 0062;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB62 0062;	
    // (‎‎ﭢ‎‎) ARABIC LETTER TEHEH ISOLATED FORM	[2389 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x2389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_301)
{
    uint32_t const cps[2] = { 0x08B8, 0x0021 };

    // 08B8 0021;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08B8 0021;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_302)
{
    uint32_t const cps[2] = { 0x08B8, 0x003F };

    // 08B8 003F;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08B8 003F;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_303)
{
    uint32_t const cps[2] = { 0x08B8, 0x0061 };

    // 08B8 0061;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08B8 0061;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_304)
{
    uint32_t const cps[2] = { 0x08B8, 0x0041 };

    // 08B8 0041;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08B8 0041;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_305)
{
    uint32_t const cps[2] = { 0x08B8, 0x0062 };

    // 08B8 0062;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08B8 0062;	
    // (‎‎ࢸ‎‎) ARABIC LETTER TEH WITH SMALL TEH ABOVE	[238A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_306)
{
    uint32_t const cps[2] = { 0x062C, 0x0021 };

    // 062C 0021;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062C 0021;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_307)
{
    uint32_t const cps[2] = { 0x1EE02, 0x0021 };

    // 1EE02 0021;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE02 0021;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_308)
{
    uint32_t const cps[2] = { 0x1EE22, 0x0021 };

    // 1EE22 0021;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE22 0021;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_309)
{
    uint32_t const cps[2] = { 0x1EE42, 0x0021 };

    // 1EE42 0021;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE42 0021;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_310)
{
    uint32_t const cps[2] = { 0x1EE62, 0x0021 };

    // 1EE62 0021;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE62 0021;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_311)
{
    uint32_t const cps[2] = { 0x1EE82, 0x0021 };

    // 1EE82 0021;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE82 0021;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_312)
{
    uint32_t const cps[2] = { 0x1EEA2, 0x0021 };

    // 1EEA2 0021;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEA2 0021;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_313)
{
    uint32_t const cps[2] = { 0xFE9F, 0x0021 };

    // FE9F 0021;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9F 0021;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_314)
{
    uint32_t const cps[2] = { 0xFEA0, 0x0021 };

    // FEA0 0021;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEA0 0021;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_315)
{
    uint32_t const cps[2] = { 0xFE9E, 0x0021 };

    // FE9E 0021;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9E 0021;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_316)
{
    uint32_t const cps[2] = { 0xFE9D, 0x0021 };

    // FE9D 0021;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9D 0021;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_317)
{
    uint32_t const cps[2] = { 0x062C, 0x003F };

    // 062C 003F;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062C 003F;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_318)
{
    uint32_t const cps[2] = { 0x1EE02, 0x003F };

    // 1EE02 003F;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE02 003F;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_319)
{
    uint32_t const cps[2] = { 0x1EE22, 0x003F };

    // 1EE22 003F;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE22 003F;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_320)
{
    uint32_t const cps[2] = { 0x1EE42, 0x003F };

    // 1EE42 003F;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE42 003F;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_321)
{
    uint32_t const cps[2] = { 0x1EE62, 0x003F };

    // 1EE62 003F;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE62 003F;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_322)
{
    uint32_t const cps[2] = { 0x1EE82, 0x003F };

    // 1EE82 003F;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE82 003F;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_323)
{
    uint32_t const cps[2] = { 0x1EEA2, 0x003F };

    // 1EEA2 003F;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEA2 003F;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_324)
{
    uint32_t const cps[2] = { 0xFE9F, 0x003F };

    // FE9F 003F;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9F 003F;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_325)
{
    uint32_t const cps[2] = { 0xFEA0, 0x003F };

    // FEA0 003F;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEA0 003F;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_326)
{
    uint32_t const cps[2] = { 0xFE9E, 0x003F };

    // FE9E 003F;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9E 003F;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_327)
{
    uint32_t const cps[2] = { 0xFE9D, 0x003F };

    // FE9D 003F;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9D 003F;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238B, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_328)
{
    uint32_t const cps[2] = { 0x062C, 0x0061 };

    // 062C 0061;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062C 0061;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_329)
{
    uint32_t const cps[2] = { 0x062C, 0x0041 };

    // 062C 0041;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062C 0041;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_330)
{
    uint32_t const cps[2] = { 0x1EE02, 0x0061 };

    // 1EE02 0061;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE02 0061;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_331)
{
    uint32_t const cps[2] = { 0x1EE22, 0x0061 };

    // 1EE22 0061;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE22 0061;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_332)
{
    uint32_t const cps[2] = { 0x1EE42, 0x0061 };

    // 1EE42 0061;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE42 0061;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_333)
{
    uint32_t const cps[2] = { 0x1EE62, 0x0061 };

    // 1EE62 0061;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE62 0061;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_334)
{
    uint32_t const cps[2] = { 0x1EE82, 0x0061 };

    // 1EE82 0061;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE82 0061;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_335)
{
    uint32_t const cps[2] = { 0x1EEA2, 0x0061 };

    // 1EEA2 0061;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEA2 0061;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_336)
{
    uint32_t const cps[2] = { 0x1EE02, 0x0041 };

    // 1EE02 0041;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE02 0041;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_337)
{
    uint32_t const cps[2] = { 0x1EE22, 0x0041 };

    // 1EE22 0041;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE22 0041;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_338)
{
    uint32_t const cps[2] = { 0x1EE42, 0x0041 };

    // 1EE42 0041;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE42 0041;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_339)
{
    uint32_t const cps[2] = { 0x1EE62, 0x0041 };

    // 1EE62 0041;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE62 0041;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_340)
{
    uint32_t const cps[2] = { 0x1EE82, 0x0041 };

    // 1EE82 0041;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE82 0041;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_341)
{
    uint32_t const cps[2] = { 0x1EEA2, 0x0041 };

    // 1EEA2 0041;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEA2 0041;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_342)
{
    uint32_t const cps[2] = { 0xFE9F, 0x0061 };

    // FE9F 0061;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9F 0061;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_343)
{
    uint32_t const cps[2] = { 0xFE9F, 0x0041 };

    // FE9F 0041;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9F 0041;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_344)
{
    uint32_t const cps[2] = { 0xFEA0, 0x0061 };

    // FEA0 0061;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEA0 0061;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_345)
{
    uint32_t const cps[2] = { 0xFEA0, 0x0041 };

    // FEA0 0041;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEA0 0041;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_346)
{
    uint32_t const cps[2] = { 0xFE9E, 0x0061 };

    // FE9E 0061;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9E 0061;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_347)
{
    uint32_t const cps[2] = { 0xFE9E, 0x0041 };

    // FE9E 0041;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9E 0041;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_348)
{
    uint32_t const cps[2] = { 0xFE9D, 0x0061 };

    // FE9D 0061;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9D 0061;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_349)
{
    uint32_t const cps[2] = { 0xFE9D, 0x0041 };

    // FE9D 0041;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9D 0041;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_350)
{
    uint32_t const cps[2] = { 0x062C, 0x0062 };

    // 062C 0062;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 062C 0062;	
    // (‎‎ج‎‎) ARABIC LETTER JEEM	[238B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_351)
{
    uint32_t const cps[2] = { 0x1EE02, 0x0062 };

    // 1EE02 0062;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE02 0062;	
    // (‎‎𞸂‎‎) ARABIC MATHEMATICAL JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_352)
{
    uint32_t const cps[2] = { 0x1EE22, 0x0062 };

    // 1EE22 0062;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE22 0062;	
    // (‎‎𞸢‎‎) ARABIC MATHEMATICAL INITIAL JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_353)
{
    uint32_t const cps[2] = { 0x1EE42, 0x0062 };

    // 1EE42 0062;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE42 0062;	
    // (‎‎𞹂‎‎) ARABIC MATHEMATICAL TAILED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_354)
{
    uint32_t const cps[2] = { 0x1EE62, 0x0062 };

    // 1EE62 0062;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE62 0062;	
    // (‎‎𞹢‎‎) ARABIC MATHEMATICAL STRETCHED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_355)
{
    uint32_t const cps[2] = { 0x1EE82, 0x0062 };

    // 1EE82 0062;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EE82 0062;	
    // (‎‎𞺂‎‎) ARABIC MATHEMATICAL LOOPED JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_356)
{
    uint32_t const cps[2] = { 0x1EEA2, 0x0062 };

    // 1EEA2 0062;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EEA2 0062;	
    // (‎‎𞺢‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM	[238B 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_357)
{
    uint32_t const cps[2] = { 0xFE9F, 0x0062 };

    // FE9F 0062;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9F 0062;	
    // (‎‎ﺟ‎‎) ARABIC LETTER JEEM INITIAL FORM	[238B 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_358)
{
    uint32_t const cps[2] = { 0xFEA0, 0x0062 };

    // FEA0 0062;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEA0 0062;	
    // (‎‎ﺠ‎‎) ARABIC LETTER JEEM MEDIAL FORM	[238B 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_359)
{
    uint32_t const cps[2] = { 0xFE9E, 0x0062 };

    // FE9E 0062;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9E 0062;	
    // (‎‎ﺞ‎‎) ARABIC LETTER JEEM FINAL FORM	[238B 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_360)
{
    uint32_t const cps[2] = { 0xFE9D, 0x0062 };

    // FE9D 0062;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE9D 0062;	
    // (‎‎ﺝ‎‎) ARABIC LETTER JEEM ISOLATED FORM	[238B 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_361)
{
    uint32_t const cps[2] = { 0xFCA7, 0x0021 };

    // FCA7 0021;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA7 0021;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 | 0020 0020 | 0017 0017 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2392, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_362)
{
    uint32_t const cps[2] = { 0xFC15, 0x0021 };

    // FC15 0021;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC15 0021;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2392, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_363)
{
    uint32_t const cps[2] = { 0xFCA7, 0x003F };

    // FCA7 003F;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA7 003F;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 | 0020 0020 | 0017 0017 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2392, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_364)
{
    uint32_t const cps[2] = { 0xFC15, 0x003F };

    // FC15 003F;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC15 003F;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2392, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_365)
{
    uint32_t const cps[2] = { 0xFCA7, 0x0061 };

    // FCA7 0061;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA7 0061;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_366)
{
    uint32_t const cps[2] = { 0xFCA7, 0x0041 };

    // FCA7 0041;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA7 0041;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_367)
{
    uint32_t const cps[2] = { 0xFC15, 0x0061 };

    // FC15 0061;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC15 0061;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_368)
{
    uint32_t const cps[2] = { 0xFC15, 0x0041 };

    // FC15 0041;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC15 0041;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_369)
{
    uint32_t const cps[2] = { 0xFCA7, 0x0062 };

    // FCA7 0062;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA7 0062;	
    // (‎‎ﲧ‎‎) ARABIC LIGATURE JEEM WITH HAH INITIAL FORM	[238B 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_370)
{
    uint32_t const cps[2] = { 0xFC15, 0x0062 };

    // FC15 0062;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC15 0062;	
    // (‎‎ﰕ‎‎) ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM	[238B 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_371)
{
    uint32_t const cps[2] = { 0xFDA6, 0x0021 };

    // FDA6 0021;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA6 0021;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2392, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_372)
{
    uint32_t const cps[2] = { 0xFDA6, 0x003F };

    // FDA6 003F;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA6 003F;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2392, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_373)
{
    uint32_t const cps[2] = { 0xFDA6, 0x0061 };

    // FDA6 0061;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA6 0061;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_374)
{
    uint32_t const cps[2] = { 0xFDA6, 0x0041 };

    // FDA6 0041;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA6 0041;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_375)
{
    uint32_t const cps[2] = { 0xFDA6, 0x0062 };

    // FDA6 0062;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA6 0062;	
    // (‎‎ﶦ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM	[238B 2392 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_376)
{
    uint32_t const cps[2] = { 0xFDBE, 0x0021 };

    // FDBE 0021;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDBE 0021;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2392, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_377)
{
    uint32_t const cps[2] = { 0xFDBE, 0x003F };

    // FDBE 003F;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDBE 003F;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2392, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_378)
{
    uint32_t const cps[2] = { 0xFDBE, 0x0061 };

    // FDBE 0061;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDBE 0061;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_379)
{
    uint32_t const cps[2] = { 0xFDBE, 0x0041 };

    // FDBE 0041;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDBE 0041;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_380)
{
    uint32_t const cps[2] = { 0xFDBE, 0x0062 };

    // FDBE 0062;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDBE 0062;	
    // (‎‎ﶾ‎‎) ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM	[238B 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_381)
{
    uint32_t const cps[2] = { 0xFDFB, 0x0021 };

    // FDFB 0021;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 0209 238B 2402 2371 2402 2417 0261 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[30] = { 0x238B, 0x2402, 0x0209, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDFB 0021;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 238B 2402 2371 2402 2417 | 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A | FFFF FFFF 0209 FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[34] = { 0x238B, 0x2402, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0209, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 34);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 34))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_382)
{
    uint32_t const cps[2] = { 0xFDFB, 0x003F };

    // FDFB 003F;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 0209 238B 2402 2371 2402 2417 0267 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[30] = { 0x238B, 0x2402, 0x0209, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDFB 003F;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 238B 2402 2371 2402 2417 | 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A | FFFF FFFF 0209 FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[34] = { 0x238B, 0x2402, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0209, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 34);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 34))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_383)
{
    uint32_t const cps[2] = { 0xFDFB, 0x0061 };

    // FDFB 0061;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 0209 238B 2402 2371 2402 2417 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[30] = { 0x238B, 0x2402, 0x0209, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDFB 0061;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 238B 2402 2371 2402 2417 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 0002 | FFFF FFFF 0209 FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[37] = { 0x238B, 0x2402, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0209, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 37);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 37))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_384)
{
    uint32_t const cps[2] = { 0xFDFB, 0x0041 };

    // FDFB 0041;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 0209 238B 2402 2371 2402 2417 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[30] = { 0x238B, 0x2402, 0x0209, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDFB 0041;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 238B 2402 2371 2402 2417 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 0008 | FFFF FFFF 0209 FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[37] = { 0x238B, 0x2402, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0209, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 37);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 37))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_385)
{
    uint32_t const cps[2] = { 0xFDFB, 0x0062 };

    // FDFB 0062;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 0209 238B 2402 2371 2402 2417 1CC6 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[30] = { 0x238B, 0x2402, 0x0209, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDFB 0062;	
    // (‎‎ﷻ‎‎) ARABIC LIGATURE JALLAJALALOUHOU	[238B 2402 238B 2402 2371 2402 2417 1CC6 | 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 0002 | FFFF FFFF 0209 FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[37] = { 0x238B, 0x2402, 0x238B, 0x2402, 0x2371, 0x2402, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0209, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 37);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 37))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_386)
{
    uint32_t const cps[2] = { 0xFCA8, 0x0021 };

    // FCA8 0021;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA8 0021;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_387)
{
    uint32_t const cps[2] = { 0xFC16, 0x0021 };

    // FC16 0021;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC16 0021;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_388)
{
    uint32_t const cps[2] = { 0xFCA8, 0x003F };

    // FCA8 003F;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA8 003F;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 | 0020 0020 | 0017 0017 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_389)
{
    uint32_t const cps[2] = { 0xFC16, 0x003F };

    // FC16 003F;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC16 003F;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x2409, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_390)
{
    uint32_t const cps[2] = { 0xFCA8, 0x0061 };

    // FCA8 0061;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA8 0061;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_391)
{
    uint32_t const cps[2] = { 0xFCA8, 0x0041 };

    // FCA8 0041;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA8 0041;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_392)
{
    uint32_t const cps[2] = { 0xFC16, 0x0061 };

    // FC16 0061;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC16 0061;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_393)
{
    uint32_t const cps[2] = { 0xFC16, 0x0041 };

    // FC16 0041;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC16 0041;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_394)
{
    uint32_t const cps[2] = { 0xFCA8, 0x0062 };

    // FCA8 0062;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FCA8 0062;	
    // (‎‎ﲨ‎‎) ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM	[238B 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_395)
{
    uint32_t const cps[2] = { 0xFC16, 0x0062 };

    // FC16 0062;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FC16 0062;	
    // (‎‎ﰖ‎‎) ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM	[238B 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_396)
{
    uint32_t const cps[2] = { 0xFD59, 0x0021 };

    // FD59 0021;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD59 0021;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_397)
{
    uint32_t const cps[2] = { 0xFD58, 0x0021 };

    // FD58 0021;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD58 0021;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_398)
{
    uint32_t const cps[2] = { 0xFD59, 0x003F };

    // FD59 003F;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD59 003F;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 | 0020 0020 0020 | 0017 0017 0017 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_399)
{
    uint32_t const cps[2] = { 0xFD58, 0x003F };

    // FD58 003F;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD58 003F;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x2392, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_400)
{
    uint32_t const cps[2] = { 0xFD59, 0x0061 };

    // FD59 0061;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD59 0061;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_401)
{
    uint32_t const cps[2] = { 0xFD59, 0x0041 };

    // FD59 0041;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD59 0041;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_402)
{
    uint32_t const cps[2] = { 0xFD58, 0x0061 };

    // FD58 0061;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD58 0061;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_403)
{
    uint32_t const cps[2] = { 0xFD58, 0x0041 };

    // FD58 0041;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD58 0041;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_404)
{
    uint32_t const cps[2] = { 0xFD59, 0x0062 };

    // FD59 0062;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD59 0062;	
    // (‎‎ﵙ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM	[238B 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_405)
{
    uint32_t const cps[2] = { 0xFD58, 0x0062 };

    // FD58 0062;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD58 0062;	
    // (‎‎ﵘ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM	[238B 2409 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_406)
{
    uint32_t const cps[2] = { 0xFDA7, 0x0021 };

    // FDA7 0021;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA7 0021;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_407)
{
    uint32_t const cps[2] = { 0xFDA7, 0x003F };

    // FDA7 003F;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA7 003F;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x242B, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_408)
{
    uint32_t const cps[2] = { 0xFDA7, 0x0061 };

    // FDA7 0061;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA7 0061;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_409)
{
    uint32_t const cps[2] = { 0xFDA7, 0x0041 };

    // FDA7 0041;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA7 0041;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_410)
{
    uint32_t const cps[2] = { 0xFDA7, 0x0062 };

    // FDA7 0062;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA7 0062;	
    // (‎‎ﶧ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM	[238B 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_411)
{
    uint32_t const cps[2] = { 0xFDA5, 0x0021 };

    // FDA5 0021;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA5 0021;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_412)
{
    uint32_t const cps[2] = { 0xFDA5, 0x003F };

    // FDA5 003F;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA5 003F;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C | 0020 0020 0020 | 0019 0019 0019 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x238B, 0x2409, 0x242C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_413)
{
    uint32_t const cps[2] = { 0xFDA5, 0x0061 };

    // FDA5 0061;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA5 0061;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_414)
{
    uint32_t const cps[2] = { 0xFDA5, 0x0041 };

    // FDA5 0041;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA5 0041;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_415)
{
    uint32_t const cps[2] = { 0xFDA5, 0x0062 };

    // FDA5 0062;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x238B, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FDA5 0062;	
    // (‎‎ﶥ‎‎) ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM	[238B 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x238B, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_416)
{
    uint32_t const cps[2] = { 0xFD1D, 0x0021 };

    // FD1D 0021;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1D 0021;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_417)
{
    uint32_t const cps[2] = { 0xFD01, 0x0021 };

    // FD01 0021;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD01 0021;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_418)
{
    uint32_t const cps[2] = { 0xFD1D, 0x003F };

    // FD1D 003F;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1D 003F;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_419)
{
    uint32_t const cps[2] = { 0xFD01, 0x003F };

    // FD01 003F;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD01 003F;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242B, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_420)
{
    uint32_t const cps[2] = { 0xFD1D, 0x0061 };

    // FD1D 0061;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1D 0061;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_421)
{
    uint32_t const cps[2] = { 0xFD1D, 0x0041 };

    // FD1D 0041;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1D 0041;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_422)
{
    uint32_t const cps[2] = { 0xFD01, 0x0061 };

    // FD01 0061;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD01 0061;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_423)
{
    uint32_t const cps[2] = { 0xFD01, 0x0041 };

    // FD01 0041;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD01 0041;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_424)
{
    uint32_t const cps[2] = { 0xFD1D, 0x0062 };

    // FD1D 0062;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1D 0062;	
    // (‎‎ﴝ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM	[238B 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_425)
{
    uint32_t const cps[2] = { 0xFD01, 0x0062 };

    // FD01 0062;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD01 0062;	
    // (‎‎ﴁ‎‎) ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM	[238B 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_426)
{
    uint32_t const cps[2] = { 0xFD1E, 0x0021 };

    // FD1E 0021;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1E 0021;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_427)
{
    uint32_t const cps[2] = { 0xFD02, 0x0021 };

    // FD02 0021;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD02 0021;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C | 0020 0020 | 001A 001A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_428)
{
    uint32_t const cps[2] = { 0xFD1E, 0x003F };

    // FD1E 003F;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1E 003F;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C | 0020 0020 | 0019 0019 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_429)
{
    uint32_t const cps[2] = { 0xFD02, 0x003F };

    // FD02 003F;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD02 003F;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C | 0020 0020 | 001A 001A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x238B, 0x242C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_430)
{
    uint32_t const cps[2] = { 0xFD1E, 0x0061 };

    // FD1E 0061;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1E 0061;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_431)
{
    uint32_t const cps[2] = { 0xFD1E, 0x0041 };

    // FD1E 0041;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1E 0041;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_432)
{
    uint32_t const cps[2] = { 0xFD02, 0x0061 };

    // FD02 0061;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD02 0061;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_433)
{
    uint32_t const cps[2] = { 0xFD02, 0x0041 };

    // FD02 0041;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD02 0041;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_434)
{
    uint32_t const cps[2] = { 0xFD1E, 0x0062 };

    // FD1E 0062;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD1E 0062;	
    // (‎‎ﴞ‎‎) ARABIC LIGATURE JEEM WITH YEH FINAL FORM	[238B 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_435)
{
    uint32_t const cps[2] = { 0xFD02, 0x0062 };

    // FD02 0062;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FD02 0062;	
    // (‎‎ﴂ‎‎) ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM	[238B 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_436)
{
    uint32_t const cps[2] = { 0x0683, 0x0021 };

    // 0683 0021;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0683 0021;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_437)
{
    uint32_t const cps[2] = { 0xFB78, 0x0021 };

    // FB78 0021;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB78 0021;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_438)
{
    uint32_t const cps[2] = { 0xFB79, 0x0021 };

    // FB79 0021;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB79 0021;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_439)
{
    uint32_t const cps[2] = { 0xFB77, 0x0021 };

    // FB77 0021;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB77 0021;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_440)
{
    uint32_t const cps[2] = { 0xFB76, 0x0021 };

    // FB76 0021;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB76 0021;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_441)
{
    uint32_t const cps[2] = { 0x0683, 0x003F };

    // 0683 003F;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0683 003F;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_442)
{
    uint32_t const cps[2] = { 0xFB78, 0x003F };

    // FB78 003F;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB78 003F;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_443)
{
    uint32_t const cps[2] = { 0xFB79, 0x003F };

    // FB79 003F;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB79 003F;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_444)
{
    uint32_t const cps[2] = { 0xFB77, 0x003F };

    // FB77 003F;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB77 003F;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_445)
{
    uint32_t const cps[2] = { 0xFB76, 0x003F };

    // FB76 003F;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB76 003F;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238C, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_446)
{
    uint32_t const cps[2] = { 0x0683, 0x0061 };

    // 0683 0061;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0683 0061;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_447)
{
    uint32_t const cps[2] = { 0x0683, 0x0041 };

    // 0683 0041;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0683 0041;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_448)
{
    uint32_t const cps[2] = { 0xFB78, 0x0061 };

    // FB78 0061;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB78 0061;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_449)
{
    uint32_t const cps[2] = { 0xFB78, 0x0041 };

    // FB78 0041;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB78 0041;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_450)
{
    uint32_t const cps[2] = { 0xFB79, 0x0061 };

    // FB79 0061;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB79 0061;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_451)
{
    uint32_t const cps[2] = { 0xFB79, 0x0041 };

    // FB79 0041;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB79 0041;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_452)
{
    uint32_t const cps[2] = { 0xFB77, 0x0061 };

    // FB77 0061;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB77 0061;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_453)
{
    uint32_t const cps[2] = { 0xFB77, 0x0041 };

    // FB77 0041;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB77 0041;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_454)
{
    uint32_t const cps[2] = { 0xFB76, 0x0061 };

    // FB76 0061;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB76 0061;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_455)
{
    uint32_t const cps[2] = { 0xFB76, 0x0041 };

    // FB76 0041;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB76 0041;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_456)
{
    uint32_t const cps[2] = { 0x0683, 0x0062 };

    // 0683 0062;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0683 0062;	
    // (‎‎ڃ‎‎) ARABIC LETTER NYEH	[238C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_457)
{
    uint32_t const cps[2] = { 0xFB78, 0x0062 };

    // FB78 0062;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB78 0062;	
    // (‎‎ﭸ‎‎) ARABIC LETTER NYEH INITIAL FORM	[238C 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_458)
{
    uint32_t const cps[2] = { 0xFB79, 0x0062 };

    // FB79 0062;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB79 0062;	
    // (‎‎ﭹ‎‎) ARABIC LETTER NYEH MEDIAL FORM	[238C 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_459)
{
    uint32_t const cps[2] = { 0xFB77, 0x0062 };

    // FB77 0062;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB77 0062;	
    // (‎‎ﭷ‎‎) ARABIC LETTER NYEH FINAL FORM	[238C 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_460)
{
    uint32_t const cps[2] = { 0xFB76, 0x0062 };

    // FB76 0062;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB76 0062;	
    // (‎‎ﭶ‎‎) ARABIC LETTER NYEH ISOLATED FORM	[238C 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_461)
{
    uint32_t const cps[2] = { 0x0684, 0x0021 };

    // 0684 0021;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0684 0021;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_462)
{
    uint32_t const cps[2] = { 0xFB74, 0x0021 };

    // FB74 0021;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB74 0021;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_463)
{
    uint32_t const cps[2] = { 0xFB75, 0x0021 };

    // FB75 0021;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB75 0021;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_464)
{
    uint32_t const cps[2] = { 0xFB73, 0x0021 };

    // FB73 0021;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB73 0021;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_465)
{
    uint32_t const cps[2] = { 0xFB72, 0x0021 };

    // FB72 0021;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB72 0021;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_466)
{
    uint32_t const cps[2] = { 0x0684, 0x003F };

    // 0684 003F;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0684 003F;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_467)
{
    uint32_t const cps[2] = { 0xFB74, 0x003F };

    // FB74 003F;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB74 003F;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_468)
{
    uint32_t const cps[2] = { 0xFB75, 0x003F };

    // FB75 003F;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB75 003F;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_469)
{
    uint32_t const cps[2] = { 0xFB73, 0x003F };

    // FB73 003F;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB73 003F;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_470)
{
    uint32_t const cps[2] = { 0xFB72, 0x003F };

    // FB72 003F;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB72 003F;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238D, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_471)
{
    uint32_t const cps[2] = { 0x0684, 0x0061 };

    // 0684 0061;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0684 0061;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_472)
{
    uint32_t const cps[2] = { 0x0684, 0x0041 };

    // 0684 0041;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0684 0041;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_473)
{
    uint32_t const cps[2] = { 0xFB74, 0x0061 };

    // FB74 0061;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB74 0061;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_474)
{
    uint32_t const cps[2] = { 0xFB74, 0x0041 };

    // FB74 0041;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB74 0041;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_475)
{
    uint32_t const cps[2] = { 0xFB75, 0x0061 };

    // FB75 0061;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CAD | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB75 0061;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CAD | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_476)
{
    uint32_t const cps[2] = { 0xFB75, 0x0041 };

    // FB75 0041;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CAD | 0020 0020 | 0018 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB75 0041;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CAD | 0020 0020 | 0018 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_477)
{
    uint32_t const cps[2] = { 0xFB73, 0x0061 };

    // FB73 0061;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CAD | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB73 0061;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CAD | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_478)
{
    uint32_t const cps[2] = { 0xFB73, 0x0041 };

    // FB73 0041;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CAD | 0020 0020 | 0019 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB73 0041;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CAD | 0020 0020 | 0019 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_479)
{
    uint32_t const cps[2] = { 0xFB72, 0x0061 };

    // FB72 0061;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CAD | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB72 0061;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CAD | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_480)
{
    uint32_t const cps[2] = { 0xFB72, 0x0041 };

    // FB72 0041;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CAD | 0020 0020 | 001A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB72 0041;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CAD | 0020 0020 | 001A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_481)
{
    uint32_t const cps[2] = { 0x0684, 0x0062 };

    // 0684 0062;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0684 0062;	
    // (‎‎ڄ‎‎) ARABIC LETTER DYEH	[238D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_482)
{
    uint32_t const cps[2] = { 0xFB74, 0x0062 };

    // FB74 0062;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CC6 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB74 0062;	
    // (‎‎ﭴ‎‎) ARABIC LETTER DYEH INITIAL FORM	[238D 1CC6 | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_483)
{
    uint32_t const cps[2] = { 0xFB75, 0x0062 };

    // FB75 0062;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CC6 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB75 0062;	
    // (‎‎ﭵ‎‎) ARABIC LETTER DYEH MEDIAL FORM	[238D 1CC6 | 0020 0020 | 0018 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_484)
{
    uint32_t const cps[2] = { 0xFB73, 0x0062 };

    // FB73 0062;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CC6 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB73 0062;	
    // (‎‎ﭳ‎‎) ARABIC LETTER DYEH FINAL FORM	[238D 1CC6 | 0020 0020 | 0019 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_485)
{
    uint32_t const cps[2] = { 0xFB72, 0x0062 };

    // FB72 0062;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CC6 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB72 0062;	
    // (‎‎ﭲ‎‎) ARABIC LETTER DYEH ISOLATED FORM	[238D 1CC6 | 0020 0020 | 001A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_486)
{
    uint32_t const cps[2] = { 0x0686, 0x0021 };

    // 0686 0021;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0686 0021;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_487)
{
    uint32_t const cps[2] = { 0xFB7C, 0x0021 };

    // FB7C 0021;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 0261 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7C 0021;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E | 0020 | 0017 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_488)
{
    uint32_t const cps[2] = { 0xFB7D, 0x0021 };

    // FB7D 0021;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E 0261 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7D 0021;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E | 0020 | 0018 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_489)
{
    uint32_t const cps[2] = { 0xFB7B, 0x0021 };

    // FB7B 0021;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E 0261 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7B 0021;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E | 0020 | 0019 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_490)
{
    uint32_t const cps[2] = { 0xFB7A, 0x0021 };

    // FB7A 0021;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E 0261 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7A 0021;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E | 0020 | 001A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_491)
{
    uint32_t const cps[2] = { 0x0686, 0x003F };

    // 0686 003F;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0686 003F;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_492)
{
    uint32_t const cps[2] = { 0xFB7C, 0x003F };

    // FB7C 003F;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 0267 | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7C 003F;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E | 0020 | 0017 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0017, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_493)
{
    uint32_t const cps[2] = { 0xFB7D, 0x003F };

    // FB7D 003F;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E 0267 | 0020 0020 | 0018 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7D 003F;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E | 0020 | 0018 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0018, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_494)
{
    uint32_t const cps[2] = { 0xFB7B, 0x003F };

    // FB7B 003F;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E 0267 | 0020 0020 | 0019 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7B 003F;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E | 0020 | 0019 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x0019, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_495)
{
    uint32_t const cps[2] = { 0xFB7A, 0x003F };

    // FB7A 003F;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E 0267 | 0020 0020 | 001A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7A 003F;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E | 0020 | 001A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x238E, 0x0000, 0x0020, 0x0000, 0x001A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_496)
{
    uint32_t const cps[2] = { 0x0686, 0x0061 };

    // 0686 0061;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0686 0061;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_497)
{
    uint32_t const cps[2] = { 0x0686, 0x0041 };

    // 0686 0041;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0686 0041;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_498)
{
    uint32_t const cps[2] = { 0xFB7C, 0x0061 };

    // FB7C 0061;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 1CAD | 0020 0020 | 0017 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7C 0061;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 1CAD | 0020 0020 | 0017 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_149_499)
{
    uint32_t const cps[2] = { 0xFB7C, 0x0041 };

    // FB7C 0041;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 1CAD | 0020 0020 | 0017 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FB7C 0041;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 1CAD | 0020 0020 | 0017 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

