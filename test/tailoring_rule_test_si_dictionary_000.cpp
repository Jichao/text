
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/table_serialization.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("si_dictionary.table"))) {
        collation_table table = tailored_collation_table(
            data::si::dictionary_collation_tailoring(),
            "si::dictionary_collation_tailoring()", error, warning);
        save_table(table, "si_dictionary.table.0");
        boost::filesystem::rename("si_dictionary.table.0", "si_dictionary.table");
    }
    return load_table("si_dictionary.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, si_dictionary_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0d96),
        std::vector<uint32_t>(1, 0x0d82),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0d82),
        std::vector<uint32_t>(1, 0x0d83),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0da2, 0x0dca, 0x0da4},
        std::vector<uint32_t>(1, 0x0da5),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0da2, 0x0dca, 0x0da4},
        std::vector<uint32_t>(1, 0x0da5),
        table(), collation_strength::primary),
        0);
}
