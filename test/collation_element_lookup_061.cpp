// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_061_000)
{
    // 259B  ; [*08CA.0020.0002] 
    // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT

    uint32_t const cps[1] = { 0x259b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_001)
{
    // 259C  ; [*08CB.0020.0002] 
    // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT

    uint32_t const cps[1] = { 0x259c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_002)
{
    // 259D  ; [*08CC.0020.0002] 
    // QUADRANT UPPER RIGHT

    uint32_t const cps[1] = { 0x259d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_003)
{
    // 259E  ; [*08CD.0020.0002] 
    // QUADRANT UPPER RIGHT AND LOWER LEFT

    uint32_t const cps[1] = { 0x259e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_004)
{
    // 259F  ; [*08CE.0020.0002] 
    // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT

    uint32_t const cps[1] = { 0x259f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_005)
{
    // 25A0  ; [*08CF.0020.0002] 
    // BLACK SQUARE

    uint32_t const cps[1] = { 0x25a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_006)
{
    // 25A1  ; [*08D0.0020.0002] 
    // WHITE SQUARE

    uint32_t const cps[1] = { 0x25a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_007)
{
    // 25A2  ; [*08D1.0020.0002] 
    // WHITE SQUARE WITH ROUNDED CORNERS

    uint32_t const cps[1] = { 0x25a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_008)
{
    // 25A3  ; [*08D2.0020.0002] 
    // WHITE SQUARE CONTAINING BLACK SMALL SQUARE

    uint32_t const cps[1] = { 0x25a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_009)
{
    // 25A4  ; [*08D3.0020.0002] 
    // SQUARE WITH HORIZONTAL FILL

    uint32_t const cps[1] = { 0x25a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_010)
{
    // 25A5  ; [*08D4.0020.0002] 
    // SQUARE WITH VERTICAL FILL

    uint32_t const cps[1] = { 0x25a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_011)
{
    // 25A6  ; [*08D5.0020.0002] 
    // SQUARE WITH ORTHOGONAL CROSSHATCH FILL

    uint32_t const cps[1] = { 0x25a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_012)
{
    // 25A7  ; [*08D6.0020.0002] 
    // SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL

    uint32_t const cps[1] = { 0x25a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_013)
{
    // 25A8  ; [*08D7.0020.0002] 
    // SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL

    uint32_t const cps[1] = { 0x25a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_014)
{
    // 25A9  ; [*08D8.0020.0002] 
    // SQUARE WITH DIAGONAL CROSSHATCH FILL

    uint32_t const cps[1] = { 0x25a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_015)
{
    // 25AA  ; [*08D9.0020.0002] 
    // BLACK SMALL SQUARE

    uint32_t const cps[1] = { 0x25aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_016)
{
    // 25AB  ; [*08DA.0020.0002] 
    // WHITE SMALL SQUARE

    uint32_t const cps[1] = { 0x25ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_017)
{
    // 25AC  ; [*08DB.0020.0002] 
    // BLACK RECTANGLE

    uint32_t const cps[1] = { 0x25ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_018)
{
    // 25AD  ; [*08DC.0020.0002] 
    // WHITE RECTANGLE

    uint32_t const cps[1] = { 0x25ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_019)
{
    // 25AE  ; [*08DD.0020.0002] 
    // BLACK VERTICAL RECTANGLE

    uint32_t const cps[1] = { 0x25ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_020)
{
    // 25AF  ; [*08DE.0020.0002] 
    // WHITE VERTICAL RECTANGLE

    uint32_t const cps[1] = { 0x25af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_021)
{
    // 25B0  ; [*08DF.0020.0002] 
    // BLACK PARALLELOGRAM

    uint32_t const cps[1] = { 0x25b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_022)
{
    // 25B1  ; [*08E0.0020.0002] 
    // WHITE PARALLELOGRAM

    uint32_t const cps[1] = { 0x25b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_023)
{
    // 25B2  ; [*08E1.0020.0002] 
    // BLACK UP-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_024)
{
    // 25B3  ; [*08E2.0020.0002] 
    // WHITE UP-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_025)
{
    // 25B4  ; [*08E3.0020.0002] 
    // BLACK UP-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_026)
{
    // 25B5  ; [*08E4.0020.0002] 
    // WHITE UP-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_027)
{
    // 25B6  ; [*08E5.0020.0002] 
    // BLACK RIGHT-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_028)
{
    // 25B7  ; [*08E6.0020.0002] 
    // WHITE RIGHT-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_029)
{
    // 25B8  ; [*08E7.0020.0002] 
    // BLACK RIGHT-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_030)
{
    // 25B9  ; [*08E8.0020.0002] 
    // WHITE RIGHT-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_031)
{
    // 25BA  ; [*08E9.0020.0002] 
    // BLACK RIGHT-POINTING POINTER

    uint32_t const cps[1] = { 0x25ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_032)
{
    // 25BB  ; [*08EA.0020.0002] 
    // WHITE RIGHT-POINTING POINTER

    uint32_t const cps[1] = { 0x25bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_033)
{
    // 25BC  ; [*08EB.0020.0002] 
    // BLACK DOWN-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_034)
{
    // 25BD  ; [*08EC.0020.0002] 
    // WHITE DOWN-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_035)
{
    // 25BE  ; [*08ED.0020.0002] 
    // BLACK DOWN-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_036)
{
    // 25BF  ; [*08EE.0020.0002] 
    // WHITE DOWN-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_037)
{
    // 25C0  ; [*08EF.0020.0002] 
    // BLACK LEFT-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_038)
{
    // 25C1  ; [*08F0.0020.0002] 
    // WHITE LEFT-POINTING TRIANGLE

    uint32_t const cps[1] = { 0x25c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_039)
{
    // 25C2  ; [*08F1.0020.0002] 
    // BLACK LEFT-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_040)
{
    // 25C3  ; [*08F2.0020.0002] 
    // WHITE LEFT-POINTING SMALL TRIANGLE

    uint32_t const cps[1] = { 0x25c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_041)
{
    // 25C4  ; [*08F3.0020.0002] 
    // BLACK LEFT-POINTING POINTER

    uint32_t const cps[1] = { 0x25c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_042)
{
    // 25C5  ; [*08F4.0020.0002] 
    // WHITE LEFT-POINTING POINTER

    uint32_t const cps[1] = { 0x25c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_043)
{
    // 25C6  ; [*08F5.0020.0002] 
    // BLACK DIAMOND

    uint32_t const cps[1] = { 0x25c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_044)
{
    // 25C7  ; [*08F6.0020.0002] 
    // WHITE DIAMOND

    uint32_t const cps[1] = { 0x25c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_045)
{
    // 25C8  ; [*08F7.0020.0002] 
    // WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND

    uint32_t const cps[1] = { 0x25c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_046)
{
    // 25C9  ; [*08F8.0020.0002] 
    // FISHEYE

    uint32_t const cps[1] = { 0x25c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_047)
{
    // 25CA  ; [*08F9.0020.0002] 
    // LOZENGE

    uint32_t const cps[1] = { 0x25ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_048)
{
    // 25CB  ; [*08FA.0020.0002] 
    // WHITE CIRCLE

    uint32_t const cps[1] = { 0x25cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_049)
{
    // 25CC  ; [*08FB.0020.0002] 
    // DOTTED CIRCLE

    uint32_t const cps[1] = { 0x25cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_050)
{
    // 25CD  ; [*08FC.0020.0002] 
    // CIRCLE WITH VERTICAL FILL

    uint32_t const cps[1] = { 0x25cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_051)
{
    // 25CE  ; [*08FD.0020.0002] 
    // BULLSEYE

    uint32_t const cps[1] = { 0x25ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_052)
{
    // 25CF  ; [*08FE.0020.0002] 
    // BLACK CIRCLE

    uint32_t const cps[1] = { 0x25cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_053)
{
    // 25D0  ; [*08FF.0020.0002] 
    // CIRCLE WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x25d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_054)
{
    // 25D1  ; [*0900.0020.0002] 
    // CIRCLE WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x25d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x900), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_055)
{
    // 25D2  ; [*0901.0020.0002] 
    // CIRCLE WITH LOWER HALF BLACK

    uint32_t const cps[1] = { 0x25d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x901), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_056)
{
    // 25D3  ; [*0902.0020.0002] 
    // CIRCLE WITH UPPER HALF BLACK

    uint32_t const cps[1] = { 0x25d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x902), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_057)
{
    // 25D4  ; [*0903.0020.0002] 
    // CIRCLE WITH UPPER RIGHT QUADRANT BLACK

    uint32_t const cps[1] = { 0x25d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x903), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_058)
{
    // 25D5  ; [*0904.0020.0002] 
    // CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK

    uint32_t const cps[1] = { 0x25d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x904), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_059)
{
    // 25D6  ; [*0905.0020.0002] 
    // LEFT HALF BLACK CIRCLE

    uint32_t const cps[1] = { 0x25d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x905), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_060)
{
    // 25D7  ; [*0906.0020.0002] 
    // RIGHT HALF BLACK CIRCLE

    uint32_t const cps[1] = { 0x25d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x906), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_061)
{
    // 25D8  ; [*0907.0020.0002] 
    // INVERSE BULLET

    uint32_t const cps[1] = { 0x25d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x907), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_062)
{
    // 25D9  ; [*0908.0020.0002] 
    // INVERSE WHITE CIRCLE

    uint32_t const cps[1] = { 0x25d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x908), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_063)
{
    // 25DA  ; [*0909.0020.0002] 
    // UPPER HALF INVERSE WHITE CIRCLE

    uint32_t const cps[1] = { 0x25da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x909), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_064)
{
    // 25DB  ; [*090A.0020.0002] 
    // LOWER HALF INVERSE WHITE CIRCLE

    uint32_t const cps[1] = { 0x25db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_065)
{
    // 25DC  ; [*090B.0020.0002] 
    // UPPER LEFT QUADRANT CIRCULAR ARC

    uint32_t const cps[1] = { 0x25dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_066)
{
    // 25DD  ; [*090C.0020.0002] 
    // UPPER RIGHT QUADRANT CIRCULAR ARC

    uint32_t const cps[1] = { 0x25dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_067)
{
    // 25DE  ; [*090D.0020.0002] 
    // LOWER RIGHT QUADRANT CIRCULAR ARC

    uint32_t const cps[1] = { 0x25de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_068)
{
    // 25DF  ; [*090E.0020.0002] 
    // LOWER LEFT QUADRANT CIRCULAR ARC

    uint32_t const cps[1] = { 0x25df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_069)
{
    // 25E0  ; [*090F.0020.0002] 
    // UPPER HALF CIRCLE

    uint32_t const cps[1] = { 0x25e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x90f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_070)
{
    // 25E1  ; [*0910.0020.0002] 
    // LOWER HALF CIRCLE

    uint32_t const cps[1] = { 0x25e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x910), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_071)
{
    // 25E2  ; [*0911.0020.0002] 
    // BLACK LOWER RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x25e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x911), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_072)
{
    // 25E3  ; [*0912.0020.0002] 
    // BLACK LOWER LEFT TRIANGLE

    uint32_t const cps[1] = { 0x25e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x912), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_073)
{
    // 25E4  ; [*0913.0020.0002] 
    // BLACK UPPER LEFT TRIANGLE

    uint32_t const cps[1] = { 0x25e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x913), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_074)
{
    // 25E5  ; [*0914.0020.0002] 
    // BLACK UPPER RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x25e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x914), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_075)
{
    // 25E6  ; [*0915.0020.0002] 
    // WHITE BULLET

    uint32_t const cps[1] = { 0x25e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x915), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_076)
{
    // 25E7  ; [*0916.0020.0002] 
    // SQUARE WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x25e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x916), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_077)
{
    // 25E8  ; [*0917.0020.0002] 
    // SQUARE WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x25e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x917), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_078)
{
    // 25E9  ; [*0918.0020.0002] 
    // SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK

    uint32_t const cps[1] = { 0x25e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x918), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_079)
{
    // 25EA  ; [*0919.0020.0002] 
    // SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK

    uint32_t const cps[1] = { 0x25ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x919), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_080)
{
    // 25EB  ; [*091A.0020.0002] 
    // WHITE SQUARE WITH VERTICAL BISECTING LINE

    uint32_t const cps[1] = { 0x25eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_081)
{
    // 25EC  ; [*091B.0020.0002] 
    // WHITE UP-POINTING TRIANGLE WITH DOT

    uint32_t const cps[1] = { 0x25ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_082)
{
    // 25ED  ; [*091C.0020.0002] 
    // UP-POINTING TRIANGLE WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x25ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_083)
{
    // 25EE  ; [*091D.0020.0002] 
    // UP-POINTING TRIANGLE WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x25ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_084)
{
    // 25EF  ; [*091E.0020.0002] 
    // LARGE CIRCLE

    uint32_t const cps[1] = { 0x25ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_085)
{
    // 25F0  ; [*091F.0020.0002] 
    // WHITE SQUARE WITH UPPER LEFT QUADRANT

    uint32_t const cps[1] = { 0x25f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x91f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_086)
{
    // 25F1  ; [*0920.0020.0002] 
    // WHITE SQUARE WITH LOWER LEFT QUADRANT

    uint32_t const cps[1] = { 0x25f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x920), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_087)
{
    // 25F2  ; [*0921.0020.0002] 
    // WHITE SQUARE WITH LOWER RIGHT QUADRANT

    uint32_t const cps[1] = { 0x25f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x921), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_088)
{
    // 25F3  ; [*0922.0020.0002] 
    // WHITE SQUARE WITH UPPER RIGHT QUADRANT

    uint32_t const cps[1] = { 0x25f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x922), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_089)
{
    // 25F4  ; [*0923.0020.0002] 
    // WHITE CIRCLE WITH UPPER LEFT QUADRANT

    uint32_t const cps[1] = { 0x25f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x923), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_090)
{
    // 25F5  ; [*0924.0020.0002] 
    // WHITE CIRCLE WITH LOWER LEFT QUADRANT

    uint32_t const cps[1] = { 0x25f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x924), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_091)
{
    // 25F6  ; [*0925.0020.0002] 
    // WHITE CIRCLE WITH LOWER RIGHT QUADRANT

    uint32_t const cps[1] = { 0x25f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x925), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_092)
{
    // 25F7  ; [*0926.0020.0002] 
    // WHITE CIRCLE WITH UPPER RIGHT QUADRANT

    uint32_t const cps[1] = { 0x25f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x926), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_093)
{
    // 25F8  ; [*0927.0020.0002] 
    // UPPER LEFT TRIANGLE

    uint32_t const cps[1] = { 0x25f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x927), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_094)
{
    // 25F9  ; [*0928.0020.0002] 
    // UPPER RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x25f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x928), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_095)
{
    // 25FA  ; [*0929.0020.0002] 
    // LOWER LEFT TRIANGLE

    uint32_t const cps[1] = { 0x25fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x929), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_096)
{
    // 25FB  ; [*092A.0020.0002] 
    // WHITE MEDIUM SQUARE

    uint32_t const cps[1] = { 0x25fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_097)
{
    // 25FC  ; [*092B.0020.0002] 
    // BLACK MEDIUM SQUARE

    uint32_t const cps[1] = { 0x25fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_098)
{
    // 25FD  ; [*092C.0020.0002] 
    // WHITE MEDIUM SMALL SQUARE

    uint32_t const cps[1] = { 0x25fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_099)
{
    // 25FE  ; [*092D.0020.0002] 
    // BLACK MEDIUM SMALL SQUARE

    uint32_t const cps[1] = { 0x25fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_100)
{
    // 25FF  ; [*092E.0020.0002] 
    // LOWER RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x25ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_101)
{
    // 2600  ; [*092F.0020.0002] 
    // BLACK SUN WITH RAYS

    uint32_t const cps[1] = { 0x2600 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x92f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_102)
{
    // 2601  ; [*0930.0020.0002] 
    // CLOUD

    uint32_t const cps[1] = { 0x2601 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x930), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_103)
{
    // 2602  ; [*0931.0020.0002] 
    // UMBRELLA

    uint32_t const cps[1] = { 0x2602 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x931), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_104)
{
    // 2603  ; [*0932.0020.0002] 
    // SNOWMAN

    uint32_t const cps[1] = { 0x2603 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x932), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_105)
{
    // 2604  ; [*0933.0020.0002] 
    // COMET

    uint32_t const cps[1] = { 0x2604 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x933), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_106)
{
    // 2605  ; [*0934.0020.0002] 
    // BLACK STAR

    uint32_t const cps[1] = { 0x2605 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x934), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_107)
{
    // 2606  ; [*0935.0020.0002] 
    // WHITE STAR

    uint32_t const cps[1] = { 0x2606 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x935), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_108)
{
    // 2607  ; [*0936.0020.0002] 
    // LIGHTNING

    uint32_t const cps[1] = { 0x2607 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x936), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_109)
{
    // 2608  ; [*0937.0020.0002] 
    // THUNDERSTORM

    uint32_t const cps[1] = { 0x2608 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x937), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_110)
{
    // 2609  ; [*0938.0020.0002] 
    // SUN

    uint32_t const cps[1] = { 0x2609 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x938), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_111)
{
    // 260A  ; [*0939.0020.0002] 
    // ASCENDING NODE

    uint32_t const cps[1] = { 0x260a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x939), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_112)
{
    // 260B  ; [*093A.0020.0002] 
    // DESCENDING NODE

    uint32_t const cps[1] = { 0x260b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_113)
{
    // 260C  ; [*093B.0020.0002] 
    // CONJUNCTION

    uint32_t const cps[1] = { 0x260c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_114)
{
    // 260D  ; [*093C.0020.0002] 
    // OPPOSITION

    uint32_t const cps[1] = { 0x260d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_115)
{
    // 260E  ; [*093D.0020.0002] 
    // BLACK TELEPHONE

    uint32_t const cps[1] = { 0x260e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_116)
{
    // 260F  ; [*093E.0020.0002] 
    // WHITE TELEPHONE

    uint32_t const cps[1] = { 0x260f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_117)
{
    // 2610  ; [*093F.0020.0002] 
    // BALLOT BOX

    uint32_t const cps[1] = { 0x2610 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x93f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_118)
{
    // 2611  ; [*0940.0020.0002] 
    // BALLOT BOX WITH CHECK

    uint32_t const cps[1] = { 0x2611 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x940), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_119)
{
    // 2612  ; [*0941.0020.0002] 
    // BALLOT BOX WITH X

    uint32_t const cps[1] = { 0x2612 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x941), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_120)
{
    // 2613  ; [*0942.0020.0002] 
    // SALTIRE

    uint32_t const cps[1] = { 0x2613 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x942), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_121)
{
    // 2614  ; [*0943.0020.0002] 
    // UMBRELLA WITH RAIN DROPS

    uint32_t const cps[1] = { 0x2614 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x943), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_122)
{
    // 2615  ; [*0944.0020.0002] 
    // HOT BEVERAGE

    uint32_t const cps[1] = { 0x2615 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x944), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_123)
{
    // 2616  ; [*0945.0020.0002] 
    // WHITE SHOGI PIECE

    uint32_t const cps[1] = { 0x2616 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x945), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_124)
{
    // 2617  ; [*0946.0020.0002] 
    // BLACK SHOGI PIECE

    uint32_t const cps[1] = { 0x2617 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x946), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_125)
{
    // 2618  ; [*0947.0020.0002] 
    // SHAMROCK

    uint32_t const cps[1] = { 0x2618 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x947), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_126)
{
    // 2619  ; [*0948.0020.0002] 
    // REVERSED ROTATED FLORAL HEART BULLET

    uint32_t const cps[1] = { 0x2619 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x948), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_127)
{
    // 261A  ; [*0949.0020.0002] 
    // BLACK LEFT POINTING INDEX

    uint32_t const cps[1] = { 0x261a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x949), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_128)
{
    // 261B  ; [*094A.0020.0002] 
    // BLACK RIGHT POINTING INDEX

    uint32_t const cps[1] = { 0x261b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_129)
{
    // 261C  ; [*094B.0020.0002] 
    // WHITE LEFT POINTING INDEX

    uint32_t const cps[1] = { 0x261c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_130)
{
    // 261D  ; [*094C.0020.0002] 
    // WHITE UP POINTING INDEX

    uint32_t const cps[1] = { 0x261d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_131)
{
    // 261E  ; [*094D.0020.0002] 
    // WHITE RIGHT POINTING INDEX

    uint32_t const cps[1] = { 0x261e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_132)
{
    // 261F  ; [*094E.0020.0002] 
    // WHITE DOWN POINTING INDEX

    uint32_t const cps[1] = { 0x261f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_133)
{
    // 2620  ; [*094F.0020.0002] 
    // SKULL AND CROSSBONES

    uint32_t const cps[1] = { 0x2620 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x94f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_134)
{
    // 2621  ; [*0950.0020.0002] 
    // CAUTION SIGN

    uint32_t const cps[1] = { 0x2621 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x950), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_135)
{
    // 2622  ; [*0951.0020.0002] 
    // RADIOACTIVE SIGN

    uint32_t const cps[1] = { 0x2622 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x951), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_136)
{
    // 2623  ; [*0952.0020.0002] 
    // BIOHAZARD SIGN

    uint32_t const cps[1] = { 0x2623 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x952), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_137)
{
    // 2624  ; [*0953.0020.0002] 
    // CADUCEUS

    uint32_t const cps[1] = { 0x2624 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x953), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_138)
{
    // 2625  ; [*0954.0020.0002] 
    // ANKH

    uint32_t const cps[1] = { 0x2625 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x954), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_139)
{
    // 2626  ; [*0955.0020.0002] 
    // ORTHODOX CROSS

    uint32_t const cps[1] = { 0x2626 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x955), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_140)
{
    // 2627  ; [*0956.0020.0002] 
    // CHI RHO

    uint32_t const cps[1] = { 0x2627 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x956), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_141)
{
    // 2628  ; [*0957.0020.0002] 
    // CROSS OF LORRAINE

    uint32_t const cps[1] = { 0x2628 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x957), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_142)
{
    // 2629  ; [*0958.0020.0002] 
    // CROSS OF JERUSALEM

    uint32_t const cps[1] = { 0x2629 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x958), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_143)
{
    // 262A  ; [*0959.0020.0002] 
    // STAR AND CRESCENT

    uint32_t const cps[1] = { 0x262a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x959), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_144)
{
    // 262B  ; [*095A.0020.0002] 
    // FARSI SYMBOL

    uint32_t const cps[1] = { 0x262b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_145)
{
    // 262C  ; [*095B.0020.0002] 
    // ADI SHAKTI

    uint32_t const cps[1] = { 0x262c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_146)
{
    // 262D  ; [*095C.0020.0002] 
    // HAMMER AND SICKLE

    uint32_t const cps[1] = { 0x262d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_147)
{
    // 262E  ; [*095D.0020.0002] 
    // PEACE SYMBOL

    uint32_t const cps[1] = { 0x262e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_148)
{
    // 262F  ; [*095E.0020.0002] 
    // YIN YANG

    uint32_t const cps[1] = { 0x262f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_061_149)
{
    // 2630  ; [*0EBA.0020.0002] 
    // TRIGRAM FOR HEAVEN

    uint32_t const cps[1] = { 0x2630 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

