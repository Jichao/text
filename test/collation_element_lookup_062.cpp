// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_062_000)
{
    // 2631  ; [*0EBB.0020.0002] 
    // TRIGRAM FOR LAKE

    uint32_t const cps[1] = { 0x2631 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xebb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_001)
{
    // 2632  ; [*0EBC.0020.0002] 
    // TRIGRAM FOR FIRE

    uint32_t const cps[1] = { 0x2632 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xebc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_002)
{
    // 2633  ; [*0EBD.0020.0002] 
    // TRIGRAM FOR THUNDER

    uint32_t const cps[1] = { 0x2633 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xebd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_003)
{
    // 2634  ; [*0EBE.0020.0002] 
    // TRIGRAM FOR WIND

    uint32_t const cps[1] = { 0x2634 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xebe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_004)
{
    // 2635  ; [*0EBF.0020.0002] 
    // TRIGRAM FOR WATER

    uint32_t const cps[1] = { 0x2635 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xebf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_005)
{
    // 2636  ; [*0EC0.0020.0002] 
    // TRIGRAM FOR MOUNTAIN

    uint32_t const cps[1] = { 0x2636 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xec0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_006)
{
    // 2637  ; [*0EC1.0020.0002] 
    // TRIGRAM FOR EARTH

    uint32_t const cps[1] = { 0x2637 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xec1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_007)
{
    // 2638  ; [*095F.0020.0002] 
    // WHEEL OF DHARMA

    uint32_t const cps[1] = { 0x2638 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x95f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_008)
{
    // 2639  ; [*0960.0020.0002] 
    // WHITE FROWNING FACE

    uint32_t const cps[1] = { 0x2639 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x960), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_009)
{
    // 263A  ; [*0961.0020.0002] 
    // WHITE SMILING FACE

    uint32_t const cps[1] = { 0x263a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x961), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_010)
{
    // 263B  ; [*0962.0020.0002] 
    // BLACK SMILING FACE

    uint32_t const cps[1] = { 0x263b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x962), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_011)
{
    // 263C  ; [*0963.0020.0002] 
    // WHITE SUN WITH RAYS

    uint32_t const cps[1] = { 0x263c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x963), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_012)
{
    // 263D  ; [*0964.0020.0002] 
    // FIRST QUARTER MOON

    uint32_t const cps[1] = { 0x263d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x964), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_013)
{
    // 263E  ; [*0965.0020.0002] 
    // LAST QUARTER MOON

    uint32_t const cps[1] = { 0x263e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x965), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_014)
{
    // 263F  ; [*0966.0020.0002] 
    // MERCURY

    uint32_t const cps[1] = { 0x263f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x966), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_015)
{
    // 2640  ; [*0967.0020.0002] 
    // FEMALE SIGN

    uint32_t const cps[1] = { 0x2640 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x967), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_016)
{
    // 2641  ; [*0968.0020.0002] 
    // EARTH

    uint32_t const cps[1] = { 0x2641 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x968), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_017)
{
    // 2642  ; [*0969.0020.0002] 
    // MALE SIGN

    uint32_t const cps[1] = { 0x2642 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x969), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_018)
{
    // 2643  ; [*096A.0020.0002] 
    // JUPITER

    uint32_t const cps[1] = { 0x2643 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_019)
{
    // 2644  ; [*096B.0020.0002] 
    // SATURN

    uint32_t const cps[1] = { 0x2644 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_020)
{
    // 2645  ; [*096C.0020.0002] 
    // URANUS

    uint32_t const cps[1] = { 0x2645 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_021)
{
    // 2646  ; [*096D.0020.0002] 
    // NEPTUNE

    uint32_t const cps[1] = { 0x2646 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_022)
{
    // 2647  ; [*096E.0020.0002] 
    // PLUTO

    uint32_t const cps[1] = { 0x2647 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_023)
{
    // 2648  ; [*096F.0020.0002] 
    // ARIES

    uint32_t const cps[1] = { 0x2648 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x96f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_024)
{
    // 2649  ; [*0970.0020.0002] 
    // TAURUS

    uint32_t const cps[1] = { 0x2649 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x970), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_025)
{
    // 264A  ; [*0971.0020.0002] 
    // GEMINI

    uint32_t const cps[1] = { 0x264a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x971), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_026)
{
    // 264B  ; [*0972.0020.0002] 
    // CANCER

    uint32_t const cps[1] = { 0x264b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x972), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_027)
{
    // 264C  ; [*0973.0020.0002] 
    // LEO

    uint32_t const cps[1] = { 0x264c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x973), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_028)
{
    // 264D  ; [*0974.0020.0002] 
    // VIRGO

    uint32_t const cps[1] = { 0x264d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x974), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_029)
{
    // 264E  ; [*0975.0020.0002] 
    // LIBRA

    uint32_t const cps[1] = { 0x264e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x975), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_030)
{
    // 264F  ; [*0976.0020.0002] 
    // SCORPIUS

    uint32_t const cps[1] = { 0x264f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x976), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_031)
{
    // 2650  ; [*0977.0020.0002] 
    // SAGITTARIUS

    uint32_t const cps[1] = { 0x2650 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x977), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_032)
{
    // 2651  ; [*0978.0020.0002] 
    // CAPRICORN

    uint32_t const cps[1] = { 0x2651 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x978), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_033)
{
    // 2652  ; [*0979.0020.0002] 
    // AQUARIUS

    uint32_t const cps[1] = { 0x2652 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x979), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_034)
{
    // 2653  ; [*097A.0020.0002] 
    // PISCES

    uint32_t const cps[1] = { 0x2653 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_035)
{
    // 2654  ; [*097B.0020.0002] 
    // WHITE CHESS KING

    uint32_t const cps[1] = { 0x2654 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_036)
{
    // 2655  ; [*097C.0020.0002] 
    // WHITE CHESS QUEEN

    uint32_t const cps[1] = { 0x2655 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_037)
{
    // 2656  ; [*097D.0020.0002] 
    // WHITE CHESS ROOK

    uint32_t const cps[1] = { 0x2656 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_038)
{
    // 2657  ; [*097E.0020.0002] 
    // WHITE CHESS BISHOP

    uint32_t const cps[1] = { 0x2657 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_039)
{
    // 2658  ; [*097F.0020.0002] 
    // WHITE CHESS KNIGHT

    uint32_t const cps[1] = { 0x2658 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x97f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_040)
{
    // 2659  ; [*0980.0020.0002] 
    // WHITE CHESS PAWN

    uint32_t const cps[1] = { 0x2659 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x980), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_041)
{
    // 265A  ; [*0981.0020.0002] 
    // BLACK CHESS KING

    uint32_t const cps[1] = { 0x265a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x981), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_042)
{
    // 265B  ; [*0982.0020.0002] 
    // BLACK CHESS QUEEN

    uint32_t const cps[1] = { 0x265b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x982), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_043)
{
    // 265C  ; [*0983.0020.0002] 
    // BLACK CHESS ROOK

    uint32_t const cps[1] = { 0x265c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x983), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_044)
{
    // 265D  ; [*0984.0020.0002] 
    // BLACK CHESS BISHOP

    uint32_t const cps[1] = { 0x265d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x984), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_045)
{
    // 265E  ; [*0985.0020.0002] 
    // BLACK CHESS KNIGHT

    uint32_t const cps[1] = { 0x265e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x985), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_046)
{
    // 265F  ; [*0986.0020.0002] 
    // BLACK CHESS PAWN

    uint32_t const cps[1] = { 0x265f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x986), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_047)
{
    // 2660  ; [*0987.0020.0002] 
    // BLACK SPADE SUIT

    uint32_t const cps[1] = { 0x2660 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x987), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_048)
{
    // 2661  ; [*0988.0020.0002] 
    // WHITE HEART SUIT

    uint32_t const cps[1] = { 0x2661 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x988), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_049)
{
    // 2662  ; [*0989.0020.0002] 
    // WHITE DIAMOND SUIT

    uint32_t const cps[1] = { 0x2662 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x989), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_050)
{
    // 2663  ; [*098A.0020.0002] 
    // BLACK CLUB SUIT

    uint32_t const cps[1] = { 0x2663 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_051)
{
    // 2664  ; [*098B.0020.0002] 
    // WHITE SPADE SUIT

    uint32_t const cps[1] = { 0x2664 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_052)
{
    // 2665  ; [*098C.0020.0002] 
    // BLACK HEART SUIT

    uint32_t const cps[1] = { 0x2665 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_053)
{
    // 2666  ; [*098D.0020.0002] 
    // BLACK DIAMOND SUIT

    uint32_t const cps[1] = { 0x2666 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_054)
{
    // 2667  ; [*098E.0020.0002] 
    // WHITE CLUB SUIT

    uint32_t const cps[1] = { 0x2667 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_055)
{
    // 2668  ; [*098F.0020.0002] 
    // HOT SPRINGS

    uint32_t const cps[1] = { 0x2668 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x98f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_056)
{
    // 2669  ; [*0990.0020.0002] 
    // QUARTER NOTE

    uint32_t const cps[1] = { 0x2669 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x990), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_057)
{
    // 266A  ; [*0991.0020.0002] 
    // EIGHTH NOTE

    uint32_t const cps[1] = { 0x266a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x991), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_058)
{
    // 266B  ; [*0992.0020.0002] 
    // BEAMED EIGHTH NOTES

    uint32_t const cps[1] = { 0x266b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x992), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_059)
{
    // 266C  ; [*0993.0020.0002] 
    // BEAMED SIXTEENTH NOTES

    uint32_t const cps[1] = { 0x266c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x993), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_060)
{
    // 266D  ; [*110B.0020.0002] 
    // MUSIC FLAT SIGN

    uint32_t const cps[1] = { 0x266d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x110b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_061)
{
    // 266E  ; [*110C.0020.0002] 
    // MUSIC NATURAL SIGN

    uint32_t const cps[1] = { 0x266e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x110c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_062)
{
    // 266F  ; [*110D.0020.0002] 
    // MUSIC SHARP SIGN

    uint32_t const cps[1] = { 0x266f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x110d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_063)
{
    // 2670  ; [*0994.0020.0002] 
    // WEST SYRIAC CROSS

    uint32_t const cps[1] = { 0x2670 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x994), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_064)
{
    // 2671  ; [*0995.0020.0002] 
    // EAST SYRIAC CROSS

    uint32_t const cps[1] = { 0x2671 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x995), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_065)
{
    // 2672  ; [*0996.0020.0002] 
    // UNIVERSAL RECYCLING SYMBOL

    uint32_t const cps[1] = { 0x2672 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x996), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_066)
{
    // 2673  ; [*0997.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-1 PLASTICS

    uint32_t const cps[1] = { 0x2673 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x997), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_067)
{
    // 2674  ; [*0998.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-2 PLASTICS

    uint32_t const cps[1] = { 0x2674 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x998), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_068)
{
    // 2675  ; [*0999.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-3 PLASTICS

    uint32_t const cps[1] = { 0x2675 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x999), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_069)
{
    // 2676  ; [*099A.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-4 PLASTICS

    uint32_t const cps[1] = { 0x2676 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_070)
{
    // 2677  ; [*099B.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-5 PLASTICS

    uint32_t const cps[1] = { 0x2677 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_071)
{
    // 2678  ; [*099C.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-6 PLASTICS

    uint32_t const cps[1] = { 0x2678 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_072)
{
    // 2679  ; [*099D.0020.0002] 
    // RECYCLING SYMBOL FOR TYPE-7 PLASTICS

    uint32_t const cps[1] = { 0x2679 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_073)
{
    // 267A  ; [*099E.0020.0002] 
    // RECYCLING SYMBOL FOR GENERIC MATERIALS

    uint32_t const cps[1] = { 0x267a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_074)
{
    // 267B  ; [*099F.0020.0002] 
    // BLACK UNIVERSAL RECYCLING SYMBOL

    uint32_t const cps[1] = { 0x267b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x99f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_075)
{
    // 267C  ; [*09A0.0020.0002] 
    // RECYCLED PAPER SYMBOL

    uint32_t const cps[1] = { 0x267c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_076)
{
    // 267D  ; [*09A1.0020.0002] 
    // PARTIALLY-RECYCLED PAPER SYMBOL

    uint32_t const cps[1] = { 0x267d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_077)
{
    // 267E  ; [*09A2.0020.0002] 
    // PERMANENT PAPER SIGN

    uint32_t const cps[1] = { 0x267e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_078)
{
    // 267F  ; [*09A3.0020.0002] 
    // WHEELCHAIR SYMBOL

    uint32_t const cps[1] = { 0x267f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_079)
{
    // 2680  ; [*09A4.0020.0002] 
    // DIE FACE-1

    uint32_t const cps[1] = { 0x2680 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_080)
{
    // 2681  ; [*09A5.0020.0002] 
    // DIE FACE-2

    uint32_t const cps[1] = { 0x2681 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_081)
{
    // 2682  ; [*09A6.0020.0002] 
    // DIE FACE-3

    uint32_t const cps[1] = { 0x2682 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_082)
{
    // 2683  ; [*09A7.0020.0002] 
    // DIE FACE-4

    uint32_t const cps[1] = { 0x2683 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_083)
{
    // 2684  ; [*09A8.0020.0002] 
    // DIE FACE-5

    uint32_t const cps[1] = { 0x2684 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_084)
{
    // 2685  ; [*09A9.0020.0002] 
    // DIE FACE-6

    uint32_t const cps[1] = { 0x2685 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_085)
{
    // 2686  ; [*09AA.0020.0002] 
    // WHITE CIRCLE WITH DOT RIGHT

    uint32_t const cps[1] = { 0x2686 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_086)
{
    // 2687  ; [*09AB.0020.0002] 
    // WHITE CIRCLE WITH TWO DOTS

    uint32_t const cps[1] = { 0x2687 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_087)
{
    // 2688  ; [*09AC.0020.0002] 
    // BLACK CIRCLE WITH WHITE DOT RIGHT

    uint32_t const cps[1] = { 0x2688 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_088)
{
    // 2689  ; [*09AD.0020.0002] 
    // BLACK CIRCLE WITH TWO WHITE DOTS

    uint32_t const cps[1] = { 0x2689 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_089)
{
    // 268A  ; [*0EB4.0020.0002] 
    // MONOGRAM FOR YANG

    uint32_t const cps[1] = { 0x268a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_090)
{
    // 268B  ; [*0EB5.0020.0002] 
    // MONOGRAM FOR YIN

    uint32_t const cps[1] = { 0x268b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_091)
{
    // 268C  ; [*0EB6.0020.0002] 
    // DIGRAM FOR GREATER YANG

    uint32_t const cps[1] = { 0x268c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_092)
{
    // 268D  ; [*0EB7.0020.0002] 
    // DIGRAM FOR LESSER YIN

    uint32_t const cps[1] = { 0x268d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_093)
{
    // 268E  ; [*0EB8.0020.0002] 
    // DIGRAM FOR LESSER YANG

    uint32_t const cps[1] = { 0x268e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_094)
{
    // 268F  ; [*0EB9.0020.0002] 
    // DIGRAM FOR GREATER YIN

    uint32_t const cps[1] = { 0x268f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xeb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_095)
{
    // 2690  ; [*09AE.0020.0002] 
    // WHITE FLAG

    uint32_t const cps[1] = { 0x2690 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_096)
{
    // 2691  ; [*09AF.0020.0002] 
    // BLACK FLAG

    uint32_t const cps[1] = { 0x2691 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_097)
{
    // 2692  ; [*09B0.0020.0002] 
    // HAMMER AND PICK

    uint32_t const cps[1] = { 0x2692 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_098)
{
    // 2693  ; [*09B1.0020.0002] 
    // ANCHOR

    uint32_t const cps[1] = { 0x2693 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_099)
{
    // 2694  ; [*09B2.0020.0002] 
    // CROSSED SWORDS

    uint32_t const cps[1] = { 0x2694 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_100)
{
    // 2695  ; [*09B3.0020.0002] 
    // STAFF OF AESCULAPIUS

    uint32_t const cps[1] = { 0x2695 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_101)
{
    // 2696  ; [*09B4.0020.0002] 
    // SCALES

    uint32_t const cps[1] = { 0x2696 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_102)
{
    // 2697  ; [*09B5.0020.0002] 
    // ALEMBIC

    uint32_t const cps[1] = { 0x2697 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_103)
{
    // 2698  ; [*09B6.0020.0002] 
    // FLOWER

    uint32_t const cps[1] = { 0x2698 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_104)
{
    // 2699  ; [*09B7.0020.0002] 
    // GEAR

    uint32_t const cps[1] = { 0x2699 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_105)
{
    // 269A  ; [*09B8.0020.0002] 
    // STAFF OF HERMES

    uint32_t const cps[1] = { 0x269a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_106)
{
    // 269B  ; [*09B9.0020.0002] 
    // ATOM SYMBOL

    uint32_t const cps[1] = { 0x269b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_107)
{
    // 269C  ; [*09BA.0020.0002] 
    // FLEUR-DE-LIS

    uint32_t const cps[1] = { 0x269c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_108)
{
    // 269D  ; [*09BB.0020.0002] 
    // OUTLINED WHITE STAR

    uint32_t const cps[1] = { 0x269d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_109)
{
    // 269E  ; [*09BC.0020.0002] 
    // THREE LINES CONVERGING RIGHT

    uint32_t const cps[1] = { 0x269e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_110)
{
    // 269F  ; [*09BD.0020.0002] 
    // THREE LINES CONVERGING LEFT

    uint32_t const cps[1] = { 0x269f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_111)
{
    // 26A0  ; [*09BE.0020.0002] 
    // WARNING SIGN

    uint32_t const cps[1] = { 0x26a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_112)
{
    // 26A1  ; [*09BF.0020.0002] 
    // HIGH VOLTAGE SIGN

    uint32_t const cps[1] = { 0x26a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_113)
{
    // 26A2  ; [*09C0.0020.0002] 
    // DOUBLED FEMALE SIGN

    uint32_t const cps[1] = { 0x26a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_114)
{
    // 26A3  ; [*09C1.0020.0002] 
    // DOUBLED MALE SIGN

    uint32_t const cps[1] = { 0x26a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_115)
{
    // 26A4  ; [*09C2.0020.0002] 
    // INTERLOCKED FEMALE AND MALE SIGN

    uint32_t const cps[1] = { 0x26a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_116)
{
    // 26A5  ; [*09C3.0020.0002] 
    // MALE AND FEMALE SIGN

    uint32_t const cps[1] = { 0x26a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_117)
{
    // 26A6  ; [*09C4.0020.0002] 
    // MALE WITH STROKE SIGN

    uint32_t const cps[1] = { 0x26a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_118)
{
    // 26A7  ; [*09C5.0020.0002] 
    // MALE WITH STROKE AND MALE AND FEMALE SIGN

    uint32_t const cps[1] = { 0x26a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_119)
{
    // 26A8  ; [*09C6.0020.0002] 
    // VERTICAL MALE WITH STROKE SIGN

    uint32_t const cps[1] = { 0x26a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_120)
{
    // 26A9  ; [*09C7.0020.0002] 
    // HORIZONTAL MALE WITH STROKE SIGN

    uint32_t const cps[1] = { 0x26a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_121)
{
    // 26AA  ; [*09C8.0020.0002] 
    // MEDIUM WHITE CIRCLE

    uint32_t const cps[1] = { 0x26aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_122)
{
    // 26AB  ; [*09C9.0020.0002] 
    // MEDIUM BLACK CIRCLE

    uint32_t const cps[1] = { 0x26ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_123)
{
    // 26AC  ; [*09CA.0020.0002] 
    // MEDIUM SMALL WHITE CIRCLE

    uint32_t const cps[1] = { 0x26ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_124)
{
    // 26AD  ; [*09CB.0020.0002] 
    // MARRIAGE SYMBOL

    uint32_t const cps[1] = { 0x26ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_125)
{
    // 26AE  ; [*09CC.0020.0002] 
    // DIVORCE SYMBOL

    uint32_t const cps[1] = { 0x26ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_126)
{
    // 26AF  ; [*09CD.0020.0002] 
    // UNMARRIED PARTNERSHIP SYMBOL

    uint32_t const cps[1] = { 0x26af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_127)
{
    // 26B0  ; [*09CE.0020.0002] 
    // COFFIN

    uint32_t const cps[1] = { 0x26b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_128)
{
    // 26B1  ; [*09CF.0020.0002] 
    // FUNERAL URN

    uint32_t const cps[1] = { 0x26b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_129)
{
    // 26B2  ; [*09D0.0020.0002] 
    // NEUTER

    uint32_t const cps[1] = { 0x26b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_130)
{
    // 26B3  ; [*09D1.0020.0002] 
    // CERES

    uint32_t const cps[1] = { 0x26b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_131)
{
    // 26B4  ; [*09D2.0020.0002] 
    // PALLAS

    uint32_t const cps[1] = { 0x26b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_132)
{
    // 26B5  ; [*09D3.0020.0002] 
    // JUNO

    uint32_t const cps[1] = { 0x26b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_133)
{
    // 26B6  ; [*09D4.0020.0002] 
    // VESTA

    uint32_t const cps[1] = { 0x26b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_134)
{
    // 26B7  ; [*09D5.0020.0002] 
    // CHIRON

    uint32_t const cps[1] = { 0x26b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_135)
{
    // 26B8  ; [*09D6.0020.0002] 
    // BLACK MOON LILITH

    uint32_t const cps[1] = { 0x26b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_136)
{
    // 26B9  ; [*09D7.0020.0002] 
    // SEXTILE

    uint32_t const cps[1] = { 0x26b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_137)
{
    // 26BA  ; [*09D8.0020.0002] 
    // SEMISEXTILE

    uint32_t const cps[1] = { 0x26ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_138)
{
    // 26BB  ; [*09D9.0020.0002] 
    // QUINCUNX

    uint32_t const cps[1] = { 0x26bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_139)
{
    // 26BC  ; [*09DA.0020.0002] 
    // SESQUIQUADRATE

    uint32_t const cps[1] = { 0x26bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_140)
{
    // 26BD  ; [*09DB.0020.0002] 
    // SOCCER BALL

    uint32_t const cps[1] = { 0x26bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_141)
{
    // 26BE  ; [*09DC.0020.0002] 
    // BASEBALL

    uint32_t const cps[1] = { 0x26be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_142)
{
    // 26BF  ; [*09DD.0020.0002] 
    // SQUARED KEY

    uint32_t const cps[1] = { 0x26bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_143)
{
    // 26C0  ; [*09DE.0020.0002] 
    // WHITE DRAUGHTS MAN

    uint32_t const cps[1] = { 0x26c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_144)
{
    // 26C1  ; [*09DF.0020.0002] 
    // WHITE DRAUGHTS KING

    uint32_t const cps[1] = { 0x26c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_145)
{
    // 26C2  ; [*09E0.0020.0002] 
    // BLACK DRAUGHTS MAN

    uint32_t const cps[1] = { 0x26c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_146)
{
    // 26C3  ; [*09E1.0020.0002] 
    // BLACK DRAUGHTS KING

    uint32_t const cps[1] = { 0x26c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_147)
{
    // 26C4  ; [*09E2.0020.0002] 
    // SNOWMAN WITHOUT SNOW

    uint32_t const cps[1] = { 0x26c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_148)
{
    // 26C5  ; [*09E3.0020.0002] 
    // SUN BEHIND CLOUD

    uint32_t const cps[1] = { 0x26c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_062_149)
{
    // 26C6  ; [*09E4.0020.0002] 
    // RAIN

    uint32_t const cps[1] = { 0x26c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x9e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

