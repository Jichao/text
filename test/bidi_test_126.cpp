// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;

TEST(bidi, bidi_126_000)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN L S RLE; 4 ('RTL') (line 126001)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L S RLO; 4 ('RTL') (line 126002)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L S PDF; 4 ('RTL') (line 126003)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L S BN; 4 ('RTL') (line 126004)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS LRE; 4 ('RTL') (line 126005)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS LRO; 4 ('RTL') (line 126006)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS RLE; 4 ('RTL') (line 126007)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS RLO; 4 ('RTL') (line 126008)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS PDF; 4 ('RTL') (line 126009)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L WS BN; 4 ('RTL') (line 126010)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON LRE; 4 ('RTL') (line 126011)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON LRO; 4 ('RTL') (line 126012)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON RLE; 4 ('RTL') (line 126013)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON RLO; 4 ('RTL') (line 126014)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON PDF; 4 ('RTL') (line 126015)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L ON BN; 4 ('RTL') (line 126016)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI LRE; 4 ('RTL') (line 126017)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI LRO; 4 ('RTL') (line 126018)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI RLE; 4 ('RTL') (line 126019)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI RLO; 4 ('RTL') (line 126020)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI PDF; 4 ('RTL') (line 126021)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L LRI BN; 4 ('RTL') (line 126022)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L RLI LRE; 4 ('RTL') (line 126023)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L RLI LRO; 4 ('RTL') (line 126024)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L RLI RLE; 4 ('RTL') (line 126025)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_001)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN L RLI RLO; 4 ('RTL') (line 126026)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L RLI PDF; 4 ('RTL') (line 126027)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L RLI BN; 4 ('RTL') (line 126028)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI LRE; 4 ('RTL') (line 126029)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI LRO; 4 ('RTL') (line 126030)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI RLE; 4 ('RTL') (line 126031)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI RLO; 4 ('RTL') (line 126032)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI PDF; 4 ('RTL') (line 126033)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L FSI BN; 4 ('RTL') (line 126034)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI LRE; 4 ('RTL') (line 126035)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI LRO; 4 ('RTL') (line 126036)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI RLE; 4 ('RTL') (line 126037)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI RLO; 4 ('RTL') (line 126038)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI PDF; 4 ('RTL') (line 126039)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN L PDI BN; 4 ('RTL') (line 126040)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0041, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R LRE; 5 ('auto') (line 126041)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R LRE; 5 ('RTL') (line 126041)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R LRO; 5 ('auto') (line 126042)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R LRO; 5 ('RTL') (line 126042)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R RLE; 5 ('auto') (line 126043)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R RLE; 5 ('RTL') (line 126043)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R RLO; 5 ('auto') (line 126044)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R RLO; 5 ('RTL') (line 126044)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R PDF; 5 ('auto') (line 126045)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R PDF; 5 ('RTL') (line 126045)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R BN; 5 ('auto') (line 126046)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN R BN; 5 ('RTL') (line 126046)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL LRE; 5 ('auto') (line 126047)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL LRE; 5 ('RTL') (line 126047)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL LRO; 5 ('auto') (line 126048)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL LRO; 5 ('RTL') (line 126048)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL RLE; 5 ('auto') (line 126049)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL RLE; 5 ('RTL') (line 126049)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL RLO; 5 ('auto') (line 126050)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL RLO; 5 ('RTL') (line 126050)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_002)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN EN AL PDF; 5 ('auto') (line 126051)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL PDF; 5 ('RTL') (line 126051)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL BN; 5 ('auto') (line 126052)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN AL BN; 5 ('RTL') (line 126052)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES LRE; 4 ('RTL') (line 126053)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES LRO; 4 ('RTL') (line 126054)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES RLE; 4 ('RTL') (line 126055)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES RLO; 4 ('RTL') (line 126056)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES PDF; 4 ('RTL') (line 126057)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ES BN; 4 ('RTL') (line 126058)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS LRE; 4 ('RTL') (line 126059)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS LRO; 4 ('RTL') (line 126060)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS RLE; 4 ('RTL') (line 126061)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS RLO; 4 ('RTL') (line 126062)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS PDF; 4 ('RTL') (line 126063)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN CS BN; 4 ('RTL') (line 126064)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S LRE; 4 ('RTL') (line 126065)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S LRO; 4 ('RTL') (line 126066)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S RLE; 4 ('RTL') (line 126067)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S RLO; 4 ('RTL') (line 126068)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S PDF; 4 ('RTL') (line 126069)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN S BN; 4 ('RTL') (line 126070)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN WS LRE; 4 ('RTL') (line 126071)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN WS LRO; 4 ('RTL') (line 126072)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN WS RLE; 4 ('RTL') (line 126073)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN WS RLO; 4 ('RTL') (line 126074)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN WS PDF; 4 ('RTL') (line 126075)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_003)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN EN WS BN; 4 ('RTL') (line 126076)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON LRE; 4 ('RTL') (line 126077)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON LRO; 4 ('RTL') (line 126078)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON RLE; 4 ('RTL') (line 126079)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON RLO; 4 ('RTL') (line 126080)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON PDF; 4 ('RTL') (line 126081)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN ON BN; 4 ('RTL') (line 126082)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI LRE; 4 ('RTL') (line 126083)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI LRO; 4 ('RTL') (line 126084)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI RLE; 4 ('RTL') (line 126085)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI RLO; 4 ('RTL') (line 126086)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI PDF; 4 ('RTL') (line 126087)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN LRI BN; 4 ('RTL') (line 126088)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI LRE; 4 ('RTL') (line 126089)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI LRO; 4 ('RTL') (line 126090)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI RLE; 4 ('RTL') (line 126091)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI RLO; 4 ('RTL') (line 126092)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI PDF; 4 ('RTL') (line 126093)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN RLI BN; 4 ('RTL') (line 126094)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI LRE; 4 ('RTL') (line 126095)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI LRO; 4 ('RTL') (line 126096)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI RLE; 4 ('RTL') (line 126097)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI RLO; 4 ('RTL') (line 126098)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI PDF; 4 ('RTL') (line 126099)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN FSI BN; 4 ('RTL') (line 126100)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_004)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN EN PDI LRE; 4 ('RTL') (line 126101)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN PDI LRO; 4 ('RTL') (line 126102)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN PDI RLE; 4 ('RTL') (line 126103)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN PDI RLO; 4 ('RTL') (line 126104)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN PDI PDF; 4 ('RTL') (line 126105)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN EN PDI BN; 4 ('RTL') (line 126106)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0030, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRE; 7 ('auto') (line 126107)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRE; 7 ('LTR') (line 126107)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRE; 7 ('RTL') (line 126107)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRO; 7 ('auto') (line 126108)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRO; 7 ('LTR') (line 126108)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R LRO; 7 ('RTL') (line 126108)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLE; 7 ('auto') (line 126109)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLE; 7 ('LTR') (line 126109)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLE; 7 ('RTL') (line 126109)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLO; 7 ('auto') (line 126110)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLO; 7 ('LTR') (line 126110)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R RLO; 7 ('RTL') (line 126110)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R PDF; 7 ('auto') (line 126111)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R PDF; 7 ('LTR') (line 126111)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R PDF; 7 ('RTL') (line 126111)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R BN; 7 ('auto') (line 126112)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R BN; 7 ('LTR') (line 126112)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN R BN; 7 ('RTL') (line 126112)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRE; 7 ('auto') (line 126113)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRE; 7 ('LTR') (line 126113)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRE; 7 ('RTL') (line 126113)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRO; 7 ('auto') (line 126114)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRO; 7 ('LTR') (line 126114)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL LRO; 7 ('RTL') (line 126114)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLE; 7 ('auto') (line 126115)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLE; 7 ('LTR') (line 126115)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLE; 7 ('RTL') (line 126115)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLO; 7 ('auto') (line 126116)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLO; 7 ('LTR') (line 126116)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL RLO; 7 ('RTL') (line 126116)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL PDF; 7 ('auto') (line 126117)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL PDF; 7 ('LTR') (line 126117)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL PDF; 7 ('RTL') (line 126117)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL BN; 7 ('auto') (line 126118)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL BN; 7 ('LTR') (line 126118)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN AL BN; 7 ('RTL') (line 126118)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES LRE; 4 ('RTL') (line 126119)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES LRO; 4 ('RTL') (line 126120)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES RLE; 4 ('RTL') (line 126121)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES RLO; 4 ('RTL') (line 126122)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES PDF; 4 ('RTL') (line 126123)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ES BN; 4 ('RTL') (line 126124)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ET LRE; 4 ('RTL') (line 126125)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_005)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN AN ET LRO; 4 ('RTL') (line 126126)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ET RLE; 4 ('RTL') (line 126127)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ET RLO; 4 ('RTL') (line 126128)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ET PDF; 4 ('RTL') (line 126129)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ET BN; 4 ('RTL') (line 126130)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS LRE; 4 ('RTL') (line 126131)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS LRO; 4 ('RTL') (line 126132)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS RLE; 4 ('RTL') (line 126133)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS RLO; 4 ('RTL') (line 126134)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS PDF; 4 ('RTL') (line 126135)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN CS BN; 4 ('RTL') (line 126136)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S LRE; 4 ('RTL') (line 126137)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S LRO; 4 ('RTL') (line 126138)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S RLE; 4 ('RTL') (line 126139)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S RLO; 4 ('RTL') (line 126140)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S PDF; 4 ('RTL') (line 126141)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN S BN; 4 ('RTL') (line 126142)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS LRE; 4 ('RTL') (line 126143)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS LRO; 4 ('RTL') (line 126144)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS RLE; 4 ('RTL') (line 126145)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS RLO; 4 ('RTL') (line 126146)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS PDF; 4 ('RTL') (line 126147)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN WS BN; 4 ('RTL') (line 126148)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ON LRE; 4 ('RTL') (line 126149)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ON LRO; 4 ('RTL') (line 126150)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_006)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN AN ON RLE; 4 ('RTL') (line 126151)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ON RLO; 4 ('RTL') (line 126152)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ON PDF; 4 ('RTL') (line 126153)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN ON BN; 4 ('RTL') (line 126154)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI LRE; 4 ('RTL') (line 126155)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI LRO; 4 ('RTL') (line 126156)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI RLE; 4 ('RTL') (line 126157)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI RLO; 4 ('RTL') (line 126158)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI PDF; 4 ('RTL') (line 126159)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN LRI BN; 4 ('RTL') (line 126160)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI LRE; 4 ('RTL') (line 126161)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI LRO; 4 ('RTL') (line 126162)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI RLE; 4 ('RTL') (line 126163)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI RLO; 4 ('RTL') (line 126164)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI PDF; 4 ('RTL') (line 126165)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN RLI BN; 4 ('RTL') (line 126166)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI LRE; 4 ('RTL') (line 126167)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI LRO; 4 ('RTL') (line 126168)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI RLE; 4 ('RTL') (line 126169)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI RLO; 4 ('RTL') (line 126170)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI PDF; 4 ('RTL') (line 126171)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN FSI BN; 4 ('RTL') (line 126172)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN PDI LRE; 4 ('RTL') (line 126173)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN PDI LRO; 4 ('RTL') (line 126174)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN PDI RLE; 4 ('RTL') (line 126175)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_007)
{

    expected_levels = { -1, 2, 1, -1 };

    {
        // BN AN PDI RLO; 4 ('RTL') (line 126176)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN PDI PDF; 4 ('RTL') (line 126177)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // BN AN PDI BN; 4 ('RTL') (line 126178)
        std::vector<uint32_t> const cps = { 0x00AD, 0x0660, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE L L LRE; 7 ('auto') (line 126184)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L LRE; 7 ('LTR') (line 126184)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L LRE; 7 ('RTL') (line 126184)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L LRO; 7 ('auto') (line 126185)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L LRO; 7 ('LTR') (line 126185)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L LRO; 7 ('RTL') (line 126185)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLE; 7 ('auto') (line 126186)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLE; 7 ('LTR') (line 126186)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLE; 7 ('RTL') (line 126186)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLO; 7 ('auto') (line 126187)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLO; 7 ('LTR') (line 126187)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L RLO; 7 ('RTL') (line 126187)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L PDF; 7 ('auto') (line 126188)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L PDF; 7 ('LTR') (line 126188)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L PDF; 7 ('RTL') (line 126188)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L BN; 7 ('auto') (line 126189)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L BN; 7 ('LTR') (line 126189)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L L BN; 7 ('RTL') (line 126189)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRE; 7 ('auto') (line 126190)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRE; 7 ('LTR') (line 126190)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRE; 7 ('RTL') (line 126190)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRO; 7 ('auto') (line 126191)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRO; 7 ('LTR') (line 126191)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN LRO; 7 ('RTL') (line 126191)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLE; 7 ('auto') (line 126192)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLE; 7 ('LTR') (line 126192)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLE; 7 ('RTL') (line 126192)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLO; 7 ('auto') (line 126193)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLO; 7 ('LTR') (line 126193)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN RLO; 7 ('RTL') (line 126193)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN PDF; 7 ('auto') (line 126194)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN PDF; 7 ('LTR') (line 126194)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN PDF; 7 ('RTL') (line 126194)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN BN; 7 ('auto') (line 126195)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN BN; 7 ('LTR') (line 126195)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L EN BN; 7 ('RTL') (line 126195)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRE; 7 ('auto') (line 126196)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRE; 7 ('LTR') (line 126196)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRE; 7 ('RTL') (line 126196)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRO; 7 ('auto') (line 126197)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRO; 7 ('LTR') (line 126197)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES LRO; 7 ('RTL') (line 126197)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLE; 7 ('auto') (line 126198)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLE; 7 ('LTR') (line 126198)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLE; 7 ('RTL') (line 126198)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLO; 7 ('auto') (line 126199)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLO; 7 ('LTR') (line 126199)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES RLO; 7 ('RTL') (line 126199)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES PDF; 7 ('auto') (line 126200)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES PDF; 7 ('LTR') (line 126200)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES PDF; 7 ('RTL') (line 126200)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES BN; 7 ('auto') (line 126201)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES BN; 7 ('LTR') (line 126201)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ES BN; 7 ('RTL') (line 126201)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRE; 7 ('auto') (line 126202)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRE; 7 ('LTR') (line 126202)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRE; 7 ('RTL') (line 126202)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRO; 7 ('auto') (line 126203)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRO; 7 ('LTR') (line 126203)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET LRO; 7 ('RTL') (line 126203)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLE; 7 ('auto') (line 126204)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLE; 7 ('LTR') (line 126204)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLE; 7 ('RTL') (line 126204)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLO; 7 ('auto') (line 126205)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLO; 7 ('LTR') (line 126205)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET RLO; 7 ('RTL') (line 126205)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_008)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE L ET PDF; 7 ('auto') (line 126206)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET PDF; 7 ('LTR') (line 126206)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET PDF; 7 ('RTL') (line 126206)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET BN; 7 ('auto') (line 126207)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET BN; 7 ('LTR') (line 126207)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ET BN; 7 ('RTL') (line 126207)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRE; 7 ('auto') (line 126208)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRE; 7 ('LTR') (line 126208)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRE; 7 ('RTL') (line 126208)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRO; 7 ('auto') (line 126209)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRO; 7 ('LTR') (line 126209)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS LRO; 7 ('RTL') (line 126209)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLE; 7 ('auto') (line 126210)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLE; 7 ('LTR') (line 126210)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLE; 7 ('RTL') (line 126210)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLO; 7 ('auto') (line 126211)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLO; 7 ('LTR') (line 126211)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS RLO; 7 ('RTL') (line 126211)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS PDF; 7 ('auto') (line 126212)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS PDF; 7 ('LTR') (line 126212)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS PDF; 7 ('RTL') (line 126212)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS BN; 7 ('auto') (line 126213)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS BN; 7 ('LTR') (line 126213)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L CS BN; 7 ('RTL') (line 126213)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRE; 7 ('auto') (line 126214)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRE; 7 ('LTR') (line 126214)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRE; 7 ('RTL') (line 126214)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRO; 7 ('auto') (line 126215)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRO; 7 ('LTR') (line 126215)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM LRO; 7 ('RTL') (line 126215)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLE; 7 ('auto') (line 126216)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLE; 7 ('LTR') (line 126216)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLE; 7 ('RTL') (line 126216)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLO; 7 ('auto') (line 126217)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLO; 7 ('LTR') (line 126217)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM RLO; 7 ('RTL') (line 126217)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM PDF; 7 ('auto') (line 126218)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM PDF; 7 ('LTR') (line 126218)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM PDF; 7 ('RTL') (line 126218)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM BN; 7 ('auto') (line 126219)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM BN; 7 ('LTR') (line 126219)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L NSM BN; 7 ('RTL') (line 126219)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRE; 7 ('auto') (line 126220)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRE; 7 ('LTR') (line 126220)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRE; 7 ('RTL') (line 126220)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRO; 7 ('auto') (line 126221)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRO; 7 ('LTR') (line 126221)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON LRO; 7 ('RTL') (line 126221)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLE; 7 ('auto') (line 126222)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLE; 7 ('LTR') (line 126222)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLE; 7 ('RTL') (line 126222)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLO; 7 ('auto') (line 126223)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLO; 7 ('LTR') (line 126223)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON RLO; 7 ('RTL') (line 126223)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON PDF; 7 ('auto') (line 126224)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON PDF; 7 ('LTR') (line 126224)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON PDF; 7 ('RTL') (line 126224)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON BN; 7 ('auto') (line 126225)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON BN; 7 ('LTR') (line 126225)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE L ON BN; 7 ('RTL') (line 126225)
        std::vector<uint32_t> const cps = { 0x202A, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRE; 7 ('auto') (line 126226)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRE; 7 ('LTR') (line 126226)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRE; 7 ('RTL') (line 126226)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRO; 7 ('auto') (line 126227)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRO; 7 ('LTR') (line 126227)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L LRO; 7 ('RTL') (line 126227)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLE; 7 ('auto') (line 126228)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLE; 7 ('LTR') (line 126228)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLE; 7 ('RTL') (line 126228)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLO; 7 ('auto') (line 126229)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLO; 7 ('LTR') (line 126229)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L RLO; 7 ('RTL') (line 126229)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L PDF; 7 ('auto') (line 126230)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L PDF; 7 ('LTR') (line 126230)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L PDF; 7 ('RTL') (line 126230)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_009)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE EN L BN; 7 ('auto') (line 126231)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L BN; 7 ('LTR') (line 126231)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN L BN; 7 ('RTL') (line 126231)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRE; 7 ('auto') (line 126232)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRE; 7 ('LTR') (line 126232)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRE; 7 ('RTL') (line 126232)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRO; 7 ('auto') (line 126233)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRO; 7 ('LTR') (line 126233)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN LRO; 7 ('RTL') (line 126233)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLE; 7 ('auto') (line 126234)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLE; 7 ('LTR') (line 126234)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLE; 7 ('RTL') (line 126234)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLO; 7 ('auto') (line 126235)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLO; 7 ('LTR') (line 126235)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN RLO; 7 ('RTL') (line 126235)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN PDF; 7 ('auto') (line 126236)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN PDF; 7 ('LTR') (line 126236)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN PDF; 7 ('RTL') (line 126236)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN BN; 7 ('auto') (line 126237)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN BN; 7 ('LTR') (line 126237)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN EN BN; 7 ('RTL') (line 126237)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRE; 7 ('auto') (line 126238)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRE; 7 ('LTR') (line 126238)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRE; 7 ('RTL') (line 126238)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRO; 7 ('auto') (line 126239)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRO; 7 ('LTR') (line 126239)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES LRO; 7 ('RTL') (line 126239)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLE; 7 ('auto') (line 126240)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLE; 7 ('LTR') (line 126240)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLE; 7 ('RTL') (line 126240)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLO; 7 ('auto') (line 126241)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLO; 7 ('LTR') (line 126241)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES RLO; 7 ('RTL') (line 126241)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES PDF; 7 ('auto') (line 126242)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES PDF; 7 ('LTR') (line 126242)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES PDF; 7 ('RTL') (line 126242)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES BN; 7 ('auto') (line 126243)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES BN; 7 ('LTR') (line 126243)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ES BN; 7 ('RTL') (line 126243)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRE; 7 ('auto') (line 126244)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRE; 7 ('LTR') (line 126244)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRE; 7 ('RTL') (line 126244)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRO; 7 ('auto') (line 126245)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRO; 7 ('LTR') (line 126245)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET LRO; 7 ('RTL') (line 126245)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLE; 7 ('auto') (line 126246)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLE; 7 ('LTR') (line 126246)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLE; 7 ('RTL') (line 126246)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLO; 7 ('auto') (line 126247)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLO; 7 ('LTR') (line 126247)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET RLO; 7 ('RTL') (line 126247)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET PDF; 7 ('auto') (line 126248)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET PDF; 7 ('LTR') (line 126248)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET PDF; 7 ('RTL') (line 126248)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET BN; 7 ('auto') (line 126249)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET BN; 7 ('LTR') (line 126249)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ET BN; 7 ('RTL') (line 126249)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRE; 7 ('auto') (line 126250)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRE; 7 ('LTR') (line 126250)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRE; 7 ('RTL') (line 126250)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRO; 7 ('auto') (line 126251)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRO; 7 ('LTR') (line 126251)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS LRO; 7 ('RTL') (line 126251)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLE; 7 ('auto') (line 126252)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLE; 7 ('LTR') (line 126252)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLE; 7 ('RTL') (line 126252)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLO; 7 ('auto') (line 126253)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLO; 7 ('LTR') (line 126253)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS RLO; 7 ('RTL') (line 126253)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS PDF; 7 ('auto') (line 126254)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS PDF; 7 ('LTR') (line 126254)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS PDF; 7 ('RTL') (line 126254)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS BN; 7 ('auto') (line 126255)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS BN; 7 ('LTR') (line 126255)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN CS BN; 7 ('RTL') (line 126255)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_010)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE EN NSM LRE; 7 ('auto') (line 126256)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM LRE; 7 ('LTR') (line 126256)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM LRE; 7 ('RTL') (line 126256)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM LRO; 7 ('auto') (line 126257)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM LRO; 7 ('LTR') (line 126257)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM LRO; 7 ('RTL') (line 126257)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLE; 7 ('auto') (line 126258)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLE; 7 ('LTR') (line 126258)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLE; 7 ('RTL') (line 126258)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLO; 7 ('auto') (line 126259)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLO; 7 ('LTR') (line 126259)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM RLO; 7 ('RTL') (line 126259)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM PDF; 7 ('auto') (line 126260)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM PDF; 7 ('LTR') (line 126260)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM PDF; 7 ('RTL') (line 126260)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM BN; 7 ('auto') (line 126261)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM BN; 7 ('LTR') (line 126261)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN NSM BN; 7 ('RTL') (line 126261)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRE; 7 ('auto') (line 126262)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRE; 7 ('LTR') (line 126262)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRE; 7 ('RTL') (line 126262)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRO; 7 ('auto') (line 126263)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRO; 7 ('LTR') (line 126263)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON LRO; 7 ('RTL') (line 126263)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLE; 7 ('auto') (line 126264)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLE; 7 ('LTR') (line 126264)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLE; 7 ('RTL') (line 126264)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLO; 7 ('auto') (line 126265)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLO; 7 ('LTR') (line 126265)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON RLO; 7 ('RTL') (line 126265)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON PDF; 7 ('auto') (line 126266)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON PDF; 7 ('LTR') (line 126266)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON PDF; 7 ('RTL') (line 126266)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON BN; 7 ('auto') (line 126267)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON BN; 7 ('LTR') (line 126267)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE EN ON BN; 7 ('RTL') (line 126267)
        std::vector<uint32_t> const cps = { 0x202A, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRE; 7 ('auto') (line 126268)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRE; 7 ('LTR') (line 126268)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRE; 7 ('RTL') (line 126268)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRO; 7 ('auto') (line 126269)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRO; 7 ('LTR') (line 126269)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L LRO; 7 ('RTL') (line 126269)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLE; 7 ('auto') (line 126270)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLE; 7 ('LTR') (line 126270)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLE; 7 ('RTL') (line 126270)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLO; 7 ('auto') (line 126271)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLO; 7 ('LTR') (line 126271)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L RLO; 7 ('RTL') (line 126271)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L PDF; 7 ('auto') (line 126272)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L PDF; 7 ('LTR') (line 126272)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L PDF; 7 ('RTL') (line 126272)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L BN; 7 ('auto') (line 126273)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L BN; 7 ('LTR') (line 126273)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES L BN; 7 ('RTL') (line 126273)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRE; 7 ('auto') (line 126274)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRE; 7 ('LTR') (line 126274)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRE; 7 ('RTL') (line 126274)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRO; 7 ('auto') (line 126275)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRO; 7 ('LTR') (line 126275)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN LRO; 7 ('RTL') (line 126275)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLE; 7 ('auto') (line 126276)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLE; 7 ('LTR') (line 126276)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLE; 7 ('RTL') (line 126276)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLO; 7 ('auto') (line 126277)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLO; 7 ('LTR') (line 126277)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN RLO; 7 ('RTL') (line 126277)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN PDF; 7 ('auto') (line 126278)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN PDF; 7 ('LTR') (line 126278)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN PDF; 7 ('RTL') (line 126278)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN BN; 7 ('auto') (line 126279)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN BN; 7 ('LTR') (line 126279)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES EN BN; 7 ('RTL') (line 126279)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES LRE; 7 ('auto') (line 126280)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES LRE; 7 ('LTR') (line 126280)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES LRE; 7 ('RTL') (line 126280)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_011)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE ES ES LRO; 7 ('auto') (line 126281)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES LRO; 7 ('LTR') (line 126281)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES LRO; 7 ('RTL') (line 126281)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLE; 7 ('auto') (line 126282)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLE; 7 ('LTR') (line 126282)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLE; 7 ('RTL') (line 126282)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLO; 7 ('auto') (line 126283)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLO; 7 ('LTR') (line 126283)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES RLO; 7 ('RTL') (line 126283)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES PDF; 7 ('auto') (line 126284)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES PDF; 7 ('LTR') (line 126284)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES PDF; 7 ('RTL') (line 126284)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES BN; 7 ('auto') (line 126285)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES BN; 7 ('LTR') (line 126285)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ES BN; 7 ('RTL') (line 126285)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRE; 7 ('auto') (line 126286)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRE; 7 ('LTR') (line 126286)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRE; 7 ('RTL') (line 126286)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRO; 7 ('auto') (line 126287)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRO; 7 ('LTR') (line 126287)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET LRO; 7 ('RTL') (line 126287)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLE; 7 ('auto') (line 126288)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLE; 7 ('LTR') (line 126288)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLE; 7 ('RTL') (line 126288)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLO; 7 ('auto') (line 126289)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLO; 7 ('LTR') (line 126289)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET RLO; 7 ('RTL') (line 126289)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET PDF; 7 ('auto') (line 126290)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET PDF; 7 ('LTR') (line 126290)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET PDF; 7 ('RTL') (line 126290)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET BN; 7 ('auto') (line 126291)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET BN; 7 ('LTR') (line 126291)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ET BN; 7 ('RTL') (line 126291)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRE; 7 ('auto') (line 126292)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRE; 7 ('LTR') (line 126292)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRE; 7 ('RTL') (line 126292)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRO; 7 ('auto') (line 126293)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRO; 7 ('LTR') (line 126293)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS LRO; 7 ('RTL') (line 126293)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLE; 7 ('auto') (line 126294)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLE; 7 ('LTR') (line 126294)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLE; 7 ('RTL') (line 126294)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLO; 7 ('auto') (line 126295)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLO; 7 ('LTR') (line 126295)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS RLO; 7 ('RTL') (line 126295)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS PDF; 7 ('auto') (line 126296)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS PDF; 7 ('LTR') (line 126296)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS PDF; 7 ('RTL') (line 126296)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS BN; 7 ('auto') (line 126297)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS BN; 7 ('LTR') (line 126297)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES CS BN; 7 ('RTL') (line 126297)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRE; 7 ('auto') (line 126298)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRE; 7 ('LTR') (line 126298)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRE; 7 ('RTL') (line 126298)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRO; 7 ('auto') (line 126299)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRO; 7 ('LTR') (line 126299)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM LRO; 7 ('RTL') (line 126299)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLE; 7 ('auto') (line 126300)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLE; 7 ('LTR') (line 126300)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLE; 7 ('RTL') (line 126300)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLO; 7 ('auto') (line 126301)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLO; 7 ('LTR') (line 126301)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM RLO; 7 ('RTL') (line 126301)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM PDF; 7 ('auto') (line 126302)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM PDF; 7 ('LTR') (line 126302)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM PDF; 7 ('RTL') (line 126302)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM BN; 7 ('auto') (line 126303)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM BN; 7 ('LTR') (line 126303)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES NSM BN; 7 ('RTL') (line 126303)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRE; 7 ('auto') (line 126304)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRE; 7 ('LTR') (line 126304)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRE; 7 ('RTL') (line 126304)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRO; 7 ('auto') (line 126305)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRO; 7 ('LTR') (line 126305)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON LRO; 7 ('RTL') (line 126305)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_012)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE ES ON RLE; 7 ('auto') (line 126306)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON RLE; 7 ('LTR') (line 126306)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON RLE; 7 ('RTL') (line 126306)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON RLO; 7 ('auto') (line 126307)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON RLO; 7 ('LTR') (line 126307)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON RLO; 7 ('RTL') (line 126307)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON PDF; 7 ('auto') (line 126308)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON PDF; 7 ('LTR') (line 126308)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON PDF; 7 ('RTL') (line 126308)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON BN; 7 ('auto') (line 126309)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON BN; 7 ('LTR') (line 126309)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ES ON BN; 7 ('RTL') (line 126309)
        std::vector<uint32_t> const cps = { 0x202A, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRE; 7 ('auto') (line 126310)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRE; 7 ('LTR') (line 126310)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRE; 7 ('RTL') (line 126310)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRO; 7 ('auto') (line 126311)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRO; 7 ('LTR') (line 126311)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L LRO; 7 ('RTL') (line 126311)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLE; 7 ('auto') (line 126312)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLE; 7 ('LTR') (line 126312)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLE; 7 ('RTL') (line 126312)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLO; 7 ('auto') (line 126313)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLO; 7 ('LTR') (line 126313)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L RLO; 7 ('RTL') (line 126313)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L PDF; 7 ('auto') (line 126314)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L PDF; 7 ('LTR') (line 126314)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L PDF; 7 ('RTL') (line 126314)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L BN; 7 ('auto') (line 126315)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L BN; 7 ('LTR') (line 126315)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET L BN; 7 ('RTL') (line 126315)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRE; 7 ('auto') (line 126316)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRE; 7 ('LTR') (line 126316)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRE; 7 ('RTL') (line 126316)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRO; 7 ('auto') (line 126317)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRO; 7 ('LTR') (line 126317)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN LRO; 7 ('RTL') (line 126317)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLE; 7 ('auto') (line 126318)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLE; 7 ('LTR') (line 126318)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLE; 7 ('RTL') (line 126318)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLO; 7 ('auto') (line 126319)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLO; 7 ('LTR') (line 126319)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN RLO; 7 ('RTL') (line 126319)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN PDF; 7 ('auto') (line 126320)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN PDF; 7 ('LTR') (line 126320)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN PDF; 7 ('RTL') (line 126320)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN BN; 7 ('auto') (line 126321)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN BN; 7 ('LTR') (line 126321)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET EN BN; 7 ('RTL') (line 126321)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRE; 7 ('auto') (line 126322)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRE; 7 ('LTR') (line 126322)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRE; 7 ('RTL') (line 126322)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRO; 7 ('auto') (line 126323)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRO; 7 ('LTR') (line 126323)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES LRO; 7 ('RTL') (line 126323)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLE; 7 ('auto') (line 126324)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLE; 7 ('LTR') (line 126324)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLE; 7 ('RTL') (line 126324)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLO; 7 ('auto') (line 126325)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLO; 7 ('LTR') (line 126325)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES RLO; 7 ('RTL') (line 126325)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES PDF; 7 ('auto') (line 126326)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES PDF; 7 ('LTR') (line 126326)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES PDF; 7 ('RTL') (line 126326)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES BN; 7 ('auto') (line 126327)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES BN; 7 ('LTR') (line 126327)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ES BN; 7 ('RTL') (line 126327)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRE; 7 ('auto') (line 126328)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRE; 7 ('LTR') (line 126328)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRE; 7 ('RTL') (line 126328)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRO; 7 ('auto') (line 126329)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRO; 7 ('LTR') (line 126329)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET LRO; 7 ('RTL') (line 126329)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET RLE; 7 ('auto') (line 126330)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET RLE; 7 ('LTR') (line 126330)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET RLE; 7 ('RTL') (line 126330)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_013)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE ET ET RLO; 7 ('auto') (line 126331)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET RLO; 7 ('LTR') (line 126331)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET RLO; 7 ('RTL') (line 126331)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET PDF; 7 ('auto') (line 126332)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET PDF; 7 ('LTR') (line 126332)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET PDF; 7 ('RTL') (line 126332)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET BN; 7 ('auto') (line 126333)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET BN; 7 ('LTR') (line 126333)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ET BN; 7 ('RTL') (line 126333)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRE; 7 ('auto') (line 126334)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRE; 7 ('LTR') (line 126334)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRE; 7 ('RTL') (line 126334)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRO; 7 ('auto') (line 126335)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRO; 7 ('LTR') (line 126335)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS LRO; 7 ('RTL') (line 126335)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLE; 7 ('auto') (line 126336)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLE; 7 ('LTR') (line 126336)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLE; 7 ('RTL') (line 126336)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLO; 7 ('auto') (line 126337)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLO; 7 ('LTR') (line 126337)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS RLO; 7 ('RTL') (line 126337)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS PDF; 7 ('auto') (line 126338)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS PDF; 7 ('LTR') (line 126338)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS PDF; 7 ('RTL') (line 126338)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS BN; 7 ('auto') (line 126339)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS BN; 7 ('LTR') (line 126339)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET CS BN; 7 ('RTL') (line 126339)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRE; 7 ('auto') (line 126340)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRE; 7 ('LTR') (line 126340)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRE; 7 ('RTL') (line 126340)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRO; 7 ('auto') (line 126341)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRO; 7 ('LTR') (line 126341)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM LRO; 7 ('RTL') (line 126341)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLE; 7 ('auto') (line 126342)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLE; 7 ('LTR') (line 126342)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLE; 7 ('RTL') (line 126342)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLO; 7 ('auto') (line 126343)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLO; 7 ('LTR') (line 126343)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM RLO; 7 ('RTL') (line 126343)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM PDF; 7 ('auto') (line 126344)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM PDF; 7 ('LTR') (line 126344)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM PDF; 7 ('RTL') (line 126344)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM BN; 7 ('auto') (line 126345)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM BN; 7 ('LTR') (line 126345)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET NSM BN; 7 ('RTL') (line 126345)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRE; 7 ('auto') (line 126346)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRE; 7 ('LTR') (line 126346)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRE; 7 ('RTL') (line 126346)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRO; 7 ('auto') (line 126347)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRO; 7 ('LTR') (line 126347)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON LRO; 7 ('RTL') (line 126347)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLE; 7 ('auto') (line 126348)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLE; 7 ('LTR') (line 126348)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLE; 7 ('RTL') (line 126348)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLO; 7 ('auto') (line 126349)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLO; 7 ('LTR') (line 126349)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON RLO; 7 ('RTL') (line 126349)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON PDF; 7 ('auto') (line 126350)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON PDF; 7 ('LTR') (line 126350)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON PDF; 7 ('RTL') (line 126350)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON BN; 7 ('auto') (line 126351)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON BN; 7 ('LTR') (line 126351)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ET ON BN; 7 ('RTL') (line 126351)
        std::vector<uint32_t> const cps = { 0x202A, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRE; 7 ('auto') (line 126352)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRE; 7 ('LTR') (line 126352)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRE; 7 ('RTL') (line 126352)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRO; 7 ('auto') (line 126353)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRO; 7 ('LTR') (line 126353)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L LRO; 7 ('RTL') (line 126353)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLE; 7 ('auto') (line 126354)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLE; 7 ('LTR') (line 126354)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLE; 7 ('RTL') (line 126354)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLO; 7 ('auto') (line 126355)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLO; 7 ('LTR') (line 126355)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L RLO; 7 ('RTL') (line 126355)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_014)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE CS L PDF; 7 ('auto') (line 126356)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L PDF; 7 ('LTR') (line 126356)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L PDF; 7 ('RTL') (line 126356)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L BN; 7 ('auto') (line 126357)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L BN; 7 ('LTR') (line 126357)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS L BN; 7 ('RTL') (line 126357)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRE; 7 ('auto') (line 126358)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRE; 7 ('LTR') (line 126358)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRE; 7 ('RTL') (line 126358)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRO; 7 ('auto') (line 126359)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRO; 7 ('LTR') (line 126359)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN LRO; 7 ('RTL') (line 126359)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLE; 7 ('auto') (line 126360)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLE; 7 ('LTR') (line 126360)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLE; 7 ('RTL') (line 126360)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLO; 7 ('auto') (line 126361)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLO; 7 ('LTR') (line 126361)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN RLO; 7 ('RTL') (line 126361)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN PDF; 7 ('auto') (line 126362)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN PDF; 7 ('LTR') (line 126362)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN PDF; 7 ('RTL') (line 126362)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN BN; 7 ('auto') (line 126363)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN BN; 7 ('LTR') (line 126363)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS EN BN; 7 ('RTL') (line 126363)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRE; 7 ('auto') (line 126364)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRE; 7 ('LTR') (line 126364)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRE; 7 ('RTL') (line 126364)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRO; 7 ('auto') (line 126365)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRO; 7 ('LTR') (line 126365)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES LRO; 7 ('RTL') (line 126365)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLE; 7 ('auto') (line 126366)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLE; 7 ('LTR') (line 126366)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLE; 7 ('RTL') (line 126366)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLO; 7 ('auto') (line 126367)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLO; 7 ('LTR') (line 126367)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES RLO; 7 ('RTL') (line 126367)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES PDF; 7 ('auto') (line 126368)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES PDF; 7 ('LTR') (line 126368)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES PDF; 7 ('RTL') (line 126368)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES BN; 7 ('auto') (line 126369)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES BN; 7 ('LTR') (line 126369)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ES BN; 7 ('RTL') (line 126369)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRE; 7 ('auto') (line 126370)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRE; 7 ('LTR') (line 126370)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRE; 7 ('RTL') (line 126370)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRO; 7 ('auto') (line 126371)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRO; 7 ('LTR') (line 126371)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET LRO; 7 ('RTL') (line 126371)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLE; 7 ('auto') (line 126372)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLE; 7 ('LTR') (line 126372)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLE; 7 ('RTL') (line 126372)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLO; 7 ('auto') (line 126373)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLO; 7 ('LTR') (line 126373)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET RLO; 7 ('RTL') (line 126373)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET PDF; 7 ('auto') (line 126374)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET PDF; 7 ('LTR') (line 126374)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET PDF; 7 ('RTL') (line 126374)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET BN; 7 ('auto') (line 126375)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET BN; 7 ('LTR') (line 126375)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ET BN; 7 ('RTL') (line 126375)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRE; 7 ('auto') (line 126376)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRE; 7 ('LTR') (line 126376)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRE; 7 ('RTL') (line 126376)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRO; 7 ('auto') (line 126377)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRO; 7 ('LTR') (line 126377)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS LRO; 7 ('RTL') (line 126377)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLE; 7 ('auto') (line 126378)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLE; 7 ('LTR') (line 126378)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLE; 7 ('RTL') (line 126378)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLO; 7 ('auto') (line 126379)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLO; 7 ('LTR') (line 126379)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS RLO; 7 ('RTL') (line 126379)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS PDF; 7 ('auto') (line 126380)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS PDF; 7 ('LTR') (line 126380)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS PDF; 7 ('RTL') (line 126380)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_015)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE CS CS BN; 7 ('auto') (line 126381)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS BN; 7 ('LTR') (line 126381)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS CS BN; 7 ('RTL') (line 126381)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRE; 7 ('auto') (line 126382)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRE; 7 ('LTR') (line 126382)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRE; 7 ('RTL') (line 126382)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRO; 7 ('auto') (line 126383)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRO; 7 ('LTR') (line 126383)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM LRO; 7 ('RTL') (line 126383)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLE; 7 ('auto') (line 126384)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLE; 7 ('LTR') (line 126384)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLE; 7 ('RTL') (line 126384)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLO; 7 ('auto') (line 126385)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLO; 7 ('LTR') (line 126385)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM RLO; 7 ('RTL') (line 126385)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM PDF; 7 ('auto') (line 126386)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM PDF; 7 ('LTR') (line 126386)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM PDF; 7 ('RTL') (line 126386)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM BN; 7 ('auto') (line 126387)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM BN; 7 ('LTR') (line 126387)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS NSM BN; 7 ('RTL') (line 126387)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRE; 7 ('auto') (line 126388)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRE; 7 ('LTR') (line 126388)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRE; 7 ('RTL') (line 126388)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRO; 7 ('auto') (line 126389)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRO; 7 ('LTR') (line 126389)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON LRO; 7 ('RTL') (line 126389)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLE; 7 ('auto') (line 126390)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLE; 7 ('LTR') (line 126390)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLE; 7 ('RTL') (line 126390)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLO; 7 ('auto') (line 126391)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLO; 7 ('LTR') (line 126391)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON RLO; 7 ('RTL') (line 126391)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON PDF; 7 ('auto') (line 126392)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON PDF; 7 ('LTR') (line 126392)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON PDF; 7 ('RTL') (line 126392)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON BN; 7 ('auto') (line 126393)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON BN; 7 ('LTR') (line 126393)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE CS ON BN; 7 ('RTL') (line 126393)
        std::vector<uint32_t> const cps = { 0x202A, 0x002C, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRE; 7 ('auto') (line 126394)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRE; 7 ('LTR') (line 126394)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRE; 7 ('RTL') (line 126394)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRO; 7 ('auto') (line 126395)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRO; 7 ('LTR') (line 126395)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L LRO; 7 ('RTL') (line 126395)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLE; 7 ('auto') (line 126396)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLE; 7 ('LTR') (line 126396)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLE; 7 ('RTL') (line 126396)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLO; 7 ('auto') (line 126397)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLO; 7 ('LTR') (line 126397)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L RLO; 7 ('RTL') (line 126397)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L PDF; 7 ('auto') (line 126398)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L PDF; 7 ('LTR') (line 126398)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L PDF; 7 ('RTL') (line 126398)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L BN; 7 ('auto') (line 126399)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L BN; 7 ('LTR') (line 126399)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM L BN; 7 ('RTL') (line 126399)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRE; 7 ('auto') (line 126400)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRE; 7 ('LTR') (line 126400)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRE; 7 ('RTL') (line 126400)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRO; 7 ('auto') (line 126401)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRO; 7 ('LTR') (line 126401)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN LRO; 7 ('RTL') (line 126401)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLE; 7 ('auto') (line 126402)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLE; 7 ('LTR') (line 126402)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLE; 7 ('RTL') (line 126402)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLO; 7 ('auto') (line 126403)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLO; 7 ('LTR') (line 126403)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN RLO; 7 ('RTL') (line 126403)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN PDF; 7 ('auto') (line 126404)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN PDF; 7 ('LTR') (line 126404)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN PDF; 7 ('RTL') (line 126404)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN BN; 7 ('auto') (line 126405)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN BN; 7 ('LTR') (line 126405)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM EN BN; 7 ('RTL') (line 126405)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_016)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE NSM ES LRE; 7 ('auto') (line 126406)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES LRE; 7 ('LTR') (line 126406)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES LRE; 7 ('RTL') (line 126406)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES LRO; 7 ('auto') (line 126407)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES LRO; 7 ('LTR') (line 126407)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES LRO; 7 ('RTL') (line 126407)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLE; 7 ('auto') (line 126408)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLE; 7 ('LTR') (line 126408)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLE; 7 ('RTL') (line 126408)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLO; 7 ('auto') (line 126409)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLO; 7 ('LTR') (line 126409)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES RLO; 7 ('RTL') (line 126409)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES PDF; 7 ('auto') (line 126410)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES PDF; 7 ('LTR') (line 126410)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES PDF; 7 ('RTL') (line 126410)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES BN; 7 ('auto') (line 126411)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES BN; 7 ('LTR') (line 126411)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ES BN; 7 ('RTL') (line 126411)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRE; 7 ('auto') (line 126412)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRE; 7 ('LTR') (line 126412)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRE; 7 ('RTL') (line 126412)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRO; 7 ('auto') (line 126413)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRO; 7 ('LTR') (line 126413)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET LRO; 7 ('RTL') (line 126413)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLE; 7 ('auto') (line 126414)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLE; 7 ('LTR') (line 126414)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLE; 7 ('RTL') (line 126414)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLO; 7 ('auto') (line 126415)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLO; 7 ('LTR') (line 126415)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET RLO; 7 ('RTL') (line 126415)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET PDF; 7 ('auto') (line 126416)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET PDF; 7 ('LTR') (line 126416)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET PDF; 7 ('RTL') (line 126416)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET BN; 7 ('auto') (line 126417)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET BN; 7 ('LTR') (line 126417)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ET BN; 7 ('RTL') (line 126417)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRE; 7 ('auto') (line 126418)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRE; 7 ('LTR') (line 126418)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRE; 7 ('RTL') (line 126418)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRO; 7 ('auto') (line 126419)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRO; 7 ('LTR') (line 126419)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS LRO; 7 ('RTL') (line 126419)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLE; 7 ('auto') (line 126420)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLE; 7 ('LTR') (line 126420)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLE; 7 ('RTL') (line 126420)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLO; 7 ('auto') (line 126421)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLO; 7 ('LTR') (line 126421)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS RLO; 7 ('RTL') (line 126421)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS PDF; 7 ('auto') (line 126422)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS PDF; 7 ('LTR') (line 126422)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS PDF; 7 ('RTL') (line 126422)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS BN; 7 ('auto') (line 126423)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS BN; 7 ('LTR') (line 126423)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM CS BN; 7 ('RTL') (line 126423)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRE; 7 ('auto') (line 126424)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRE; 7 ('LTR') (line 126424)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRE; 7 ('RTL') (line 126424)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRO; 7 ('auto') (line 126425)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRO; 7 ('LTR') (line 126425)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM LRO; 7 ('RTL') (line 126425)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLE; 7 ('auto') (line 126426)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLE; 7 ('LTR') (line 126426)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLE; 7 ('RTL') (line 126426)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLO; 7 ('auto') (line 126427)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLO; 7 ('LTR') (line 126427)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM RLO; 7 ('RTL') (line 126427)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM PDF; 7 ('auto') (line 126428)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM PDF; 7 ('LTR') (line 126428)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM PDF; 7 ('RTL') (line 126428)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM BN; 7 ('auto') (line 126429)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM BN; 7 ('LTR') (line 126429)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM NSM BN; 7 ('RTL') (line 126429)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON LRE; 7 ('auto') (line 126430)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON LRE; 7 ('LTR') (line 126430)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON LRE; 7 ('RTL') (line 126430)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_017)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE NSM ON LRO; 7 ('auto') (line 126431)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON LRO; 7 ('LTR') (line 126431)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON LRO; 7 ('RTL') (line 126431)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLE; 7 ('auto') (line 126432)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLE; 7 ('LTR') (line 126432)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLE; 7 ('RTL') (line 126432)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLO; 7 ('auto') (line 126433)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLO; 7 ('LTR') (line 126433)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON RLO; 7 ('RTL') (line 126433)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON PDF; 7 ('auto') (line 126434)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON PDF; 7 ('LTR') (line 126434)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON PDF; 7 ('RTL') (line 126434)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON BN; 7 ('auto') (line 126435)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON BN; 7 ('LTR') (line 126435)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE NSM ON BN; 7 ('RTL') (line 126435)
        std::vector<uint32_t> const cps = { 0x202A, 0x0300, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRE; 7 ('auto') (line 126436)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRE; 7 ('LTR') (line 126436)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRE; 7 ('RTL') (line 126436)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRO; 7 ('auto') (line 126437)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRO; 7 ('LTR') (line 126437)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L LRO; 7 ('RTL') (line 126437)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLE; 7 ('auto') (line 126438)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLE; 7 ('LTR') (line 126438)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLE; 7 ('RTL') (line 126438)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLO; 7 ('auto') (line 126439)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLO; 7 ('LTR') (line 126439)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L RLO; 7 ('RTL') (line 126439)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L PDF; 7 ('auto') (line 126440)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L PDF; 7 ('LTR') (line 126440)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L PDF; 7 ('RTL') (line 126440)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L BN; 7 ('auto') (line 126441)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L BN; 7 ('LTR') (line 126441)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS L BN; 7 ('RTL') (line 126441)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRE; 7 ('auto') (line 126442)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRE; 7 ('LTR') (line 126442)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRE; 7 ('RTL') (line 126442)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRO; 7 ('auto') (line 126443)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRO; 7 ('LTR') (line 126443)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN LRO; 7 ('RTL') (line 126443)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLE; 7 ('auto') (line 126444)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLE; 7 ('LTR') (line 126444)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLE; 7 ('RTL') (line 126444)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLO; 7 ('auto') (line 126445)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLO; 7 ('LTR') (line 126445)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN RLO; 7 ('RTL') (line 126445)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN PDF; 7 ('auto') (line 126446)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN PDF; 7 ('LTR') (line 126446)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN PDF; 7 ('RTL') (line 126446)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN BN; 7 ('auto') (line 126447)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN BN; 7 ('LTR') (line 126447)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS EN BN; 7 ('RTL') (line 126447)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRE; 7 ('auto') (line 126448)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRE; 7 ('LTR') (line 126448)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRE; 7 ('RTL') (line 126448)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRO; 7 ('auto') (line 126449)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRO; 7 ('LTR') (line 126449)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES LRO; 7 ('RTL') (line 126449)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLE; 7 ('auto') (line 126450)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLE; 7 ('LTR') (line 126450)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLE; 7 ('RTL') (line 126450)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLO; 7 ('auto') (line 126451)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLO; 7 ('LTR') (line 126451)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES RLO; 7 ('RTL') (line 126451)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES PDF; 7 ('auto') (line 126452)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES PDF; 7 ('LTR') (line 126452)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES PDF; 7 ('RTL') (line 126452)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES BN; 7 ('auto') (line 126453)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES BN; 7 ('LTR') (line 126453)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ES BN; 7 ('RTL') (line 126453)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRE; 7 ('auto') (line 126454)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRE; 7 ('LTR') (line 126454)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRE; 7 ('RTL') (line 126454)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRO; 7 ('auto') (line 126455)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRO; 7 ('LTR') (line 126455)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET LRO; 7 ('RTL') (line 126455)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_018)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE WS ET RLE; 7 ('auto') (line 126456)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET RLE; 7 ('LTR') (line 126456)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET RLE; 7 ('RTL') (line 126456)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET RLO; 7 ('auto') (line 126457)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET RLO; 7 ('LTR') (line 126457)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET RLO; 7 ('RTL') (line 126457)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET PDF; 7 ('auto') (line 126458)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET PDF; 7 ('LTR') (line 126458)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET PDF; 7 ('RTL') (line 126458)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET BN; 7 ('auto') (line 126459)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET BN; 7 ('LTR') (line 126459)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ET BN; 7 ('RTL') (line 126459)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRE; 7 ('auto') (line 126460)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRE; 7 ('LTR') (line 126460)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRE; 7 ('RTL') (line 126460)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRO; 7 ('auto') (line 126461)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRO; 7 ('LTR') (line 126461)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS LRO; 7 ('RTL') (line 126461)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLE; 7 ('auto') (line 126462)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLE; 7 ('LTR') (line 126462)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLE; 7 ('RTL') (line 126462)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLO; 7 ('auto') (line 126463)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLO; 7 ('LTR') (line 126463)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS RLO; 7 ('RTL') (line 126463)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS PDF; 7 ('auto') (line 126464)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS PDF; 7 ('LTR') (line 126464)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS PDF; 7 ('RTL') (line 126464)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS BN; 7 ('auto') (line 126465)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS BN; 7 ('LTR') (line 126465)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS CS BN; 7 ('RTL') (line 126465)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRE; 7 ('auto') (line 126466)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRE; 7 ('LTR') (line 126466)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRE; 7 ('RTL') (line 126466)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRO; 7 ('auto') (line 126467)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRO; 7 ('LTR') (line 126467)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM LRO; 7 ('RTL') (line 126467)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLE; 7 ('auto') (line 126468)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLE; 7 ('LTR') (line 126468)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLE; 7 ('RTL') (line 126468)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLO; 7 ('auto') (line 126469)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLO; 7 ('LTR') (line 126469)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM RLO; 7 ('RTL') (line 126469)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM PDF; 7 ('auto') (line 126470)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM PDF; 7 ('LTR') (line 126470)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM PDF; 7 ('RTL') (line 126470)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM BN; 7 ('auto') (line 126471)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM BN; 7 ('LTR') (line 126471)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS NSM BN; 7 ('RTL') (line 126471)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRE; 7 ('auto') (line 126472)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRE; 7 ('LTR') (line 126472)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRE; 7 ('RTL') (line 126472)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRO; 7 ('auto') (line 126473)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRO; 7 ('LTR') (line 126473)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON LRO; 7 ('RTL') (line 126473)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLE; 7 ('auto') (line 126474)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLE; 7 ('LTR') (line 126474)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLE; 7 ('RTL') (line 126474)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLO; 7 ('auto') (line 126475)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLO; 7 ('LTR') (line 126475)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON RLO; 7 ('RTL') (line 126475)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON PDF; 7 ('auto') (line 126476)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON PDF; 7 ('LTR') (line 126476)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON PDF; 7 ('RTL') (line 126476)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON BN; 7 ('auto') (line 126477)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON BN; 7 ('LTR') (line 126477)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE WS ON BN; 7 ('RTL') (line 126477)
        std::vector<uint32_t> const cps = { 0x202A, 0x0020, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRE; 7 ('auto') (line 126478)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRE; 7 ('LTR') (line 126478)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRE; 7 ('RTL') (line 126478)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRO; 7 ('auto') (line 126479)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRO; 7 ('LTR') (line 126479)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L LRO; 7 ('RTL') (line 126479)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L RLE; 7 ('auto') (line 126480)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L RLE; 7 ('LTR') (line 126480)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L RLE; 7 ('RTL') (line 126480)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_019)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE ON L RLO; 7 ('auto') (line 126481)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L RLO; 7 ('LTR') (line 126481)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L RLO; 7 ('RTL') (line 126481)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L PDF; 7 ('auto') (line 126482)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L PDF; 7 ('LTR') (line 126482)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L PDF; 7 ('RTL') (line 126482)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L BN; 7 ('auto') (line 126483)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L BN; 7 ('LTR') (line 126483)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON L BN; 7 ('RTL') (line 126483)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRE; 7 ('auto') (line 126484)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRE; 7 ('LTR') (line 126484)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRE; 7 ('RTL') (line 126484)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRO; 7 ('auto') (line 126485)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRO; 7 ('LTR') (line 126485)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN LRO; 7 ('RTL') (line 126485)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLE; 7 ('auto') (line 126486)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLE; 7 ('LTR') (line 126486)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLE; 7 ('RTL') (line 126486)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLO; 7 ('auto') (line 126487)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLO; 7 ('LTR') (line 126487)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN RLO; 7 ('RTL') (line 126487)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN PDF; 7 ('auto') (line 126488)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN PDF; 7 ('LTR') (line 126488)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN PDF; 7 ('RTL') (line 126488)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN BN; 7 ('auto') (line 126489)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN BN; 7 ('LTR') (line 126489)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON EN BN; 7 ('RTL') (line 126489)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRE; 7 ('auto') (line 126490)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRE; 7 ('LTR') (line 126490)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRE; 7 ('RTL') (line 126490)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRO; 7 ('auto') (line 126491)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRO; 7 ('LTR') (line 126491)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES LRO; 7 ('RTL') (line 126491)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLE; 7 ('auto') (line 126492)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLE; 7 ('LTR') (line 126492)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLE; 7 ('RTL') (line 126492)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLO; 7 ('auto') (line 126493)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLO; 7 ('LTR') (line 126493)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES RLO; 7 ('RTL') (line 126493)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES PDF; 7 ('auto') (line 126494)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES PDF; 7 ('LTR') (line 126494)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES PDF; 7 ('RTL') (line 126494)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES BN; 7 ('auto') (line 126495)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES BN; 7 ('LTR') (line 126495)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ES BN; 7 ('RTL') (line 126495)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRE; 7 ('auto') (line 126496)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRE; 7 ('LTR') (line 126496)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRE; 7 ('RTL') (line 126496)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRO; 7 ('auto') (line 126497)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRO; 7 ('LTR') (line 126497)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET LRO; 7 ('RTL') (line 126497)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLE; 7 ('auto') (line 126498)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLE; 7 ('LTR') (line 126498)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLE; 7 ('RTL') (line 126498)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLO; 7 ('auto') (line 126499)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLO; 7 ('LTR') (line 126499)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET RLO; 7 ('RTL') (line 126499)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET PDF; 7 ('auto') (line 126500)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET PDF; 7 ('LTR') (line 126500)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET PDF; 7 ('RTL') (line 126500)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET BN; 7 ('auto') (line 126501)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET BN; 7 ('LTR') (line 126501)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ET BN; 7 ('RTL') (line 126501)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRE; 7 ('auto') (line 126502)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRE; 7 ('LTR') (line 126502)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRE; 7 ('RTL') (line 126502)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRO; 7 ('auto') (line 126503)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRO; 7 ('LTR') (line 126503)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS LRO; 7 ('RTL') (line 126503)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLE; 7 ('auto') (line 126504)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLE; 7 ('LTR') (line 126504)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLE; 7 ('RTL') (line 126504)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLO; 7 ('auto') (line 126505)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLO; 7 ('LTR') (line 126505)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS RLO; 7 ('RTL') (line 126505)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_020)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE ON CS PDF; 7 ('auto') (line 126506)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS PDF; 7 ('LTR') (line 126506)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS PDF; 7 ('RTL') (line 126506)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS BN; 7 ('auto') (line 126507)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS BN; 7 ('LTR') (line 126507)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON CS BN; 7 ('RTL') (line 126507)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRE; 7 ('auto') (line 126508)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRE; 7 ('LTR') (line 126508)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRE; 7 ('RTL') (line 126508)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRO; 7 ('auto') (line 126509)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRO; 7 ('LTR') (line 126509)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM LRO; 7 ('RTL') (line 126509)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLE; 7 ('auto') (line 126510)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLE; 7 ('LTR') (line 126510)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLE; 7 ('RTL') (line 126510)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLO; 7 ('auto') (line 126511)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLO; 7 ('LTR') (line 126511)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM RLO; 7 ('RTL') (line 126511)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM PDF; 7 ('auto') (line 126512)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM PDF; 7 ('LTR') (line 126512)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM PDF; 7 ('RTL') (line 126512)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM BN; 7 ('auto') (line 126513)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM BN; 7 ('LTR') (line 126513)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON NSM BN; 7 ('RTL') (line 126513)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRE; 7 ('auto') (line 126514)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRE; 7 ('LTR') (line 126514)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRE; 7 ('RTL') (line 126514)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRO; 7 ('auto') (line 126515)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRO; 7 ('LTR') (line 126515)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON LRO; 7 ('RTL') (line 126515)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLE; 7 ('auto') (line 126516)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLE; 7 ('LTR') (line 126516)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLE; 7 ('RTL') (line 126516)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLO; 7 ('auto') (line 126517)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLO; 7 ('LTR') (line 126517)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON RLO; 7 ('RTL') (line 126517)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON PDF; 7 ('auto') (line 126518)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON PDF; 7 ('LTR') (line 126518)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON PDF; 7 ('RTL') (line 126518)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON BN; 7 ('auto') (line 126519)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON BN; 7 ('LTR') (line 126519)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE ON ON BN; 7 ('RTL') (line 126519)
        std::vector<uint32_t> const cps = { 0x202A, 0x0021, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRE; 7 ('auto') (line 126520)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRE; 7 ('LTR') (line 126520)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRE; 7 ('RTL') (line 126520)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRO; 7 ('auto') (line 126521)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRO; 7 ('LTR') (line 126521)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L LRO; 7 ('RTL') (line 126521)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLE; 7 ('auto') (line 126522)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLE; 7 ('LTR') (line 126522)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLE; 7 ('RTL') (line 126522)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLO; 7 ('auto') (line 126523)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLO; 7 ('LTR') (line 126523)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L RLO; 7 ('RTL') (line 126523)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L PDF; 7 ('auto') (line 126524)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L PDF; 7 ('LTR') (line 126524)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L PDF; 7 ('RTL') (line 126524)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L BN; 7 ('auto') (line 126525)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L BN; 7 ('LTR') (line 126525)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI L BN; 7 ('RTL') (line 126525)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRE; 7 ('auto') (line 126526)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRE; 7 ('LTR') (line 126526)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRE; 7 ('RTL') (line 126526)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRO; 7 ('auto') (line 126527)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRO; 7 ('LTR') (line 126527)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN LRO; 7 ('RTL') (line 126527)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLE; 7 ('auto') (line 126528)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLE; 7 ('LTR') (line 126528)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLE; 7 ('RTL') (line 126528)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLO; 7 ('auto') (line 126529)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLO; 7 ('LTR') (line 126529)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN RLO; 7 ('RTL') (line 126529)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN PDF; 7 ('auto') (line 126530)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN PDF; 7 ('LTR') (line 126530)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN PDF; 7 ('RTL') (line 126530)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_021)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE PDI EN BN; 7 ('auto') (line 126531)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN BN; 7 ('LTR') (line 126531)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI EN BN; 7 ('RTL') (line 126531)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRE; 7 ('auto') (line 126532)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRE; 7 ('LTR') (line 126532)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRE; 7 ('RTL') (line 126532)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRO; 7 ('auto') (line 126533)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRO; 7 ('LTR') (line 126533)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES LRO; 7 ('RTL') (line 126533)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLE; 7 ('auto') (line 126534)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLE; 7 ('LTR') (line 126534)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLE; 7 ('RTL') (line 126534)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLO; 7 ('auto') (line 126535)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLO; 7 ('LTR') (line 126535)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES RLO; 7 ('RTL') (line 126535)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES PDF; 7 ('auto') (line 126536)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES PDF; 7 ('LTR') (line 126536)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES PDF; 7 ('RTL') (line 126536)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES BN; 7 ('auto') (line 126537)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES BN; 7 ('LTR') (line 126537)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ES BN; 7 ('RTL') (line 126537)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRE; 7 ('auto') (line 126538)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRE; 7 ('LTR') (line 126538)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRE; 7 ('RTL') (line 126538)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRO; 7 ('auto') (line 126539)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRO; 7 ('LTR') (line 126539)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET LRO; 7 ('RTL') (line 126539)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLE; 7 ('auto') (line 126540)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLE; 7 ('LTR') (line 126540)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLE; 7 ('RTL') (line 126540)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLO; 7 ('auto') (line 126541)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLO; 7 ('LTR') (line 126541)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET RLO; 7 ('RTL') (line 126541)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET PDF; 7 ('auto') (line 126542)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET PDF; 7 ('LTR') (line 126542)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET PDF; 7 ('RTL') (line 126542)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET BN; 7 ('auto') (line 126543)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET BN; 7 ('LTR') (line 126543)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ET BN; 7 ('RTL') (line 126543)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRE; 7 ('auto') (line 126544)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRE; 7 ('LTR') (line 126544)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRE; 7 ('RTL') (line 126544)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRO; 7 ('auto') (line 126545)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRO; 7 ('LTR') (line 126545)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS LRO; 7 ('RTL') (line 126545)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLE; 7 ('auto') (line 126546)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLE; 7 ('LTR') (line 126546)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLE; 7 ('RTL') (line 126546)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLO; 7 ('auto') (line 126547)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLO; 7 ('LTR') (line 126547)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS RLO; 7 ('RTL') (line 126547)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS PDF; 7 ('auto') (line 126548)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS PDF; 7 ('LTR') (line 126548)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS PDF; 7 ('RTL') (line 126548)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS BN; 7 ('auto') (line 126549)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS BN; 7 ('LTR') (line 126549)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI CS BN; 7 ('RTL') (line 126549)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRE; 7 ('auto') (line 126550)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRE; 7 ('LTR') (line 126550)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRE; 7 ('RTL') (line 126550)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRO; 7 ('auto') (line 126551)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRO; 7 ('LTR') (line 126551)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM LRO; 7 ('RTL') (line 126551)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLE; 7 ('auto') (line 126552)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLE; 7 ('LTR') (line 126552)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLE; 7 ('RTL') (line 126552)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLO; 7 ('auto') (line 126553)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLO; 7 ('LTR') (line 126553)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM RLO; 7 ('RTL') (line 126553)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM PDF; 7 ('auto') (line 126554)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM PDF; 7 ('LTR') (line 126554)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM PDF; 7 ('RTL') (line 126554)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM BN; 7 ('auto') (line 126555)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM BN; 7 ('LTR') (line 126555)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI NSM BN; 7 ('RTL') (line 126555)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_022)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRE PDI ON LRE; 7 ('auto') (line 126556)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON LRE; 7 ('LTR') (line 126556)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON LRE; 7 ('RTL') (line 126556)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON LRO; 7 ('auto') (line 126557)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON LRO; 7 ('LTR') (line 126557)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON LRO; 7 ('RTL') (line 126557)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLE; 7 ('auto') (line 126558)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLE; 7 ('LTR') (line 126558)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLE; 7 ('RTL') (line 126558)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLO; 7 ('auto') (line 126559)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLO; 7 ('LTR') (line 126559)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON RLO; 7 ('RTL') (line 126559)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON PDF; 7 ('auto') (line 126560)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON PDF; 7 ('LTR') (line 126560)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON PDF; 7 ('RTL') (line 126560)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON BN; 7 ('auto') (line 126561)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON BN; 7 ('LTR') (line 126561)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRE PDI ON BN; 7 ('RTL') (line 126561)
        std::vector<uint32_t> const cps = { 0x202A, 0x2069, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRE; 7 ('auto') (line 126562)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRE; 7 ('LTR') (line 126562)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRE; 7 ('RTL') (line 126562)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRO; 7 ('auto') (line 126563)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRO; 7 ('LTR') (line 126563)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L LRO; 7 ('RTL') (line 126563)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLE; 7 ('auto') (line 126564)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLE; 7 ('LTR') (line 126564)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLE; 7 ('RTL') (line 126564)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLO; 7 ('auto') (line 126565)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLO; 7 ('LTR') (line 126565)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L RLO; 7 ('RTL') (line 126565)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L PDF; 7 ('auto') (line 126566)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L PDF; 7 ('LTR') (line 126566)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L PDF; 7 ('RTL') (line 126566)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L BN; 7 ('auto') (line 126567)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L BN; 7 ('LTR') (line 126567)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L L BN; 7 ('RTL') (line 126567)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRE; 7 ('auto') (line 126568)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRE; 7 ('LTR') (line 126568)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRE; 7 ('RTL') (line 126568)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRO; 7 ('auto') (line 126569)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRO; 7 ('LTR') (line 126569)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R LRO; 7 ('RTL') (line 126569)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLE; 7 ('auto') (line 126570)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLE; 7 ('LTR') (line 126570)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLE; 7 ('RTL') (line 126570)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLO; 7 ('auto') (line 126571)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLO; 7 ('LTR') (line 126571)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R RLO; 7 ('RTL') (line 126571)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R PDF; 7 ('auto') (line 126572)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R PDF; 7 ('LTR') (line 126572)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R PDF; 7 ('RTL') (line 126572)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R BN; 7 ('auto') (line 126573)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R BN; 7 ('LTR') (line 126573)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L R BN; 7 ('RTL') (line 126573)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRE; 7 ('auto') (line 126574)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRE; 7 ('LTR') (line 126574)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRE; 7 ('RTL') (line 126574)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRO; 7 ('auto') (line 126575)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRO; 7 ('LTR') (line 126575)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL LRO; 7 ('RTL') (line 126575)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLE; 7 ('auto') (line 126576)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLE; 7 ('LTR') (line 126576)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLE; 7 ('RTL') (line 126576)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLO; 7 ('auto') (line 126577)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLO; 7 ('LTR') (line 126577)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL RLO; 7 ('RTL') (line 126577)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL PDF; 7 ('auto') (line 126578)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL PDF; 7 ('LTR') (line 126578)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL PDF; 7 ('RTL') (line 126578)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL BN; 7 ('auto') (line 126579)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL BN; 7 ('LTR') (line 126579)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AL BN; 7 ('RTL') (line 126579)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN LRE; 7 ('auto') (line 126580)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN LRE; 7 ('LTR') (line 126580)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN LRE; 7 ('RTL') (line 126580)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_023)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO L EN LRO; 7 ('auto') (line 126581)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN LRO; 7 ('LTR') (line 126581)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN LRO; 7 ('RTL') (line 126581)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLE; 7 ('auto') (line 126582)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLE; 7 ('LTR') (line 126582)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLE; 7 ('RTL') (line 126582)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLO; 7 ('auto') (line 126583)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLO; 7 ('LTR') (line 126583)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN RLO; 7 ('RTL') (line 126583)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN PDF; 7 ('auto') (line 126584)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN PDF; 7 ('LTR') (line 126584)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN PDF; 7 ('RTL') (line 126584)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN BN; 7 ('auto') (line 126585)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN BN; 7 ('LTR') (line 126585)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L EN BN; 7 ('RTL') (line 126585)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRE; 7 ('auto') (line 126586)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRE; 7 ('LTR') (line 126586)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRE; 7 ('RTL') (line 126586)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRO; 7 ('auto') (line 126587)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRO; 7 ('LTR') (line 126587)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES LRO; 7 ('RTL') (line 126587)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLE; 7 ('auto') (line 126588)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLE; 7 ('LTR') (line 126588)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLE; 7 ('RTL') (line 126588)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLO; 7 ('auto') (line 126589)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLO; 7 ('LTR') (line 126589)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES RLO; 7 ('RTL') (line 126589)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES PDF; 7 ('auto') (line 126590)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES PDF; 7 ('LTR') (line 126590)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES PDF; 7 ('RTL') (line 126590)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES BN; 7 ('auto') (line 126591)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES BN; 7 ('LTR') (line 126591)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ES BN; 7 ('RTL') (line 126591)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRE; 7 ('auto') (line 126592)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRE; 7 ('LTR') (line 126592)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRE; 7 ('RTL') (line 126592)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRO; 7 ('auto') (line 126593)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRO; 7 ('LTR') (line 126593)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET LRO; 7 ('RTL') (line 126593)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLE; 7 ('auto') (line 126594)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLE; 7 ('LTR') (line 126594)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLE; 7 ('RTL') (line 126594)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLO; 7 ('auto') (line 126595)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLO; 7 ('LTR') (line 126595)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET RLO; 7 ('RTL') (line 126595)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET PDF; 7 ('auto') (line 126596)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET PDF; 7 ('LTR') (line 126596)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET PDF; 7 ('RTL') (line 126596)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET BN; 7 ('auto') (line 126597)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET BN; 7 ('LTR') (line 126597)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ET BN; 7 ('RTL') (line 126597)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRE; 7 ('auto') (line 126598)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRE; 7 ('LTR') (line 126598)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRE; 7 ('RTL') (line 126598)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRO; 7 ('auto') (line 126599)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRO; 7 ('LTR') (line 126599)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN LRO; 7 ('RTL') (line 126599)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLE; 7 ('auto') (line 126600)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLE; 7 ('LTR') (line 126600)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLE; 7 ('RTL') (line 126600)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLO; 7 ('auto') (line 126601)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLO; 7 ('LTR') (line 126601)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN RLO; 7 ('RTL') (line 126601)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN PDF; 7 ('auto') (line 126602)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN PDF; 7 ('LTR') (line 126602)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN PDF; 7 ('RTL') (line 126602)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN BN; 7 ('auto') (line 126603)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN BN; 7 ('LTR') (line 126603)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L AN BN; 7 ('RTL') (line 126603)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRE; 7 ('auto') (line 126604)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRE; 7 ('LTR') (line 126604)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRE; 7 ('RTL') (line 126604)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRO; 7 ('auto') (line 126605)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRO; 7 ('LTR') (line 126605)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS LRO; 7 ('RTL') (line 126605)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_024)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO L CS RLE; 7 ('auto') (line 126606)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS RLE; 7 ('LTR') (line 126606)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS RLE; 7 ('RTL') (line 126606)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS RLO; 7 ('auto') (line 126607)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS RLO; 7 ('LTR') (line 126607)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS RLO; 7 ('RTL') (line 126607)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS PDF; 7 ('auto') (line 126608)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS PDF; 7 ('LTR') (line 126608)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS PDF; 7 ('RTL') (line 126608)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS BN; 7 ('auto') (line 126609)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS BN; 7 ('LTR') (line 126609)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L CS BN; 7 ('RTL') (line 126609)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRE; 7 ('auto') (line 126610)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRE; 7 ('LTR') (line 126610)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRE; 7 ('RTL') (line 126610)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRO; 7 ('auto') (line 126611)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRO; 7 ('LTR') (line 126611)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM LRO; 7 ('RTL') (line 126611)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLE; 7 ('auto') (line 126612)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLE; 7 ('LTR') (line 126612)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLE; 7 ('RTL') (line 126612)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLO; 7 ('auto') (line 126613)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLO; 7 ('LTR') (line 126613)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM RLO; 7 ('RTL') (line 126613)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM PDF; 7 ('auto') (line 126614)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM PDF; 7 ('LTR') (line 126614)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM PDF; 7 ('RTL') (line 126614)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM BN; 7 ('auto') (line 126615)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM BN; 7 ('LTR') (line 126615)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L NSM BN; 7 ('RTL') (line 126615)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRE; 7 ('auto') (line 126616)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRE; 7 ('LTR') (line 126616)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRE; 7 ('RTL') (line 126616)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRO; 7 ('auto') (line 126617)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRO; 7 ('LTR') (line 126617)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON LRO; 7 ('RTL') (line 126617)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLE; 7 ('auto') (line 126618)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLE; 7 ('LTR') (line 126618)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLE; 7 ('RTL') (line 126618)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLO; 7 ('auto') (line 126619)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLO; 7 ('LTR') (line 126619)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON RLO; 7 ('RTL') (line 126619)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON PDF; 7 ('auto') (line 126620)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON PDF; 7 ('LTR') (line 126620)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON PDF; 7 ('RTL') (line 126620)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON BN; 7 ('auto') (line 126621)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON BN; 7 ('LTR') (line 126621)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO L ON BN; 7 ('RTL') (line 126621)
        std::vector<uint32_t> const cps = { 0x202D, 0x0041, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRE; 7 ('auto') (line 126622)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRE; 7 ('LTR') (line 126622)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRE; 7 ('RTL') (line 126622)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRO; 7 ('auto') (line 126623)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRO; 7 ('LTR') (line 126623)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L LRO; 7 ('RTL') (line 126623)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLE; 7 ('auto') (line 126624)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLE; 7 ('LTR') (line 126624)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLE; 7 ('RTL') (line 126624)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLO; 7 ('auto') (line 126625)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLO; 7 ('LTR') (line 126625)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L RLO; 7 ('RTL') (line 126625)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L PDF; 7 ('auto') (line 126626)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L PDF; 7 ('LTR') (line 126626)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L PDF; 7 ('RTL') (line 126626)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L BN; 7 ('auto') (line 126627)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L BN; 7 ('LTR') (line 126627)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R L BN; 7 ('RTL') (line 126627)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRE; 7 ('auto') (line 126628)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRE; 7 ('LTR') (line 126628)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRE; 7 ('RTL') (line 126628)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRO; 7 ('auto') (line 126629)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRO; 7 ('LTR') (line 126629)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R LRO; 7 ('RTL') (line 126629)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R RLE; 7 ('auto') (line 126630)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R RLE; 7 ('LTR') (line 126630)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R RLE; 7 ('RTL') (line 126630)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_025)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO R R RLO; 7 ('auto') (line 126631)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R RLO; 7 ('LTR') (line 126631)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R RLO; 7 ('RTL') (line 126631)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R PDF; 7 ('auto') (line 126632)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R PDF; 7 ('LTR') (line 126632)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R PDF; 7 ('RTL') (line 126632)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R BN; 7 ('auto') (line 126633)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R BN; 7 ('LTR') (line 126633)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R R BN; 7 ('RTL') (line 126633)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRE; 7 ('auto') (line 126634)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRE; 7 ('LTR') (line 126634)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRE; 7 ('RTL') (line 126634)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRO; 7 ('auto') (line 126635)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRO; 7 ('LTR') (line 126635)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL LRO; 7 ('RTL') (line 126635)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLE; 7 ('auto') (line 126636)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLE; 7 ('LTR') (line 126636)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLE; 7 ('RTL') (line 126636)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLO; 7 ('auto') (line 126637)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLO; 7 ('LTR') (line 126637)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL RLO; 7 ('RTL') (line 126637)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL PDF; 7 ('auto') (line 126638)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL PDF; 7 ('LTR') (line 126638)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL PDF; 7 ('RTL') (line 126638)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL BN; 7 ('auto') (line 126639)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL BN; 7 ('LTR') (line 126639)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AL BN; 7 ('RTL') (line 126639)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRE; 7 ('auto') (line 126640)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRE; 7 ('LTR') (line 126640)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRE; 7 ('RTL') (line 126640)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRO; 7 ('auto') (line 126641)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRO; 7 ('LTR') (line 126641)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN LRO; 7 ('RTL') (line 126641)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLE; 7 ('auto') (line 126642)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLE; 7 ('LTR') (line 126642)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLE; 7 ('RTL') (line 126642)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLO; 7 ('auto') (line 126643)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLO; 7 ('LTR') (line 126643)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN RLO; 7 ('RTL') (line 126643)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN PDF; 7 ('auto') (line 126644)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN PDF; 7 ('LTR') (line 126644)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN PDF; 7 ('RTL') (line 126644)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN BN; 7 ('auto') (line 126645)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN BN; 7 ('LTR') (line 126645)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R EN BN; 7 ('RTL') (line 126645)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRE; 7 ('auto') (line 126646)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRE; 7 ('LTR') (line 126646)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRE; 7 ('RTL') (line 126646)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRO; 7 ('auto') (line 126647)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRO; 7 ('LTR') (line 126647)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES LRO; 7 ('RTL') (line 126647)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLE; 7 ('auto') (line 126648)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLE; 7 ('LTR') (line 126648)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLE; 7 ('RTL') (line 126648)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLO; 7 ('auto') (line 126649)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLO; 7 ('LTR') (line 126649)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES RLO; 7 ('RTL') (line 126649)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES PDF; 7 ('auto') (line 126650)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES PDF; 7 ('LTR') (line 126650)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES PDF; 7 ('RTL') (line 126650)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES BN; 7 ('auto') (line 126651)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES BN; 7 ('LTR') (line 126651)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ES BN; 7 ('RTL') (line 126651)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRE; 7 ('auto') (line 126652)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRE; 7 ('LTR') (line 126652)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRE; 7 ('RTL') (line 126652)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRO; 7 ('auto') (line 126653)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRO; 7 ('LTR') (line 126653)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET LRO; 7 ('RTL') (line 126653)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLE; 7 ('auto') (line 126654)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLE; 7 ('LTR') (line 126654)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLE; 7 ('RTL') (line 126654)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLO; 7 ('auto') (line 126655)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLO; 7 ('LTR') (line 126655)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET RLO; 7 ('RTL') (line 126655)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_026)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO R ET PDF; 7 ('auto') (line 126656)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET PDF; 7 ('LTR') (line 126656)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET PDF; 7 ('RTL') (line 126656)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET BN; 7 ('auto') (line 126657)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET BN; 7 ('LTR') (line 126657)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ET BN; 7 ('RTL') (line 126657)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRE; 7 ('auto') (line 126658)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRE; 7 ('LTR') (line 126658)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRE; 7 ('RTL') (line 126658)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRO; 7 ('auto') (line 126659)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRO; 7 ('LTR') (line 126659)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN LRO; 7 ('RTL') (line 126659)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLE; 7 ('auto') (line 126660)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLE; 7 ('LTR') (line 126660)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLE; 7 ('RTL') (line 126660)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLO; 7 ('auto') (line 126661)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLO; 7 ('LTR') (line 126661)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN RLO; 7 ('RTL') (line 126661)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN PDF; 7 ('auto') (line 126662)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN PDF; 7 ('LTR') (line 126662)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN PDF; 7 ('RTL') (line 126662)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN BN; 7 ('auto') (line 126663)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN BN; 7 ('LTR') (line 126663)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R AN BN; 7 ('RTL') (line 126663)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRE; 7 ('auto') (line 126664)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRE; 7 ('LTR') (line 126664)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRE; 7 ('RTL') (line 126664)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRO; 7 ('auto') (line 126665)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRO; 7 ('LTR') (line 126665)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS LRO; 7 ('RTL') (line 126665)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLE; 7 ('auto') (line 126666)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLE; 7 ('LTR') (line 126666)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLE; 7 ('RTL') (line 126666)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLO; 7 ('auto') (line 126667)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLO; 7 ('LTR') (line 126667)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS RLO; 7 ('RTL') (line 126667)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS PDF; 7 ('auto') (line 126668)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS PDF; 7 ('LTR') (line 126668)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS PDF; 7 ('RTL') (line 126668)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS BN; 7 ('auto') (line 126669)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS BN; 7 ('LTR') (line 126669)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R CS BN; 7 ('RTL') (line 126669)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRE; 7 ('auto') (line 126670)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRE; 7 ('LTR') (line 126670)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRE; 7 ('RTL') (line 126670)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRO; 7 ('auto') (line 126671)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRO; 7 ('LTR') (line 126671)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM LRO; 7 ('RTL') (line 126671)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLE; 7 ('auto') (line 126672)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLE; 7 ('LTR') (line 126672)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLE; 7 ('RTL') (line 126672)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLO; 7 ('auto') (line 126673)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLO; 7 ('LTR') (line 126673)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM RLO; 7 ('RTL') (line 126673)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM PDF; 7 ('auto') (line 126674)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM PDF; 7 ('LTR') (line 126674)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM PDF; 7 ('RTL') (line 126674)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM BN; 7 ('auto') (line 126675)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM BN; 7 ('LTR') (line 126675)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R NSM BN; 7 ('RTL') (line 126675)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRE; 7 ('auto') (line 126676)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRE; 7 ('LTR') (line 126676)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRE; 7 ('RTL') (line 126676)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRO; 7 ('auto') (line 126677)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRO; 7 ('LTR') (line 126677)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON LRO; 7 ('RTL') (line 126677)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLE; 7 ('auto') (line 126678)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLE; 7 ('LTR') (line 126678)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLE; 7 ('RTL') (line 126678)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLO; 7 ('auto') (line 126679)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLO; 7 ('LTR') (line 126679)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON RLO; 7 ('RTL') (line 126679)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON PDF; 7 ('auto') (line 126680)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON PDF; 7 ('LTR') (line 126680)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON PDF; 7 ('RTL') (line 126680)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_027)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO R ON BN; 7 ('auto') (line 126681)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON BN; 7 ('LTR') (line 126681)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO R ON BN; 7 ('RTL') (line 126681)
        std::vector<uint32_t> const cps = { 0x202D, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRE; 7 ('auto') (line 126682)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRE; 7 ('LTR') (line 126682)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRE; 7 ('RTL') (line 126682)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRO; 7 ('auto') (line 126683)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRO; 7 ('LTR') (line 126683)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L LRO; 7 ('RTL') (line 126683)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLE; 7 ('auto') (line 126684)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLE; 7 ('LTR') (line 126684)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLE; 7 ('RTL') (line 126684)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLO; 7 ('auto') (line 126685)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLO; 7 ('LTR') (line 126685)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L RLO; 7 ('RTL') (line 126685)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L PDF; 7 ('auto') (line 126686)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L PDF; 7 ('LTR') (line 126686)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L PDF; 7 ('RTL') (line 126686)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L BN; 7 ('auto') (line 126687)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L BN; 7 ('LTR') (line 126687)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL L BN; 7 ('RTL') (line 126687)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRE; 7 ('auto') (line 126688)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRE; 7 ('LTR') (line 126688)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRE; 7 ('RTL') (line 126688)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRO; 7 ('auto') (line 126689)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRO; 7 ('LTR') (line 126689)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R LRO; 7 ('RTL') (line 126689)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLE; 7 ('auto') (line 126690)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLE; 7 ('LTR') (line 126690)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLE; 7 ('RTL') (line 126690)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLO; 7 ('auto') (line 126691)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLO; 7 ('LTR') (line 126691)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R RLO; 7 ('RTL') (line 126691)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R PDF; 7 ('auto') (line 126692)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R PDF; 7 ('LTR') (line 126692)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R PDF; 7 ('RTL') (line 126692)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R BN; 7 ('auto') (line 126693)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R BN; 7 ('LTR') (line 126693)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL R BN; 7 ('RTL') (line 126693)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRE; 7 ('auto') (line 126694)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRE; 7 ('LTR') (line 126694)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRE; 7 ('RTL') (line 126694)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRO; 7 ('auto') (line 126695)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRO; 7 ('LTR') (line 126695)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL LRO; 7 ('RTL') (line 126695)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLE; 7 ('auto') (line 126696)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLE; 7 ('LTR') (line 126696)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLE; 7 ('RTL') (line 126696)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLO; 7 ('auto') (line 126697)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLO; 7 ('LTR') (line 126697)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL RLO; 7 ('RTL') (line 126697)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL PDF; 7 ('auto') (line 126698)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL PDF; 7 ('LTR') (line 126698)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL PDF; 7 ('RTL') (line 126698)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL BN; 7 ('auto') (line 126699)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL BN; 7 ('LTR') (line 126699)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AL BN; 7 ('RTL') (line 126699)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRE; 7 ('auto') (line 126700)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRE; 7 ('LTR') (line 126700)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRE; 7 ('RTL') (line 126700)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRO; 7 ('auto') (line 126701)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRO; 7 ('LTR') (line 126701)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN LRO; 7 ('RTL') (line 126701)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLE; 7 ('auto') (line 126702)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLE; 7 ('LTR') (line 126702)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLE; 7 ('RTL') (line 126702)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLO; 7 ('auto') (line 126703)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLO; 7 ('LTR') (line 126703)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN RLO; 7 ('RTL') (line 126703)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN PDF; 7 ('auto') (line 126704)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN PDF; 7 ('LTR') (line 126704)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN PDF; 7 ('RTL') (line 126704)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN BN; 7 ('auto') (line 126705)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN BN; 7 ('LTR') (line 126705)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL EN BN; 7 ('RTL') (line 126705)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_028)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO AL ES LRE; 7 ('auto') (line 126706)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES LRE; 7 ('LTR') (line 126706)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES LRE; 7 ('RTL') (line 126706)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES LRO; 7 ('auto') (line 126707)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES LRO; 7 ('LTR') (line 126707)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES LRO; 7 ('RTL') (line 126707)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLE; 7 ('auto') (line 126708)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLE; 7 ('LTR') (line 126708)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLE; 7 ('RTL') (line 126708)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLO; 7 ('auto') (line 126709)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLO; 7 ('LTR') (line 126709)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES RLO; 7 ('RTL') (line 126709)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES PDF; 7 ('auto') (line 126710)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES PDF; 7 ('LTR') (line 126710)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES PDF; 7 ('RTL') (line 126710)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES BN; 7 ('auto') (line 126711)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES BN; 7 ('LTR') (line 126711)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ES BN; 7 ('RTL') (line 126711)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRE; 7 ('auto') (line 126712)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRE; 7 ('LTR') (line 126712)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRE; 7 ('RTL') (line 126712)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRO; 7 ('auto') (line 126713)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRO; 7 ('LTR') (line 126713)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET LRO; 7 ('RTL') (line 126713)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLE; 7 ('auto') (line 126714)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLE; 7 ('LTR') (line 126714)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLE; 7 ('RTL') (line 126714)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLO; 7 ('auto') (line 126715)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLO; 7 ('LTR') (line 126715)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET RLO; 7 ('RTL') (line 126715)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET PDF; 7 ('auto') (line 126716)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET PDF; 7 ('LTR') (line 126716)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET PDF; 7 ('RTL') (line 126716)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET BN; 7 ('auto') (line 126717)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET BN; 7 ('LTR') (line 126717)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ET BN; 7 ('RTL') (line 126717)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRE; 7 ('auto') (line 126718)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRE; 7 ('LTR') (line 126718)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRE; 7 ('RTL') (line 126718)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRO; 7 ('auto') (line 126719)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRO; 7 ('LTR') (line 126719)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN LRO; 7 ('RTL') (line 126719)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLE; 7 ('auto') (line 126720)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLE; 7 ('LTR') (line 126720)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLE; 7 ('RTL') (line 126720)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLO; 7 ('auto') (line 126721)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLO; 7 ('LTR') (line 126721)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN RLO; 7 ('RTL') (line 126721)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN PDF; 7 ('auto') (line 126722)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN PDF; 7 ('LTR') (line 126722)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN PDF; 7 ('RTL') (line 126722)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN BN; 7 ('auto') (line 126723)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN BN; 7 ('LTR') (line 126723)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL AN BN; 7 ('RTL') (line 126723)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRE; 7 ('auto') (line 126724)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRE; 7 ('LTR') (line 126724)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRE; 7 ('RTL') (line 126724)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRO; 7 ('auto') (line 126725)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRO; 7 ('LTR') (line 126725)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS LRO; 7 ('RTL') (line 126725)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLE; 7 ('auto') (line 126726)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLE; 7 ('LTR') (line 126726)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLE; 7 ('RTL') (line 126726)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLO; 7 ('auto') (line 126727)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLO; 7 ('LTR') (line 126727)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS RLO; 7 ('RTL') (line 126727)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS PDF; 7 ('auto') (line 126728)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS PDF; 7 ('LTR') (line 126728)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS PDF; 7 ('RTL') (line 126728)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS BN; 7 ('auto') (line 126729)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS BN; 7 ('LTR') (line 126729)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL CS BN; 7 ('RTL') (line 126729)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM LRE; 7 ('auto') (line 126730)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM LRE; 7 ('LTR') (line 126730)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM LRE; 7 ('RTL') (line 126730)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_029)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO AL NSM LRO; 7 ('auto') (line 126731)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM LRO; 7 ('LTR') (line 126731)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM LRO; 7 ('RTL') (line 126731)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLE; 7 ('auto') (line 126732)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLE; 7 ('LTR') (line 126732)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLE; 7 ('RTL') (line 126732)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLO; 7 ('auto') (line 126733)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLO; 7 ('LTR') (line 126733)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM RLO; 7 ('RTL') (line 126733)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM PDF; 7 ('auto') (line 126734)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM PDF; 7 ('LTR') (line 126734)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM PDF; 7 ('RTL') (line 126734)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM BN; 7 ('auto') (line 126735)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM BN; 7 ('LTR') (line 126735)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL NSM BN; 7 ('RTL') (line 126735)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRE; 7 ('auto') (line 126736)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRE; 7 ('LTR') (line 126736)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRE; 7 ('RTL') (line 126736)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRO; 7 ('auto') (line 126737)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRO; 7 ('LTR') (line 126737)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON LRO; 7 ('RTL') (line 126737)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLE; 7 ('auto') (line 126738)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLE; 7 ('LTR') (line 126738)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLE; 7 ('RTL') (line 126738)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLO; 7 ('auto') (line 126739)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLO; 7 ('LTR') (line 126739)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON RLO; 7 ('RTL') (line 126739)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON PDF; 7 ('auto') (line 126740)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON PDF; 7 ('LTR') (line 126740)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON PDF; 7 ('RTL') (line 126740)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON BN; 7 ('auto') (line 126741)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON BN; 7 ('LTR') (line 126741)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AL ON BN; 7 ('RTL') (line 126741)
        std::vector<uint32_t> const cps = { 0x202D, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRE; 7 ('auto') (line 126742)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRE; 7 ('LTR') (line 126742)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRE; 7 ('RTL') (line 126742)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRO; 7 ('auto') (line 126743)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRO; 7 ('LTR') (line 126743)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L LRO; 7 ('RTL') (line 126743)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLE; 7 ('auto') (line 126744)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLE; 7 ('LTR') (line 126744)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLE; 7 ('RTL') (line 126744)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLO; 7 ('auto') (line 126745)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLO; 7 ('LTR') (line 126745)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L RLO; 7 ('RTL') (line 126745)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L PDF; 7 ('auto') (line 126746)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L PDF; 7 ('LTR') (line 126746)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L PDF; 7 ('RTL') (line 126746)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L BN; 7 ('auto') (line 126747)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L BN; 7 ('LTR') (line 126747)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN L BN; 7 ('RTL') (line 126747)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRE; 7 ('auto') (line 126748)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRE; 7 ('LTR') (line 126748)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRE; 7 ('RTL') (line 126748)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRO; 7 ('auto') (line 126749)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRO; 7 ('LTR') (line 126749)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R LRO; 7 ('RTL') (line 126749)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLE; 7 ('auto') (line 126750)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLE; 7 ('LTR') (line 126750)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLE; 7 ('RTL') (line 126750)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLO; 7 ('auto') (line 126751)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLO; 7 ('LTR') (line 126751)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R RLO; 7 ('RTL') (line 126751)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R PDF; 7 ('auto') (line 126752)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R PDF; 7 ('LTR') (line 126752)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R PDF; 7 ('RTL') (line 126752)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R BN; 7 ('auto') (line 126753)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R BN; 7 ('LTR') (line 126753)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN R BN; 7 ('RTL') (line 126753)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRE; 7 ('auto') (line 126754)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRE; 7 ('LTR') (line 126754)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRE; 7 ('RTL') (line 126754)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRO; 7 ('auto') (line 126755)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRO; 7 ('LTR') (line 126755)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL LRO; 7 ('RTL') (line 126755)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_030)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO EN AL RLE; 7 ('auto') (line 126756)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL RLE; 7 ('LTR') (line 126756)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL RLE; 7 ('RTL') (line 126756)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL RLO; 7 ('auto') (line 126757)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL RLO; 7 ('LTR') (line 126757)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL RLO; 7 ('RTL') (line 126757)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL PDF; 7 ('auto') (line 126758)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL PDF; 7 ('LTR') (line 126758)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL PDF; 7 ('RTL') (line 126758)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL BN; 7 ('auto') (line 126759)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL BN; 7 ('LTR') (line 126759)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AL BN; 7 ('RTL') (line 126759)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRE; 7 ('auto') (line 126760)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRE; 7 ('LTR') (line 126760)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRE; 7 ('RTL') (line 126760)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRO; 7 ('auto') (line 126761)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRO; 7 ('LTR') (line 126761)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN LRO; 7 ('RTL') (line 126761)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLE; 7 ('auto') (line 126762)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLE; 7 ('LTR') (line 126762)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLE; 7 ('RTL') (line 126762)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLO; 7 ('auto') (line 126763)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLO; 7 ('LTR') (line 126763)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN RLO; 7 ('RTL') (line 126763)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN PDF; 7 ('auto') (line 126764)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN PDF; 7 ('LTR') (line 126764)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN PDF; 7 ('RTL') (line 126764)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN BN; 7 ('auto') (line 126765)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN BN; 7 ('LTR') (line 126765)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN EN BN; 7 ('RTL') (line 126765)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRE; 7 ('auto') (line 126766)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRE; 7 ('LTR') (line 126766)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRE; 7 ('RTL') (line 126766)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRO; 7 ('auto') (line 126767)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRO; 7 ('LTR') (line 126767)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES LRO; 7 ('RTL') (line 126767)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLE; 7 ('auto') (line 126768)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLE; 7 ('LTR') (line 126768)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLE; 7 ('RTL') (line 126768)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLO; 7 ('auto') (line 126769)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLO; 7 ('LTR') (line 126769)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES RLO; 7 ('RTL') (line 126769)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES PDF; 7 ('auto') (line 126770)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES PDF; 7 ('LTR') (line 126770)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES PDF; 7 ('RTL') (line 126770)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES BN; 7 ('auto') (line 126771)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES BN; 7 ('LTR') (line 126771)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ES BN; 7 ('RTL') (line 126771)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRE; 7 ('auto') (line 126772)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRE; 7 ('LTR') (line 126772)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRE; 7 ('RTL') (line 126772)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRO; 7 ('auto') (line 126773)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRO; 7 ('LTR') (line 126773)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET LRO; 7 ('RTL') (line 126773)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLE; 7 ('auto') (line 126774)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLE; 7 ('LTR') (line 126774)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLE; 7 ('RTL') (line 126774)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLO; 7 ('auto') (line 126775)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLO; 7 ('LTR') (line 126775)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET RLO; 7 ('RTL') (line 126775)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET PDF; 7 ('auto') (line 126776)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET PDF; 7 ('LTR') (line 126776)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET PDF; 7 ('RTL') (line 126776)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET BN; 7 ('auto') (line 126777)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET BN; 7 ('LTR') (line 126777)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ET BN; 7 ('RTL') (line 126777)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRE; 7 ('auto') (line 126778)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRE; 7 ('LTR') (line 126778)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRE; 7 ('RTL') (line 126778)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRO; 7 ('auto') (line 126779)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRO; 7 ('LTR') (line 126779)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN LRO; 7 ('RTL') (line 126779)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN RLE; 7 ('auto') (line 126780)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN RLE; 7 ('LTR') (line 126780)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN RLE; 7 ('RTL') (line 126780)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_031)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO EN AN RLO; 7 ('auto') (line 126781)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN RLO; 7 ('LTR') (line 126781)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN RLO; 7 ('RTL') (line 126781)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN PDF; 7 ('auto') (line 126782)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN PDF; 7 ('LTR') (line 126782)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN PDF; 7 ('RTL') (line 126782)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN BN; 7 ('auto') (line 126783)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN BN; 7 ('LTR') (line 126783)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN AN BN; 7 ('RTL') (line 126783)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRE; 7 ('auto') (line 126784)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRE; 7 ('LTR') (line 126784)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRE; 7 ('RTL') (line 126784)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRO; 7 ('auto') (line 126785)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRO; 7 ('LTR') (line 126785)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS LRO; 7 ('RTL') (line 126785)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLE; 7 ('auto') (line 126786)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLE; 7 ('LTR') (line 126786)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLE; 7 ('RTL') (line 126786)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLO; 7 ('auto') (line 126787)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLO; 7 ('LTR') (line 126787)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS RLO; 7 ('RTL') (line 126787)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS PDF; 7 ('auto') (line 126788)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS PDF; 7 ('LTR') (line 126788)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS PDF; 7 ('RTL') (line 126788)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS BN; 7 ('auto') (line 126789)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS BN; 7 ('LTR') (line 126789)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN CS BN; 7 ('RTL') (line 126789)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRE; 7 ('auto') (line 126790)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRE; 7 ('LTR') (line 126790)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRE; 7 ('RTL') (line 126790)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRO; 7 ('auto') (line 126791)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRO; 7 ('LTR') (line 126791)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM LRO; 7 ('RTL') (line 126791)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLE; 7 ('auto') (line 126792)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLE; 7 ('LTR') (line 126792)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLE; 7 ('RTL') (line 126792)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLO; 7 ('auto') (line 126793)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLO; 7 ('LTR') (line 126793)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM RLO; 7 ('RTL') (line 126793)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM PDF; 7 ('auto') (line 126794)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM PDF; 7 ('LTR') (line 126794)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM PDF; 7 ('RTL') (line 126794)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM BN; 7 ('auto') (line 126795)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM BN; 7 ('LTR') (line 126795)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN NSM BN; 7 ('RTL') (line 126795)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRE; 7 ('auto') (line 126796)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRE; 7 ('LTR') (line 126796)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRE; 7 ('RTL') (line 126796)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRO; 7 ('auto') (line 126797)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRO; 7 ('LTR') (line 126797)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON LRO; 7 ('RTL') (line 126797)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLE; 7 ('auto') (line 126798)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLE; 7 ('LTR') (line 126798)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLE; 7 ('RTL') (line 126798)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLO; 7 ('auto') (line 126799)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLO; 7 ('LTR') (line 126799)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON RLO; 7 ('RTL') (line 126799)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON PDF; 7 ('auto') (line 126800)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON PDF; 7 ('LTR') (line 126800)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON PDF; 7 ('RTL') (line 126800)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON BN; 7 ('auto') (line 126801)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON BN; 7 ('LTR') (line 126801)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO EN ON BN; 7 ('RTL') (line 126801)
        std::vector<uint32_t> const cps = { 0x202D, 0x0030, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRE; 7 ('auto') (line 126802)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRE; 7 ('LTR') (line 126802)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRE; 7 ('RTL') (line 126802)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRO; 7 ('auto') (line 126803)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRO; 7 ('LTR') (line 126803)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L LRO; 7 ('RTL') (line 126803)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLE; 7 ('auto') (line 126804)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLE; 7 ('LTR') (line 126804)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLE; 7 ('RTL') (line 126804)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLO; 7 ('auto') (line 126805)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLO; 7 ('LTR') (line 126805)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L RLO; 7 ('RTL') (line 126805)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_032)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO ES L PDF; 7 ('auto') (line 126806)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L PDF; 7 ('LTR') (line 126806)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L PDF; 7 ('RTL') (line 126806)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L BN; 7 ('auto') (line 126807)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L BN; 7 ('LTR') (line 126807)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES L BN; 7 ('RTL') (line 126807)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRE; 7 ('auto') (line 126808)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRE; 7 ('LTR') (line 126808)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRE; 7 ('RTL') (line 126808)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRO; 7 ('auto') (line 126809)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRO; 7 ('LTR') (line 126809)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R LRO; 7 ('RTL') (line 126809)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLE; 7 ('auto') (line 126810)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLE; 7 ('LTR') (line 126810)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLE; 7 ('RTL') (line 126810)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLO; 7 ('auto') (line 126811)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLO; 7 ('LTR') (line 126811)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R RLO; 7 ('RTL') (line 126811)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R PDF; 7 ('auto') (line 126812)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R PDF; 7 ('LTR') (line 126812)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R PDF; 7 ('RTL') (line 126812)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R BN; 7 ('auto') (line 126813)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R BN; 7 ('LTR') (line 126813)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES R BN; 7 ('RTL') (line 126813)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRE; 7 ('auto') (line 126814)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRE; 7 ('LTR') (line 126814)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRE; 7 ('RTL') (line 126814)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRO; 7 ('auto') (line 126815)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRO; 7 ('LTR') (line 126815)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL LRO; 7 ('RTL') (line 126815)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLE; 7 ('auto') (line 126816)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLE; 7 ('LTR') (line 126816)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLE; 7 ('RTL') (line 126816)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLO; 7 ('auto') (line 126817)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLO; 7 ('LTR') (line 126817)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL RLO; 7 ('RTL') (line 126817)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL PDF; 7 ('auto') (line 126818)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL PDF; 7 ('LTR') (line 126818)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL PDF; 7 ('RTL') (line 126818)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL BN; 7 ('auto') (line 126819)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL BN; 7 ('LTR') (line 126819)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AL BN; 7 ('RTL') (line 126819)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRE; 7 ('auto') (line 126820)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRE; 7 ('LTR') (line 126820)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRE; 7 ('RTL') (line 126820)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRO; 7 ('auto') (line 126821)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRO; 7 ('LTR') (line 126821)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN LRO; 7 ('RTL') (line 126821)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLE; 7 ('auto') (line 126822)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLE; 7 ('LTR') (line 126822)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLE; 7 ('RTL') (line 126822)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLO; 7 ('auto') (line 126823)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLO; 7 ('LTR') (line 126823)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN RLO; 7 ('RTL') (line 126823)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN PDF; 7 ('auto') (line 126824)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN PDF; 7 ('LTR') (line 126824)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN PDF; 7 ('RTL') (line 126824)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN BN; 7 ('auto') (line 126825)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN BN; 7 ('LTR') (line 126825)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES EN BN; 7 ('RTL') (line 126825)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRE; 7 ('auto') (line 126826)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRE; 7 ('LTR') (line 126826)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRE; 7 ('RTL') (line 126826)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRO; 7 ('auto') (line 126827)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRO; 7 ('LTR') (line 126827)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES LRO; 7 ('RTL') (line 126827)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLE; 7 ('auto') (line 126828)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLE; 7 ('LTR') (line 126828)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLE; 7 ('RTL') (line 126828)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLO; 7 ('auto') (line 126829)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLO; 7 ('LTR') (line 126829)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES RLO; 7 ('RTL') (line 126829)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES PDF; 7 ('auto') (line 126830)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES PDF; 7 ('LTR') (line 126830)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES PDF; 7 ('RTL') (line 126830)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_033)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO ES ES BN; 7 ('auto') (line 126831)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES BN; 7 ('LTR') (line 126831)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ES BN; 7 ('RTL') (line 126831)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRE; 7 ('auto') (line 126832)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRE; 7 ('LTR') (line 126832)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRE; 7 ('RTL') (line 126832)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRO; 7 ('auto') (line 126833)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRO; 7 ('LTR') (line 126833)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET LRO; 7 ('RTL') (line 126833)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLE; 7 ('auto') (line 126834)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLE; 7 ('LTR') (line 126834)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLE; 7 ('RTL') (line 126834)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLO; 7 ('auto') (line 126835)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLO; 7 ('LTR') (line 126835)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET RLO; 7 ('RTL') (line 126835)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET PDF; 7 ('auto') (line 126836)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET PDF; 7 ('LTR') (line 126836)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET PDF; 7 ('RTL') (line 126836)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET BN; 7 ('auto') (line 126837)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET BN; 7 ('LTR') (line 126837)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ET BN; 7 ('RTL') (line 126837)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRE; 7 ('auto') (line 126838)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRE; 7 ('LTR') (line 126838)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRE; 7 ('RTL') (line 126838)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRO; 7 ('auto') (line 126839)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRO; 7 ('LTR') (line 126839)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN LRO; 7 ('RTL') (line 126839)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLE; 7 ('auto') (line 126840)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLE; 7 ('LTR') (line 126840)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLE; 7 ('RTL') (line 126840)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLO; 7 ('auto') (line 126841)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLO; 7 ('LTR') (line 126841)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN RLO; 7 ('RTL') (line 126841)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN PDF; 7 ('auto') (line 126842)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN PDF; 7 ('LTR') (line 126842)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN PDF; 7 ('RTL') (line 126842)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN BN; 7 ('auto') (line 126843)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN BN; 7 ('LTR') (line 126843)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES AN BN; 7 ('RTL') (line 126843)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRE; 7 ('auto') (line 126844)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRE; 7 ('LTR') (line 126844)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRE; 7 ('RTL') (line 126844)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRO; 7 ('auto') (line 126845)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRO; 7 ('LTR') (line 126845)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS LRO; 7 ('RTL') (line 126845)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLE; 7 ('auto') (line 126846)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLE; 7 ('LTR') (line 126846)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLE; 7 ('RTL') (line 126846)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLO; 7 ('auto') (line 126847)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLO; 7 ('LTR') (line 126847)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS RLO; 7 ('RTL') (line 126847)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS PDF; 7 ('auto') (line 126848)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS PDF; 7 ('LTR') (line 126848)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS PDF; 7 ('RTL') (line 126848)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS BN; 7 ('auto') (line 126849)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS BN; 7 ('LTR') (line 126849)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES CS BN; 7 ('RTL') (line 126849)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRE; 7 ('auto') (line 126850)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRE; 7 ('LTR') (line 126850)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRE; 7 ('RTL') (line 126850)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRO; 7 ('auto') (line 126851)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRO; 7 ('LTR') (line 126851)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM LRO; 7 ('RTL') (line 126851)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLE; 7 ('auto') (line 126852)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLE; 7 ('LTR') (line 126852)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLE; 7 ('RTL') (line 126852)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLO; 7 ('auto') (line 126853)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLO; 7 ('LTR') (line 126853)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM RLO; 7 ('RTL') (line 126853)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM PDF; 7 ('auto') (line 126854)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM PDF; 7 ('LTR') (line 126854)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM PDF; 7 ('RTL') (line 126854)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM BN; 7 ('auto') (line 126855)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM BN; 7 ('LTR') (line 126855)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES NSM BN; 7 ('RTL') (line 126855)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_034)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO ES ON LRE; 7 ('auto') (line 126856)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON LRE; 7 ('LTR') (line 126856)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON LRE; 7 ('RTL') (line 126856)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON LRO; 7 ('auto') (line 126857)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON LRO; 7 ('LTR') (line 126857)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON LRO; 7 ('RTL') (line 126857)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLE; 7 ('auto') (line 126858)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLE; 7 ('LTR') (line 126858)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLE; 7 ('RTL') (line 126858)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLO; 7 ('auto') (line 126859)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLO; 7 ('LTR') (line 126859)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON RLO; 7 ('RTL') (line 126859)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON PDF; 7 ('auto') (line 126860)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON PDF; 7 ('LTR') (line 126860)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON PDF; 7 ('RTL') (line 126860)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON BN; 7 ('auto') (line 126861)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON BN; 7 ('LTR') (line 126861)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ES ON BN; 7 ('RTL') (line 126861)
        std::vector<uint32_t> const cps = { 0x202D, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRE; 7 ('auto') (line 126862)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRE; 7 ('LTR') (line 126862)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRE; 7 ('RTL') (line 126862)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRO; 7 ('auto') (line 126863)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRO; 7 ('LTR') (line 126863)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L LRO; 7 ('RTL') (line 126863)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLE; 7 ('auto') (line 126864)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLE; 7 ('LTR') (line 126864)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLE; 7 ('RTL') (line 126864)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLO; 7 ('auto') (line 126865)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLO; 7 ('LTR') (line 126865)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L RLO; 7 ('RTL') (line 126865)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L PDF; 7 ('auto') (line 126866)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L PDF; 7 ('LTR') (line 126866)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L PDF; 7 ('RTL') (line 126866)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L BN; 7 ('auto') (line 126867)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L BN; 7 ('LTR') (line 126867)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET L BN; 7 ('RTL') (line 126867)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRE; 7 ('auto') (line 126868)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRE; 7 ('LTR') (line 126868)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRE; 7 ('RTL') (line 126868)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRO; 7 ('auto') (line 126869)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRO; 7 ('LTR') (line 126869)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R LRO; 7 ('RTL') (line 126869)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLE; 7 ('auto') (line 126870)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLE; 7 ('LTR') (line 126870)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLE; 7 ('RTL') (line 126870)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLO; 7 ('auto') (line 126871)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLO; 7 ('LTR') (line 126871)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R RLO; 7 ('RTL') (line 126871)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R PDF; 7 ('auto') (line 126872)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R PDF; 7 ('LTR') (line 126872)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R PDF; 7 ('RTL') (line 126872)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R BN; 7 ('auto') (line 126873)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R BN; 7 ('LTR') (line 126873)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET R BN; 7 ('RTL') (line 126873)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRE; 7 ('auto') (line 126874)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRE; 7 ('LTR') (line 126874)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRE; 7 ('RTL') (line 126874)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRO; 7 ('auto') (line 126875)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRO; 7 ('LTR') (line 126875)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL LRO; 7 ('RTL') (line 126875)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLE; 7 ('auto') (line 126876)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLE; 7 ('LTR') (line 126876)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLE; 7 ('RTL') (line 126876)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLO; 7 ('auto') (line 126877)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLO; 7 ('LTR') (line 126877)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL RLO; 7 ('RTL') (line 126877)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL PDF; 7 ('auto') (line 126878)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL PDF; 7 ('LTR') (line 126878)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL PDF; 7 ('RTL') (line 126878)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL BN; 7 ('auto') (line 126879)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL BN; 7 ('LTR') (line 126879)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AL BN; 7 ('RTL') (line 126879)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN LRE; 7 ('auto') (line 126880)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN LRE; 7 ('LTR') (line 126880)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN LRE; 7 ('RTL') (line 126880)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_035)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO ET EN LRO; 7 ('auto') (line 126881)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN LRO; 7 ('LTR') (line 126881)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN LRO; 7 ('RTL') (line 126881)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLE; 7 ('auto') (line 126882)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLE; 7 ('LTR') (line 126882)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLE; 7 ('RTL') (line 126882)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLO; 7 ('auto') (line 126883)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLO; 7 ('LTR') (line 126883)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN RLO; 7 ('RTL') (line 126883)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN PDF; 7 ('auto') (line 126884)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN PDF; 7 ('LTR') (line 126884)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN PDF; 7 ('RTL') (line 126884)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN BN; 7 ('auto') (line 126885)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN BN; 7 ('LTR') (line 126885)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET EN BN; 7 ('RTL') (line 126885)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRE; 7 ('auto') (line 126886)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRE; 7 ('LTR') (line 126886)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRE; 7 ('RTL') (line 126886)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRO; 7 ('auto') (line 126887)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRO; 7 ('LTR') (line 126887)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES LRO; 7 ('RTL') (line 126887)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLE; 7 ('auto') (line 126888)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLE; 7 ('LTR') (line 126888)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLE; 7 ('RTL') (line 126888)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLO; 7 ('auto') (line 126889)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLO; 7 ('LTR') (line 126889)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES RLO; 7 ('RTL') (line 126889)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES PDF; 7 ('auto') (line 126890)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES PDF; 7 ('LTR') (line 126890)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES PDF; 7 ('RTL') (line 126890)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES BN; 7 ('auto') (line 126891)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES BN; 7 ('LTR') (line 126891)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ES BN; 7 ('RTL') (line 126891)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRE; 7 ('auto') (line 126892)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRE; 7 ('LTR') (line 126892)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRE; 7 ('RTL') (line 126892)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRO; 7 ('auto') (line 126893)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRO; 7 ('LTR') (line 126893)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET LRO; 7 ('RTL') (line 126893)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLE; 7 ('auto') (line 126894)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLE; 7 ('LTR') (line 126894)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLE; 7 ('RTL') (line 126894)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLO; 7 ('auto') (line 126895)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLO; 7 ('LTR') (line 126895)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET RLO; 7 ('RTL') (line 126895)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET PDF; 7 ('auto') (line 126896)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET PDF; 7 ('LTR') (line 126896)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET PDF; 7 ('RTL') (line 126896)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET BN; 7 ('auto') (line 126897)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET BN; 7 ('LTR') (line 126897)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ET BN; 7 ('RTL') (line 126897)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRE; 7 ('auto') (line 126898)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRE; 7 ('LTR') (line 126898)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRE; 7 ('RTL') (line 126898)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRO; 7 ('auto') (line 126899)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRO; 7 ('LTR') (line 126899)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN LRO; 7 ('RTL') (line 126899)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLE; 7 ('auto') (line 126900)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLE; 7 ('LTR') (line 126900)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLE; 7 ('RTL') (line 126900)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLO; 7 ('auto') (line 126901)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLO; 7 ('LTR') (line 126901)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN RLO; 7 ('RTL') (line 126901)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN PDF; 7 ('auto') (line 126902)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN PDF; 7 ('LTR') (line 126902)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN PDF; 7 ('RTL') (line 126902)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN BN; 7 ('auto') (line 126903)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN BN; 7 ('LTR') (line 126903)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET AN BN; 7 ('RTL') (line 126903)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRE; 7 ('auto') (line 126904)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRE; 7 ('LTR') (line 126904)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRE; 7 ('RTL') (line 126904)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRO; 7 ('auto') (line 126905)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRO; 7 ('LTR') (line 126905)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS LRO; 7 ('RTL') (line 126905)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_036)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO ET CS RLE; 7 ('auto') (line 126906)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS RLE; 7 ('LTR') (line 126906)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS RLE; 7 ('RTL') (line 126906)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS RLO; 7 ('auto') (line 126907)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS RLO; 7 ('LTR') (line 126907)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS RLO; 7 ('RTL') (line 126907)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS PDF; 7 ('auto') (line 126908)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS PDF; 7 ('LTR') (line 126908)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS PDF; 7 ('RTL') (line 126908)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS BN; 7 ('auto') (line 126909)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS BN; 7 ('LTR') (line 126909)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET CS BN; 7 ('RTL') (line 126909)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRE; 7 ('auto') (line 126910)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRE; 7 ('LTR') (line 126910)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRE; 7 ('RTL') (line 126910)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRO; 7 ('auto') (line 126911)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRO; 7 ('LTR') (line 126911)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM LRO; 7 ('RTL') (line 126911)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLE; 7 ('auto') (line 126912)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLE; 7 ('LTR') (line 126912)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLE; 7 ('RTL') (line 126912)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLO; 7 ('auto') (line 126913)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLO; 7 ('LTR') (line 126913)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM RLO; 7 ('RTL') (line 126913)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM PDF; 7 ('auto') (line 126914)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM PDF; 7 ('LTR') (line 126914)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM PDF; 7 ('RTL') (line 126914)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM BN; 7 ('auto') (line 126915)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM BN; 7 ('LTR') (line 126915)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET NSM BN; 7 ('RTL') (line 126915)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRE; 7 ('auto') (line 126916)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRE; 7 ('LTR') (line 126916)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRE; 7 ('RTL') (line 126916)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRO; 7 ('auto') (line 126917)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRO; 7 ('LTR') (line 126917)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON LRO; 7 ('RTL') (line 126917)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLE; 7 ('auto') (line 126918)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLE; 7 ('LTR') (line 126918)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLE; 7 ('RTL') (line 126918)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLO; 7 ('auto') (line 126919)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLO; 7 ('LTR') (line 126919)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON RLO; 7 ('RTL') (line 126919)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON PDF; 7 ('auto') (line 126920)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON PDF; 7 ('LTR') (line 126920)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON PDF; 7 ('RTL') (line 126920)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON BN; 7 ('auto') (line 126921)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON BN; 7 ('LTR') (line 126921)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO ET ON BN; 7 ('RTL') (line 126921)
        std::vector<uint32_t> const cps = { 0x202D, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRE; 7 ('auto') (line 126922)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRE; 7 ('LTR') (line 126922)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRE; 7 ('RTL') (line 126922)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRO; 7 ('auto') (line 126923)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRO; 7 ('LTR') (line 126923)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L LRO; 7 ('RTL') (line 126923)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLE; 7 ('auto') (line 126924)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLE; 7 ('LTR') (line 126924)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLE; 7 ('RTL') (line 126924)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLO; 7 ('auto') (line 126925)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLO; 7 ('LTR') (line 126925)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L RLO; 7 ('RTL') (line 126925)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L PDF; 7 ('auto') (line 126926)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L PDF; 7 ('LTR') (line 126926)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L PDF; 7 ('RTL') (line 126926)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L BN; 7 ('auto') (line 126927)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L BN; 7 ('LTR') (line 126927)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN L BN; 7 ('RTL') (line 126927)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRE; 7 ('auto') (line 126928)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRE; 7 ('LTR') (line 126928)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRE; 7 ('RTL') (line 126928)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRO; 7 ('auto') (line 126929)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRO; 7 ('LTR') (line 126929)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R LRO; 7 ('RTL') (line 126929)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R RLE; 7 ('auto') (line 126930)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R RLE; 7 ('LTR') (line 126930)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R RLE; 7 ('RTL') (line 126930)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_037)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO AN R RLO; 7 ('auto') (line 126931)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R RLO; 7 ('LTR') (line 126931)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R RLO; 7 ('RTL') (line 126931)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R PDF; 7 ('auto') (line 126932)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R PDF; 7 ('LTR') (line 126932)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R PDF; 7 ('RTL') (line 126932)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R BN; 7 ('auto') (line 126933)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R BN; 7 ('LTR') (line 126933)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN R BN; 7 ('RTL') (line 126933)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRE; 7 ('auto') (line 126934)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRE; 7 ('LTR') (line 126934)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRE; 7 ('RTL') (line 126934)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRO; 7 ('auto') (line 126935)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRO; 7 ('LTR') (line 126935)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL LRO; 7 ('RTL') (line 126935)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLE; 7 ('auto') (line 126936)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLE; 7 ('LTR') (line 126936)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLE; 7 ('RTL') (line 126936)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLO; 7 ('auto') (line 126937)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLO; 7 ('LTR') (line 126937)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL RLO; 7 ('RTL') (line 126937)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL PDF; 7 ('auto') (line 126938)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL PDF; 7 ('LTR') (line 126938)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL PDF; 7 ('RTL') (line 126938)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL BN; 7 ('auto') (line 126939)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL BN; 7 ('LTR') (line 126939)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AL BN; 7 ('RTL') (line 126939)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRE; 7 ('auto') (line 126940)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRE; 7 ('LTR') (line 126940)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRE; 7 ('RTL') (line 126940)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRO; 7 ('auto') (line 126941)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRO; 7 ('LTR') (line 126941)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN LRO; 7 ('RTL') (line 126941)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLE; 7 ('auto') (line 126942)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLE; 7 ('LTR') (line 126942)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLE; 7 ('RTL') (line 126942)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLO; 7 ('auto') (line 126943)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLO; 7 ('LTR') (line 126943)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN RLO; 7 ('RTL') (line 126943)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN PDF; 7 ('auto') (line 126944)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN PDF; 7 ('LTR') (line 126944)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN PDF; 7 ('RTL') (line 126944)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN BN; 7 ('auto') (line 126945)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN BN; 7 ('LTR') (line 126945)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN EN BN; 7 ('RTL') (line 126945)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRE; 7 ('auto') (line 126946)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRE; 7 ('LTR') (line 126946)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRE; 7 ('RTL') (line 126946)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRO; 7 ('auto') (line 126947)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRO; 7 ('LTR') (line 126947)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES LRO; 7 ('RTL') (line 126947)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLE; 7 ('auto') (line 126948)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLE; 7 ('LTR') (line 126948)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLE; 7 ('RTL') (line 126948)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLO; 7 ('auto') (line 126949)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLO; 7 ('LTR') (line 126949)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES RLO; 7 ('RTL') (line 126949)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES PDF; 7 ('auto') (line 126950)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES PDF; 7 ('LTR') (line 126950)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES PDF; 7 ('RTL') (line 126950)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES BN; 7 ('auto') (line 126951)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES BN; 7 ('LTR') (line 126951)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ES BN; 7 ('RTL') (line 126951)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRE; 7 ('auto') (line 126952)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRE; 7 ('LTR') (line 126952)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRE; 7 ('RTL') (line 126952)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRO; 7 ('auto') (line 126953)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRO; 7 ('LTR') (line 126953)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET LRO; 7 ('RTL') (line 126953)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLE; 7 ('auto') (line 126954)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLE; 7 ('LTR') (line 126954)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLE; 7 ('RTL') (line 126954)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLO; 7 ('auto') (line 126955)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLO; 7 ('LTR') (line 126955)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET RLO; 7 ('RTL') (line 126955)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_038)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO AN ET PDF; 7 ('auto') (line 126956)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET PDF; 7 ('LTR') (line 126956)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET PDF; 7 ('RTL') (line 126956)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET BN; 7 ('auto') (line 126957)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET BN; 7 ('LTR') (line 126957)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ET BN; 7 ('RTL') (line 126957)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRE; 7 ('auto') (line 126958)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRE; 7 ('LTR') (line 126958)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRE; 7 ('RTL') (line 126958)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRO; 7 ('auto') (line 126959)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRO; 7 ('LTR') (line 126959)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN LRO; 7 ('RTL') (line 126959)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLE; 7 ('auto') (line 126960)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLE; 7 ('LTR') (line 126960)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLE; 7 ('RTL') (line 126960)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLO; 7 ('auto') (line 126961)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLO; 7 ('LTR') (line 126961)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN RLO; 7 ('RTL') (line 126961)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN PDF; 7 ('auto') (line 126962)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN PDF; 7 ('LTR') (line 126962)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN PDF; 7 ('RTL') (line 126962)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN BN; 7 ('auto') (line 126963)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN BN; 7 ('LTR') (line 126963)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN AN BN; 7 ('RTL') (line 126963)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRE; 7 ('auto') (line 126964)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRE; 7 ('LTR') (line 126964)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRE; 7 ('RTL') (line 126964)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRO; 7 ('auto') (line 126965)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRO; 7 ('LTR') (line 126965)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS LRO; 7 ('RTL') (line 126965)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLE; 7 ('auto') (line 126966)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLE; 7 ('LTR') (line 126966)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLE; 7 ('RTL') (line 126966)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLO; 7 ('auto') (line 126967)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLO; 7 ('LTR') (line 126967)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS RLO; 7 ('RTL') (line 126967)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS PDF; 7 ('auto') (line 126968)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS PDF; 7 ('LTR') (line 126968)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS PDF; 7 ('RTL') (line 126968)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS BN; 7 ('auto') (line 126969)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS BN; 7 ('LTR') (line 126969)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN CS BN; 7 ('RTL') (line 126969)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRE; 7 ('auto') (line 126970)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRE; 7 ('LTR') (line 126970)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRE; 7 ('RTL') (line 126970)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRO; 7 ('auto') (line 126971)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRO; 7 ('LTR') (line 126971)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM LRO; 7 ('RTL') (line 126971)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLE; 7 ('auto') (line 126972)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLE; 7 ('LTR') (line 126972)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLE; 7 ('RTL') (line 126972)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLO; 7 ('auto') (line 126973)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLO; 7 ('LTR') (line 126973)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM RLO; 7 ('RTL') (line 126973)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM PDF; 7 ('auto') (line 126974)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM PDF; 7 ('LTR') (line 126974)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM PDF; 7 ('RTL') (line 126974)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM BN; 7 ('auto') (line 126975)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM BN; 7 ('LTR') (line 126975)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN NSM BN; 7 ('RTL') (line 126975)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRE; 7 ('auto') (line 126976)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRE; 7 ('LTR') (line 126976)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRE; 7 ('RTL') (line 126976)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRO; 7 ('auto') (line 126977)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRO; 7 ('LTR') (line 126977)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON LRO; 7 ('RTL') (line 126977)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLE; 7 ('auto') (line 126978)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLE; 7 ('LTR') (line 126978)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLE; 7 ('RTL') (line 126978)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLO; 7 ('auto') (line 126979)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLO; 7 ('LTR') (line 126979)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON RLO; 7 ('RTL') (line 126979)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON PDF; 7 ('auto') (line 126980)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON PDF; 7 ('LTR') (line 126980)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON PDF; 7 ('RTL') (line 126980)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_126_039)
{

    expected_levels = { -1, 2, 2, -1 };

    {
        // LRO AN ON BN; 7 ('auto') (line 126981)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON BN; 7 ('LTR') (line 126981)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO AN ON BN; 7 ('RTL') (line 126981)
        std::vector<uint32_t> const cps = { 0x202D, 0x0660, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRE; 7 ('auto') (line 126982)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRE; 7 ('LTR') (line 126982)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRE; 7 ('RTL') (line 126982)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRO; 7 ('auto') (line 126983)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRO; 7 ('LTR') (line 126983)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L LRO; 7 ('RTL') (line 126983)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLE; 7 ('auto') (line 126984)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLE; 7 ('LTR') (line 126984)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLE; 7 ('RTL') (line 126984)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLO; 7 ('auto') (line 126985)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLO; 7 ('LTR') (line 126985)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L RLO; 7 ('RTL') (line 126985)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L PDF; 7 ('auto') (line 126986)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L PDF; 7 ('LTR') (line 126986)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L PDF; 7 ('RTL') (line 126986)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L BN; 7 ('auto') (line 126987)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L BN; 7 ('LTR') (line 126987)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS L BN; 7 ('RTL') (line 126987)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRE; 7 ('auto') (line 126988)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRE; 7 ('LTR') (line 126988)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRE; 7 ('RTL') (line 126988)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRO; 7 ('auto') (line 126989)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRO; 7 ('LTR') (line 126989)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R LRO; 7 ('RTL') (line 126989)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLE; 7 ('auto') (line 126990)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLE; 7 ('LTR') (line 126990)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLE; 7 ('RTL') (line 126990)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLO; 7 ('auto') (line 126991)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLO; 7 ('LTR') (line 126991)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R RLO; 7 ('RTL') (line 126991)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R PDF; 7 ('auto') (line 126992)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R PDF; 7 ('LTR') (line 126992)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R PDF; 7 ('RTL') (line 126992)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R BN; 7 ('auto') (line 126993)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R BN; 7 ('LTR') (line 126993)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS R BN; 7 ('RTL') (line 126993)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRE; 7 ('auto') (line 126994)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRE; 7 ('LTR') (line 126994)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRE; 7 ('RTL') (line 126994)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRO; 7 ('auto') (line 126995)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRO; 7 ('LTR') (line 126995)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL LRO; 7 ('RTL') (line 126995)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLE; 7 ('auto') (line 126996)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLE; 7 ('LTR') (line 126996)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLE; 7 ('RTL') (line 126996)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLO; 7 ('auto') (line 126997)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLO; 7 ('LTR') (line 126997)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL RLO; 7 ('RTL') (line 126997)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL PDF; 7 ('auto') (line 126998)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL PDF; 7 ('LTR') (line 126998)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL PDF; 7 ('RTL') (line 126998)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL BN; 7 ('auto') (line 126999)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL BN; 7 ('LTR') (line 126999)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS AL BN; 7 ('RTL') (line 126999)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS EN LRE; 7 ('auto') (line 127000)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), -1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS EN LRE; 7 ('LTR') (line 127000)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 0);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRO CS EN LRE; 7 ('RTL') (line 127000)
        std::vector<uint32_t> const cps = { 0x202D, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

}
