// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_311_000)
{
    // 1453C 003F;	
    // (𔔼) ANATOLIAN HIEROGLYPH A281	[55D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453C, 0x003F };
    uint32_t const ces[9] = { 0x55D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_001)
{
    // 1453C 0061;	
    // (𔔼) ANATOLIAN HIEROGLYPH A281	[55D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453C, 0x0061 };
    uint32_t const ces[9] = { 0x55D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_002)
{
    // 1453C 0041;	
    // (𔔼) ANATOLIAN HIEROGLYPH A281	[55D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1453C, 0x0041 };
    uint32_t const ces[9] = { 0x55D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_003)
{
    // 1453C 0062;	
    // (𔔼) ANATOLIAN HIEROGLYPH A281	[55D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453C, 0x0062 };
    uint32_t const ces[9] = { 0x55D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_004)
{
    // 1453D 0021;	
    // (𔔽) ANATOLIAN HIEROGLYPH A282	[55D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453D, 0x0021 };
    uint32_t const ces[9] = { 0x55D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_005)
{
    // 1453D 003F;	
    // (𔔽) ANATOLIAN HIEROGLYPH A282	[55D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453D, 0x003F };
    uint32_t const ces[9] = { 0x55D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_006)
{
    // 1453D 0061;	
    // (𔔽) ANATOLIAN HIEROGLYPH A282	[55D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453D, 0x0061 };
    uint32_t const ces[9] = { 0x55D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_007)
{
    // 1453D 0041;	
    // (𔔽) ANATOLIAN HIEROGLYPH A282	[55D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1453D, 0x0041 };
    uint32_t const ces[9] = { 0x55D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_008)
{
    // 1453D 0062;	
    // (𔔽) ANATOLIAN HIEROGLYPH A282	[55D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453D, 0x0062 };
    uint32_t const ces[9] = { 0x55D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_009)
{
    // 1453E 0021;	
    // (𔔾) ANATOLIAN HIEROGLYPH A283	[55D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453E, 0x0021 };
    uint32_t const ces[9] = { 0x55D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_010)
{
    // 1453E 003F;	
    // (𔔾) ANATOLIAN HIEROGLYPH A283	[55D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453E, 0x003F };
    uint32_t const ces[9] = { 0x55D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_011)
{
    // 1453E 0061;	
    // (𔔾) ANATOLIAN HIEROGLYPH A283	[55D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453E, 0x0061 };
    uint32_t const ces[9] = { 0x55D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_012)
{
    // 1453E 0041;	
    // (𔔾) ANATOLIAN HIEROGLYPH A283	[55D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1453E, 0x0041 };
    uint32_t const ces[9] = { 0x55D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_013)
{
    // 1453E 0062;	
    // (𔔾) ANATOLIAN HIEROGLYPH A283	[55D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453E, 0x0062 };
    uint32_t const ces[9] = { 0x55D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_014)
{
    // 1453F 0021;	
    // (𔔿) ANATOLIAN HIEROGLYPH A284	[55D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453F, 0x0021 };
    uint32_t const ces[9] = { 0x55D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_015)
{
    // 1453F 003F;	
    // (𔔿) ANATOLIAN HIEROGLYPH A284	[55D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453F, 0x003F };
    uint32_t const ces[9] = { 0x55D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_016)
{
    // 1453F 0061;	
    // (𔔿) ANATOLIAN HIEROGLYPH A284	[55D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453F, 0x0061 };
    uint32_t const ces[9] = { 0x55D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_017)
{
    // 1453F 0041;	
    // (𔔿) ANATOLIAN HIEROGLYPH A284	[55D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1453F, 0x0041 };
    uint32_t const ces[9] = { 0x55D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_018)
{
    // 1453F 0062;	
    // (𔔿) ANATOLIAN HIEROGLYPH A284	[55D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453F, 0x0062 };
    uint32_t const ces[9] = { 0x55D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_019)
{
    // 14540 0021;	
    // (𔕀) ANATOLIAN HIEROGLYPH A285	[55D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14540, 0x0021 };
    uint32_t const ces[9] = { 0x55D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_020)
{
    // 14540 003F;	
    // (𔕀) ANATOLIAN HIEROGLYPH A285	[55D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14540, 0x003F };
    uint32_t const ces[9] = { 0x55D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_021)
{
    // 14540 0061;	
    // (𔕀) ANATOLIAN HIEROGLYPH A285	[55D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14540, 0x0061 };
    uint32_t const ces[9] = { 0x55D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_022)
{
    // 14540 0041;	
    // (𔕀) ANATOLIAN HIEROGLYPH A285	[55D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14540, 0x0041 };
    uint32_t const ces[9] = { 0x55D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_023)
{
    // 14540 0062;	
    // (𔕀) ANATOLIAN HIEROGLYPH A285	[55D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14540, 0x0062 };
    uint32_t const ces[9] = { 0x55D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_024)
{
    // 14541 0021;	
    // (𔕁) ANATOLIAN HIEROGLYPH A286	[55D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14541, 0x0021 };
    uint32_t const ces[9] = { 0x55D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_025)
{
    // 14541 003F;	
    // (𔕁) ANATOLIAN HIEROGLYPH A286	[55D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14541, 0x003F };
    uint32_t const ces[9] = { 0x55D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_026)
{
    // 14541 0061;	
    // (𔕁) ANATOLIAN HIEROGLYPH A286	[55D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14541, 0x0061 };
    uint32_t const ces[9] = { 0x55D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_027)
{
    // 14541 0041;	
    // (𔕁) ANATOLIAN HIEROGLYPH A286	[55D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14541, 0x0041 };
    uint32_t const ces[9] = { 0x55D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_028)
{
    // 14541 0062;	
    // (𔕁) ANATOLIAN HIEROGLYPH A286	[55D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14541, 0x0062 };
    uint32_t const ces[9] = { 0x55D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_029)
{
    // 14542 0021;	
    // (𔕂) ANATOLIAN HIEROGLYPH A287	[55D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14542, 0x0021 };
    uint32_t const ces[9] = { 0x55D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_030)
{
    // 14542 003F;	
    // (𔕂) ANATOLIAN HIEROGLYPH A287	[55D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14542, 0x003F };
    uint32_t const ces[9] = { 0x55D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_031)
{
    // 14542 0061;	
    // (𔕂) ANATOLIAN HIEROGLYPH A287	[55D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14542, 0x0061 };
    uint32_t const ces[9] = { 0x55D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_032)
{
    // 14542 0041;	
    // (𔕂) ANATOLIAN HIEROGLYPH A287	[55D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14542, 0x0041 };
    uint32_t const ces[9] = { 0x55D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_033)
{
    // 14542 0062;	
    // (𔕂) ANATOLIAN HIEROGLYPH A287	[55D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14542, 0x0062 };
    uint32_t const ces[9] = { 0x55D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_034)
{
    // 14543 0021;	
    // (𔕃) ANATOLIAN HIEROGLYPH A288	[55D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14543, 0x0021 };
    uint32_t const ces[9] = { 0x55D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_035)
{
    // 14543 003F;	
    // (𔕃) ANATOLIAN HIEROGLYPH A288	[55D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14543, 0x003F };
    uint32_t const ces[9] = { 0x55D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_036)
{
    // 14543 0061;	
    // (𔕃) ANATOLIAN HIEROGLYPH A288	[55D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14543, 0x0061 };
    uint32_t const ces[9] = { 0x55D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_037)
{
    // 14543 0041;	
    // (𔕃) ANATOLIAN HIEROGLYPH A288	[55D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14543, 0x0041 };
    uint32_t const ces[9] = { 0x55D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_038)
{
    // 14543 0062;	
    // (𔕃) ANATOLIAN HIEROGLYPH A288	[55D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14543, 0x0062 };
    uint32_t const ces[9] = { 0x55D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_039)
{
    // 14544 0021;	
    // (𔕄) ANATOLIAN HIEROGLYPH A289	[55D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14544, 0x0021 };
    uint32_t const ces[9] = { 0x55D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_040)
{
    // 14544 003F;	
    // (𔕄) ANATOLIAN HIEROGLYPH A289	[55D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14544, 0x003F };
    uint32_t const ces[9] = { 0x55D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_041)
{
    // 14544 0061;	
    // (𔕄) ANATOLIAN HIEROGLYPH A289	[55D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14544, 0x0061 };
    uint32_t const ces[9] = { 0x55D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_042)
{
    // 14544 0041;	
    // (𔕄) ANATOLIAN HIEROGLYPH A289	[55D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14544, 0x0041 };
    uint32_t const ces[9] = { 0x55D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_043)
{
    // 14544 0062;	
    // (𔕄) ANATOLIAN HIEROGLYPH A289	[55D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14544, 0x0062 };
    uint32_t const ces[9] = { 0x55D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_044)
{
    // 14545 0021;	
    // (𔕅) ANATOLIAN HIEROGLYPH A289A	[55D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14545, 0x0021 };
    uint32_t const ces[9] = { 0x55D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_045)
{
    // 14545 003F;	
    // (𔕅) ANATOLIAN HIEROGLYPH A289A	[55D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14545, 0x003F };
    uint32_t const ces[9] = { 0x55D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_046)
{
    // 14545 0061;	
    // (𔕅) ANATOLIAN HIEROGLYPH A289A	[55D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14545, 0x0061 };
    uint32_t const ces[9] = { 0x55D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_047)
{
    // 14545 0041;	
    // (𔕅) ANATOLIAN HIEROGLYPH A289A	[55D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14545, 0x0041 };
    uint32_t const ces[9] = { 0x55D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_048)
{
    // 14545 0062;	
    // (𔕅) ANATOLIAN HIEROGLYPH A289A	[55D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14545, 0x0062 };
    uint32_t const ces[9] = { 0x55D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_049)
{
    // 14546 0021;	
    // (𔕆) ANATOLIAN HIEROGLYPH A290	[55DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14546, 0x0021 };
    uint32_t const ces[9] = { 0x55DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_050)
{
    // 14546 003F;	
    // (𔕆) ANATOLIAN HIEROGLYPH A290	[55DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14546, 0x003F };
    uint32_t const ces[9] = { 0x55DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_051)
{
    // 14546 0061;	
    // (𔕆) ANATOLIAN HIEROGLYPH A290	[55DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14546, 0x0061 };
    uint32_t const ces[9] = { 0x55DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_052)
{
    // 14546 0041;	
    // (𔕆) ANATOLIAN HIEROGLYPH A290	[55DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14546, 0x0041 };
    uint32_t const ces[9] = { 0x55DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_053)
{
    // 14546 0062;	
    // (𔕆) ANATOLIAN HIEROGLYPH A290	[55DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14546, 0x0062 };
    uint32_t const ces[9] = { 0x55DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_054)
{
    // 14547 0021;	
    // (𔕇) ANATOLIAN HIEROGLYPH A291	[55DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14547, 0x0021 };
    uint32_t const ces[9] = { 0x55DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_055)
{
    // 14547 003F;	
    // (𔕇) ANATOLIAN HIEROGLYPH A291	[55DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14547, 0x003F };
    uint32_t const ces[9] = { 0x55DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_056)
{
    // 14547 0061;	
    // (𔕇) ANATOLIAN HIEROGLYPH A291	[55DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14547, 0x0061 };
    uint32_t const ces[9] = { 0x55DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_057)
{
    // 14547 0041;	
    // (𔕇) ANATOLIAN HIEROGLYPH A291	[55DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14547, 0x0041 };
    uint32_t const ces[9] = { 0x55DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_058)
{
    // 14547 0062;	
    // (𔕇) ANATOLIAN HIEROGLYPH A291	[55DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14547, 0x0062 };
    uint32_t const ces[9] = { 0x55DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_059)
{
    // 14548 0021;	
    // (𔕈) ANATOLIAN HIEROGLYPH A292	[55DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14548, 0x0021 };
    uint32_t const ces[9] = { 0x55DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_060)
{
    // 14548 003F;	
    // (𔕈) ANATOLIAN HIEROGLYPH A292	[55DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14548, 0x003F };
    uint32_t const ces[9] = { 0x55DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_061)
{
    // 14548 0061;	
    // (𔕈) ANATOLIAN HIEROGLYPH A292	[55DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14548, 0x0061 };
    uint32_t const ces[9] = { 0x55DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_062)
{
    // 14548 0041;	
    // (𔕈) ANATOLIAN HIEROGLYPH A292	[55DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14548, 0x0041 };
    uint32_t const ces[9] = { 0x55DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_063)
{
    // 14548 0062;	
    // (𔕈) ANATOLIAN HIEROGLYPH A292	[55DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14548, 0x0062 };
    uint32_t const ces[9] = { 0x55DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_064)
{
    // 14549 0021;	
    // (𔕉) ANATOLIAN HIEROGLYPH A293	[55DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14549, 0x0021 };
    uint32_t const ces[9] = { 0x55DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_065)
{
    // 14549 003F;	
    // (𔕉) ANATOLIAN HIEROGLYPH A293	[55DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14549, 0x003F };
    uint32_t const ces[9] = { 0x55DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_066)
{
    // 14549 0061;	
    // (𔕉) ANATOLIAN HIEROGLYPH A293	[55DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14549, 0x0061 };
    uint32_t const ces[9] = { 0x55DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_067)
{
    // 14549 0041;	
    // (𔕉) ANATOLIAN HIEROGLYPH A293	[55DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14549, 0x0041 };
    uint32_t const ces[9] = { 0x55DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_068)
{
    // 14549 0062;	
    // (𔕉) ANATOLIAN HIEROGLYPH A293	[55DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14549, 0x0062 };
    uint32_t const ces[9] = { 0x55DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_069)
{
    // 1454A 0021;	
    // (𔕊) ANATOLIAN HIEROGLYPH A294	[55DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454A, 0x0021 };
    uint32_t const ces[9] = { 0x55DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_070)
{
    // 1454A 003F;	
    // (𔕊) ANATOLIAN HIEROGLYPH A294	[55DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454A, 0x003F };
    uint32_t const ces[9] = { 0x55DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_071)
{
    // 1454A 0061;	
    // (𔕊) ANATOLIAN HIEROGLYPH A294	[55DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454A, 0x0061 };
    uint32_t const ces[9] = { 0x55DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_072)
{
    // 1454A 0041;	
    // (𔕊) ANATOLIAN HIEROGLYPH A294	[55DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454A, 0x0041 };
    uint32_t const ces[9] = { 0x55DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_073)
{
    // 1454A 0062;	
    // (𔕊) ANATOLIAN HIEROGLYPH A294	[55DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454A, 0x0062 };
    uint32_t const ces[9] = { 0x55DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_074)
{
    // 1454B 0021;	
    // (𔕋) ANATOLIAN HIEROGLYPH A294A	[55DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454B, 0x0021 };
    uint32_t const ces[9] = { 0x55DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_075)
{
    // 1454B 003F;	
    // (𔕋) ANATOLIAN HIEROGLYPH A294A	[55DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454B, 0x003F };
    uint32_t const ces[9] = { 0x55DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_076)
{
    // 1454B 0061;	
    // (𔕋) ANATOLIAN HIEROGLYPH A294A	[55DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454B, 0x0061 };
    uint32_t const ces[9] = { 0x55DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_077)
{
    // 1454B 0041;	
    // (𔕋) ANATOLIAN HIEROGLYPH A294A	[55DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454B, 0x0041 };
    uint32_t const ces[9] = { 0x55DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_078)
{
    // 1454B 0062;	
    // (𔕋) ANATOLIAN HIEROGLYPH A294A	[55DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454B, 0x0062 };
    uint32_t const ces[9] = { 0x55DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_079)
{
    // 1454C 0021;	
    // (𔕌) ANATOLIAN HIEROGLYPH A295	[55E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454C, 0x0021 };
    uint32_t const ces[9] = { 0x55E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_080)
{
    // 1454C 003F;	
    // (𔕌) ANATOLIAN HIEROGLYPH A295	[55E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454C, 0x003F };
    uint32_t const ces[9] = { 0x55E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_081)
{
    // 1454C 0061;	
    // (𔕌) ANATOLIAN HIEROGLYPH A295	[55E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454C, 0x0061 };
    uint32_t const ces[9] = { 0x55E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_082)
{
    // 1454C 0041;	
    // (𔕌) ANATOLIAN HIEROGLYPH A295	[55E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454C, 0x0041 };
    uint32_t const ces[9] = { 0x55E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_083)
{
    // 1454C 0062;	
    // (𔕌) ANATOLIAN HIEROGLYPH A295	[55E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454C, 0x0062 };
    uint32_t const ces[9] = { 0x55E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_084)
{
    // 1454D 0021;	
    // (𔕍) ANATOLIAN HIEROGLYPH A296	[55E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454D, 0x0021 };
    uint32_t const ces[9] = { 0x55E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_085)
{
    // 1454D 003F;	
    // (𔕍) ANATOLIAN HIEROGLYPH A296	[55E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454D, 0x003F };
    uint32_t const ces[9] = { 0x55E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_086)
{
    // 1454D 0061;	
    // (𔕍) ANATOLIAN HIEROGLYPH A296	[55E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454D, 0x0061 };
    uint32_t const ces[9] = { 0x55E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_087)
{
    // 1454D 0041;	
    // (𔕍) ANATOLIAN HIEROGLYPH A296	[55E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454D, 0x0041 };
    uint32_t const ces[9] = { 0x55E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_088)
{
    // 1454D 0062;	
    // (𔕍) ANATOLIAN HIEROGLYPH A296	[55E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454D, 0x0062 };
    uint32_t const ces[9] = { 0x55E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_089)
{
    // 1454E 0021;	
    // (𔕎) ANATOLIAN HIEROGLYPH A297	[55E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454E, 0x0021 };
    uint32_t const ces[9] = { 0x55E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_090)
{
    // 1454E 003F;	
    // (𔕎) ANATOLIAN HIEROGLYPH A297	[55E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454E, 0x003F };
    uint32_t const ces[9] = { 0x55E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_091)
{
    // 1454E 0061;	
    // (𔕎) ANATOLIAN HIEROGLYPH A297	[55E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454E, 0x0061 };
    uint32_t const ces[9] = { 0x55E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_092)
{
    // 1454E 0041;	
    // (𔕎) ANATOLIAN HIEROGLYPH A297	[55E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454E, 0x0041 };
    uint32_t const ces[9] = { 0x55E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_093)
{
    // 1454E 0062;	
    // (𔕎) ANATOLIAN HIEROGLYPH A297	[55E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454E, 0x0062 };
    uint32_t const ces[9] = { 0x55E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_094)
{
    // 1454F 0021;	
    // (𔕏) ANATOLIAN HIEROGLYPH A298	[55E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454F, 0x0021 };
    uint32_t const ces[9] = { 0x55E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_095)
{
    // 1454F 003F;	
    // (𔕏) ANATOLIAN HIEROGLYPH A298	[55E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454F, 0x003F };
    uint32_t const ces[9] = { 0x55E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_096)
{
    // 1454F 0061;	
    // (𔕏) ANATOLIAN HIEROGLYPH A298	[55E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454F, 0x0061 };
    uint32_t const ces[9] = { 0x55E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_097)
{
    // 1454F 0041;	
    // (𔕏) ANATOLIAN HIEROGLYPH A298	[55E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454F, 0x0041 };
    uint32_t const ces[9] = { 0x55E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_098)
{
    // 1454F 0062;	
    // (𔕏) ANATOLIAN HIEROGLYPH A298	[55E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454F, 0x0062 };
    uint32_t const ces[9] = { 0x55E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_099)
{
    // 14550 0021;	
    // (𔕐) ANATOLIAN HIEROGLYPH A299	[55E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14550, 0x0021 };
    uint32_t const ces[9] = { 0x55E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_100)
{
    // 14550 003F;	
    // (𔕐) ANATOLIAN HIEROGLYPH A299	[55E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14550, 0x003F };
    uint32_t const ces[9] = { 0x55E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_101)
{
    // 14550 0061;	
    // (𔕐) ANATOLIAN HIEROGLYPH A299	[55E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14550, 0x0061 };
    uint32_t const ces[9] = { 0x55E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_102)
{
    // 14550 0041;	
    // (𔕐) ANATOLIAN HIEROGLYPH A299	[55E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14550, 0x0041 };
    uint32_t const ces[9] = { 0x55E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_103)
{
    // 14550 0062;	
    // (𔕐) ANATOLIAN HIEROGLYPH A299	[55E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14550, 0x0062 };
    uint32_t const ces[9] = { 0x55E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_104)
{
    // 14551 0021;	
    // (𔕑) ANATOLIAN HIEROGLYPH A299A	[55E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14551, 0x0021 };
    uint32_t const ces[9] = { 0x55E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_105)
{
    // 14551 003F;	
    // (𔕑) ANATOLIAN HIEROGLYPH A299A	[55E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14551, 0x003F };
    uint32_t const ces[9] = { 0x55E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_106)
{
    // 14551 0061;	
    // (𔕑) ANATOLIAN HIEROGLYPH A299A	[55E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14551, 0x0061 };
    uint32_t const ces[9] = { 0x55E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_107)
{
    // 14551 0041;	
    // (𔕑) ANATOLIAN HIEROGLYPH A299A	[55E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14551, 0x0041 };
    uint32_t const ces[9] = { 0x55E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_108)
{
    // 14551 0062;	
    // (𔕑) ANATOLIAN HIEROGLYPH A299A	[55E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14551, 0x0062 };
    uint32_t const ces[9] = { 0x55E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_109)
{
    // 14552 0021;	
    // (𔕒) ANATOLIAN HIEROGLYPH A300	[55E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14552, 0x0021 };
    uint32_t const ces[9] = { 0x55E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_110)
{
    // 14552 003F;	
    // (𔕒) ANATOLIAN HIEROGLYPH A300	[55E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14552, 0x003F };
    uint32_t const ces[9] = { 0x55E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_111)
{
    // 14552 0061;	
    // (𔕒) ANATOLIAN HIEROGLYPH A300	[55E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14552, 0x0061 };
    uint32_t const ces[9] = { 0x55E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_112)
{
    // 14552 0041;	
    // (𔕒) ANATOLIAN HIEROGLYPH A300	[55E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14552, 0x0041 };
    uint32_t const ces[9] = { 0x55E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_113)
{
    // 14552 0062;	
    // (𔕒) ANATOLIAN HIEROGLYPH A300	[55E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14552, 0x0062 };
    uint32_t const ces[9] = { 0x55E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_114)
{
    // 14553 0021;	
    // (𔕓) ANATOLIAN HIEROGLYPH A301	[55E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14553, 0x0021 };
    uint32_t const ces[9] = { 0x55E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_115)
{
    // 14553 003F;	
    // (𔕓) ANATOLIAN HIEROGLYPH A301	[55E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14553, 0x003F };
    uint32_t const ces[9] = { 0x55E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_116)
{
    // 14553 0061;	
    // (𔕓) ANATOLIAN HIEROGLYPH A301	[55E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14553, 0x0061 };
    uint32_t const ces[9] = { 0x55E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_117)
{
    // 14553 0041;	
    // (𔕓) ANATOLIAN HIEROGLYPH A301	[55E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14553, 0x0041 };
    uint32_t const ces[9] = { 0x55E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_118)
{
    // 14553 0062;	
    // (𔕓) ANATOLIAN HIEROGLYPH A301	[55E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14553, 0x0062 };
    uint32_t const ces[9] = { 0x55E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_119)
{
    // 14554 0021;	
    // (𔕔) ANATOLIAN HIEROGLYPH A302	[55E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14554, 0x0021 };
    uint32_t const ces[9] = { 0x55E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_120)
{
    // 14554 003F;	
    // (𔕔) ANATOLIAN HIEROGLYPH A302	[55E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14554, 0x003F };
    uint32_t const ces[9] = { 0x55E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_121)
{
    // 14554 0061;	
    // (𔕔) ANATOLIAN HIEROGLYPH A302	[55E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14554, 0x0061 };
    uint32_t const ces[9] = { 0x55E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_122)
{
    // 14554 0041;	
    // (𔕔) ANATOLIAN HIEROGLYPH A302	[55E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14554, 0x0041 };
    uint32_t const ces[9] = { 0x55E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_123)
{
    // 14554 0062;	
    // (𔕔) ANATOLIAN HIEROGLYPH A302	[55E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14554, 0x0062 };
    uint32_t const ces[9] = { 0x55E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_124)
{
    // 14555 0021;	
    // (𔕕) ANATOLIAN HIEROGLYPH A303	[55E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14555, 0x0021 };
    uint32_t const ces[9] = { 0x55E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_125)
{
    // 14555 003F;	
    // (𔕕) ANATOLIAN HIEROGLYPH A303	[55E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14555, 0x003F };
    uint32_t const ces[9] = { 0x55E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_126)
{
    // 14555 0061;	
    // (𔕕) ANATOLIAN HIEROGLYPH A303	[55E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14555, 0x0061 };
    uint32_t const ces[9] = { 0x55E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_127)
{
    // 14555 0041;	
    // (𔕕) ANATOLIAN HIEROGLYPH A303	[55E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14555, 0x0041 };
    uint32_t const ces[9] = { 0x55E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_128)
{
    // 14555 0062;	
    // (𔕕) ANATOLIAN HIEROGLYPH A303	[55E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14555, 0x0062 };
    uint32_t const ces[9] = { 0x55E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_129)
{
    // 14556 0021;	
    // (𔕖) ANATOLIAN HIEROGLYPH A304	[55EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14556, 0x0021 };
    uint32_t const ces[9] = { 0x55EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_130)
{
    // 14556 003F;	
    // (𔕖) ANATOLIAN HIEROGLYPH A304	[55EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14556, 0x003F };
    uint32_t const ces[9] = { 0x55EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_131)
{
    // 14556 0061;	
    // (𔕖) ANATOLIAN HIEROGLYPH A304	[55EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14556, 0x0061 };
    uint32_t const ces[9] = { 0x55EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_132)
{
    // 14556 0041;	
    // (𔕖) ANATOLIAN HIEROGLYPH A304	[55EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14556, 0x0041 };
    uint32_t const ces[9] = { 0x55EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_133)
{
    // 14556 0062;	
    // (𔕖) ANATOLIAN HIEROGLYPH A304	[55EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14556, 0x0062 };
    uint32_t const ces[9] = { 0x55EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_134)
{
    // 14557 0021;	
    // (𔕗) ANATOLIAN HIEROGLYPH A305	[55EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14557, 0x0021 };
    uint32_t const ces[9] = { 0x55EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_135)
{
    // 14557 003F;	
    // (𔕗) ANATOLIAN HIEROGLYPH A305	[55EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14557, 0x003F };
    uint32_t const ces[9] = { 0x55EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_136)
{
    // 14557 0061;	
    // (𔕗) ANATOLIAN HIEROGLYPH A305	[55EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14557, 0x0061 };
    uint32_t const ces[9] = { 0x55EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_137)
{
    // 14557 0041;	
    // (𔕗) ANATOLIAN HIEROGLYPH A305	[55EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14557, 0x0041 };
    uint32_t const ces[9] = { 0x55EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_138)
{
    // 14557 0062;	
    // (𔕗) ANATOLIAN HIEROGLYPH A305	[55EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14557, 0x0062 };
    uint32_t const ces[9] = { 0x55EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_139)
{
    // 14558 0021;	
    // (𔕘) ANATOLIAN HIEROGLYPH A306	[55EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14558, 0x0021 };
    uint32_t const ces[9] = { 0x55EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_140)
{
    // 14558 003F;	
    // (𔕘) ANATOLIAN HIEROGLYPH A306	[55EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14558, 0x003F };
    uint32_t const ces[9] = { 0x55EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_141)
{
    // 14558 0061;	
    // (𔕘) ANATOLIAN HIEROGLYPH A306	[55EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14558, 0x0061 };
    uint32_t const ces[9] = { 0x55EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_142)
{
    // 14558 0041;	
    // (𔕘) ANATOLIAN HIEROGLYPH A306	[55EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14558, 0x0041 };
    uint32_t const ces[9] = { 0x55EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_143)
{
    // 14558 0062;	
    // (𔕘) ANATOLIAN HIEROGLYPH A306	[55EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14558, 0x0062 };
    uint32_t const ces[9] = { 0x55EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_144)
{
    // 14559 0021;	
    // (𔕙) ANATOLIAN HIEROGLYPH A307	[55ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14559, 0x0021 };
    uint32_t const ces[9] = { 0x55ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_145)
{
    // 14559 003F;	
    // (𔕙) ANATOLIAN HIEROGLYPH A307	[55ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14559, 0x003F };
    uint32_t const ces[9] = { 0x55ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_146)
{
    // 14559 0061;	
    // (𔕙) ANATOLIAN HIEROGLYPH A307	[55ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14559, 0x0061 };
    uint32_t const ces[9] = { 0x55ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_147)
{
    // 14559 0041;	
    // (𔕙) ANATOLIAN HIEROGLYPH A307	[55ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14559, 0x0041 };
    uint32_t const ces[9] = { 0x55ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_148)
{
    // 14559 0062;	
    // (𔕙) ANATOLIAN HIEROGLYPH A307	[55ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14559, 0x0062 };
    uint32_t const ces[9] = { 0x55ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_149)
{
    // 1455A 0021;	
    // (𔕚) ANATOLIAN HIEROGLYPH A308	[55EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455A, 0x0021 };
    uint32_t const ces[9] = { 0x55EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_150)
{
    // 1455A 003F;	
    // (𔕚) ANATOLIAN HIEROGLYPH A308	[55EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455A, 0x003F };
    uint32_t const ces[9] = { 0x55EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_151)
{
    // 1455A 0061;	
    // (𔕚) ANATOLIAN HIEROGLYPH A308	[55EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455A, 0x0061 };
    uint32_t const ces[9] = { 0x55EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_152)
{
    // 1455A 0041;	
    // (𔕚) ANATOLIAN HIEROGLYPH A308	[55EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455A, 0x0041 };
    uint32_t const ces[9] = { 0x55EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_153)
{
    // 1455A 0062;	
    // (𔕚) ANATOLIAN HIEROGLYPH A308	[55EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455A, 0x0062 };
    uint32_t const ces[9] = { 0x55EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_154)
{
    // 1455B 0021;	
    // (𔕛) ANATOLIAN HIEROGLYPH A309	[55EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455B, 0x0021 };
    uint32_t const ces[9] = { 0x55EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_155)
{
    // 1455B 003F;	
    // (𔕛) ANATOLIAN HIEROGLYPH A309	[55EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455B, 0x003F };
    uint32_t const ces[9] = { 0x55EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_156)
{
    // 1455B 0061;	
    // (𔕛) ANATOLIAN HIEROGLYPH A309	[55EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455B, 0x0061 };
    uint32_t const ces[9] = { 0x55EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_157)
{
    // 1455B 0041;	
    // (𔕛) ANATOLIAN HIEROGLYPH A309	[55EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455B, 0x0041 };
    uint32_t const ces[9] = { 0x55EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_158)
{
    // 1455B 0062;	
    // (𔕛) ANATOLIAN HIEROGLYPH A309	[55EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455B, 0x0062 };
    uint32_t const ces[9] = { 0x55EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_159)
{
    // 1455C 0021;	
    // (𔕜) ANATOLIAN HIEROGLYPH A309A	[55F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455C, 0x0021 };
    uint32_t const ces[9] = { 0x55F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_160)
{
    // 1455C 003F;	
    // (𔕜) ANATOLIAN HIEROGLYPH A309A	[55F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455C, 0x003F };
    uint32_t const ces[9] = { 0x55F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_161)
{
    // 1455C 0061;	
    // (𔕜) ANATOLIAN HIEROGLYPH A309A	[55F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455C, 0x0061 };
    uint32_t const ces[9] = { 0x55F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_162)
{
    // 1455C 0041;	
    // (𔕜) ANATOLIAN HIEROGLYPH A309A	[55F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455C, 0x0041 };
    uint32_t const ces[9] = { 0x55F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_163)
{
    // 1455C 0062;	
    // (𔕜) ANATOLIAN HIEROGLYPH A309A	[55F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455C, 0x0062 };
    uint32_t const ces[9] = { 0x55F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_164)
{
    // 1455D 0021;	
    // (𔕝) ANATOLIAN HIEROGLYPH A310	[55F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455D, 0x0021 };
    uint32_t const ces[9] = { 0x55F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_165)
{
    // 1455D 003F;	
    // (𔕝) ANATOLIAN HIEROGLYPH A310	[55F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455D, 0x003F };
    uint32_t const ces[9] = { 0x55F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_166)
{
    // 1455D 0061;	
    // (𔕝) ANATOLIAN HIEROGLYPH A310	[55F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455D, 0x0061 };
    uint32_t const ces[9] = { 0x55F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_167)
{
    // 1455D 0041;	
    // (𔕝) ANATOLIAN HIEROGLYPH A310	[55F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455D, 0x0041 };
    uint32_t const ces[9] = { 0x55F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_168)
{
    // 1455D 0062;	
    // (𔕝) ANATOLIAN HIEROGLYPH A310	[55F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455D, 0x0062 };
    uint32_t const ces[9] = { 0x55F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_169)
{
    // 1455E 0021;	
    // (𔕞) ANATOLIAN HIEROGLYPH A311	[55F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455E, 0x0021 };
    uint32_t const ces[9] = { 0x55F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_170)
{
    // 1455E 003F;	
    // (𔕞) ANATOLIAN HIEROGLYPH A311	[55F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455E, 0x003F };
    uint32_t const ces[9] = { 0x55F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_171)
{
    // 1455E 0061;	
    // (𔕞) ANATOLIAN HIEROGLYPH A311	[55F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455E, 0x0061 };
    uint32_t const ces[9] = { 0x55F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_172)
{
    // 1455E 0041;	
    // (𔕞) ANATOLIAN HIEROGLYPH A311	[55F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455E, 0x0041 };
    uint32_t const ces[9] = { 0x55F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_173)
{
    // 1455E 0062;	
    // (𔕞) ANATOLIAN HIEROGLYPH A311	[55F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455E, 0x0062 };
    uint32_t const ces[9] = { 0x55F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_174)
{
    // 1455F 0021;	
    // (𔕟) ANATOLIAN HIEROGLYPH A312	[55F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455F, 0x0021 };
    uint32_t const ces[9] = { 0x55F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_175)
{
    // 1455F 003F;	
    // (𔕟) ANATOLIAN HIEROGLYPH A312	[55F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455F, 0x003F };
    uint32_t const ces[9] = { 0x55F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_176)
{
    // 1455F 0061;	
    // (𔕟) ANATOLIAN HIEROGLYPH A312	[55F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455F, 0x0061 };
    uint32_t const ces[9] = { 0x55F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_177)
{
    // 1455F 0041;	
    // (𔕟) ANATOLIAN HIEROGLYPH A312	[55F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455F, 0x0041 };
    uint32_t const ces[9] = { 0x55F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_178)
{
    // 1455F 0062;	
    // (𔕟) ANATOLIAN HIEROGLYPH A312	[55F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455F, 0x0062 };
    uint32_t const ces[9] = { 0x55F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_179)
{
    // 14560 0021;	
    // (𔕠) ANATOLIAN HIEROGLYPH A313	[55F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14560, 0x0021 };
    uint32_t const ces[9] = { 0x55F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_180)
{
    // 14560 003F;	
    // (𔕠) ANATOLIAN HIEROGLYPH A313	[55F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14560, 0x003F };
    uint32_t const ces[9] = { 0x55F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_181)
{
    // 14560 0061;	
    // (𔕠) ANATOLIAN HIEROGLYPH A313	[55F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14560, 0x0061 };
    uint32_t const ces[9] = { 0x55F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_182)
{
    // 14560 0041;	
    // (𔕠) ANATOLIAN HIEROGLYPH A313	[55F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14560, 0x0041 };
    uint32_t const ces[9] = { 0x55F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_183)
{
    // 14560 0062;	
    // (𔕠) ANATOLIAN HIEROGLYPH A313	[55F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14560, 0x0062 };
    uint32_t const ces[9] = { 0x55F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_184)
{
    // 14561 0021;	
    // (𔕡) ANATOLIAN HIEROGLYPH A314	[55F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14561, 0x0021 };
    uint32_t const ces[9] = { 0x55F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_185)
{
    // 14561 003F;	
    // (𔕡) ANATOLIAN HIEROGLYPH A314	[55F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14561, 0x003F };
    uint32_t const ces[9] = { 0x55F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_186)
{
    // 14561 0061;	
    // (𔕡) ANATOLIAN HIEROGLYPH A314	[55F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14561, 0x0061 };
    uint32_t const ces[9] = { 0x55F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_187)
{
    // 14561 0041;	
    // (𔕡) ANATOLIAN HIEROGLYPH A314	[55F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14561, 0x0041 };
    uint32_t const ces[9] = { 0x55F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_188)
{
    // 14561 0062;	
    // (𔕡) ANATOLIAN HIEROGLYPH A314	[55F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14561, 0x0062 };
    uint32_t const ces[9] = { 0x55F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_189)
{
    // 14562 0021;	
    // (𔕢) ANATOLIAN HIEROGLYPH A315	[55F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14562, 0x0021 };
    uint32_t const ces[9] = { 0x55F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_190)
{
    // 14562 003F;	
    // (𔕢) ANATOLIAN HIEROGLYPH A315	[55F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14562, 0x003F };
    uint32_t const ces[9] = { 0x55F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_191)
{
    // 14562 0061;	
    // (𔕢) ANATOLIAN HIEROGLYPH A315	[55F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14562, 0x0061 };
    uint32_t const ces[9] = { 0x55F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_192)
{
    // 14562 0041;	
    // (𔕢) ANATOLIAN HIEROGLYPH A315	[55F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14562, 0x0041 };
    uint32_t const ces[9] = { 0x55F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_193)
{
    // 14562 0062;	
    // (𔕢) ANATOLIAN HIEROGLYPH A315	[55F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14562, 0x0062 };
    uint32_t const ces[9] = { 0x55F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_194)
{
    // 14563 0021;	
    // (𔕣) ANATOLIAN HIEROGLYPH A316	[55F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14563, 0x0021 };
    uint32_t const ces[9] = { 0x55F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_195)
{
    // 14563 003F;	
    // (𔕣) ANATOLIAN HIEROGLYPH A316	[55F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14563, 0x003F };
    uint32_t const ces[9] = { 0x55F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_196)
{
    // 14563 0061;	
    // (𔕣) ANATOLIAN HIEROGLYPH A316	[55F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14563, 0x0061 };
    uint32_t const ces[9] = { 0x55F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_197)
{
    // 14563 0041;	
    // (𔕣) ANATOLIAN HIEROGLYPH A316	[55F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14563, 0x0041 };
    uint32_t const ces[9] = { 0x55F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_198)
{
    // 14563 0062;	
    // (𔕣) ANATOLIAN HIEROGLYPH A316	[55F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14563, 0x0062 };
    uint32_t const ces[9] = { 0x55F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_199)
{
    // 14564 0021;	
    // (𔕤) ANATOLIAN HIEROGLYPH A317	[55F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14564, 0x0021 };
    uint32_t const ces[9] = { 0x55F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_200)
{
    // 14564 003F;	
    // (𔕤) ANATOLIAN HIEROGLYPH A317	[55F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14564, 0x003F };
    uint32_t const ces[9] = { 0x55F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_201)
{
    // 14564 0061;	
    // (𔕤) ANATOLIAN HIEROGLYPH A317	[55F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14564, 0x0061 };
    uint32_t const ces[9] = { 0x55F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_202)
{
    // 14564 0041;	
    // (𔕤) ANATOLIAN HIEROGLYPH A317	[55F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14564, 0x0041 };
    uint32_t const ces[9] = { 0x55F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_203)
{
    // 14564 0062;	
    // (𔕤) ANATOLIAN HIEROGLYPH A317	[55F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14564, 0x0062 };
    uint32_t const ces[9] = { 0x55F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_204)
{
    // 14565 0021;	
    // (𔕥) ANATOLIAN HIEROGLYPH A318	[55F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14565, 0x0021 };
    uint32_t const ces[9] = { 0x55F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_205)
{
    // 14565 003F;	
    // (𔕥) ANATOLIAN HIEROGLYPH A318	[55F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14565, 0x003F };
    uint32_t const ces[9] = { 0x55F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_206)
{
    // 14565 0061;	
    // (𔕥) ANATOLIAN HIEROGLYPH A318	[55F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14565, 0x0061 };
    uint32_t const ces[9] = { 0x55F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_207)
{
    // 14565 0041;	
    // (𔕥) ANATOLIAN HIEROGLYPH A318	[55F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14565, 0x0041 };
    uint32_t const ces[9] = { 0x55F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_208)
{
    // 14565 0062;	
    // (𔕥) ANATOLIAN HIEROGLYPH A318	[55F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14565, 0x0062 };
    uint32_t const ces[9] = { 0x55F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_209)
{
    // 14566 0021;	
    // (𔕦) ANATOLIAN HIEROGLYPH A319	[55FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14566, 0x0021 };
    uint32_t const ces[9] = { 0x55FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_210)
{
    // 14566 003F;	
    // (𔕦) ANATOLIAN HIEROGLYPH A319	[55FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14566, 0x003F };
    uint32_t const ces[9] = { 0x55FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_211)
{
    // 14566 0061;	
    // (𔕦) ANATOLIAN HIEROGLYPH A319	[55FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14566, 0x0061 };
    uint32_t const ces[9] = { 0x55FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_212)
{
    // 14566 0041;	
    // (𔕦) ANATOLIAN HIEROGLYPH A319	[55FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14566, 0x0041 };
    uint32_t const ces[9] = { 0x55FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_213)
{
    // 14566 0062;	
    // (𔕦) ANATOLIAN HIEROGLYPH A319	[55FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14566, 0x0062 };
    uint32_t const ces[9] = { 0x55FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_214)
{
    // 14567 0021;	
    // (𔕧) ANATOLIAN HIEROGLYPH A320	[55FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14567, 0x0021 };
    uint32_t const ces[9] = { 0x55FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_215)
{
    // 14567 003F;	
    // (𔕧) ANATOLIAN HIEROGLYPH A320	[55FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14567, 0x003F };
    uint32_t const ces[9] = { 0x55FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_216)
{
    // 14567 0061;	
    // (𔕧) ANATOLIAN HIEROGLYPH A320	[55FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14567, 0x0061 };
    uint32_t const ces[9] = { 0x55FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_217)
{
    // 14567 0041;	
    // (𔕧) ANATOLIAN HIEROGLYPH A320	[55FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14567, 0x0041 };
    uint32_t const ces[9] = { 0x55FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_218)
{
    // 14567 0062;	
    // (𔕧) ANATOLIAN HIEROGLYPH A320	[55FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14567, 0x0062 };
    uint32_t const ces[9] = { 0x55FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_219)
{
    // 14568 0021;	
    // (𔕨) ANATOLIAN HIEROGLYPH A321	[55FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14568, 0x0021 };
    uint32_t const ces[9] = { 0x55FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_220)
{
    // 14568 003F;	
    // (𔕨) ANATOLIAN HIEROGLYPH A321	[55FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14568, 0x003F };
    uint32_t const ces[9] = { 0x55FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_221)
{
    // 14568 0061;	
    // (𔕨) ANATOLIAN HIEROGLYPH A321	[55FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14568, 0x0061 };
    uint32_t const ces[9] = { 0x55FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_222)
{
    // 14568 0041;	
    // (𔕨) ANATOLIAN HIEROGLYPH A321	[55FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14568, 0x0041 };
    uint32_t const ces[9] = { 0x55FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_223)
{
    // 14568 0062;	
    // (𔕨) ANATOLIAN HIEROGLYPH A321	[55FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14568, 0x0062 };
    uint32_t const ces[9] = { 0x55FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_224)
{
    // 14569 0021;	
    // (𔕩) ANATOLIAN HIEROGLYPH A322	[55FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14569, 0x0021 };
    uint32_t const ces[9] = { 0x55FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_225)
{
    // 14569 003F;	
    // (𔕩) ANATOLIAN HIEROGLYPH A322	[55FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14569, 0x003F };
    uint32_t const ces[9] = { 0x55FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_226)
{
    // 14569 0061;	
    // (𔕩) ANATOLIAN HIEROGLYPH A322	[55FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14569, 0x0061 };
    uint32_t const ces[9] = { 0x55FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_227)
{
    // 14569 0041;	
    // (𔕩) ANATOLIAN HIEROGLYPH A322	[55FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14569, 0x0041 };
    uint32_t const ces[9] = { 0x55FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_228)
{
    // 14569 0062;	
    // (𔕩) ANATOLIAN HIEROGLYPH A322	[55FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14569, 0x0062 };
    uint32_t const ces[9] = { 0x55FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_229)
{
    // 1456A 0021;	
    // (𔕪) ANATOLIAN HIEROGLYPH A323	[55FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456A, 0x0021 };
    uint32_t const ces[9] = { 0x55FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_230)
{
    // 1456A 003F;	
    // (𔕪) ANATOLIAN HIEROGLYPH A323	[55FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456A, 0x003F };
    uint32_t const ces[9] = { 0x55FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_231)
{
    // 1456A 0061;	
    // (𔕪) ANATOLIAN HIEROGLYPH A323	[55FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456A, 0x0061 };
    uint32_t const ces[9] = { 0x55FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_232)
{
    // 1456A 0041;	
    // (𔕪) ANATOLIAN HIEROGLYPH A323	[55FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456A, 0x0041 };
    uint32_t const ces[9] = { 0x55FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_233)
{
    // 1456A 0062;	
    // (𔕪) ANATOLIAN HIEROGLYPH A323	[55FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456A, 0x0062 };
    uint32_t const ces[9] = { 0x55FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_234)
{
    // 1456B 0021;	
    // (𔕫) ANATOLIAN HIEROGLYPH A324	[55FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456B, 0x0021 };
    uint32_t const ces[9] = { 0x55FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_235)
{
    // 1456B 003F;	
    // (𔕫) ANATOLIAN HIEROGLYPH A324	[55FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456B, 0x003F };
    uint32_t const ces[9] = { 0x55FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_236)
{
    // 1456B 0061;	
    // (𔕫) ANATOLIAN HIEROGLYPH A324	[55FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456B, 0x0061 };
    uint32_t const ces[9] = { 0x55FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_237)
{
    // 1456B 0041;	
    // (𔕫) ANATOLIAN HIEROGLYPH A324	[55FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456B, 0x0041 };
    uint32_t const ces[9] = { 0x55FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_238)
{
    // 1456B 0062;	
    // (𔕫) ANATOLIAN HIEROGLYPH A324	[55FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456B, 0x0062 };
    uint32_t const ces[9] = { 0x55FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_239)
{
    // 1456C 0021;	
    // (𔕬) ANATOLIAN HIEROGLYPH A325	[5600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456C, 0x0021 };
    uint32_t const ces[9] = { 0x5600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_240)
{
    // 1456C 003F;	
    // (𔕬) ANATOLIAN HIEROGLYPH A325	[5600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456C, 0x003F };
    uint32_t const ces[9] = { 0x5600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_241)
{
    // 1456C 0061;	
    // (𔕬) ANATOLIAN HIEROGLYPH A325	[5600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456C, 0x0061 };
    uint32_t const ces[9] = { 0x5600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_242)
{
    // 1456C 0041;	
    // (𔕬) ANATOLIAN HIEROGLYPH A325	[5600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456C, 0x0041 };
    uint32_t const ces[9] = { 0x5600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_243)
{
    // 1456C 0062;	
    // (𔕬) ANATOLIAN HIEROGLYPH A325	[5600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456C, 0x0062 };
    uint32_t const ces[9] = { 0x5600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_244)
{
    // 1456D 0021;	
    // (𔕭) ANATOLIAN HIEROGLYPH A326	[5601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456D, 0x0021 };
    uint32_t const ces[9] = { 0x5601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_245)
{
    // 1456D 003F;	
    // (𔕭) ANATOLIAN HIEROGLYPH A326	[5601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456D, 0x003F };
    uint32_t const ces[9] = { 0x5601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_246)
{
    // 1456D 0061;	
    // (𔕭) ANATOLIAN HIEROGLYPH A326	[5601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456D, 0x0061 };
    uint32_t const ces[9] = { 0x5601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_247)
{
    // 1456D 0041;	
    // (𔕭) ANATOLIAN HIEROGLYPH A326	[5601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456D, 0x0041 };
    uint32_t const ces[9] = { 0x5601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_248)
{
    // 1456D 0062;	
    // (𔕭) ANATOLIAN HIEROGLYPH A326	[5601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456D, 0x0062 };
    uint32_t const ces[9] = { 0x5601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_249)
{
    // 1456E 0021;	
    // (𔕮) ANATOLIAN HIEROGLYPH A327	[5602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456E, 0x0021 };
    uint32_t const ces[9] = { 0x5602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_250)
{
    // 1456E 003F;	
    // (𔕮) ANATOLIAN HIEROGLYPH A327	[5602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456E, 0x003F };
    uint32_t const ces[9] = { 0x5602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_251)
{
    // 1456E 0061;	
    // (𔕮) ANATOLIAN HIEROGLYPH A327	[5602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456E, 0x0061 };
    uint32_t const ces[9] = { 0x5602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_252)
{
    // 1456E 0041;	
    // (𔕮) ANATOLIAN HIEROGLYPH A327	[5602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456E, 0x0041 };
    uint32_t const ces[9] = { 0x5602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_253)
{
    // 1456E 0062;	
    // (𔕮) ANATOLIAN HIEROGLYPH A327	[5602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456E, 0x0062 };
    uint32_t const ces[9] = { 0x5602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_254)
{
    // 1456F 0021;	
    // (𔕯) ANATOLIAN HIEROGLYPH A328	[5603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456F, 0x0021 };
    uint32_t const ces[9] = { 0x5603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_255)
{
    // 1456F 003F;	
    // (𔕯) ANATOLIAN HIEROGLYPH A328	[5603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456F, 0x003F };
    uint32_t const ces[9] = { 0x5603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_256)
{
    // 1456F 0061;	
    // (𔕯) ANATOLIAN HIEROGLYPH A328	[5603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456F, 0x0061 };
    uint32_t const ces[9] = { 0x5603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_257)
{
    // 1456F 0041;	
    // (𔕯) ANATOLIAN HIEROGLYPH A328	[5603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456F, 0x0041 };
    uint32_t const ces[9] = { 0x5603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_258)
{
    // 1456F 0062;	
    // (𔕯) ANATOLIAN HIEROGLYPH A328	[5603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456F, 0x0062 };
    uint32_t const ces[9] = { 0x5603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_259)
{
    // 14570 0021;	
    // (𔕰) ANATOLIAN HIEROGLYPH A329	[5604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14570, 0x0021 };
    uint32_t const ces[9] = { 0x5604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_260)
{
    // 14570 003F;	
    // (𔕰) ANATOLIAN HIEROGLYPH A329	[5604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14570, 0x003F };
    uint32_t const ces[9] = { 0x5604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_261)
{
    // 14570 0061;	
    // (𔕰) ANATOLIAN HIEROGLYPH A329	[5604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14570, 0x0061 };
    uint32_t const ces[9] = { 0x5604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_262)
{
    // 14570 0041;	
    // (𔕰) ANATOLIAN HIEROGLYPH A329	[5604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14570, 0x0041 };
    uint32_t const ces[9] = { 0x5604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_263)
{
    // 14570 0062;	
    // (𔕰) ANATOLIAN HIEROGLYPH A329	[5604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14570, 0x0062 };
    uint32_t const ces[9] = { 0x5604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_264)
{
    // 14571 0021;	
    // (𔕱) ANATOLIAN HIEROGLYPH A329A	[5605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14571, 0x0021 };
    uint32_t const ces[9] = { 0x5605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_265)
{
    // 14571 003F;	
    // (𔕱) ANATOLIAN HIEROGLYPH A329A	[5605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14571, 0x003F };
    uint32_t const ces[9] = { 0x5605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_266)
{
    // 14571 0061;	
    // (𔕱) ANATOLIAN HIEROGLYPH A329A	[5605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14571, 0x0061 };
    uint32_t const ces[9] = { 0x5605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_267)
{
    // 14571 0041;	
    // (𔕱) ANATOLIAN HIEROGLYPH A329A	[5605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14571, 0x0041 };
    uint32_t const ces[9] = { 0x5605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_268)
{
    // 14571 0062;	
    // (𔕱) ANATOLIAN HIEROGLYPH A329A	[5605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14571, 0x0062 };
    uint32_t const ces[9] = { 0x5605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_269)
{
    // 14572 0021;	
    // (𔕲) ANATOLIAN HIEROGLYPH A330	[5606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14572, 0x0021 };
    uint32_t const ces[9] = { 0x5606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_270)
{
    // 14572 003F;	
    // (𔕲) ANATOLIAN HIEROGLYPH A330	[5606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14572, 0x003F };
    uint32_t const ces[9] = { 0x5606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_271)
{
    // 14572 0061;	
    // (𔕲) ANATOLIAN HIEROGLYPH A330	[5606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14572, 0x0061 };
    uint32_t const ces[9] = { 0x5606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_272)
{
    // 14572 0041;	
    // (𔕲) ANATOLIAN HIEROGLYPH A330	[5606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14572, 0x0041 };
    uint32_t const ces[9] = { 0x5606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_273)
{
    // 14572 0062;	
    // (𔕲) ANATOLIAN HIEROGLYPH A330	[5606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14572, 0x0062 };
    uint32_t const ces[9] = { 0x5606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_274)
{
    // 14573 0021;	
    // (𔕳) ANATOLIAN HIEROGLYPH A331	[5607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14573, 0x0021 };
    uint32_t const ces[9] = { 0x5607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_275)
{
    // 14573 003F;	
    // (𔕳) ANATOLIAN HIEROGLYPH A331	[5607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14573, 0x003F };
    uint32_t const ces[9] = { 0x5607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_276)
{
    // 14573 0061;	
    // (𔕳) ANATOLIAN HIEROGLYPH A331	[5607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14573, 0x0061 };
    uint32_t const ces[9] = { 0x5607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_277)
{
    // 14573 0041;	
    // (𔕳) ANATOLIAN HIEROGLYPH A331	[5607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14573, 0x0041 };
    uint32_t const ces[9] = { 0x5607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_278)
{
    // 14573 0062;	
    // (𔕳) ANATOLIAN HIEROGLYPH A331	[5607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14573, 0x0062 };
    uint32_t const ces[9] = { 0x5607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_279)
{
    // 14574 0021;	
    // (𔕴) ANATOLIAN HIEROGLYPH A332A	[5608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14574, 0x0021 };
    uint32_t const ces[9] = { 0x5608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_280)
{
    // 14574 003F;	
    // (𔕴) ANATOLIAN HIEROGLYPH A332A	[5608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14574, 0x003F };
    uint32_t const ces[9] = { 0x5608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_281)
{
    // 14574 0061;	
    // (𔕴) ANATOLIAN HIEROGLYPH A332A	[5608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14574, 0x0061 };
    uint32_t const ces[9] = { 0x5608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_282)
{
    // 14574 0041;	
    // (𔕴) ANATOLIAN HIEROGLYPH A332A	[5608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14574, 0x0041 };
    uint32_t const ces[9] = { 0x5608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_283)
{
    // 14574 0062;	
    // (𔕴) ANATOLIAN HIEROGLYPH A332A	[5608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14574, 0x0062 };
    uint32_t const ces[9] = { 0x5608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_284)
{
    // 14575 0021;	
    // (𔕵) ANATOLIAN HIEROGLYPH A332B	[5609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14575, 0x0021 };
    uint32_t const ces[9] = { 0x5609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_285)
{
    // 14575 003F;	
    // (𔕵) ANATOLIAN HIEROGLYPH A332B	[5609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14575, 0x003F };
    uint32_t const ces[9] = { 0x5609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_286)
{
    // 14575 0061;	
    // (𔕵) ANATOLIAN HIEROGLYPH A332B	[5609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14575, 0x0061 };
    uint32_t const ces[9] = { 0x5609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_287)
{
    // 14575 0041;	
    // (𔕵) ANATOLIAN HIEROGLYPH A332B	[5609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14575, 0x0041 };
    uint32_t const ces[9] = { 0x5609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_288)
{
    // 14575 0062;	
    // (𔕵) ANATOLIAN HIEROGLYPH A332B	[5609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14575, 0x0062 };
    uint32_t const ces[9] = { 0x5609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_289)
{
    // 14576 0021;	
    // (𔕶) ANATOLIAN HIEROGLYPH A332C	[560A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14576, 0x0021 };
    uint32_t const ces[9] = { 0x560A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_290)
{
    // 14576 003F;	
    // (𔕶) ANATOLIAN HIEROGLYPH A332C	[560A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14576, 0x003F };
    uint32_t const ces[9] = { 0x560A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_291)
{
    // 14576 0061;	
    // (𔕶) ANATOLIAN HIEROGLYPH A332C	[560A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14576, 0x0061 };
    uint32_t const ces[9] = { 0x560A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_292)
{
    // 14576 0041;	
    // (𔕶) ANATOLIAN HIEROGLYPH A332C	[560A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14576, 0x0041 };
    uint32_t const ces[9] = { 0x560A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_293)
{
    // 14576 0062;	
    // (𔕶) ANATOLIAN HIEROGLYPH A332C	[560A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14576, 0x0062 };
    uint32_t const ces[9] = { 0x560A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_294)
{
    // 14577 0021;	
    // (𔕷) ANATOLIAN HIEROGLYPH A333	[560B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14577, 0x0021 };
    uint32_t const ces[9] = { 0x560B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_295)
{
    // 14577 003F;	
    // (𔕷) ANATOLIAN HIEROGLYPH A333	[560B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14577, 0x003F };
    uint32_t const ces[9] = { 0x560B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_296)
{
    // 14577 0061;	
    // (𔕷) ANATOLIAN HIEROGLYPH A333	[560B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14577, 0x0061 };
    uint32_t const ces[9] = { 0x560B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_297)
{
    // 14577 0041;	
    // (𔕷) ANATOLIAN HIEROGLYPH A333	[560B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14577, 0x0041 };
    uint32_t const ces[9] = { 0x560B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_298)
{
    // 14577 0062;	
    // (𔕷) ANATOLIAN HIEROGLYPH A333	[560B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14577, 0x0062 };
    uint32_t const ces[9] = { 0x560B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_299)
{
    // 14578 0021;	
    // (𔕸) ANATOLIAN HIEROGLYPH A334	[560C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14578, 0x0021 };
    uint32_t const ces[9] = { 0x560C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_300)
{
    // 14578 003F;	
    // (𔕸) ANATOLIAN HIEROGLYPH A334	[560C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14578, 0x003F };
    uint32_t const ces[9] = { 0x560C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_301)
{
    // 14578 0061;	
    // (𔕸) ANATOLIAN HIEROGLYPH A334	[560C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14578, 0x0061 };
    uint32_t const ces[9] = { 0x560C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_302)
{
    // 14578 0041;	
    // (𔕸) ANATOLIAN HIEROGLYPH A334	[560C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14578, 0x0041 };
    uint32_t const ces[9] = { 0x560C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_303)
{
    // 14578 0062;	
    // (𔕸) ANATOLIAN HIEROGLYPH A334	[560C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14578, 0x0062 };
    uint32_t const ces[9] = { 0x560C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_304)
{
    // 14579 0021;	
    // (𔕹) ANATOLIAN HIEROGLYPH A335	[560D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14579, 0x0021 };
    uint32_t const ces[9] = { 0x560D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_305)
{
    // 14579 003F;	
    // (𔕹) ANATOLIAN HIEROGLYPH A335	[560D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14579, 0x003F };
    uint32_t const ces[9] = { 0x560D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_306)
{
    // 14579 0061;	
    // (𔕹) ANATOLIAN HIEROGLYPH A335	[560D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14579, 0x0061 };
    uint32_t const ces[9] = { 0x560D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_307)
{
    // 14579 0041;	
    // (𔕹) ANATOLIAN HIEROGLYPH A335	[560D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14579, 0x0041 };
    uint32_t const ces[9] = { 0x560D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_308)
{
    // 14579 0062;	
    // (𔕹) ANATOLIAN HIEROGLYPH A335	[560D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14579, 0x0062 };
    uint32_t const ces[9] = { 0x560D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_309)
{
    // 1457A 0021;	
    // (𔕺) ANATOLIAN HIEROGLYPH A336	[560E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457A, 0x0021 };
    uint32_t const ces[9] = { 0x560E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_310)
{
    // 1457A 003F;	
    // (𔕺) ANATOLIAN HIEROGLYPH A336	[560E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457A, 0x003F };
    uint32_t const ces[9] = { 0x560E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_311)
{
    // 1457A 0061;	
    // (𔕺) ANATOLIAN HIEROGLYPH A336	[560E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457A, 0x0061 };
    uint32_t const ces[9] = { 0x560E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_312)
{
    // 1457A 0041;	
    // (𔕺) ANATOLIAN HIEROGLYPH A336	[560E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457A, 0x0041 };
    uint32_t const ces[9] = { 0x560E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_313)
{
    // 1457A 0062;	
    // (𔕺) ANATOLIAN HIEROGLYPH A336	[560E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457A, 0x0062 };
    uint32_t const ces[9] = { 0x560E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_314)
{
    // 1457B 0021;	
    // (𔕻) ANATOLIAN HIEROGLYPH A336A	[560F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457B, 0x0021 };
    uint32_t const ces[9] = { 0x560F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_315)
{
    // 1457B 003F;	
    // (𔕻) ANATOLIAN HIEROGLYPH A336A	[560F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457B, 0x003F };
    uint32_t const ces[9] = { 0x560F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_316)
{
    // 1457B 0061;	
    // (𔕻) ANATOLIAN HIEROGLYPH A336A	[560F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457B, 0x0061 };
    uint32_t const ces[9] = { 0x560F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_317)
{
    // 1457B 0041;	
    // (𔕻) ANATOLIAN HIEROGLYPH A336A	[560F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457B, 0x0041 };
    uint32_t const ces[9] = { 0x560F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_318)
{
    // 1457B 0062;	
    // (𔕻) ANATOLIAN HIEROGLYPH A336A	[560F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457B, 0x0062 };
    uint32_t const ces[9] = { 0x560F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_319)
{
    // 1457C 0021;	
    // (𔕼) ANATOLIAN HIEROGLYPH A336B	[5610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457C, 0x0021 };
    uint32_t const ces[9] = { 0x5610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_320)
{
    // 1457C 003F;	
    // (𔕼) ANATOLIAN HIEROGLYPH A336B	[5610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457C, 0x003F };
    uint32_t const ces[9] = { 0x5610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_321)
{
    // 1457C 0061;	
    // (𔕼) ANATOLIAN HIEROGLYPH A336B	[5610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457C, 0x0061 };
    uint32_t const ces[9] = { 0x5610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_322)
{
    // 1457C 0041;	
    // (𔕼) ANATOLIAN HIEROGLYPH A336B	[5610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457C, 0x0041 };
    uint32_t const ces[9] = { 0x5610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_323)
{
    // 1457C 0062;	
    // (𔕼) ANATOLIAN HIEROGLYPH A336B	[5610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457C, 0x0062 };
    uint32_t const ces[9] = { 0x5610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_324)
{
    // 1457D 0021;	
    // (𔕽) ANATOLIAN HIEROGLYPH A336C	[5611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457D, 0x0021 };
    uint32_t const ces[9] = { 0x5611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_325)
{
    // 1457D 003F;	
    // (𔕽) ANATOLIAN HIEROGLYPH A336C	[5611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457D, 0x003F };
    uint32_t const ces[9] = { 0x5611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_326)
{
    // 1457D 0061;	
    // (𔕽) ANATOLIAN HIEROGLYPH A336C	[5611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457D, 0x0061 };
    uint32_t const ces[9] = { 0x5611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_327)
{
    // 1457D 0041;	
    // (𔕽) ANATOLIAN HIEROGLYPH A336C	[5611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457D, 0x0041 };
    uint32_t const ces[9] = { 0x5611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_328)
{
    // 1457D 0062;	
    // (𔕽) ANATOLIAN HIEROGLYPH A336C	[5611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457D, 0x0062 };
    uint32_t const ces[9] = { 0x5611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_329)
{
    // 1457E 0021;	
    // (𔕾) ANATOLIAN HIEROGLYPH A337	[5612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457E, 0x0021 };
    uint32_t const ces[9] = { 0x5612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_330)
{
    // 1457E 003F;	
    // (𔕾) ANATOLIAN HIEROGLYPH A337	[5612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457E, 0x003F };
    uint32_t const ces[9] = { 0x5612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_331)
{
    // 1457E 0061;	
    // (𔕾) ANATOLIAN HIEROGLYPH A337	[5612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457E, 0x0061 };
    uint32_t const ces[9] = { 0x5612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_332)
{
    // 1457E 0041;	
    // (𔕾) ANATOLIAN HIEROGLYPH A337	[5612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457E, 0x0041 };
    uint32_t const ces[9] = { 0x5612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_333)
{
    // 1457E 0062;	
    // (𔕾) ANATOLIAN HIEROGLYPH A337	[5612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457E, 0x0062 };
    uint32_t const ces[9] = { 0x5612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_334)
{
    // 1457F 0021;	
    // (𔕿) ANATOLIAN HIEROGLYPH A338	[5613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457F, 0x0021 };
    uint32_t const ces[9] = { 0x5613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_335)
{
    // 1457F 003F;	
    // (𔕿) ANATOLIAN HIEROGLYPH A338	[5613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457F, 0x003F };
    uint32_t const ces[9] = { 0x5613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_336)
{
    // 1457F 0061;	
    // (𔕿) ANATOLIAN HIEROGLYPH A338	[5613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457F, 0x0061 };
    uint32_t const ces[9] = { 0x5613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_337)
{
    // 1457F 0041;	
    // (𔕿) ANATOLIAN HIEROGLYPH A338	[5613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457F, 0x0041 };
    uint32_t const ces[9] = { 0x5613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_338)
{
    // 1457F 0062;	
    // (𔕿) ANATOLIAN HIEROGLYPH A338	[5613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457F, 0x0062 };
    uint32_t const ces[9] = { 0x5613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_339)
{
    // 14580 0021;	
    // (𔖀) ANATOLIAN HIEROGLYPH A339	[5614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14580, 0x0021 };
    uint32_t const ces[9] = { 0x5614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_340)
{
    // 14580 003F;	
    // (𔖀) ANATOLIAN HIEROGLYPH A339	[5614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14580, 0x003F };
    uint32_t const ces[9] = { 0x5614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_341)
{
    // 14580 0061;	
    // (𔖀) ANATOLIAN HIEROGLYPH A339	[5614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14580, 0x0061 };
    uint32_t const ces[9] = { 0x5614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_342)
{
    // 14580 0041;	
    // (𔖀) ANATOLIAN HIEROGLYPH A339	[5614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14580, 0x0041 };
    uint32_t const ces[9] = { 0x5614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_343)
{
    // 14580 0062;	
    // (𔖀) ANATOLIAN HIEROGLYPH A339	[5614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14580, 0x0062 };
    uint32_t const ces[9] = { 0x5614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_344)
{
    // 14581 0021;	
    // (𔖁) ANATOLIAN HIEROGLYPH A340	[5615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14581, 0x0021 };
    uint32_t const ces[9] = { 0x5615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_345)
{
    // 14581 003F;	
    // (𔖁) ANATOLIAN HIEROGLYPH A340	[5615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14581, 0x003F };
    uint32_t const ces[9] = { 0x5615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_346)
{
    // 14581 0061;	
    // (𔖁) ANATOLIAN HIEROGLYPH A340	[5615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14581, 0x0061 };
    uint32_t const ces[9] = { 0x5615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_347)
{
    // 14581 0041;	
    // (𔖁) ANATOLIAN HIEROGLYPH A340	[5615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14581, 0x0041 };
    uint32_t const ces[9] = { 0x5615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_348)
{
    // 14581 0062;	
    // (𔖁) ANATOLIAN HIEROGLYPH A340	[5615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14581, 0x0062 };
    uint32_t const ces[9] = { 0x5615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_349)
{
    // 14582 0021;	
    // (𔖂) ANATOLIAN HIEROGLYPH A341	[5616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14582, 0x0021 };
    uint32_t const ces[9] = { 0x5616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_350)
{
    // 14582 003F;	
    // (𔖂) ANATOLIAN HIEROGLYPH A341	[5616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14582, 0x003F };
    uint32_t const ces[9] = { 0x5616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_351)
{
    // 14582 0061;	
    // (𔖂) ANATOLIAN HIEROGLYPH A341	[5616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14582, 0x0061 };
    uint32_t const ces[9] = { 0x5616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_352)
{
    // 14582 0041;	
    // (𔖂) ANATOLIAN HIEROGLYPH A341	[5616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14582, 0x0041 };
    uint32_t const ces[9] = { 0x5616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_353)
{
    // 14582 0062;	
    // (𔖂) ANATOLIAN HIEROGLYPH A341	[5616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14582, 0x0062 };
    uint32_t const ces[9] = { 0x5616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_354)
{
    // 14583 0021;	
    // (𔖃) ANATOLIAN HIEROGLYPH A342	[5617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14583, 0x0021 };
    uint32_t const ces[9] = { 0x5617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_355)
{
    // 14583 003F;	
    // (𔖃) ANATOLIAN HIEROGLYPH A342	[5617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14583, 0x003F };
    uint32_t const ces[9] = { 0x5617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_356)
{
    // 14583 0061;	
    // (𔖃) ANATOLIAN HIEROGLYPH A342	[5617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14583, 0x0061 };
    uint32_t const ces[9] = { 0x5617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_357)
{
    // 14583 0041;	
    // (𔖃) ANATOLIAN HIEROGLYPH A342	[5617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14583, 0x0041 };
    uint32_t const ces[9] = { 0x5617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_358)
{
    // 14583 0062;	
    // (𔖃) ANATOLIAN HIEROGLYPH A342	[5617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14583, 0x0062 };
    uint32_t const ces[9] = { 0x5617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_359)
{
    // 14584 0021;	
    // (𔖄) ANATOLIAN HIEROGLYPH A343	[5618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14584, 0x0021 };
    uint32_t const ces[9] = { 0x5618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_360)
{
    // 14584 003F;	
    // (𔖄) ANATOLIAN HIEROGLYPH A343	[5618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14584, 0x003F };
    uint32_t const ces[9] = { 0x5618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_361)
{
    // 14584 0061;	
    // (𔖄) ANATOLIAN HIEROGLYPH A343	[5618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14584, 0x0061 };
    uint32_t const ces[9] = { 0x5618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_362)
{
    // 14584 0041;	
    // (𔖄) ANATOLIAN HIEROGLYPH A343	[5618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14584, 0x0041 };
    uint32_t const ces[9] = { 0x5618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_363)
{
    // 14584 0062;	
    // (𔖄) ANATOLIAN HIEROGLYPH A343	[5618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14584, 0x0062 };
    uint32_t const ces[9] = { 0x5618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_364)
{
    // 14585 0021;	
    // (𔖅) ANATOLIAN HIEROGLYPH A344	[5619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14585, 0x0021 };
    uint32_t const ces[9] = { 0x5619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_365)
{
    // 14585 003F;	
    // (𔖅) ANATOLIAN HIEROGLYPH A344	[5619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14585, 0x003F };
    uint32_t const ces[9] = { 0x5619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_366)
{
    // 14585 0061;	
    // (𔖅) ANATOLIAN HIEROGLYPH A344	[5619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14585, 0x0061 };
    uint32_t const ces[9] = { 0x5619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_367)
{
    // 14585 0041;	
    // (𔖅) ANATOLIAN HIEROGLYPH A344	[5619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14585, 0x0041 };
    uint32_t const ces[9] = { 0x5619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_368)
{
    // 14585 0062;	
    // (𔖅) ANATOLIAN HIEROGLYPH A344	[5619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14585, 0x0062 };
    uint32_t const ces[9] = { 0x5619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_369)
{
    // 14586 0021;	
    // (𔖆) ANATOLIAN HIEROGLYPH A345	[561A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14586, 0x0021 };
    uint32_t const ces[9] = { 0x561A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_370)
{
    // 14586 003F;	
    // (𔖆) ANATOLIAN HIEROGLYPH A345	[561A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14586, 0x003F };
    uint32_t const ces[9] = { 0x561A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_371)
{
    // 14586 0061;	
    // (𔖆) ANATOLIAN HIEROGLYPH A345	[561A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14586, 0x0061 };
    uint32_t const ces[9] = { 0x561A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_372)
{
    // 14586 0041;	
    // (𔖆) ANATOLIAN HIEROGLYPH A345	[561A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14586, 0x0041 };
    uint32_t const ces[9] = { 0x561A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_373)
{
    // 14586 0062;	
    // (𔖆) ANATOLIAN HIEROGLYPH A345	[561A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14586, 0x0062 };
    uint32_t const ces[9] = { 0x561A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_374)
{
    // 14587 0021;	
    // (𔖇) ANATOLIAN HIEROGLYPH A346	[561B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14587, 0x0021 };
    uint32_t const ces[9] = { 0x561B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_375)
{
    // 14587 003F;	
    // (𔖇) ANATOLIAN HIEROGLYPH A346	[561B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14587, 0x003F };
    uint32_t const ces[9] = { 0x561B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_376)
{
    // 14587 0061;	
    // (𔖇) ANATOLIAN HIEROGLYPH A346	[561B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14587, 0x0061 };
    uint32_t const ces[9] = { 0x561B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_377)
{
    // 14587 0041;	
    // (𔖇) ANATOLIAN HIEROGLYPH A346	[561B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14587, 0x0041 };
    uint32_t const ces[9] = { 0x561B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_378)
{
    // 14587 0062;	
    // (𔖇) ANATOLIAN HIEROGLYPH A346	[561B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14587, 0x0062 };
    uint32_t const ces[9] = { 0x561B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_379)
{
    // 14588 0021;	
    // (𔖈) ANATOLIAN HIEROGLYPH A347	[561C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14588, 0x0021 };
    uint32_t const ces[9] = { 0x561C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_380)
{
    // 14588 003F;	
    // (𔖈) ANATOLIAN HIEROGLYPH A347	[561C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14588, 0x003F };
    uint32_t const ces[9] = { 0x561C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_381)
{
    // 14588 0061;	
    // (𔖈) ANATOLIAN HIEROGLYPH A347	[561C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14588, 0x0061 };
    uint32_t const ces[9] = { 0x561C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_382)
{
    // 14588 0041;	
    // (𔖈) ANATOLIAN HIEROGLYPH A347	[561C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14588, 0x0041 };
    uint32_t const ces[9] = { 0x561C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_383)
{
    // 14588 0062;	
    // (𔖈) ANATOLIAN HIEROGLYPH A347	[561C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14588, 0x0062 };
    uint32_t const ces[9] = { 0x561C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_384)
{
    // 14589 0021;	
    // (𔖉) ANATOLIAN HIEROGLYPH A348	[561D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14589, 0x0021 };
    uint32_t const ces[9] = { 0x561D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_385)
{
    // 14589 003F;	
    // (𔖉) ANATOLIAN HIEROGLYPH A348	[561D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14589, 0x003F };
    uint32_t const ces[9] = { 0x561D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_386)
{
    // 14589 0061;	
    // (𔖉) ANATOLIAN HIEROGLYPH A348	[561D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14589, 0x0061 };
    uint32_t const ces[9] = { 0x561D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_387)
{
    // 14589 0041;	
    // (𔖉) ANATOLIAN HIEROGLYPH A348	[561D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14589, 0x0041 };
    uint32_t const ces[9] = { 0x561D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_388)
{
    // 14589 0062;	
    // (𔖉) ANATOLIAN HIEROGLYPH A348	[561D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14589, 0x0062 };
    uint32_t const ces[9] = { 0x561D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_389)
{
    // 1458A 0021;	
    // (𔖊) ANATOLIAN HIEROGLYPH A349	[561E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458A, 0x0021 };
    uint32_t const ces[9] = { 0x561E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_390)
{
    // 1458A 003F;	
    // (𔖊) ANATOLIAN HIEROGLYPH A349	[561E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458A, 0x003F };
    uint32_t const ces[9] = { 0x561E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_391)
{
    // 1458A 0061;	
    // (𔖊) ANATOLIAN HIEROGLYPH A349	[561E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458A, 0x0061 };
    uint32_t const ces[9] = { 0x561E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_392)
{
    // 1458A 0041;	
    // (𔖊) ANATOLIAN HIEROGLYPH A349	[561E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458A, 0x0041 };
    uint32_t const ces[9] = { 0x561E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_393)
{
    // 1458A 0062;	
    // (𔖊) ANATOLIAN HIEROGLYPH A349	[561E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458A, 0x0062 };
    uint32_t const ces[9] = { 0x561E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_394)
{
    // 1458B 0021;	
    // (𔖋) ANATOLIAN HIEROGLYPH A350	[561F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458B, 0x0021 };
    uint32_t const ces[9] = { 0x561F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_395)
{
    // 1458B 003F;	
    // (𔖋) ANATOLIAN HIEROGLYPH A350	[561F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458B, 0x003F };
    uint32_t const ces[9] = { 0x561F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_396)
{
    // 1458B 0061;	
    // (𔖋) ANATOLIAN HIEROGLYPH A350	[561F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458B, 0x0061 };
    uint32_t const ces[9] = { 0x561F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_397)
{
    // 1458B 0041;	
    // (𔖋) ANATOLIAN HIEROGLYPH A350	[561F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458B, 0x0041 };
    uint32_t const ces[9] = { 0x561F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_398)
{
    // 1458B 0062;	
    // (𔖋) ANATOLIAN HIEROGLYPH A350	[561F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458B, 0x0062 };
    uint32_t const ces[9] = { 0x561F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_399)
{
    // 1458C 0021;	
    // (𔖌) ANATOLIAN HIEROGLYPH A351	[5620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458C, 0x0021 };
    uint32_t const ces[9] = { 0x5620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_400)
{
    // 1458C 003F;	
    // (𔖌) ANATOLIAN HIEROGLYPH A351	[5620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458C, 0x003F };
    uint32_t const ces[9] = { 0x5620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_401)
{
    // 1458C 0061;	
    // (𔖌) ANATOLIAN HIEROGLYPH A351	[5620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458C, 0x0061 };
    uint32_t const ces[9] = { 0x5620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_402)
{
    // 1458C 0041;	
    // (𔖌) ANATOLIAN HIEROGLYPH A351	[5620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458C, 0x0041 };
    uint32_t const ces[9] = { 0x5620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_403)
{
    // 1458C 0062;	
    // (𔖌) ANATOLIAN HIEROGLYPH A351	[5620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458C, 0x0062 };
    uint32_t const ces[9] = { 0x5620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_404)
{
    // 1458D 0021;	
    // (𔖍) ANATOLIAN HIEROGLYPH A352	[5621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458D, 0x0021 };
    uint32_t const ces[9] = { 0x5621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_405)
{
    // 1458D 003F;	
    // (𔖍) ANATOLIAN HIEROGLYPH A352	[5621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458D, 0x003F };
    uint32_t const ces[9] = { 0x5621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_406)
{
    // 1458D 0061;	
    // (𔖍) ANATOLIAN HIEROGLYPH A352	[5621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458D, 0x0061 };
    uint32_t const ces[9] = { 0x5621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_407)
{
    // 1458D 0041;	
    // (𔖍) ANATOLIAN HIEROGLYPH A352	[5621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458D, 0x0041 };
    uint32_t const ces[9] = { 0x5621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_408)
{
    // 1458D 0062;	
    // (𔖍) ANATOLIAN HIEROGLYPH A352	[5621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458D, 0x0062 };
    uint32_t const ces[9] = { 0x5621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_409)
{
    // 1458E 0021;	
    // (𔖎) ANATOLIAN HIEROGLYPH A353	[5622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458E, 0x0021 };
    uint32_t const ces[9] = { 0x5622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_410)
{
    // 1458E 003F;	
    // (𔖎) ANATOLIAN HIEROGLYPH A353	[5622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458E, 0x003F };
    uint32_t const ces[9] = { 0x5622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_411)
{
    // 1458E 0061;	
    // (𔖎) ANATOLIAN HIEROGLYPH A353	[5622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458E, 0x0061 };
    uint32_t const ces[9] = { 0x5622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_412)
{
    // 1458E 0041;	
    // (𔖎) ANATOLIAN HIEROGLYPH A353	[5622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458E, 0x0041 };
    uint32_t const ces[9] = { 0x5622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_413)
{
    // 1458E 0062;	
    // (𔖎) ANATOLIAN HIEROGLYPH A353	[5622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458E, 0x0062 };
    uint32_t const ces[9] = { 0x5622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_414)
{
    // 1458F 0021;	
    // (𔖏) ANATOLIAN HIEROGLYPH A354	[5623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458F, 0x0021 };
    uint32_t const ces[9] = { 0x5623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_415)
{
    // 1458F 003F;	
    // (𔖏) ANATOLIAN HIEROGLYPH A354	[5623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458F, 0x003F };
    uint32_t const ces[9] = { 0x5623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_416)
{
    // 1458F 0061;	
    // (𔖏) ANATOLIAN HIEROGLYPH A354	[5623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458F, 0x0061 };
    uint32_t const ces[9] = { 0x5623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_417)
{
    // 1458F 0041;	
    // (𔖏) ANATOLIAN HIEROGLYPH A354	[5623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458F, 0x0041 };
    uint32_t const ces[9] = { 0x5623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_418)
{
    // 1458F 0062;	
    // (𔖏) ANATOLIAN HIEROGLYPH A354	[5623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458F, 0x0062 };
    uint32_t const ces[9] = { 0x5623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_419)
{
    // 14590 0021;	
    // (𔖐) ANATOLIAN HIEROGLYPH A355	[5624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14590, 0x0021 };
    uint32_t const ces[9] = { 0x5624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_420)
{
    // 14590 003F;	
    // (𔖐) ANATOLIAN HIEROGLYPH A355	[5624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14590, 0x003F };
    uint32_t const ces[9] = { 0x5624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_421)
{
    // 14590 0061;	
    // (𔖐) ANATOLIAN HIEROGLYPH A355	[5624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14590, 0x0061 };
    uint32_t const ces[9] = { 0x5624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_422)
{
    // 14590 0041;	
    // (𔖐) ANATOLIAN HIEROGLYPH A355	[5624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14590, 0x0041 };
    uint32_t const ces[9] = { 0x5624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_423)
{
    // 14590 0062;	
    // (𔖐) ANATOLIAN HIEROGLYPH A355	[5624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14590, 0x0062 };
    uint32_t const ces[9] = { 0x5624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_424)
{
    // 14591 0021;	
    // (𔖑) ANATOLIAN HIEROGLYPH A356	[5625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14591, 0x0021 };
    uint32_t const ces[9] = { 0x5625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_425)
{
    // 14591 003F;	
    // (𔖑) ANATOLIAN HIEROGLYPH A356	[5625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14591, 0x003F };
    uint32_t const ces[9] = { 0x5625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_426)
{
    // 14591 0061;	
    // (𔖑) ANATOLIAN HIEROGLYPH A356	[5625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14591, 0x0061 };
    uint32_t const ces[9] = { 0x5625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_427)
{
    // 14591 0041;	
    // (𔖑) ANATOLIAN HIEROGLYPH A356	[5625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14591, 0x0041 };
    uint32_t const ces[9] = { 0x5625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_428)
{
    // 14591 0062;	
    // (𔖑) ANATOLIAN HIEROGLYPH A356	[5625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14591, 0x0062 };
    uint32_t const ces[9] = { 0x5625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_429)
{
    // 14592 0021;	
    // (𔖒) ANATOLIAN HIEROGLYPH A357	[5626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14592, 0x0021 };
    uint32_t const ces[9] = { 0x5626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_430)
{
    // 14592 003F;	
    // (𔖒) ANATOLIAN HIEROGLYPH A357	[5626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14592, 0x003F };
    uint32_t const ces[9] = { 0x5626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_431)
{
    // 14592 0061;	
    // (𔖒) ANATOLIAN HIEROGLYPH A357	[5626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14592, 0x0061 };
    uint32_t const ces[9] = { 0x5626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_432)
{
    // 14592 0041;	
    // (𔖒) ANATOLIAN HIEROGLYPH A357	[5626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14592, 0x0041 };
    uint32_t const ces[9] = { 0x5626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_433)
{
    // 14592 0062;	
    // (𔖒) ANATOLIAN HIEROGLYPH A357	[5626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14592, 0x0062 };
    uint32_t const ces[9] = { 0x5626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_434)
{
    // 14593 0021;	
    // (𔖓) ANATOLIAN HIEROGLYPH A358	[5627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14593, 0x0021 };
    uint32_t const ces[9] = { 0x5627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_435)
{
    // 14593 003F;	
    // (𔖓) ANATOLIAN HIEROGLYPH A358	[5627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14593, 0x003F };
    uint32_t const ces[9] = { 0x5627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_436)
{
    // 14593 0061;	
    // (𔖓) ANATOLIAN HIEROGLYPH A358	[5627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14593, 0x0061 };
    uint32_t const ces[9] = { 0x5627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_437)
{
    // 14593 0041;	
    // (𔖓) ANATOLIAN HIEROGLYPH A358	[5627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14593, 0x0041 };
    uint32_t const ces[9] = { 0x5627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_438)
{
    // 14593 0062;	
    // (𔖓) ANATOLIAN HIEROGLYPH A358	[5627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14593, 0x0062 };
    uint32_t const ces[9] = { 0x5627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_439)
{
    // 14594 0021;	
    // (𔖔) ANATOLIAN HIEROGLYPH A359	[5628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14594, 0x0021 };
    uint32_t const ces[9] = { 0x5628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_440)
{
    // 14594 003F;	
    // (𔖔) ANATOLIAN HIEROGLYPH A359	[5628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14594, 0x003F };
    uint32_t const ces[9] = { 0x5628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_441)
{
    // 14594 0061;	
    // (𔖔) ANATOLIAN HIEROGLYPH A359	[5628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14594, 0x0061 };
    uint32_t const ces[9] = { 0x5628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_442)
{
    // 14594 0041;	
    // (𔖔) ANATOLIAN HIEROGLYPH A359	[5628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14594, 0x0041 };
    uint32_t const ces[9] = { 0x5628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_443)
{
    // 14594 0062;	
    // (𔖔) ANATOLIAN HIEROGLYPH A359	[5628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14594, 0x0062 };
    uint32_t const ces[9] = { 0x5628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_444)
{
    // 14595 0021;	
    // (𔖕) ANATOLIAN HIEROGLYPH A359A	[5629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14595, 0x0021 };
    uint32_t const ces[9] = { 0x5629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_445)
{
    // 14595 003F;	
    // (𔖕) ANATOLIAN HIEROGLYPH A359A	[5629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14595, 0x003F };
    uint32_t const ces[9] = { 0x5629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_446)
{
    // 14595 0061;	
    // (𔖕) ANATOLIAN HIEROGLYPH A359A	[5629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14595, 0x0061 };
    uint32_t const ces[9] = { 0x5629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_447)
{
    // 14595 0041;	
    // (𔖕) ANATOLIAN HIEROGLYPH A359A	[5629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14595, 0x0041 };
    uint32_t const ces[9] = { 0x5629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_448)
{
    // 14595 0062;	
    // (𔖕) ANATOLIAN HIEROGLYPH A359A	[5629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14595, 0x0062 };
    uint32_t const ces[9] = { 0x5629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_449)
{
    // 14596 0021;	
    // (𔖖) ANATOLIAN HIEROGLYPH A360	[562A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14596, 0x0021 };
    uint32_t const ces[9] = { 0x562A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_450)
{
    // 14596 003F;	
    // (𔖖) ANATOLIAN HIEROGLYPH A360	[562A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14596, 0x003F };
    uint32_t const ces[9] = { 0x562A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_451)
{
    // 14596 0061;	
    // (𔖖) ANATOLIAN HIEROGLYPH A360	[562A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14596, 0x0061 };
    uint32_t const ces[9] = { 0x562A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_452)
{
    // 14596 0041;	
    // (𔖖) ANATOLIAN HIEROGLYPH A360	[562A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14596, 0x0041 };
    uint32_t const ces[9] = { 0x562A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_453)
{
    // 14596 0062;	
    // (𔖖) ANATOLIAN HIEROGLYPH A360	[562A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14596, 0x0062 };
    uint32_t const ces[9] = { 0x562A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_454)
{
    // 14597 0021;	
    // (𔖗) ANATOLIAN HIEROGLYPH A361	[562B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14597, 0x0021 };
    uint32_t const ces[9] = { 0x562B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_455)
{
    // 14597 003F;	
    // (𔖗) ANATOLIAN HIEROGLYPH A361	[562B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14597, 0x003F };
    uint32_t const ces[9] = { 0x562B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_456)
{
    // 14597 0061;	
    // (𔖗) ANATOLIAN HIEROGLYPH A361	[562B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14597, 0x0061 };
    uint32_t const ces[9] = { 0x562B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_457)
{
    // 14597 0041;	
    // (𔖗) ANATOLIAN HIEROGLYPH A361	[562B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14597, 0x0041 };
    uint32_t const ces[9] = { 0x562B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_458)
{
    // 14597 0062;	
    // (𔖗) ANATOLIAN HIEROGLYPH A361	[562B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14597, 0x0062 };
    uint32_t const ces[9] = { 0x562B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_459)
{
    // 14598 0021;	
    // (𔖘) ANATOLIAN HIEROGLYPH A362	[562C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14598, 0x0021 };
    uint32_t const ces[9] = { 0x562C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_460)
{
    // 14598 003F;	
    // (𔖘) ANATOLIAN HIEROGLYPH A362	[562C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14598, 0x003F };
    uint32_t const ces[9] = { 0x562C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_461)
{
    // 14598 0061;	
    // (𔖘) ANATOLIAN HIEROGLYPH A362	[562C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14598, 0x0061 };
    uint32_t const ces[9] = { 0x562C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_462)
{
    // 14598 0041;	
    // (𔖘) ANATOLIAN HIEROGLYPH A362	[562C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14598, 0x0041 };
    uint32_t const ces[9] = { 0x562C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_463)
{
    // 14598 0062;	
    // (𔖘) ANATOLIAN HIEROGLYPH A362	[562C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14598, 0x0062 };
    uint32_t const ces[9] = { 0x562C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_464)
{
    // 14599 0021;	
    // (𔖙) ANATOLIAN HIEROGLYPH A363	[562D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14599, 0x0021 };
    uint32_t const ces[9] = { 0x562D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_465)
{
    // 14599 003F;	
    // (𔖙) ANATOLIAN HIEROGLYPH A363	[562D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14599, 0x003F };
    uint32_t const ces[9] = { 0x562D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_466)
{
    // 14599 0061;	
    // (𔖙) ANATOLIAN HIEROGLYPH A363	[562D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14599, 0x0061 };
    uint32_t const ces[9] = { 0x562D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_467)
{
    // 14599 0041;	
    // (𔖙) ANATOLIAN HIEROGLYPH A363	[562D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14599, 0x0041 };
    uint32_t const ces[9] = { 0x562D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_468)
{
    // 14599 0062;	
    // (𔖙) ANATOLIAN HIEROGLYPH A363	[562D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14599, 0x0062 };
    uint32_t const ces[9] = { 0x562D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_469)
{
    // 1459A 0021;	
    // (𔖚) ANATOLIAN HIEROGLYPH A364	[562E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459A, 0x0021 };
    uint32_t const ces[9] = { 0x562E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_470)
{
    // 1459A 003F;	
    // (𔖚) ANATOLIAN HIEROGLYPH A364	[562E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459A, 0x003F };
    uint32_t const ces[9] = { 0x562E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_471)
{
    // 1459A 0061;	
    // (𔖚) ANATOLIAN HIEROGLYPH A364	[562E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459A, 0x0061 };
    uint32_t const ces[9] = { 0x562E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_472)
{
    // 1459A 0041;	
    // (𔖚) ANATOLIAN HIEROGLYPH A364	[562E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459A, 0x0041 };
    uint32_t const ces[9] = { 0x562E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_473)
{
    // 1459A 0062;	
    // (𔖚) ANATOLIAN HIEROGLYPH A364	[562E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459A, 0x0062 };
    uint32_t const ces[9] = { 0x562E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_474)
{
    // 1459B 0021;	
    // (𔖛) ANATOLIAN HIEROGLYPH A364A	[562F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459B, 0x0021 };
    uint32_t const ces[9] = { 0x562F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_475)
{
    // 1459B 003F;	
    // (𔖛) ANATOLIAN HIEROGLYPH A364A	[562F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459B, 0x003F };
    uint32_t const ces[9] = { 0x562F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_476)
{
    // 1459B 0061;	
    // (𔖛) ANATOLIAN HIEROGLYPH A364A	[562F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459B, 0x0061 };
    uint32_t const ces[9] = { 0x562F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_477)
{
    // 1459B 0041;	
    // (𔖛) ANATOLIAN HIEROGLYPH A364A	[562F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459B, 0x0041 };
    uint32_t const ces[9] = { 0x562F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_478)
{
    // 1459B 0062;	
    // (𔖛) ANATOLIAN HIEROGLYPH A364A	[562F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459B, 0x0062 };
    uint32_t const ces[9] = { 0x562F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_479)
{
    // 1459C 0021;	
    // (𔖜) ANATOLIAN HIEROGLYPH A365	[5630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459C, 0x0021 };
    uint32_t const ces[9] = { 0x5630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_480)
{
    // 1459C 003F;	
    // (𔖜) ANATOLIAN HIEROGLYPH A365	[5630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459C, 0x003F };
    uint32_t const ces[9] = { 0x5630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_481)
{
    // 1459C 0061;	
    // (𔖜) ANATOLIAN HIEROGLYPH A365	[5630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459C, 0x0061 };
    uint32_t const ces[9] = { 0x5630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_482)
{
    // 1459C 0041;	
    // (𔖜) ANATOLIAN HIEROGLYPH A365	[5630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459C, 0x0041 };
    uint32_t const ces[9] = { 0x5630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_483)
{
    // 1459C 0062;	
    // (𔖜) ANATOLIAN HIEROGLYPH A365	[5630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459C, 0x0062 };
    uint32_t const ces[9] = { 0x5630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_484)
{
    // 1459D 0021;	
    // (𔖝) ANATOLIAN HIEROGLYPH A366	[5631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459D, 0x0021 };
    uint32_t const ces[9] = { 0x5631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_485)
{
    // 1459D 003F;	
    // (𔖝) ANATOLIAN HIEROGLYPH A366	[5631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459D, 0x003F };
    uint32_t const ces[9] = { 0x5631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_486)
{
    // 1459D 0061;	
    // (𔖝) ANATOLIAN HIEROGLYPH A366	[5631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459D, 0x0061 };
    uint32_t const ces[9] = { 0x5631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_487)
{
    // 1459D 0041;	
    // (𔖝) ANATOLIAN HIEROGLYPH A366	[5631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459D, 0x0041 };
    uint32_t const ces[9] = { 0x5631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_488)
{
    // 1459D 0062;	
    // (𔖝) ANATOLIAN HIEROGLYPH A366	[5631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459D, 0x0062 };
    uint32_t const ces[9] = { 0x5631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_489)
{
    // 1459E 0021;	
    // (𔖞) ANATOLIAN HIEROGLYPH A367	[5632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459E, 0x0021 };
    uint32_t const ces[9] = { 0x5632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_490)
{
    // 1459E 003F;	
    // (𔖞) ANATOLIAN HIEROGLYPH A367	[5632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459E, 0x003F };
    uint32_t const ces[9] = { 0x5632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_491)
{
    // 1459E 0061;	
    // (𔖞) ANATOLIAN HIEROGLYPH A367	[5632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459E, 0x0061 };
    uint32_t const ces[9] = { 0x5632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_492)
{
    // 1459E 0041;	
    // (𔖞) ANATOLIAN HIEROGLYPH A367	[5632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459E, 0x0041 };
    uint32_t const ces[9] = { 0x5632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_493)
{
    // 1459E 0062;	
    // (𔖞) ANATOLIAN HIEROGLYPH A367	[5632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459E, 0x0062 };
    uint32_t const ces[9] = { 0x5632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_494)
{
    // 1459F 0021;	
    // (𔖟) ANATOLIAN HIEROGLYPH A368	[5633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459F, 0x0021 };
    uint32_t const ces[9] = { 0x5633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_495)
{
    // 1459F 003F;	
    // (𔖟) ANATOLIAN HIEROGLYPH A368	[5633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459F, 0x003F };
    uint32_t const ces[9] = { 0x5633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_496)
{
    // 1459F 0061;	
    // (𔖟) ANATOLIAN HIEROGLYPH A368	[5633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459F, 0x0061 };
    uint32_t const ces[9] = { 0x5633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_497)
{
    // 1459F 0041;	
    // (𔖟) ANATOLIAN HIEROGLYPH A368	[5633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459F, 0x0041 };
    uint32_t const ces[9] = { 0x5633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_498)
{
    // 1459F 0062;	
    // (𔖟) ANATOLIAN HIEROGLYPH A368	[5633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459F, 0x0062 };
    uint32_t const ces[9] = { 0x5633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_311_499)
{
    // 145A0 0021;	
    // (𔖠) ANATOLIAN HIEROGLYPH A368A	[5634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145A0, 0x0021 };
    uint32_t const ces[9] = { 0x5634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

