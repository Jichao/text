// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_167_000)
{
    // 0A08 003F;	
    // (ਈ) GURMUKHI LETTER II	[277D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A08, 0x003F };
    uint32_t const ces[9] = { 0x277D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_001)
{
    // 0A08 0061;	
    // (ਈ) GURMUKHI LETTER II	[277D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A08, 0x0061 };
    uint32_t const ces[9] = { 0x277D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_002)
{
    // 0A08 0041;	
    // (ਈ) GURMUKHI LETTER II	[277D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A08, 0x0041 };
    uint32_t const ces[9] = { 0x277D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_003)
{
    // 0A08 0062;	
    // (ਈ) GURMUKHI LETTER II	[277D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A08, 0x0062 };
    uint32_t const ces[9] = { 0x277D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_004)
{
    // 0A0F 0021;	
    // (ਏ) GURMUKHI LETTER EE	[277E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A0F, 0x0021 };
    uint32_t const ces[9] = { 0x277E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_005)
{
    // 0A0F 003F;	
    // (ਏ) GURMUKHI LETTER EE	[277E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A0F, 0x003F };
    uint32_t const ces[9] = { 0x277E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_006)
{
    // 0A0F 0061;	
    // (ਏ) GURMUKHI LETTER EE	[277E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A0F, 0x0061 };
    uint32_t const ces[9] = { 0x277E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_007)
{
    // 0A0F 0041;	
    // (ਏ) GURMUKHI LETTER EE	[277E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A0F, 0x0041 };
    uint32_t const ces[9] = { 0x277E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_008)
{
    // 0A0F 0062;	
    // (ਏ) GURMUKHI LETTER EE	[277E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A0F, 0x0062 };
    uint32_t const ces[9] = { 0x277E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_009)
{
    // 0A36 0334;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A36, 0x0334 };
    uint32_t const ces[10] = { 0x277F, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_010)
{
    // 0A38 0334 0A3C;	
    // (ਸ̴) GURMUKHI LETTER SA, COMBINING TILDE OVERLAY	[277F | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A38, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x277F, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_011)
{
    // 0A38 0A3C 0334;	
    // (ਸ਼) GURMUKHI LETTER SA, GURMUKHI SIGN NUKTA	[277F | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A38, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x277F, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_012)
{
    // 0A38 0021;	
    // (ਸ) GURMUKHI LETTER SA	[277F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A38, 0x0021 };
    uint32_t const ces[9] = { 0x277F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_013)
{
    // 0A36 0021;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A36, 0x0021 };
    uint32_t const ces[11] = { 0x277F, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_014)
{
    // 0A38 003F;	
    // (ਸ) GURMUKHI LETTER SA	[277F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A38, 0x003F };
    uint32_t const ces[9] = { 0x277F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_015)
{
    // 0A36 003F;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A36, 0x003F };
    uint32_t const ces[11] = { 0x277F, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_016)
{
    // 0A38 0061;	
    // (ਸ) GURMUKHI LETTER SA	[277F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A38, 0x0061 };
    uint32_t const ces[9] = { 0x277F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_017)
{
    // 0A38 0041;	
    // (ਸ) GURMUKHI LETTER SA	[277F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A38, 0x0041 };
    uint32_t const ces[9] = { 0x277F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_018)
{
    // 0A36 0061;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A36, 0x0061 };
    uint32_t const ces[11] = { 0x277F, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_019)
{
    // 0A36 0041;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A36, 0x0041 };
    uint32_t const ces[11] = { 0x277F, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_020)
{
    // 0A38 0062;	
    // (ਸ) GURMUKHI LETTER SA	[277F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A38, 0x0062 };
    uint32_t const ces[9] = { 0x277F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_021)
{
    // 0A36 0062;	
    // (ਸ਼) GURMUKHI LETTER SHA	[277F 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A36, 0x0062 };
    uint32_t const ces[11] = { 0x277F, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_022)
{
    // 0A39 0021;	
    // (ਹ) GURMUKHI LETTER HA	[2780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A39, 0x0021 };
    uint32_t const ces[9] = { 0x2780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_023)
{
    // 0A39 003F;	
    // (ਹ) GURMUKHI LETTER HA	[2780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A39, 0x003F };
    uint32_t const ces[9] = { 0x2780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_024)
{
    // 0A39 0061;	
    // (ਹ) GURMUKHI LETTER HA	[2780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A39, 0x0061 };
    uint32_t const ces[9] = { 0x2780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_025)
{
    // 0A39 0041;	
    // (ਹ) GURMUKHI LETTER HA	[2780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A39, 0x0041 };
    uint32_t const ces[9] = { 0x2780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_026)
{
    // 0A39 0062;	
    // (ਹ) GURMUKHI LETTER HA	[2780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A39, 0x0062 };
    uint32_t const ces[9] = { 0x2780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_027)
{
    // 0A51 0021;	
    // (ੑ) GURMUKHI SIGN UDAAT	[2781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A51, 0x0021 };
    uint32_t const ces[9] = { 0x2781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_028)
{
    // 0A51 003F;	
    // (ੑ) GURMUKHI SIGN UDAAT	[2781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A51, 0x003F };
    uint32_t const ces[9] = { 0x2781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_029)
{
    // 0A51 0061;	
    // (ੑ) GURMUKHI SIGN UDAAT	[2781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A51, 0x0061 };
    uint32_t const ces[9] = { 0x2781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_030)
{
    // 0A51 0041;	
    // (ੑ) GURMUKHI SIGN UDAAT	[2781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A51, 0x0041 };
    uint32_t const ces[9] = { 0x2781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_031)
{
    // 0A51 0062;	
    // (ੑ) GURMUKHI SIGN UDAAT	[2781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A51, 0x0062 };
    uint32_t const ces[9] = { 0x2781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_032)
{
    // 0A15 0021;	
    // (ਕ) GURMUKHI LETTER KA	[2782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A15, 0x0021 };
    uint32_t const ces[9] = { 0x2782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_033)
{
    // 0A15 003F;	
    // (ਕ) GURMUKHI LETTER KA	[2782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A15, 0x003F };
    uint32_t const ces[9] = { 0x2782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_034)
{
    // 0A15 0061;	
    // (ਕ) GURMUKHI LETTER KA	[2782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A15, 0x0061 };
    uint32_t const ces[9] = { 0x2782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_035)
{
    // 0A15 0041;	
    // (ਕ) GURMUKHI LETTER KA	[2782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A15, 0x0041 };
    uint32_t const ces[9] = { 0x2782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_036)
{
    // 0A15 0062;	
    // (ਕ) GURMUKHI LETTER KA	[2782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A15, 0x0062 };
    uint32_t const ces[9] = { 0x2782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_037)
{
    // 0A16 0334 0A3C;	
    // (ਖ̴) GURMUKHI LETTER KHA, COMBINING TILDE OVERLAY	[2783 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A16, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x2783, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_038)
{
    // 0A16 0A3C 0334;	
    // (ਖ਼) GURMUKHI LETTER KHA, GURMUKHI SIGN NUKTA	[2783 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A16, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x2783, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_039)
{
    // 0A59 0334;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A59, 0x0334 };
    uint32_t const ces[10] = { 0x2783, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_040)
{
    // 0A16 0021;	
    // (ਖ) GURMUKHI LETTER KHA	[2783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A16, 0x0021 };
    uint32_t const ces[9] = { 0x2783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_041)
{
    // 0A59 0021;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A59, 0x0021 };
    uint32_t const ces[11] = { 0x2783, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_042)
{
    // 0A16 003F;	
    // (ਖ) GURMUKHI LETTER KHA	[2783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A16, 0x003F };
    uint32_t const ces[9] = { 0x2783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_043)
{
    // 0A59 003F;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A59, 0x003F };
    uint32_t const ces[11] = { 0x2783, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_044)
{
    // 0A16 0061;	
    // (ਖ) GURMUKHI LETTER KHA	[2783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A16, 0x0061 };
    uint32_t const ces[9] = { 0x2783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_045)
{
    // 0A16 0041;	
    // (ਖ) GURMUKHI LETTER KHA	[2783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A16, 0x0041 };
    uint32_t const ces[9] = { 0x2783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_046)
{
    // 0A59 0061;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A59, 0x0061 };
    uint32_t const ces[11] = { 0x2783, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_047)
{
    // 0A59 0041;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A59, 0x0041 };
    uint32_t const ces[11] = { 0x2783, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_048)
{
    // 0A16 0062;	
    // (ਖ) GURMUKHI LETTER KHA	[2783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A16, 0x0062 };
    uint32_t const ces[9] = { 0x2783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_049)
{
    // 0A59 0062;	
    // (ਖ਼) GURMUKHI LETTER KHHA	[2783 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A59, 0x0062 };
    uint32_t const ces[11] = { 0x2783, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_050)
{
    // 0A17 0334 0A3C;	
    // (ਗ̴) GURMUKHI LETTER GA, COMBINING TILDE OVERLAY	[2784 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A17, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x2784, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_051)
{
    // 0A17 0A3C 0334;	
    // (ਗ਼) GURMUKHI LETTER GA, GURMUKHI SIGN NUKTA	[2784 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A17, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x2784, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_052)
{
    // 0A5A 0334;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5A, 0x0334 };
    uint32_t const ces[10] = { 0x2784, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_053)
{
    // 0A17 0021;	
    // (ਗ) GURMUKHI LETTER GA	[2784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A17, 0x0021 };
    uint32_t const ces[9] = { 0x2784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_054)
{
    // 0A5A 0021;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5A, 0x0021 };
    uint32_t const ces[11] = { 0x2784, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_055)
{
    // 0A17 003F;	
    // (ਗ) GURMUKHI LETTER GA	[2784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A17, 0x003F };
    uint32_t const ces[9] = { 0x2784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_056)
{
    // 0A5A 003F;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5A, 0x003F };
    uint32_t const ces[11] = { 0x2784, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_057)
{
    // 0A17 0061;	
    // (ਗ) GURMUKHI LETTER GA	[2784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A17, 0x0061 };
    uint32_t const ces[9] = { 0x2784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_058)
{
    // 0A17 0041;	
    // (ਗ) GURMUKHI LETTER GA	[2784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A17, 0x0041 };
    uint32_t const ces[9] = { 0x2784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_059)
{
    // 0A5A 0061;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5A, 0x0061 };
    uint32_t const ces[11] = { 0x2784, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_060)
{
    // 0A5A 0041;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A5A, 0x0041 };
    uint32_t const ces[11] = { 0x2784, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_061)
{
    // 0A17 0062;	
    // (ਗ) GURMUKHI LETTER GA	[2784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A17, 0x0062 };
    uint32_t const ces[9] = { 0x2784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_062)
{
    // 0A5A 0062;	
    // (ਗ਼) GURMUKHI LETTER GHHA	[2784 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5A, 0x0062 };
    uint32_t const ces[11] = { 0x2784, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_063)
{
    // 0A18 0021;	
    // (ਘ) GURMUKHI LETTER GHA	[2785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A18, 0x0021 };
    uint32_t const ces[9] = { 0x2785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_064)
{
    // 0A18 003F;	
    // (ਘ) GURMUKHI LETTER GHA	[2785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A18, 0x003F };
    uint32_t const ces[9] = { 0x2785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_065)
{
    // 0A18 0061;	
    // (ਘ) GURMUKHI LETTER GHA	[2785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A18, 0x0061 };
    uint32_t const ces[9] = { 0x2785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_066)
{
    // 0A18 0041;	
    // (ਘ) GURMUKHI LETTER GHA	[2785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A18, 0x0041 };
    uint32_t const ces[9] = { 0x2785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_067)
{
    // 0A18 0062;	
    // (ਘ) GURMUKHI LETTER GHA	[2785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A18, 0x0062 };
    uint32_t const ces[9] = { 0x2785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_068)
{
    // 0A19 0021;	
    // (ਙ) GURMUKHI LETTER NGA	[2786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A19, 0x0021 };
    uint32_t const ces[9] = { 0x2786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_069)
{
    // 0A19 003F;	
    // (ਙ) GURMUKHI LETTER NGA	[2786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A19, 0x003F };
    uint32_t const ces[9] = { 0x2786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_070)
{
    // 0A19 0061;	
    // (ਙ) GURMUKHI LETTER NGA	[2786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A19, 0x0061 };
    uint32_t const ces[9] = { 0x2786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_071)
{
    // 0A19 0041;	
    // (ਙ) GURMUKHI LETTER NGA	[2786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A19, 0x0041 };
    uint32_t const ces[9] = { 0x2786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_072)
{
    // 0A19 0062;	
    // (ਙ) GURMUKHI LETTER NGA	[2786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A19, 0x0062 };
    uint32_t const ces[9] = { 0x2786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_073)
{
    // 0A1A 0021;	
    // (ਚ) GURMUKHI LETTER CA	[2787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1A, 0x0021 };
    uint32_t const ces[9] = { 0x2787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_074)
{
    // 0A1A 003F;	
    // (ਚ) GURMUKHI LETTER CA	[2787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1A, 0x003F };
    uint32_t const ces[9] = { 0x2787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_075)
{
    // 0A1A 0061;	
    // (ਚ) GURMUKHI LETTER CA	[2787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1A, 0x0061 };
    uint32_t const ces[9] = { 0x2787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_076)
{
    // 0A1A 0041;	
    // (ਚ) GURMUKHI LETTER CA	[2787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1A, 0x0041 };
    uint32_t const ces[9] = { 0x2787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_077)
{
    // 0A1A 0062;	
    // (ਚ) GURMUKHI LETTER CA	[2787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1A, 0x0062 };
    uint32_t const ces[9] = { 0x2787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_078)
{
    // 0A1B 0021;	
    // (ਛ) GURMUKHI LETTER CHA	[2788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1B, 0x0021 };
    uint32_t const ces[9] = { 0x2788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_079)
{
    // 0A1B 003F;	
    // (ਛ) GURMUKHI LETTER CHA	[2788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1B, 0x003F };
    uint32_t const ces[9] = { 0x2788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_080)
{
    // 0A1B 0061;	
    // (ਛ) GURMUKHI LETTER CHA	[2788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1B, 0x0061 };
    uint32_t const ces[9] = { 0x2788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_081)
{
    // 0A1B 0041;	
    // (ਛ) GURMUKHI LETTER CHA	[2788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1B, 0x0041 };
    uint32_t const ces[9] = { 0x2788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_082)
{
    // 0A1B 0062;	
    // (ਛ) GURMUKHI LETTER CHA	[2788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1B, 0x0062 };
    uint32_t const ces[9] = { 0x2788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_083)
{
    // 0A1C 0334 0A3C;	
    // (ਜ̴) GURMUKHI LETTER JA, COMBINING TILDE OVERLAY	[2789 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A1C, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x2789, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_084)
{
    // 0A1C 0A3C 0334;	
    // (ਜ਼) GURMUKHI LETTER JA, GURMUKHI SIGN NUKTA	[2789 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A1C, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x2789, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_085)
{
    // 0A5B 0334;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5B, 0x0334 };
    uint32_t const ces[10] = { 0x2789, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_086)
{
    // 0A1C 0021;	
    // (ਜ) GURMUKHI LETTER JA	[2789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1C, 0x0021 };
    uint32_t const ces[9] = { 0x2789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_087)
{
    // 0A5B 0021;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5B, 0x0021 };
    uint32_t const ces[11] = { 0x2789, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_088)
{
    // 0A1C 003F;	
    // (ਜ) GURMUKHI LETTER JA	[2789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1C, 0x003F };
    uint32_t const ces[9] = { 0x2789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_089)
{
    // 0A5B 003F;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5B, 0x003F };
    uint32_t const ces[11] = { 0x2789, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_090)
{
    // 0A1C 0061;	
    // (ਜ) GURMUKHI LETTER JA	[2789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1C, 0x0061 };
    uint32_t const ces[9] = { 0x2789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_091)
{
    // 0A1C 0041;	
    // (ਜ) GURMUKHI LETTER JA	[2789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1C, 0x0041 };
    uint32_t const ces[9] = { 0x2789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_092)
{
    // 0A5B 0061;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5B, 0x0061 };
    uint32_t const ces[11] = { 0x2789, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_093)
{
    // 0A5B 0041;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A5B, 0x0041 };
    uint32_t const ces[11] = { 0x2789, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_094)
{
    // 0A1C 0062;	
    // (ਜ) GURMUKHI LETTER JA	[2789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1C, 0x0062 };
    uint32_t const ces[9] = { 0x2789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_095)
{
    // 0A5B 0062;	
    // (ਜ਼) GURMUKHI LETTER ZA	[2789 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5B, 0x0062 };
    uint32_t const ces[11] = { 0x2789, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_096)
{
    // 0A1D 0021;	
    // (ਝ) GURMUKHI LETTER JHA	[278A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1D, 0x0021 };
    uint32_t const ces[9] = { 0x278A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_097)
{
    // 0A1D 003F;	
    // (ਝ) GURMUKHI LETTER JHA	[278A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1D, 0x003F };
    uint32_t const ces[9] = { 0x278A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_098)
{
    // 0A1D 0061;	
    // (ਝ) GURMUKHI LETTER JHA	[278A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1D, 0x0061 };
    uint32_t const ces[9] = { 0x278A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_099)
{
    // 0A1D 0041;	
    // (ਝ) GURMUKHI LETTER JHA	[278A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1D, 0x0041 };
    uint32_t const ces[9] = { 0x278A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_100)
{
    // 0A1D 0062;	
    // (ਝ) GURMUKHI LETTER JHA	[278A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1D, 0x0062 };
    uint32_t const ces[9] = { 0x278A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_101)
{
    // 0A1E 0021;	
    // (ਞ) GURMUKHI LETTER NYA	[278B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1E, 0x0021 };
    uint32_t const ces[9] = { 0x278B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_102)
{
    // 0A1E 003F;	
    // (ਞ) GURMUKHI LETTER NYA	[278B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1E, 0x003F };
    uint32_t const ces[9] = { 0x278B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_103)
{
    // 0A1E 0061;	
    // (ਞ) GURMUKHI LETTER NYA	[278B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1E, 0x0061 };
    uint32_t const ces[9] = { 0x278B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_104)
{
    // 0A1E 0041;	
    // (ਞ) GURMUKHI LETTER NYA	[278B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1E, 0x0041 };
    uint32_t const ces[9] = { 0x278B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_105)
{
    // 0A1E 0062;	
    // (ਞ) GURMUKHI LETTER NYA	[278B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1E, 0x0062 };
    uint32_t const ces[9] = { 0x278B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_106)
{
    // 0A1F 0021;	
    // (ਟ) GURMUKHI LETTER TTA	[278C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1F, 0x0021 };
    uint32_t const ces[9] = { 0x278C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_107)
{
    // 0A1F 003F;	
    // (ਟ) GURMUKHI LETTER TTA	[278C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1F, 0x003F };
    uint32_t const ces[9] = { 0x278C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_108)
{
    // 0A1F 0061;	
    // (ਟ) GURMUKHI LETTER TTA	[278C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1F, 0x0061 };
    uint32_t const ces[9] = { 0x278C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_109)
{
    // 0A1F 0041;	
    // (ਟ) GURMUKHI LETTER TTA	[278C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A1F, 0x0041 };
    uint32_t const ces[9] = { 0x278C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_110)
{
    // 0A1F 0062;	
    // (ਟ) GURMUKHI LETTER TTA	[278C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A1F, 0x0062 };
    uint32_t const ces[9] = { 0x278C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_111)
{
    // 0A20 0021;	
    // (ਠ) GURMUKHI LETTER TTHA	[278D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A20, 0x0021 };
    uint32_t const ces[9] = { 0x278D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_112)
{
    // 0A20 003F;	
    // (ਠ) GURMUKHI LETTER TTHA	[278D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A20, 0x003F };
    uint32_t const ces[9] = { 0x278D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_113)
{
    // 0A20 0061;	
    // (ਠ) GURMUKHI LETTER TTHA	[278D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A20, 0x0061 };
    uint32_t const ces[9] = { 0x278D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_114)
{
    // 0A20 0041;	
    // (ਠ) GURMUKHI LETTER TTHA	[278D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A20, 0x0041 };
    uint32_t const ces[9] = { 0x278D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_115)
{
    // 0A20 0062;	
    // (ਠ) GURMUKHI LETTER TTHA	[278D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A20, 0x0062 };
    uint32_t const ces[9] = { 0x278D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_116)
{
    // 0A21 0021;	
    // (ਡ) GURMUKHI LETTER DDA	[278E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A21, 0x0021 };
    uint32_t const ces[9] = { 0x278E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_117)
{
    // 0A21 003F;	
    // (ਡ) GURMUKHI LETTER DDA	[278E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A21, 0x003F };
    uint32_t const ces[9] = { 0x278E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_118)
{
    // 0A21 0061;	
    // (ਡ) GURMUKHI LETTER DDA	[278E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A21, 0x0061 };
    uint32_t const ces[9] = { 0x278E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_119)
{
    // 0A21 0041;	
    // (ਡ) GURMUKHI LETTER DDA	[278E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A21, 0x0041 };
    uint32_t const ces[9] = { 0x278E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_120)
{
    // 0A21 0062;	
    // (ਡ) GURMUKHI LETTER DDA	[278E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A21, 0x0062 };
    uint32_t const ces[9] = { 0x278E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_121)
{
    // 0A22 0021;	
    // (ਢ) GURMUKHI LETTER DDHA	[278F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A22, 0x0021 };
    uint32_t const ces[9] = { 0x278F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_122)
{
    // 0A22 003F;	
    // (ਢ) GURMUKHI LETTER DDHA	[278F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A22, 0x003F };
    uint32_t const ces[9] = { 0x278F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_123)
{
    // 0A22 0061;	
    // (ਢ) GURMUKHI LETTER DDHA	[278F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A22, 0x0061 };
    uint32_t const ces[9] = { 0x278F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_124)
{
    // 0A22 0041;	
    // (ਢ) GURMUKHI LETTER DDHA	[278F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A22, 0x0041 };
    uint32_t const ces[9] = { 0x278F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_125)
{
    // 0A22 0062;	
    // (ਢ) GURMUKHI LETTER DDHA	[278F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A22, 0x0062 };
    uint32_t const ces[9] = { 0x278F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_126)
{
    // 0A23 0021;	
    // (ਣ) GURMUKHI LETTER NNA	[2790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A23, 0x0021 };
    uint32_t const ces[9] = { 0x2790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_127)
{
    // 0A23 003F;	
    // (ਣ) GURMUKHI LETTER NNA	[2790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A23, 0x003F };
    uint32_t const ces[9] = { 0x2790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_128)
{
    // 0A23 0061;	
    // (ਣ) GURMUKHI LETTER NNA	[2790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A23, 0x0061 };
    uint32_t const ces[9] = { 0x2790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_129)
{
    // 0A23 0041;	
    // (ਣ) GURMUKHI LETTER NNA	[2790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A23, 0x0041 };
    uint32_t const ces[9] = { 0x2790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_130)
{
    // 0A23 0062;	
    // (ਣ) GURMUKHI LETTER NNA	[2790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A23, 0x0062 };
    uint32_t const ces[9] = { 0x2790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_131)
{
    // 0A24 0021;	
    // (ਤ) GURMUKHI LETTER TA	[2791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A24, 0x0021 };
    uint32_t const ces[9] = { 0x2791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_132)
{
    // 0A24 003F;	
    // (ਤ) GURMUKHI LETTER TA	[2791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A24, 0x003F };
    uint32_t const ces[9] = { 0x2791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_133)
{
    // 0A24 0061;	
    // (ਤ) GURMUKHI LETTER TA	[2791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A24, 0x0061 };
    uint32_t const ces[9] = { 0x2791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_134)
{
    // 0A24 0041;	
    // (ਤ) GURMUKHI LETTER TA	[2791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A24, 0x0041 };
    uint32_t const ces[9] = { 0x2791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_135)
{
    // 0A24 0062;	
    // (ਤ) GURMUKHI LETTER TA	[2791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A24, 0x0062 };
    uint32_t const ces[9] = { 0x2791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_136)
{
    // 0A25 0021;	
    // (ਥ) GURMUKHI LETTER THA	[2792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A25, 0x0021 };
    uint32_t const ces[9] = { 0x2792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_137)
{
    // 0A25 003F;	
    // (ਥ) GURMUKHI LETTER THA	[2792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A25, 0x003F };
    uint32_t const ces[9] = { 0x2792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_138)
{
    // 0A25 0061;	
    // (ਥ) GURMUKHI LETTER THA	[2792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A25, 0x0061 };
    uint32_t const ces[9] = { 0x2792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_139)
{
    // 0A25 0041;	
    // (ਥ) GURMUKHI LETTER THA	[2792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A25, 0x0041 };
    uint32_t const ces[9] = { 0x2792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_140)
{
    // 0A25 0062;	
    // (ਥ) GURMUKHI LETTER THA	[2792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A25, 0x0062 };
    uint32_t const ces[9] = { 0x2792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_141)
{
    // 0A26 0021;	
    // (ਦ) GURMUKHI LETTER DA	[2793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A26, 0x0021 };
    uint32_t const ces[9] = { 0x2793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_142)
{
    // 0A26 003F;	
    // (ਦ) GURMUKHI LETTER DA	[2793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A26, 0x003F };
    uint32_t const ces[9] = { 0x2793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_143)
{
    // 0A26 0061;	
    // (ਦ) GURMUKHI LETTER DA	[2793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A26, 0x0061 };
    uint32_t const ces[9] = { 0x2793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_144)
{
    // 0A26 0041;	
    // (ਦ) GURMUKHI LETTER DA	[2793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A26, 0x0041 };
    uint32_t const ces[9] = { 0x2793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_145)
{
    // 0A26 0062;	
    // (ਦ) GURMUKHI LETTER DA	[2793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A26, 0x0062 };
    uint32_t const ces[9] = { 0x2793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_146)
{
    // 0A27 0021;	
    // (ਧ) GURMUKHI LETTER DHA	[2794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A27, 0x0021 };
    uint32_t const ces[9] = { 0x2794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_147)
{
    // 0A27 003F;	
    // (ਧ) GURMUKHI LETTER DHA	[2794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A27, 0x003F };
    uint32_t const ces[9] = { 0x2794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_148)
{
    // 0A27 0061;	
    // (ਧ) GURMUKHI LETTER DHA	[2794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A27, 0x0061 };
    uint32_t const ces[9] = { 0x2794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_149)
{
    // 0A27 0041;	
    // (ਧ) GURMUKHI LETTER DHA	[2794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A27, 0x0041 };
    uint32_t const ces[9] = { 0x2794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_150)
{
    // 0A27 0062;	
    // (ਧ) GURMUKHI LETTER DHA	[2794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A27, 0x0062 };
    uint32_t const ces[9] = { 0x2794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_151)
{
    // 0A28 0021;	
    // (ਨ) GURMUKHI LETTER NA	[2795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A28, 0x0021 };
    uint32_t const ces[9] = { 0x2795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_152)
{
    // 0A28 003F;	
    // (ਨ) GURMUKHI LETTER NA	[2795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A28, 0x003F };
    uint32_t const ces[9] = { 0x2795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_153)
{
    // 0A28 0061;	
    // (ਨ) GURMUKHI LETTER NA	[2795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A28, 0x0061 };
    uint32_t const ces[9] = { 0x2795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_154)
{
    // 0A28 0041;	
    // (ਨ) GURMUKHI LETTER NA	[2795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A28, 0x0041 };
    uint32_t const ces[9] = { 0x2795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_155)
{
    // 0A28 0062;	
    // (ਨ) GURMUKHI LETTER NA	[2795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A28, 0x0062 };
    uint32_t const ces[9] = { 0x2795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_156)
{
    // 0A2A 0021;	
    // (ਪ) GURMUKHI LETTER PA	[2796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2A, 0x0021 };
    uint32_t const ces[9] = { 0x2796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_157)
{
    // 0A2A 003F;	
    // (ਪ) GURMUKHI LETTER PA	[2796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2A, 0x003F };
    uint32_t const ces[9] = { 0x2796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_158)
{
    // 0A2A 0061;	
    // (ਪ) GURMUKHI LETTER PA	[2796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2A, 0x0061 };
    uint32_t const ces[9] = { 0x2796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_159)
{
    // 0A2A 0041;	
    // (ਪ) GURMUKHI LETTER PA	[2796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2A, 0x0041 };
    uint32_t const ces[9] = { 0x2796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_160)
{
    // 0A2A 0062;	
    // (ਪ) GURMUKHI LETTER PA	[2796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2A, 0x0062 };
    uint32_t const ces[9] = { 0x2796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_161)
{
    // 0A2B 0334 0A3C;	
    // (ਫ̴) GURMUKHI LETTER PHA, COMBINING TILDE OVERLAY	[2797 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A2B, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x2797, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_162)
{
    // 0A2B 0A3C 0334;	
    // (ਫ਼) GURMUKHI LETTER PHA, GURMUKHI SIGN NUKTA	[2797 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A2B, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x2797, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_163)
{
    // 0A5E 0334;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5E, 0x0334 };
    uint32_t const ces[10] = { 0x2797, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_164)
{
    // 0A2B 0021;	
    // (ਫ) GURMUKHI LETTER PHA	[2797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2B, 0x0021 };
    uint32_t const ces[9] = { 0x2797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_165)
{
    // 0A5E 0021;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5E, 0x0021 };
    uint32_t const ces[11] = { 0x2797, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_166)
{
    // 0A2B 003F;	
    // (ਫ) GURMUKHI LETTER PHA	[2797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2B, 0x003F };
    uint32_t const ces[9] = { 0x2797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_167)
{
    // 0A5E 003F;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5E, 0x003F };
    uint32_t const ces[11] = { 0x2797, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_168)
{
    // 0A2B 0061;	
    // (ਫ) GURMUKHI LETTER PHA	[2797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2B, 0x0061 };
    uint32_t const ces[9] = { 0x2797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_169)
{
    // 0A2B 0041;	
    // (ਫ) GURMUKHI LETTER PHA	[2797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2B, 0x0041 };
    uint32_t const ces[9] = { 0x2797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_170)
{
    // 0A5E 0061;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5E, 0x0061 };
    uint32_t const ces[11] = { 0x2797, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_171)
{
    // 0A5E 0041;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A5E, 0x0041 };
    uint32_t const ces[11] = { 0x2797, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_172)
{
    // 0A2B 0062;	
    // (ਫ) GURMUKHI LETTER PHA	[2797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2B, 0x0062 };
    uint32_t const ces[9] = { 0x2797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_173)
{
    // 0A5E 0062;	
    // (ਫ਼) GURMUKHI LETTER FA	[2797 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A5E, 0x0062 };
    uint32_t const ces[11] = { 0x2797, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_174)
{
    // 0A2C 0021;	
    // (ਬ) GURMUKHI LETTER BA	[2798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2C, 0x0021 };
    uint32_t const ces[9] = { 0x2798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_175)
{
    // 0A2C 003F;	
    // (ਬ) GURMUKHI LETTER BA	[2798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2C, 0x003F };
    uint32_t const ces[9] = { 0x2798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_176)
{
    // 0A2C 0061;	
    // (ਬ) GURMUKHI LETTER BA	[2798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2C, 0x0061 };
    uint32_t const ces[9] = { 0x2798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_177)
{
    // 0A2C 0041;	
    // (ਬ) GURMUKHI LETTER BA	[2798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2C, 0x0041 };
    uint32_t const ces[9] = { 0x2798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_178)
{
    // 0A2C 0062;	
    // (ਬ) GURMUKHI LETTER BA	[2798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2C, 0x0062 };
    uint32_t const ces[9] = { 0x2798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_179)
{
    // 0A2D 0021;	
    // (ਭ) GURMUKHI LETTER BHA	[2799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2D, 0x0021 };
    uint32_t const ces[9] = { 0x2799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_180)
{
    // 0A2D 003F;	
    // (ਭ) GURMUKHI LETTER BHA	[2799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2D, 0x003F };
    uint32_t const ces[9] = { 0x2799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_181)
{
    // 0A2D 0061;	
    // (ਭ) GURMUKHI LETTER BHA	[2799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2D, 0x0061 };
    uint32_t const ces[9] = { 0x2799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_182)
{
    // 0A2D 0041;	
    // (ਭ) GURMUKHI LETTER BHA	[2799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2D, 0x0041 };
    uint32_t const ces[9] = { 0x2799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_183)
{
    // 0A2D 0062;	
    // (ਭ) GURMUKHI LETTER BHA	[2799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2D, 0x0062 };
    uint32_t const ces[9] = { 0x2799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_184)
{
    // 0A2E 0021;	
    // (ਮ) GURMUKHI LETTER MA	[279A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2E, 0x0021 };
    uint32_t const ces[9] = { 0x279A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_185)
{
    // 0A2E 003F;	
    // (ਮ) GURMUKHI LETTER MA	[279A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2E, 0x003F };
    uint32_t const ces[9] = { 0x279A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_186)
{
    // 0A2E 0061;	
    // (ਮ) GURMUKHI LETTER MA	[279A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2E, 0x0061 };
    uint32_t const ces[9] = { 0x279A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_187)
{
    // 0A2E 0041;	
    // (ਮ) GURMUKHI LETTER MA	[279A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2E, 0x0041 };
    uint32_t const ces[9] = { 0x279A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_188)
{
    // 0A2E 0062;	
    // (ਮ) GURMUKHI LETTER MA	[279A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2E, 0x0062 };
    uint32_t const ces[9] = { 0x279A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_189)
{
    // 0A2F 0021;	
    // (ਯ) GURMUKHI LETTER YA	[279B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2F, 0x0021 };
    uint32_t const ces[9] = { 0x279B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_190)
{
    // 0A2F 003F;	
    // (ਯ) GURMUKHI LETTER YA	[279B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2F, 0x003F };
    uint32_t const ces[9] = { 0x279B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_191)
{
    // 0A2F 0061;	
    // (ਯ) GURMUKHI LETTER YA	[279B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2F, 0x0061 };
    uint32_t const ces[9] = { 0x279B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_192)
{
    // 0A2F 0041;	
    // (ਯ) GURMUKHI LETTER YA	[279B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A2F, 0x0041 };
    uint32_t const ces[9] = { 0x279B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_193)
{
    // 0A2F 0062;	
    // (ਯ) GURMUKHI LETTER YA	[279B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A2F, 0x0062 };
    uint32_t const ces[9] = { 0x279B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_194)
{
    // 0A75 0021;	
    // (ੵ) GURMUKHI SIGN YAKASH	[279C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A75, 0x0021 };
    uint32_t const ces[9] = { 0x279C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_195)
{
    // 0A75 003F;	
    // (ੵ) GURMUKHI SIGN YAKASH	[279C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A75, 0x003F };
    uint32_t const ces[9] = { 0x279C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_196)
{
    // 0A75 0061;	
    // (ੵ) GURMUKHI SIGN YAKASH	[279C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A75, 0x0061 };
    uint32_t const ces[9] = { 0x279C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_197)
{
    // 0A75 0041;	
    // (ੵ) GURMUKHI SIGN YAKASH	[279C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A75, 0x0041 };
    uint32_t const ces[9] = { 0x279C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_198)
{
    // 0A75 0062;	
    // (ੵ) GURMUKHI SIGN YAKASH	[279C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A75, 0x0062 };
    uint32_t const ces[9] = { 0x279C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_199)
{
    // 0A30 0021;	
    // (ਰ) GURMUKHI LETTER RA	[279D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A30, 0x0021 };
    uint32_t const ces[9] = { 0x279D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_200)
{
    // 0A30 003F;	
    // (ਰ) GURMUKHI LETTER RA	[279D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A30, 0x003F };
    uint32_t const ces[9] = { 0x279D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_201)
{
    // 0A30 0061;	
    // (ਰ) GURMUKHI LETTER RA	[279D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A30, 0x0061 };
    uint32_t const ces[9] = { 0x279D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_202)
{
    // 0A30 0041;	
    // (ਰ) GURMUKHI LETTER RA	[279D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A30, 0x0041 };
    uint32_t const ces[9] = { 0x279D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_203)
{
    // 0A30 0062;	
    // (ਰ) GURMUKHI LETTER RA	[279D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A30, 0x0062 };
    uint32_t const ces[9] = { 0x279D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_204)
{
    // 0A32 0334 0A3C;	
    // (ਲ̴) GURMUKHI LETTER LA, COMBINING TILDE OVERLAY	[279E | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A32, 0x0334, 0x0A3C };
    uint32_t const ces[10] = { 0x279E, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_205)
{
    // 0A32 0A3C 0334;	
    // (ਲ਼) GURMUKHI LETTER LA, GURMUKHI SIGN NUKTA	[279E | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0A32, 0x0A3C, 0x0334 };
    uint32_t const ces[10] = { 0x279E, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_206)
{
    // 0A33 0334;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A33, 0x0334 };
    uint32_t const ces[10] = { 0x279E, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_207)
{
    // 0A32 0021;	
    // (ਲ) GURMUKHI LETTER LA	[279E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A32, 0x0021 };
    uint32_t const ces[9] = { 0x279E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_208)
{
    // 0A33 0021;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A33, 0x0021 };
    uint32_t const ces[11] = { 0x279E, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_209)
{
    // 0A32 003F;	
    // (ਲ) GURMUKHI LETTER LA	[279E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A32, 0x003F };
    uint32_t const ces[9] = { 0x279E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_210)
{
    // 0A33 003F;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A33, 0x003F };
    uint32_t const ces[11] = { 0x279E, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_211)
{
    // 0A32 0061;	
    // (ਲ) GURMUKHI LETTER LA	[279E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A32, 0x0061 };
    uint32_t const ces[9] = { 0x279E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_212)
{
    // 0A32 0041;	
    // (ਲ) GURMUKHI LETTER LA	[279E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A32, 0x0041 };
    uint32_t const ces[9] = { 0x279E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_213)
{
    // 0A33 0061;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A33, 0x0061 };
    uint32_t const ces[11] = { 0x279E, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_214)
{
    // 0A33 0041;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0A33, 0x0041 };
    uint32_t const ces[11] = { 0x279E, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_215)
{
    // 0A32 0062;	
    // (ਲ) GURMUKHI LETTER LA	[279E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A32, 0x0062 };
    uint32_t const ces[9] = { 0x279E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_216)
{
    // 0A33 0062;	
    // (ਲ਼) GURMUKHI LETTER LLA	[279E 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0A33, 0x0062 };
    uint32_t const ces[11] = { 0x279E, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_217)
{
    // 0A35 0021;	
    // (ਵ) GURMUKHI LETTER VA	[279F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A35, 0x0021 };
    uint32_t const ces[9] = { 0x279F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_218)
{
    // 0A35 003F;	
    // (ਵ) GURMUKHI LETTER VA	[279F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A35, 0x003F };
    uint32_t const ces[9] = { 0x279F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_219)
{
    // 0A35 0061;	
    // (ਵ) GURMUKHI LETTER VA	[279F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A35, 0x0061 };
    uint32_t const ces[9] = { 0x279F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_220)
{
    // 0A35 0041;	
    // (ਵ) GURMUKHI LETTER VA	[279F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A35, 0x0041 };
    uint32_t const ces[9] = { 0x279F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_221)
{
    // 0A35 0062;	
    // (ਵ) GURMUKHI LETTER VA	[279F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A35, 0x0062 };
    uint32_t const ces[9] = { 0x279F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_222)
{
    // 0A5C 0021;	
    // (ੜ) GURMUKHI LETTER RRA	[27A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A5C, 0x0021 };
    uint32_t const ces[9] = { 0x27A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_223)
{
    // 0A5C 003F;	
    // (ੜ) GURMUKHI LETTER RRA	[27A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A5C, 0x003F };
    uint32_t const ces[9] = { 0x27A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_224)
{
    // 0A5C 0061;	
    // (ੜ) GURMUKHI LETTER RRA	[27A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A5C, 0x0061 };
    uint32_t const ces[9] = { 0x27A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_225)
{
    // 0A5C 0041;	
    // (ੜ) GURMUKHI LETTER RRA	[27A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A5C, 0x0041 };
    uint32_t const ces[9] = { 0x27A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_226)
{
    // 0A5C 0062;	
    // (ੜ) GURMUKHI LETTER RRA	[27A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A5C, 0x0062 };
    uint32_t const ces[9] = { 0x27A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_227)
{
    // 0A3E 0021;	
    // (ਾ) GURMUKHI VOWEL SIGN AA	[27A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3E, 0x0021 };
    uint32_t const ces[9] = { 0x27A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_228)
{
    // 0A3E 003F;	
    // (ਾ) GURMUKHI VOWEL SIGN AA	[27A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3E, 0x003F };
    uint32_t const ces[9] = { 0x27A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_229)
{
    // 0A3E 0061;	
    // (ਾ) GURMUKHI VOWEL SIGN AA	[27A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3E, 0x0061 };
    uint32_t const ces[9] = { 0x27A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_230)
{
    // 0A3E 0041;	
    // (ਾ) GURMUKHI VOWEL SIGN AA	[27A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A3E, 0x0041 };
    uint32_t const ces[9] = { 0x27A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_231)
{
    // 0A3E 0062;	
    // (ਾ) GURMUKHI VOWEL SIGN AA	[27A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3E, 0x0062 };
    uint32_t const ces[9] = { 0x27A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_232)
{
    // 0A3F 0021;	
    // (ਿ) GURMUKHI VOWEL SIGN I	[27A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3F, 0x0021 };
    uint32_t const ces[9] = { 0x27A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_233)
{
    // 0A3F 003F;	
    // (ਿ) GURMUKHI VOWEL SIGN I	[27A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3F, 0x003F };
    uint32_t const ces[9] = { 0x27A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_234)
{
    // 0A3F 0061;	
    // (ਿ) GURMUKHI VOWEL SIGN I	[27A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3F, 0x0061 };
    uint32_t const ces[9] = { 0x27A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_235)
{
    // 0A3F 0041;	
    // (ਿ) GURMUKHI VOWEL SIGN I	[27A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A3F, 0x0041 };
    uint32_t const ces[9] = { 0x27A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_236)
{
    // 0A3F 0062;	
    // (ਿ) GURMUKHI VOWEL SIGN I	[27A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3F, 0x0062 };
    uint32_t const ces[9] = { 0x27A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_237)
{
    // 0A40 0021;	
    // (ੀ) GURMUKHI VOWEL SIGN II	[27A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A40, 0x0021 };
    uint32_t const ces[9] = { 0x27A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_238)
{
    // 0A40 003F;	
    // (ੀ) GURMUKHI VOWEL SIGN II	[27A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A40, 0x003F };
    uint32_t const ces[9] = { 0x27A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_239)
{
    // 0A40 0061;	
    // (ੀ) GURMUKHI VOWEL SIGN II	[27A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A40, 0x0061 };
    uint32_t const ces[9] = { 0x27A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_240)
{
    // 0A40 0041;	
    // (ੀ) GURMUKHI VOWEL SIGN II	[27A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A40, 0x0041 };
    uint32_t const ces[9] = { 0x27A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_241)
{
    // 0A40 0062;	
    // (ੀ) GURMUKHI VOWEL SIGN II	[27A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A40, 0x0062 };
    uint32_t const ces[9] = { 0x27A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_242)
{
    // 0A41 0021;	
    // (ੁ) GURMUKHI VOWEL SIGN U	[27A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A41, 0x0021 };
    uint32_t const ces[9] = { 0x27A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_243)
{
    // 0A41 003F;	
    // (ੁ) GURMUKHI VOWEL SIGN U	[27A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A41, 0x003F };
    uint32_t const ces[9] = { 0x27A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_244)
{
    // 0A41 0061;	
    // (ੁ) GURMUKHI VOWEL SIGN U	[27A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A41, 0x0061 };
    uint32_t const ces[9] = { 0x27A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_245)
{
    // 0A41 0041;	
    // (ੁ) GURMUKHI VOWEL SIGN U	[27A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A41, 0x0041 };
    uint32_t const ces[9] = { 0x27A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_246)
{
    // 0A41 0062;	
    // (ੁ) GURMUKHI VOWEL SIGN U	[27A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A41, 0x0062 };
    uint32_t const ces[9] = { 0x27A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_247)
{
    // 0A42 0021;	
    // (ੂ) GURMUKHI VOWEL SIGN UU	[27A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A42, 0x0021 };
    uint32_t const ces[9] = { 0x27A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_248)
{
    // 0A42 003F;	
    // (ੂ) GURMUKHI VOWEL SIGN UU	[27A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A42, 0x003F };
    uint32_t const ces[9] = { 0x27A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_249)
{
    // 0A42 0061;	
    // (ੂ) GURMUKHI VOWEL SIGN UU	[27A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A42, 0x0061 };
    uint32_t const ces[9] = { 0x27A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_250)
{
    // 0A42 0041;	
    // (ੂ) GURMUKHI VOWEL SIGN UU	[27A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A42, 0x0041 };
    uint32_t const ces[9] = { 0x27A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_251)
{
    // 0A42 0062;	
    // (ੂ) GURMUKHI VOWEL SIGN UU	[27A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A42, 0x0062 };
    uint32_t const ces[9] = { 0x27A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_252)
{
    // 0A47 0021;	
    // (ੇ) GURMUKHI VOWEL SIGN EE	[27A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A47, 0x0021 };
    uint32_t const ces[9] = { 0x27A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_253)
{
    // 0A47 003F;	
    // (ੇ) GURMUKHI VOWEL SIGN EE	[27A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A47, 0x003F };
    uint32_t const ces[9] = { 0x27A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_254)
{
    // 0A47 0061;	
    // (ੇ) GURMUKHI VOWEL SIGN EE	[27A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A47, 0x0061 };
    uint32_t const ces[9] = { 0x27A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_255)
{
    // 0A47 0041;	
    // (ੇ) GURMUKHI VOWEL SIGN EE	[27A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A47, 0x0041 };
    uint32_t const ces[9] = { 0x27A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_256)
{
    // 0A47 0062;	
    // (ੇ) GURMUKHI VOWEL SIGN EE	[27A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A47, 0x0062 };
    uint32_t const ces[9] = { 0x27A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_257)
{
    // 0A48 0021;	
    // (ੈ) GURMUKHI VOWEL SIGN AI	[27A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A48, 0x0021 };
    uint32_t const ces[9] = { 0x27A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_258)
{
    // 0A48 003F;	
    // (ੈ) GURMUKHI VOWEL SIGN AI	[27A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A48, 0x003F };
    uint32_t const ces[9] = { 0x27A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_259)
{
    // 0A48 0061;	
    // (ੈ) GURMUKHI VOWEL SIGN AI	[27A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A48, 0x0061 };
    uint32_t const ces[9] = { 0x27A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_260)
{
    // 0A48 0041;	
    // (ੈ) GURMUKHI VOWEL SIGN AI	[27A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A48, 0x0041 };
    uint32_t const ces[9] = { 0x27A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_261)
{
    // 0A48 0062;	
    // (ੈ) GURMUKHI VOWEL SIGN AI	[27A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A48, 0x0062 };
    uint32_t const ces[9] = { 0x27A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_262)
{
    // 0A4B 0021;	
    // (ੋ) GURMUKHI VOWEL SIGN OO	[27A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4B, 0x0021 };
    uint32_t const ces[9] = { 0x27A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_263)
{
    // 0A4B 003F;	
    // (ੋ) GURMUKHI VOWEL SIGN OO	[27A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4B, 0x003F };
    uint32_t const ces[9] = { 0x27A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_264)
{
    // 0A4B 0061;	
    // (ੋ) GURMUKHI VOWEL SIGN OO	[27A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4B, 0x0061 };
    uint32_t const ces[9] = { 0x27A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_265)
{
    // 0A4B 0041;	
    // (ੋ) GURMUKHI VOWEL SIGN OO	[27A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A4B, 0x0041 };
    uint32_t const ces[9] = { 0x27A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_266)
{
    // 0A4B 0062;	
    // (ੋ) GURMUKHI VOWEL SIGN OO	[27A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4B, 0x0062 };
    uint32_t const ces[9] = { 0x27A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_267)
{
    // 0A4C 0021;	
    // (ੌ) GURMUKHI VOWEL SIGN AU	[27A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4C, 0x0021 };
    uint32_t const ces[9] = { 0x27A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_268)
{
    // 0A4C 003F;	
    // (ੌ) GURMUKHI VOWEL SIGN AU	[27A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4C, 0x003F };
    uint32_t const ces[9] = { 0x27A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_269)
{
    // 0A4C 0061;	
    // (ੌ) GURMUKHI VOWEL SIGN AU	[27A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4C, 0x0061 };
    uint32_t const ces[9] = { 0x27A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_270)
{
    // 0A4C 0041;	
    // (ੌ) GURMUKHI VOWEL SIGN AU	[27A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A4C, 0x0041 };
    uint32_t const ces[9] = { 0x27A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_271)
{
    // 0A4C 0062;	
    // (ੌ) GURMUKHI VOWEL SIGN AU	[27A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4C, 0x0062 };
    uint32_t const ces[9] = { 0x27A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_272)
{
    // 0334 0A4D;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0A4D };
    uint32_t const ces[8] = { 0x27AA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_273)
{
    // 0A4D 0334;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4D, 0x0334 };
    uint32_t const ces[8] = { 0x27AA, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_274)
{
    // 0A4D 0021;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4D, 0x0021 };
    uint32_t const ces[9] = { 0x27AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_275)
{
    // 0A4D 003F;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4D, 0x003F };
    uint32_t const ces[9] = { 0x27AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_276)
{
    // 0A4D 0061;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4D, 0x0061 };
    uint32_t const ces[9] = { 0x27AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_277)
{
    // 0A4D 0041;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A4D, 0x0041 };
    uint32_t const ces[9] = { 0x27AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_278)
{
    // 0A4D 0062;	
    // (੍) GURMUKHI SIGN VIRAMA	[27AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A4D, 0x0062 };
    uint32_t const ces[9] = { 0x27AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_279)
{
    // 0AD0 0021;	
    // (ૐ) GUJARATI OM	[27AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AD0, 0x0021 };
    uint32_t const ces[9] = { 0x27AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_280)
{
    // 0AD0 003F;	
    // (ૐ) GUJARATI OM	[27AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AD0, 0x003F };
    uint32_t const ces[9] = { 0x27AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_281)
{
    // 0AD0 0061;	
    // (ૐ) GUJARATI OM	[27AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AD0, 0x0061 };
    uint32_t const ces[9] = { 0x27AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_282)
{
    // 0AD0 0041;	
    // (ૐ) GUJARATI OM	[27AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AD0, 0x0041 };
    uint32_t const ces[9] = { 0x27AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_283)
{
    // 0AD0 0062;	
    // (ૐ) GUJARATI OM	[27AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AD0, 0x0062 };
    uint32_t const ces[9] = { 0x27AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_284)
{
    // 0A85 0021;	
    // (અ) GUJARATI LETTER A	[27AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A85, 0x0021 };
    uint32_t const ces[9] = { 0x27AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_285)
{
    // 0A85 003F;	
    // (અ) GUJARATI LETTER A	[27AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A85, 0x003F };
    uint32_t const ces[9] = { 0x27AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_286)
{
    // 0A85 0061;	
    // (અ) GUJARATI LETTER A	[27AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A85, 0x0061 };
    uint32_t const ces[9] = { 0x27AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_287)
{
    // 0A85 0041;	
    // (અ) GUJARATI LETTER A	[27AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A85, 0x0041 };
    uint32_t const ces[9] = { 0x27AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_288)
{
    // 0A85 0062;	
    // (અ) GUJARATI LETTER A	[27AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A85, 0x0062 };
    uint32_t const ces[9] = { 0x27AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_289)
{
    // 0A86 0021;	
    // (આ) GUJARATI LETTER AA	[27AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A86, 0x0021 };
    uint32_t const ces[9] = { 0x27AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_290)
{
    // 0A86 003F;	
    // (આ) GUJARATI LETTER AA	[27AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A86, 0x003F };
    uint32_t const ces[9] = { 0x27AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_291)
{
    // 0A86 0061;	
    // (આ) GUJARATI LETTER AA	[27AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A86, 0x0061 };
    uint32_t const ces[9] = { 0x27AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_292)
{
    // 0A86 0041;	
    // (આ) GUJARATI LETTER AA	[27AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A86, 0x0041 };
    uint32_t const ces[9] = { 0x27AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_293)
{
    // 0A86 0062;	
    // (આ) GUJARATI LETTER AA	[27AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A86, 0x0062 };
    uint32_t const ces[9] = { 0x27AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_294)
{
    // 0A87 0021;	
    // (ઇ) GUJARATI LETTER I	[27AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A87, 0x0021 };
    uint32_t const ces[9] = { 0x27AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_295)
{
    // 0A87 003F;	
    // (ઇ) GUJARATI LETTER I	[27AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A87, 0x003F };
    uint32_t const ces[9] = { 0x27AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_296)
{
    // 0A87 0061;	
    // (ઇ) GUJARATI LETTER I	[27AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A87, 0x0061 };
    uint32_t const ces[9] = { 0x27AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_297)
{
    // 0A87 0041;	
    // (ઇ) GUJARATI LETTER I	[27AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A87, 0x0041 };
    uint32_t const ces[9] = { 0x27AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_298)
{
    // 0A87 0062;	
    // (ઇ) GUJARATI LETTER I	[27AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A87, 0x0062 };
    uint32_t const ces[9] = { 0x27AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_299)
{
    // 0A88 0021;	
    // (ઈ) GUJARATI LETTER II	[27AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A88, 0x0021 };
    uint32_t const ces[9] = { 0x27AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_300)
{
    // 0A88 003F;	
    // (ઈ) GUJARATI LETTER II	[27AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A88, 0x003F };
    uint32_t const ces[9] = { 0x27AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_301)
{
    // 0A88 0061;	
    // (ઈ) GUJARATI LETTER II	[27AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A88, 0x0061 };
    uint32_t const ces[9] = { 0x27AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_302)
{
    // 0A88 0041;	
    // (ઈ) GUJARATI LETTER II	[27AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A88, 0x0041 };
    uint32_t const ces[9] = { 0x27AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_303)
{
    // 0A88 0062;	
    // (ઈ) GUJARATI LETTER II	[27AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A88, 0x0062 };
    uint32_t const ces[9] = { 0x27AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_304)
{
    // 0A89 0021;	
    // (ઉ) GUJARATI LETTER U	[27B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A89, 0x0021 };
    uint32_t const ces[9] = { 0x27B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_305)
{
    // 0A89 003F;	
    // (ઉ) GUJARATI LETTER U	[27B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A89, 0x003F };
    uint32_t const ces[9] = { 0x27B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_306)
{
    // 0A89 0061;	
    // (ઉ) GUJARATI LETTER U	[27B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A89, 0x0061 };
    uint32_t const ces[9] = { 0x27B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_307)
{
    // 0A89 0041;	
    // (ઉ) GUJARATI LETTER U	[27B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A89, 0x0041 };
    uint32_t const ces[9] = { 0x27B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_308)
{
    // 0A89 0062;	
    // (ઉ) GUJARATI LETTER U	[27B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A89, 0x0062 };
    uint32_t const ces[9] = { 0x27B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_309)
{
    // 0A8A 0021;	
    // (ઊ) GUJARATI LETTER UU	[27B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8A, 0x0021 };
    uint32_t const ces[9] = { 0x27B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_310)
{
    // 0A8A 003F;	
    // (ઊ) GUJARATI LETTER UU	[27B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8A, 0x003F };
    uint32_t const ces[9] = { 0x27B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_311)
{
    // 0A8A 0061;	
    // (ઊ) GUJARATI LETTER UU	[27B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8A, 0x0061 };
    uint32_t const ces[9] = { 0x27B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_312)
{
    // 0A8A 0041;	
    // (ઊ) GUJARATI LETTER UU	[27B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A8A, 0x0041 };
    uint32_t const ces[9] = { 0x27B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_313)
{
    // 0A8A 0062;	
    // (ઊ) GUJARATI LETTER UU	[27B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8A, 0x0062 };
    uint32_t const ces[9] = { 0x27B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_314)
{
    // 0A8B 0021;	
    // (ઋ) GUJARATI LETTER VOCALIC R	[27B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8B, 0x0021 };
    uint32_t const ces[9] = { 0x27B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_315)
{
    // 0A8B 003F;	
    // (ઋ) GUJARATI LETTER VOCALIC R	[27B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8B, 0x003F };
    uint32_t const ces[9] = { 0x27B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_316)
{
    // 0A8B 0061;	
    // (ઋ) GUJARATI LETTER VOCALIC R	[27B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8B, 0x0061 };
    uint32_t const ces[9] = { 0x27B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_317)
{
    // 0A8B 0041;	
    // (ઋ) GUJARATI LETTER VOCALIC R	[27B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A8B, 0x0041 };
    uint32_t const ces[9] = { 0x27B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_318)
{
    // 0A8B 0062;	
    // (ઋ) GUJARATI LETTER VOCALIC R	[27B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8B, 0x0062 };
    uint32_t const ces[9] = { 0x27B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_319)
{
    // 0AE0 0021;	
    // (ૠ) GUJARATI LETTER VOCALIC RR	[27B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE0, 0x0021 };
    uint32_t const ces[9] = { 0x27B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_320)
{
    // 0AE0 003F;	
    // (ૠ) GUJARATI LETTER VOCALIC RR	[27B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE0, 0x003F };
    uint32_t const ces[9] = { 0x27B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_321)
{
    // 0AE0 0061;	
    // (ૠ) GUJARATI LETTER VOCALIC RR	[27B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE0, 0x0061 };
    uint32_t const ces[9] = { 0x27B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_322)
{
    // 0AE0 0041;	
    // (ૠ) GUJARATI LETTER VOCALIC RR	[27B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE0, 0x0041 };
    uint32_t const ces[9] = { 0x27B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_323)
{
    // 0AE0 0062;	
    // (ૠ) GUJARATI LETTER VOCALIC RR	[27B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE0, 0x0062 };
    uint32_t const ces[9] = { 0x27B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_324)
{
    // 0A8C 0021;	
    // (ઌ) GUJARATI LETTER VOCALIC L	[27B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8C, 0x0021 };
    uint32_t const ces[9] = { 0x27B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_325)
{
    // 0A8C 003F;	
    // (ઌ) GUJARATI LETTER VOCALIC L	[27B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8C, 0x003F };
    uint32_t const ces[9] = { 0x27B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_326)
{
    // 0A8C 0061;	
    // (ઌ) GUJARATI LETTER VOCALIC L	[27B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8C, 0x0061 };
    uint32_t const ces[9] = { 0x27B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_327)
{
    // 0A8C 0041;	
    // (ઌ) GUJARATI LETTER VOCALIC L	[27B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A8C, 0x0041 };
    uint32_t const ces[9] = { 0x27B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_328)
{
    // 0A8C 0062;	
    // (ઌ) GUJARATI LETTER VOCALIC L	[27B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8C, 0x0062 };
    uint32_t const ces[9] = { 0x27B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_329)
{
    // 0AE1 0021;	
    // (ૡ) GUJARATI LETTER VOCALIC LL	[27B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE1, 0x0021 };
    uint32_t const ces[9] = { 0x27B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_330)
{
    // 0AE1 003F;	
    // (ૡ) GUJARATI LETTER VOCALIC LL	[27B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE1, 0x003F };
    uint32_t const ces[9] = { 0x27B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_331)
{
    // 0AE1 0061;	
    // (ૡ) GUJARATI LETTER VOCALIC LL	[27B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE1, 0x0061 };
    uint32_t const ces[9] = { 0x27B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_332)
{
    // 0AE1 0041;	
    // (ૡ) GUJARATI LETTER VOCALIC LL	[27B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE1, 0x0041 };
    uint32_t const ces[9] = { 0x27B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_333)
{
    // 0AE1 0062;	
    // (ૡ) GUJARATI LETTER VOCALIC LL	[27B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE1, 0x0062 };
    uint32_t const ces[9] = { 0x27B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_334)
{
    // 0A8D 0021;	
    // (ઍ) GUJARATI VOWEL CANDRA E	[27B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8D, 0x0021 };
    uint32_t const ces[9] = { 0x27B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_335)
{
    // 0A8D 003F;	
    // (ઍ) GUJARATI VOWEL CANDRA E	[27B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8D, 0x003F };
    uint32_t const ces[9] = { 0x27B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_336)
{
    // 0A8D 0061;	
    // (ઍ) GUJARATI VOWEL CANDRA E	[27B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8D, 0x0061 };
    uint32_t const ces[9] = { 0x27B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_337)
{
    // 0A8D 0041;	
    // (ઍ) GUJARATI VOWEL CANDRA E	[27B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A8D, 0x0041 };
    uint32_t const ces[9] = { 0x27B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_338)
{
    // 0A8D 0062;	
    // (ઍ) GUJARATI VOWEL CANDRA E	[27B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8D, 0x0062 };
    uint32_t const ces[9] = { 0x27B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_339)
{
    // 0A8F 0021;	
    // (એ) GUJARATI LETTER E	[27B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8F, 0x0021 };
    uint32_t const ces[9] = { 0x27B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_340)
{
    // 0A8F 003F;	
    // (એ) GUJARATI LETTER E	[27B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8F, 0x003F };
    uint32_t const ces[9] = { 0x27B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_341)
{
    // 0A8F 0061;	
    // (એ) GUJARATI LETTER E	[27B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8F, 0x0061 };
    uint32_t const ces[9] = { 0x27B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_342)
{
    // 0A8F 0041;	
    // (એ) GUJARATI LETTER E	[27B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A8F, 0x0041 };
    uint32_t const ces[9] = { 0x27B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_343)
{
    // 0A8F 0062;	
    // (એ) GUJARATI LETTER E	[27B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A8F, 0x0062 };
    uint32_t const ces[9] = { 0x27B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_344)
{
    // 0A90 0021;	
    // (ઐ) GUJARATI LETTER AI	[27B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A90, 0x0021 };
    uint32_t const ces[9] = { 0x27B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_345)
{
    // 0A90 003F;	
    // (ઐ) GUJARATI LETTER AI	[27B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A90, 0x003F };
    uint32_t const ces[9] = { 0x27B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_346)
{
    // 0A90 0061;	
    // (ઐ) GUJARATI LETTER AI	[27B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A90, 0x0061 };
    uint32_t const ces[9] = { 0x27B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_347)
{
    // 0A90 0041;	
    // (ઐ) GUJARATI LETTER AI	[27B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A90, 0x0041 };
    uint32_t const ces[9] = { 0x27B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_348)
{
    // 0A90 0062;	
    // (ઐ) GUJARATI LETTER AI	[27B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A90, 0x0062 };
    uint32_t const ces[9] = { 0x27B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_349)
{
    // 0A91 0021;	
    // (ઑ) GUJARATI VOWEL CANDRA O	[27B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A91, 0x0021 };
    uint32_t const ces[9] = { 0x27B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_350)
{
    // 0A91 003F;	
    // (ઑ) GUJARATI VOWEL CANDRA O	[27B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A91, 0x003F };
    uint32_t const ces[9] = { 0x27B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_351)
{
    // 0A91 0061;	
    // (ઑ) GUJARATI VOWEL CANDRA O	[27B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A91, 0x0061 };
    uint32_t const ces[9] = { 0x27B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_352)
{
    // 0A91 0041;	
    // (ઑ) GUJARATI VOWEL CANDRA O	[27B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A91, 0x0041 };
    uint32_t const ces[9] = { 0x27B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_353)
{
    // 0A91 0062;	
    // (ઑ) GUJARATI VOWEL CANDRA O	[27B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A91, 0x0062 };
    uint32_t const ces[9] = { 0x27B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_354)
{
    // 0A93 0021;	
    // (ઓ) GUJARATI LETTER O	[27BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A93, 0x0021 };
    uint32_t const ces[9] = { 0x27BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_355)
{
    // 0A93 003F;	
    // (ઓ) GUJARATI LETTER O	[27BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A93, 0x003F };
    uint32_t const ces[9] = { 0x27BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_356)
{
    // 0A93 0061;	
    // (ઓ) GUJARATI LETTER O	[27BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A93, 0x0061 };
    uint32_t const ces[9] = { 0x27BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_357)
{
    // 0A93 0041;	
    // (ઓ) GUJARATI LETTER O	[27BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A93, 0x0041 };
    uint32_t const ces[9] = { 0x27BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_358)
{
    // 0A93 0062;	
    // (ઓ) GUJARATI LETTER O	[27BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A93, 0x0062 };
    uint32_t const ces[9] = { 0x27BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_359)
{
    // 0A94 0021;	
    // (ઔ) GUJARATI LETTER AU	[27BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A94, 0x0021 };
    uint32_t const ces[9] = { 0x27BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_360)
{
    // 0A94 003F;	
    // (ઔ) GUJARATI LETTER AU	[27BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A94, 0x003F };
    uint32_t const ces[9] = { 0x27BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_361)
{
    // 0A94 0061;	
    // (ઔ) GUJARATI LETTER AU	[27BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A94, 0x0061 };
    uint32_t const ces[9] = { 0x27BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_362)
{
    // 0A94 0041;	
    // (ઔ) GUJARATI LETTER AU	[27BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A94, 0x0041 };
    uint32_t const ces[9] = { 0x27BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_363)
{
    // 0A94 0062;	
    // (ઔ) GUJARATI LETTER AU	[27BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A94, 0x0062 };
    uint32_t const ces[9] = { 0x27BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_364)
{
    // 0A95 0021;	
    // (ક) GUJARATI LETTER KA	[27BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A95, 0x0021 };
    uint32_t const ces[9] = { 0x27BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_365)
{
    // 0A95 003F;	
    // (ક) GUJARATI LETTER KA	[27BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A95, 0x003F };
    uint32_t const ces[9] = { 0x27BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_366)
{
    // 0A95 0061;	
    // (ક) GUJARATI LETTER KA	[27BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A95, 0x0061 };
    uint32_t const ces[9] = { 0x27BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_367)
{
    // 0A95 0041;	
    // (ક) GUJARATI LETTER KA	[27BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A95, 0x0041 };
    uint32_t const ces[9] = { 0x27BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_368)
{
    // 0A95 0062;	
    // (ક) GUJARATI LETTER KA	[27BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A95, 0x0062 };
    uint32_t const ces[9] = { 0x27BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_369)
{
    // 0A96 0021;	
    // (ખ) GUJARATI LETTER KHA	[27BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A96, 0x0021 };
    uint32_t const ces[9] = { 0x27BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_370)
{
    // 0A96 003F;	
    // (ખ) GUJARATI LETTER KHA	[27BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A96, 0x003F };
    uint32_t const ces[9] = { 0x27BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_371)
{
    // 0A96 0061;	
    // (ખ) GUJARATI LETTER KHA	[27BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A96, 0x0061 };
    uint32_t const ces[9] = { 0x27BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_372)
{
    // 0A96 0041;	
    // (ખ) GUJARATI LETTER KHA	[27BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A96, 0x0041 };
    uint32_t const ces[9] = { 0x27BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_373)
{
    // 0A96 0062;	
    // (ખ) GUJARATI LETTER KHA	[27BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A96, 0x0062 };
    uint32_t const ces[9] = { 0x27BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_374)
{
    // 0A97 0021;	
    // (ગ) GUJARATI LETTER GA	[27BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A97, 0x0021 };
    uint32_t const ces[9] = { 0x27BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_375)
{
    // 0A97 003F;	
    // (ગ) GUJARATI LETTER GA	[27BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A97, 0x003F };
    uint32_t const ces[9] = { 0x27BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_376)
{
    // 0A97 0061;	
    // (ગ) GUJARATI LETTER GA	[27BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A97, 0x0061 };
    uint32_t const ces[9] = { 0x27BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_377)
{
    // 0A97 0041;	
    // (ગ) GUJARATI LETTER GA	[27BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A97, 0x0041 };
    uint32_t const ces[9] = { 0x27BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_378)
{
    // 0A97 0062;	
    // (ગ) GUJARATI LETTER GA	[27BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A97, 0x0062 };
    uint32_t const ces[9] = { 0x27BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_379)
{
    // 0A98 0021;	
    // (ઘ) GUJARATI LETTER GHA	[27BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A98, 0x0021 };
    uint32_t const ces[9] = { 0x27BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_380)
{
    // 0A98 003F;	
    // (ઘ) GUJARATI LETTER GHA	[27BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A98, 0x003F };
    uint32_t const ces[9] = { 0x27BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_381)
{
    // 0A98 0061;	
    // (ઘ) GUJARATI LETTER GHA	[27BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A98, 0x0061 };
    uint32_t const ces[9] = { 0x27BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_382)
{
    // 0A98 0041;	
    // (ઘ) GUJARATI LETTER GHA	[27BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A98, 0x0041 };
    uint32_t const ces[9] = { 0x27BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_383)
{
    // 0A98 0062;	
    // (ઘ) GUJARATI LETTER GHA	[27BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A98, 0x0062 };
    uint32_t const ces[9] = { 0x27BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_384)
{
    // 0A99 0021;	
    // (ઙ) GUJARATI LETTER NGA	[27C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A99, 0x0021 };
    uint32_t const ces[9] = { 0x27C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_385)
{
    // 0A99 003F;	
    // (ઙ) GUJARATI LETTER NGA	[27C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A99, 0x003F };
    uint32_t const ces[9] = { 0x27C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_386)
{
    // 0A99 0061;	
    // (ઙ) GUJARATI LETTER NGA	[27C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A99, 0x0061 };
    uint32_t const ces[9] = { 0x27C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_387)
{
    // 0A99 0041;	
    // (ઙ) GUJARATI LETTER NGA	[27C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A99, 0x0041 };
    uint32_t const ces[9] = { 0x27C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_388)
{
    // 0A99 0062;	
    // (ઙ) GUJARATI LETTER NGA	[27C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A99, 0x0062 };
    uint32_t const ces[9] = { 0x27C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_389)
{
    // 0A9A 0021;	
    // (ચ) GUJARATI LETTER CA	[27C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9A, 0x0021 };
    uint32_t const ces[9] = { 0x27C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_390)
{
    // 0A9A 003F;	
    // (ચ) GUJARATI LETTER CA	[27C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9A, 0x003F };
    uint32_t const ces[9] = { 0x27C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_391)
{
    // 0A9A 0061;	
    // (ચ) GUJARATI LETTER CA	[27C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9A, 0x0061 };
    uint32_t const ces[9] = { 0x27C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_392)
{
    // 0A9A 0041;	
    // (ચ) GUJARATI LETTER CA	[27C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9A, 0x0041 };
    uint32_t const ces[9] = { 0x27C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_393)
{
    // 0A9A 0062;	
    // (ચ) GUJARATI LETTER CA	[27C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9A, 0x0062 };
    uint32_t const ces[9] = { 0x27C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_394)
{
    // 0A9B 0021;	
    // (છ) GUJARATI LETTER CHA	[27C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9B, 0x0021 };
    uint32_t const ces[9] = { 0x27C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_395)
{
    // 0A9B 003F;	
    // (છ) GUJARATI LETTER CHA	[27C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9B, 0x003F };
    uint32_t const ces[9] = { 0x27C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_396)
{
    // 0A9B 0061;	
    // (છ) GUJARATI LETTER CHA	[27C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9B, 0x0061 };
    uint32_t const ces[9] = { 0x27C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_397)
{
    // 0A9B 0041;	
    // (છ) GUJARATI LETTER CHA	[27C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9B, 0x0041 };
    uint32_t const ces[9] = { 0x27C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_398)
{
    // 0A9B 0062;	
    // (છ) GUJARATI LETTER CHA	[27C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9B, 0x0062 };
    uint32_t const ces[9] = { 0x27C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_399)
{
    // 0A9C 0021;	
    // (જ) GUJARATI LETTER JA	[27C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9C, 0x0021 };
    uint32_t const ces[9] = { 0x27C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_400)
{
    // 0A9C 003F;	
    // (જ) GUJARATI LETTER JA	[27C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9C, 0x003F };
    uint32_t const ces[9] = { 0x27C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_401)
{
    // 0A9C 0061;	
    // (જ) GUJARATI LETTER JA	[27C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9C, 0x0061 };
    uint32_t const ces[9] = { 0x27C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_402)
{
    // 0A9C 0041;	
    // (જ) GUJARATI LETTER JA	[27C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9C, 0x0041 };
    uint32_t const ces[9] = { 0x27C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_403)
{
    // 0A9C 0062;	
    // (જ) GUJARATI LETTER JA	[27C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9C, 0x0062 };
    uint32_t const ces[9] = { 0x27C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_404)
{
    // 0AF9 0021;	
    // (ૹ) GUJARATI LETTER ZHA	[27C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF9, 0x0021 };
    uint32_t const ces[9] = { 0x27C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_405)
{
    // 0AF9 003F;	
    // (ૹ) GUJARATI LETTER ZHA	[27C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF9, 0x003F };
    uint32_t const ces[9] = { 0x27C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_406)
{
    // 0AF9 0061;	
    // (ૹ) GUJARATI LETTER ZHA	[27C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF9, 0x0061 };
    uint32_t const ces[9] = { 0x27C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_407)
{
    // 0AF9 0041;	
    // (ૹ) GUJARATI LETTER ZHA	[27C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AF9, 0x0041 };
    uint32_t const ces[9] = { 0x27C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_408)
{
    // 0AF9 0062;	
    // (ૹ) GUJARATI LETTER ZHA	[27C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF9, 0x0062 };
    uint32_t const ces[9] = { 0x27C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_409)
{
    // 0A9D 0021;	
    // (ઝ) GUJARATI LETTER JHA	[27C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9D, 0x0021 };
    uint32_t const ces[9] = { 0x27C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_410)
{
    // 0A9D 003F;	
    // (ઝ) GUJARATI LETTER JHA	[27C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9D, 0x003F };
    uint32_t const ces[9] = { 0x27C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_411)
{
    // 0A9D 0061;	
    // (ઝ) GUJARATI LETTER JHA	[27C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9D, 0x0061 };
    uint32_t const ces[9] = { 0x27C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_412)
{
    // 0A9D 0041;	
    // (ઝ) GUJARATI LETTER JHA	[27C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9D, 0x0041 };
    uint32_t const ces[9] = { 0x27C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_413)
{
    // 0A9D 0062;	
    // (ઝ) GUJARATI LETTER JHA	[27C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9D, 0x0062 };
    uint32_t const ces[9] = { 0x27C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_414)
{
    // 0A9E 0021;	
    // (ઞ) GUJARATI LETTER NYA	[27C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9E, 0x0021 };
    uint32_t const ces[9] = { 0x27C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_415)
{
    // 0A9E 003F;	
    // (ઞ) GUJARATI LETTER NYA	[27C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9E, 0x003F };
    uint32_t const ces[9] = { 0x27C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_416)
{
    // 0A9E 0061;	
    // (ઞ) GUJARATI LETTER NYA	[27C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9E, 0x0061 };
    uint32_t const ces[9] = { 0x27C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_417)
{
    // 0A9E 0041;	
    // (ઞ) GUJARATI LETTER NYA	[27C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9E, 0x0041 };
    uint32_t const ces[9] = { 0x27C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_418)
{
    // 0A9E 0062;	
    // (ઞ) GUJARATI LETTER NYA	[27C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9E, 0x0062 };
    uint32_t const ces[9] = { 0x27C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_419)
{
    // 0A9F 0021;	
    // (ટ) GUJARATI LETTER TTA	[27C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9F, 0x0021 };
    uint32_t const ces[9] = { 0x27C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_420)
{
    // 0A9F 003F;	
    // (ટ) GUJARATI LETTER TTA	[27C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9F, 0x003F };
    uint32_t const ces[9] = { 0x27C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_421)
{
    // 0A9F 0061;	
    // (ટ) GUJARATI LETTER TTA	[27C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9F, 0x0061 };
    uint32_t const ces[9] = { 0x27C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_422)
{
    // 0A9F 0041;	
    // (ટ) GUJARATI LETTER TTA	[27C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A9F, 0x0041 };
    uint32_t const ces[9] = { 0x27C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_423)
{
    // 0A9F 0062;	
    // (ટ) GUJARATI LETTER TTA	[27C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A9F, 0x0062 };
    uint32_t const ces[9] = { 0x27C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_424)
{
    // 0AA0 0021;	
    // (ઠ) GUJARATI LETTER TTHA	[27C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA0, 0x0021 };
    uint32_t const ces[9] = { 0x27C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_425)
{
    // 0AA0 003F;	
    // (ઠ) GUJARATI LETTER TTHA	[27C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA0, 0x003F };
    uint32_t const ces[9] = { 0x27C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_426)
{
    // 0AA0 0061;	
    // (ઠ) GUJARATI LETTER TTHA	[27C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA0, 0x0061 };
    uint32_t const ces[9] = { 0x27C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_427)
{
    // 0AA0 0041;	
    // (ઠ) GUJARATI LETTER TTHA	[27C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA0, 0x0041 };
    uint32_t const ces[9] = { 0x27C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_428)
{
    // 0AA0 0062;	
    // (ઠ) GUJARATI LETTER TTHA	[27C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA0, 0x0062 };
    uint32_t const ces[9] = { 0x27C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_429)
{
    // 0AA1 0021;	
    // (ડ) GUJARATI LETTER DDA	[27C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA1, 0x0021 };
    uint32_t const ces[9] = { 0x27C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_430)
{
    // 0AA1 003F;	
    // (ડ) GUJARATI LETTER DDA	[27C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA1, 0x003F };
    uint32_t const ces[9] = { 0x27C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_431)
{
    // 0AA1 0061;	
    // (ડ) GUJARATI LETTER DDA	[27C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA1, 0x0061 };
    uint32_t const ces[9] = { 0x27C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_432)
{
    // 0AA1 0041;	
    // (ડ) GUJARATI LETTER DDA	[27C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA1, 0x0041 };
    uint32_t const ces[9] = { 0x27C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_433)
{
    // 0AA1 0062;	
    // (ડ) GUJARATI LETTER DDA	[27C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA1, 0x0062 };
    uint32_t const ces[9] = { 0x27C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_434)
{
    // 0AA2 0021;	
    // (ઢ) GUJARATI LETTER DDHA	[27CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA2, 0x0021 };
    uint32_t const ces[9] = { 0x27CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_435)
{
    // 0AA2 003F;	
    // (ઢ) GUJARATI LETTER DDHA	[27CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA2, 0x003F };
    uint32_t const ces[9] = { 0x27CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_436)
{
    // 0AA2 0061;	
    // (ઢ) GUJARATI LETTER DDHA	[27CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA2, 0x0061 };
    uint32_t const ces[9] = { 0x27CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_437)
{
    // 0AA2 0041;	
    // (ઢ) GUJARATI LETTER DDHA	[27CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA2, 0x0041 };
    uint32_t const ces[9] = { 0x27CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_438)
{
    // 0AA2 0062;	
    // (ઢ) GUJARATI LETTER DDHA	[27CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA2, 0x0062 };
    uint32_t const ces[9] = { 0x27CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_439)
{
    // 0AA3 0021;	
    // (ણ) GUJARATI LETTER NNA	[27CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA3, 0x0021 };
    uint32_t const ces[9] = { 0x27CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_440)
{
    // 0AA3 003F;	
    // (ણ) GUJARATI LETTER NNA	[27CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA3, 0x003F };
    uint32_t const ces[9] = { 0x27CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_441)
{
    // 0AA3 0061;	
    // (ણ) GUJARATI LETTER NNA	[27CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA3, 0x0061 };
    uint32_t const ces[9] = { 0x27CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_442)
{
    // 0AA3 0041;	
    // (ણ) GUJARATI LETTER NNA	[27CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA3, 0x0041 };
    uint32_t const ces[9] = { 0x27CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_443)
{
    // 0AA3 0062;	
    // (ણ) GUJARATI LETTER NNA	[27CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA3, 0x0062 };
    uint32_t const ces[9] = { 0x27CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_444)
{
    // 0AA4 0021;	
    // (ત) GUJARATI LETTER TA	[27CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA4, 0x0021 };
    uint32_t const ces[9] = { 0x27CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_445)
{
    // 0AA4 003F;	
    // (ત) GUJARATI LETTER TA	[27CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA4, 0x003F };
    uint32_t const ces[9] = { 0x27CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_446)
{
    // 0AA4 0061;	
    // (ત) GUJARATI LETTER TA	[27CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA4, 0x0061 };
    uint32_t const ces[9] = { 0x27CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_447)
{
    // 0AA4 0041;	
    // (ત) GUJARATI LETTER TA	[27CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA4, 0x0041 };
    uint32_t const ces[9] = { 0x27CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_448)
{
    // 0AA4 0062;	
    // (ત) GUJARATI LETTER TA	[27CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA4, 0x0062 };
    uint32_t const ces[9] = { 0x27CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_449)
{
    // 0AA5 0021;	
    // (થ) GUJARATI LETTER THA	[27CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA5, 0x0021 };
    uint32_t const ces[9] = { 0x27CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_450)
{
    // 0AA5 003F;	
    // (થ) GUJARATI LETTER THA	[27CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA5, 0x003F };
    uint32_t const ces[9] = { 0x27CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_451)
{
    // 0AA5 0061;	
    // (થ) GUJARATI LETTER THA	[27CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA5, 0x0061 };
    uint32_t const ces[9] = { 0x27CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_452)
{
    // 0AA5 0041;	
    // (થ) GUJARATI LETTER THA	[27CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA5, 0x0041 };
    uint32_t const ces[9] = { 0x27CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_453)
{
    // 0AA5 0062;	
    // (થ) GUJARATI LETTER THA	[27CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA5, 0x0062 };
    uint32_t const ces[9] = { 0x27CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_454)
{
    // 0AA6 0021;	
    // (દ) GUJARATI LETTER DA	[27CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA6, 0x0021 };
    uint32_t const ces[9] = { 0x27CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_455)
{
    // 0AA6 003F;	
    // (દ) GUJARATI LETTER DA	[27CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA6, 0x003F };
    uint32_t const ces[9] = { 0x27CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_456)
{
    // 0AA6 0061;	
    // (દ) GUJARATI LETTER DA	[27CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA6, 0x0061 };
    uint32_t const ces[9] = { 0x27CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_457)
{
    // 0AA6 0041;	
    // (દ) GUJARATI LETTER DA	[27CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA6, 0x0041 };
    uint32_t const ces[9] = { 0x27CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_458)
{
    // 0AA6 0062;	
    // (દ) GUJARATI LETTER DA	[27CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA6, 0x0062 };
    uint32_t const ces[9] = { 0x27CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_459)
{
    // 0AA7 0021;	
    // (ધ) GUJARATI LETTER DHA	[27CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA7, 0x0021 };
    uint32_t const ces[9] = { 0x27CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_460)
{
    // 0AA7 003F;	
    // (ધ) GUJARATI LETTER DHA	[27CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA7, 0x003F };
    uint32_t const ces[9] = { 0x27CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_461)
{
    // 0AA7 0061;	
    // (ધ) GUJARATI LETTER DHA	[27CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA7, 0x0061 };
    uint32_t const ces[9] = { 0x27CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_462)
{
    // 0AA7 0041;	
    // (ધ) GUJARATI LETTER DHA	[27CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA7, 0x0041 };
    uint32_t const ces[9] = { 0x27CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_463)
{
    // 0AA7 0062;	
    // (ધ) GUJARATI LETTER DHA	[27CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA7, 0x0062 };
    uint32_t const ces[9] = { 0x27CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_464)
{
    // 0AA8 0021;	
    // (ન) GUJARATI LETTER NA	[27D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA8, 0x0021 };
    uint32_t const ces[9] = { 0x27D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_465)
{
    // 0AA8 003F;	
    // (ન) GUJARATI LETTER NA	[27D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA8, 0x003F };
    uint32_t const ces[9] = { 0x27D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_466)
{
    // 0AA8 0061;	
    // (ન) GUJARATI LETTER NA	[27D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA8, 0x0061 };
    uint32_t const ces[9] = { 0x27D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_467)
{
    // 0AA8 0041;	
    // (ન) GUJARATI LETTER NA	[27D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AA8, 0x0041 };
    uint32_t const ces[9] = { 0x27D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_468)
{
    // 0AA8 0062;	
    // (ન) GUJARATI LETTER NA	[27D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AA8, 0x0062 };
    uint32_t const ces[9] = { 0x27D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_469)
{
    // 0AAA 0021;	
    // (પ) GUJARATI LETTER PA	[27D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAA, 0x0021 };
    uint32_t const ces[9] = { 0x27D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_470)
{
    // 0AAA 003F;	
    // (પ) GUJARATI LETTER PA	[27D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAA, 0x003F };
    uint32_t const ces[9] = { 0x27D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_471)
{
    // 0AAA 0061;	
    // (પ) GUJARATI LETTER PA	[27D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAA, 0x0061 };
    uint32_t const ces[9] = { 0x27D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_472)
{
    // 0AAA 0041;	
    // (પ) GUJARATI LETTER PA	[27D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAA, 0x0041 };
    uint32_t const ces[9] = { 0x27D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_473)
{
    // 0AAA 0062;	
    // (પ) GUJARATI LETTER PA	[27D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAA, 0x0062 };
    uint32_t const ces[9] = { 0x27D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_474)
{
    // 0AAB 0021;	
    // (ફ) GUJARATI LETTER PHA	[27D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAB, 0x0021 };
    uint32_t const ces[9] = { 0x27D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_475)
{
    // 0AAB 003F;	
    // (ફ) GUJARATI LETTER PHA	[27D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAB, 0x003F };
    uint32_t const ces[9] = { 0x27D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_476)
{
    // 0AAB 0061;	
    // (ફ) GUJARATI LETTER PHA	[27D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAB, 0x0061 };
    uint32_t const ces[9] = { 0x27D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_477)
{
    // 0AAB 0041;	
    // (ફ) GUJARATI LETTER PHA	[27D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAB, 0x0041 };
    uint32_t const ces[9] = { 0x27D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_478)
{
    // 0AAB 0062;	
    // (ફ) GUJARATI LETTER PHA	[27D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAB, 0x0062 };
    uint32_t const ces[9] = { 0x27D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_479)
{
    // 0AAC 0021;	
    // (બ) GUJARATI LETTER BA	[27D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAC, 0x0021 };
    uint32_t const ces[9] = { 0x27D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_480)
{
    // 0AAC 003F;	
    // (બ) GUJARATI LETTER BA	[27D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAC, 0x003F };
    uint32_t const ces[9] = { 0x27D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_481)
{
    // 0AAC 0061;	
    // (બ) GUJARATI LETTER BA	[27D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAC, 0x0061 };
    uint32_t const ces[9] = { 0x27D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_482)
{
    // 0AAC 0041;	
    // (બ) GUJARATI LETTER BA	[27D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAC, 0x0041 };
    uint32_t const ces[9] = { 0x27D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_483)
{
    // 0AAC 0062;	
    // (બ) GUJARATI LETTER BA	[27D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAC, 0x0062 };
    uint32_t const ces[9] = { 0x27D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_484)
{
    // 0AAD 0021;	
    // (ભ) GUJARATI LETTER BHA	[27D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAD, 0x0021 };
    uint32_t const ces[9] = { 0x27D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_485)
{
    // 0AAD 003F;	
    // (ભ) GUJARATI LETTER BHA	[27D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAD, 0x003F };
    uint32_t const ces[9] = { 0x27D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_486)
{
    // 0AAD 0061;	
    // (ભ) GUJARATI LETTER BHA	[27D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAD, 0x0061 };
    uint32_t const ces[9] = { 0x27D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_487)
{
    // 0AAD 0041;	
    // (ભ) GUJARATI LETTER BHA	[27D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAD, 0x0041 };
    uint32_t const ces[9] = { 0x27D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_488)
{
    // 0AAD 0062;	
    // (ભ) GUJARATI LETTER BHA	[27D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAD, 0x0062 };
    uint32_t const ces[9] = { 0x27D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_489)
{
    // 0AAE 0021;	
    // (મ) GUJARATI LETTER MA	[27D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAE, 0x0021 };
    uint32_t const ces[9] = { 0x27D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_490)
{
    // 0AAE 003F;	
    // (મ) GUJARATI LETTER MA	[27D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAE, 0x003F };
    uint32_t const ces[9] = { 0x27D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_491)
{
    // 0AAE 0061;	
    // (મ) GUJARATI LETTER MA	[27D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAE, 0x0061 };
    uint32_t const ces[9] = { 0x27D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_492)
{
    // 0AAE 0041;	
    // (મ) GUJARATI LETTER MA	[27D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAE, 0x0041 };
    uint32_t const ces[9] = { 0x27D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_493)
{
    // 0AAE 0062;	
    // (મ) GUJARATI LETTER MA	[27D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAE, 0x0062 };
    uint32_t const ces[9] = { 0x27D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_494)
{
    // 0AAF 0021;	
    // (ય) GUJARATI LETTER YA	[27D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAF, 0x0021 };
    uint32_t const ces[9] = { 0x27D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_495)
{
    // 0AAF 003F;	
    // (ય) GUJARATI LETTER YA	[27D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAF, 0x003F };
    uint32_t const ces[9] = { 0x27D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_496)
{
    // 0AAF 0061;	
    // (ય) GUJARATI LETTER YA	[27D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAF, 0x0061 };
    uint32_t const ces[9] = { 0x27D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_497)
{
    // 0AAF 0041;	
    // (ય) GUJARATI LETTER YA	[27D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AAF, 0x0041 };
    uint32_t const ces[9] = { 0x27D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_498)
{
    // 0AAF 0062;	
    // (ય) GUJARATI LETTER YA	[27D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AAF, 0x0062 };
    uint32_t const ces[9] = { 0x27D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_167_499)
{
    // 0AB0 0021;	
    // (ર) GUJARATI LETTER RA	[27D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB0, 0x0021 };
    uint32_t const ces[9] = { 0x27D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

