// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_055_000)
{
    // 21E9  ; [*0605.0020.0002] 
    // DOWNWARDS WHITE ARROW

    uint32_t const cps[1] = { 0x21e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x605), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_001)
{
    // 21EA  ; [*0606.0020.0002] 
    // UPWARDS WHITE ARROW FROM BAR

    uint32_t const cps[1] = { 0x21ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x606), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_002)
{
    // 21EB  ; [*0607.0020.0002] 
    // UPWARDS WHITE ARROW ON PEDESTAL

    uint32_t const cps[1] = { 0x21eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x607), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_003)
{
    // 21EC  ; [*0608.0020.0002] 
    // UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR

    uint32_t const cps[1] = { 0x21ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x608), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_004)
{
    // 21ED  ; [*0609.0020.0002] 
    // UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR

    uint32_t const cps[1] = { 0x21ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x609), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_005)
{
    // 21EE  ; [*060A.0020.0002] 
    // UPWARDS WHITE DOUBLE ARROW

    uint32_t const cps[1] = { 0x21ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_006)
{
    // 21EF  ; [*060B.0020.0002] 
    // UPWARDS WHITE DOUBLE ARROW ON PEDESTAL

    uint32_t const cps[1] = { 0x21ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_007)
{
    // 21F0  ; [*060C.0020.0002] 
    // RIGHTWARDS WHITE ARROW FROM WALL

    uint32_t const cps[1] = { 0x21f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_008)
{
    // 21F1  ; [*060D.0020.0002] 
    // NORTH WEST ARROW TO CORNER

    uint32_t const cps[1] = { 0x21f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_009)
{
    // 21F2  ; [*060E.0020.0002] 
    // SOUTH EAST ARROW TO CORNER

    uint32_t const cps[1] = { 0x21f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_010)
{
    // 21F3  ; [*060F.0020.0002] 
    // UP DOWN WHITE ARROW

    uint32_t const cps[1] = { 0x21f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x60f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_011)
{
    // 21F4  ; [*0610.0020.0002] 
    // RIGHT ARROW WITH SMALL CIRCLE

    uint32_t const cps[1] = { 0x21f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x610), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_012)
{
    // 21F5  ; [*0611.0020.0002] 
    // DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW

    uint32_t const cps[1] = { 0x21f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x611), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_013)
{
    // 21F6  ; [*0612.0020.0002] 
    // THREE RIGHTWARDS ARROWS

    uint32_t const cps[1] = { 0x21f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x612), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_014)
{
    // 21F7  ; [*0613.0020.0002] 
    // LEFTWARDS ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x21f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x613), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_015)
{
    // 21F8  ; [*0614.0020.0002] 
    // RIGHTWARDS ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x21f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x614), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_016)
{
    // 21F9  ; [*0615.0020.0002] 
    // LEFT RIGHT ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x21f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x615), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_017)
{
    // 21FA  ; [*0616.0020.0002] 
    // LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x21fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x616), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_018)
{
    // 21FB  ; [*0617.0020.0002] 
    // RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x21fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x617), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_019)
{
    // 21FC  ; [*0618.0020.0002] 
    // LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x21fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x618), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_020)
{
    // 21FD  ; [*0619.0020.0002] 
    // LEFTWARDS OPEN-HEADED ARROW

    uint32_t const cps[1] = { 0x21fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x619), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_021)
{
    // 21FE  ; [*061A.0020.0002] 
    // RIGHTWARDS OPEN-HEADED ARROW

    uint32_t const cps[1] = { 0x21fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_022)
{
    // 21FF  ; [*061B.0020.0002] 
    // LEFT RIGHT OPEN-HEADED ARROW

    uint32_t const cps[1] = { 0x21ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_023)
{
    // 2200  ; [*061C.0020.0002] 
    // FOR ALL

    uint32_t const cps[1] = { 0x2200 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_024)
{
    // 2201  ; [*061D.0020.0002] 
    // COMPLEMENT

    uint32_t const cps[1] = { 0x2201 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_025)
{
    // 2202  ; [*061E.0020.0002] 
    // PARTIAL DIFFERENTIAL

    uint32_t const cps[1] = { 0x2202 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_026)
{
    // 2203  ; [*061F.0020.0002] 
    // THERE EXISTS

    uint32_t const cps[1] = { 0x2203 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x61f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_027)
{
    // 2204  ; [*061F.0020.0002][.0000.002F.0002] 
    // THERE DOES NOT EXIST

    uint32_t const cps[1] = { 0x2204 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x61f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_028)
{
    // 2205  ; [*0620.0020.0002] 
    // EMPTY SET

    uint32_t const cps[1] = { 0x2205 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x620), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_029)
{
    // 2206  ; [*0621.0020.0002] 
    // INCREMENT

    uint32_t const cps[1] = { 0x2206 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x621), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_030)
{
    // 2207  ; [*0622.0020.0002] 
    // NABLA

    uint32_t const cps[1] = { 0x2207 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x622), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_031)
{
    // 2208  ; [*0623.0020.0002] 
    // ELEMENT OF

    uint32_t const cps[1] = { 0x2208 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x623), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_032)
{
    // 2209  ; [*0623.0020.0002][.0000.002F.0002] 
    // NOT AN ELEMENT OF

    uint32_t const cps[1] = { 0x2209 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x623), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_033)
{
    // 220A  ; [*0624.0020.0002] 
    // SMALL ELEMENT OF

    uint32_t const cps[1] = { 0x220a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x624), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_034)
{
    // 220B  ; [*0625.0020.0002] 
    // CONTAINS AS MEMBER

    uint32_t const cps[1] = { 0x220b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x625), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_035)
{
    // 220C  ; [*0625.0020.0002][.0000.002F.0002] 
    // DOES NOT CONTAIN AS MEMBER

    uint32_t const cps[1] = { 0x220c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x625), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_036)
{
    // 220D  ; [*0626.0020.0002] 
    // SMALL CONTAINS AS MEMBER

    uint32_t const cps[1] = { 0x220d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x626), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_037)
{
    // 220E  ; [*0628.0020.0002] 
    // END OF PROOF

    uint32_t const cps[1] = { 0x220e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x628), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_038)
{
    // 220F  ; [*0629.0020.0002] 
    // N-ARY PRODUCT

    uint32_t const cps[1] = { 0x220f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x629), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_039)
{
    // 2210  ; [*062A.0020.0002] 
    // N-ARY COPRODUCT

    uint32_t const cps[1] = { 0x2210 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x62a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_040)
{
    // 2211  ; [*062B.0020.0002] 
    // N-ARY SUMMATION

    uint32_t const cps[1] = { 0x2211 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x62b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_041)
{
    // 2212  ; [*0637.0020.0002] 
    // MINUS SIGN

    uint32_t const cps[1] = { 0x2212 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x637), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_042)
{
    // 2213  ; [*0639.0020.0002] 
    // MINUS-OR-PLUS SIGN

    uint32_t const cps[1] = { 0x2213 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x639), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_043)
{
    // 2214  ; [*063A.0020.0002] 
    // DOT PLUS

    uint32_t const cps[1] = { 0x2214 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_044)
{
    // 2215  ; [*063B.0020.0002] 
    // DIVISION SLASH

    uint32_t const cps[1] = { 0x2215 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_045)
{
    // 2216  ; [*063D.0020.0002] 
    // SET MINUS

    uint32_t const cps[1] = { 0x2216 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_046)
{
    // 2217  ; [*063E.0020.0002] 
    // ASTERISK OPERATOR

    uint32_t const cps[1] = { 0x2217 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_047)
{
    // 2218  ; [*063F.0020.0002] 
    // RING OPERATOR

    uint32_t const cps[1] = { 0x2218 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_048)
{
    // 2219  ; [*0640.0020.0002] 
    // BULLET OPERATOR

    uint32_t const cps[1] = { 0x2219 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x640), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_049)
{
    // 221A  ; [*0641.0020.0002] 
    // SQUARE ROOT

    uint32_t const cps[1] = { 0x221a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x641), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_050)
{
    // 221B  ; [*0642.0020.0002] 
    // CUBE ROOT

    uint32_t const cps[1] = { 0x221b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x642), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_051)
{
    // 221C  ; [*0644.0020.0002] 
    // FOURTH ROOT

    uint32_t const cps[1] = { 0x221c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x644), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_052)
{
    // 221D  ; [*0646.0020.0002] 
    // PROPORTIONAL TO

    uint32_t const cps[1] = { 0x221d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x646), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_053)
{
    // 221E  ; [*0647.0020.0002] 
    // INFINITY

    uint32_t const cps[1] = { 0x221e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x647), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_054)
{
    // 221F  ; [*0648.0020.0002] 
    // RIGHT ANGLE

    uint32_t const cps[1] = { 0x221f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x648), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_055)
{
    // 2220  ; [*0649.0020.0002] 
    // ANGLE

    uint32_t const cps[1] = { 0x2220 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x649), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_056)
{
    // 2221  ; [*064A.0020.0002] 
    // MEASURED ANGLE

    uint32_t const cps[1] = { 0x2221 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_057)
{
    // 2222  ; [*064B.0020.0002] 
    // SPHERICAL ANGLE

    uint32_t const cps[1] = { 0x2222 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_058)
{
    // 2223  ; [*064C.0020.0002] 
    // DIVIDES

    uint32_t const cps[1] = { 0x2223 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_059)
{
    // 2224  ; [*064C.0020.0002][.0000.002F.0002] 
    // DOES NOT DIVIDE

    uint32_t const cps[1] = { 0x2224 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x64c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_060)
{
    // 2225  ; [*064D.0020.0002] 
    // PARALLEL TO

    uint32_t const cps[1] = { 0x2225 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_061)
{
    // 2226  ; [*064D.0020.0002][.0000.002F.0002] 
    // NOT PARALLEL TO

    uint32_t const cps[1] = { 0x2226 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x64d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_062)
{
    // 2227  ; [*064E.0020.0002] 
    // LOGICAL AND

    uint32_t const cps[1] = { 0x2227 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_063)
{
    // 2228  ; [*064F.0020.0002] 
    // LOGICAL OR

    uint32_t const cps[1] = { 0x2228 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x64f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_064)
{
    // 2229  ; [*0650.0020.0002] 
    // INTERSECTION

    uint32_t const cps[1] = { 0x2229 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x650), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_065)
{
    // 222A  ; [*0651.0020.0002] 
    // UNION

    uint32_t const cps[1] = { 0x222a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x651), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_066)
{
    // 222B  ; [*0652.0020.0002] 
    // INTEGRAL

    uint32_t const cps[1] = { 0x222b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x652), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_067)
{
    // 222C  ; [*0652.0020.0004][*0652.0020.0004] 
    // DOUBLE INTEGRAL

    uint32_t const cps[1] = { 0x222c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x652), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_068)
{
    // 222D  ; [*0652.0020.0004][*0652.0020.0004][*0652.0020.0004] 
    // TRIPLE INTEGRAL

    uint32_t const cps[1] = { 0x222d };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x652), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x652), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_055_069)
{
    // 222E  ; [*0653.0020.0002] 
    // CONTOUR INTEGRAL

    uint32_t const cps[1] = { 0x222e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x653), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_070)
{
    // 222F  ; [*0653.0020.0004][*0653.0020.0004] 
    // SURFACE INTEGRAL

    uint32_t const cps[1] = { 0x222f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x653), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x653), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_071)
{
    // 2230  ; [*0653.0020.0004][*0653.0020.0004][*0653.0020.0004] 
    // VOLUME INTEGRAL

    uint32_t const cps[1] = { 0x2230 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x653), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x653), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x653), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_055_072)
{
    // 2231  ; [*0654.0020.0002] 
    // CLOCKWISE INTEGRAL

    uint32_t const cps[1] = { 0x2231 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x654), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_073)
{
    // 2232  ; [*0655.0020.0002] 
    // CLOCKWISE CONTOUR INTEGRAL

    uint32_t const cps[1] = { 0x2232 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x655), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_074)
{
    // 2233  ; [*0656.0020.0002] 
    // ANTICLOCKWISE CONTOUR INTEGRAL

    uint32_t const cps[1] = { 0x2233 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x656), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_075)
{
    // 2234  ; [*0657.0020.0002] 
    // THEREFORE

    uint32_t const cps[1] = { 0x2234 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x657), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_076)
{
    // 2235  ; [*0658.0020.0002] 
    // BECAUSE

    uint32_t const cps[1] = { 0x2235 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x658), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_077)
{
    // 2236  ; [*0659.0020.0002] 
    // RATIO

    uint32_t const cps[1] = { 0x2236 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x659), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_078)
{
    // 2237  ; [*065A.0020.0002] 
    // PROPORTION

    uint32_t const cps[1] = { 0x2237 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_079)
{
    // 2238  ; [*065B.0020.0002] 
    // DOT MINUS

    uint32_t const cps[1] = { 0x2238 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_080)
{
    // 2239  ; [*065C.0020.0002] 
    // EXCESS

    uint32_t const cps[1] = { 0x2239 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_081)
{
    // 223A  ; [*065D.0020.0002] 
    // GEOMETRIC PROPORTION

    uint32_t const cps[1] = { 0x223a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_082)
{
    // 223B  ; [*065E.0020.0002] 
    // HOMOTHETIC

    uint32_t const cps[1] = { 0x223b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_083)
{
    // 223C  ; [*065F.0020.0002] 
    // TILDE OPERATOR

    uint32_t const cps[1] = { 0x223c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x65f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_084)
{
    // 223D  ; [*0660.0020.0002] 
    // REVERSED TILDE

    uint32_t const cps[1] = { 0x223d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x660), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_085)
{
    // 223E  ; [*0661.0020.0002] 
    // INVERTED LAZY S

    uint32_t const cps[1] = { 0x223e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x661), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_086)
{
    // 223F  ; [*0662.0020.0002] 
    // SINE WAVE

    uint32_t const cps[1] = { 0x223f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x662), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_087)
{
    // 2240  ; [*0663.0020.0002] 
    // WREATH PRODUCT

    uint32_t const cps[1] = { 0x2240 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x663), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_088)
{
    // 2241  ; [*065F.0020.0002][.0000.002F.0002] 
    // NOT TILDE

    uint32_t const cps[1] = { 0x2241 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x65f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_089)
{
    // 2242  ; [*0664.0020.0002] 
    // MINUS TILDE

    uint32_t const cps[1] = { 0x2242 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x664), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_090)
{
    // 2243  ; [*0665.0020.0002] 
    // ASYMPTOTICALLY EQUAL TO

    uint32_t const cps[1] = { 0x2243 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x665), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_091)
{
    // 2244  ; [*0665.0020.0002][.0000.002F.0002] 
    // NOT ASYMPTOTICALLY EQUAL TO

    uint32_t const cps[1] = { 0x2244 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x665), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_092)
{
    // 2245  ; [*0666.0020.0002] 
    // APPROXIMATELY EQUAL TO

    uint32_t const cps[1] = { 0x2245 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x666), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_093)
{
    // 2246  ; [*0667.0020.0002] 
    // APPROXIMATELY BUT NOT ACTUALLY EQUAL TO

    uint32_t const cps[1] = { 0x2246 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x667), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_094)
{
    // 2247  ; [*0666.0020.0002][.0000.002F.0002] 
    // NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO

    uint32_t const cps[1] = { 0x2247 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x666), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_095)
{
    // 2248  ; [*0668.0020.0002] 
    // ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2248 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x668), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_096)
{
    // 2249  ; [*0668.0020.0002][.0000.002F.0002] 
    // NOT ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2249 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x668), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_097)
{
    // 224A  ; [*0669.0020.0002] 
    // ALMOST EQUAL OR EQUAL TO

    uint32_t const cps[1] = { 0x224a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x669), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_098)
{
    // 224B  ; [*066A.0020.0002] 
    // TRIPLE TILDE

    uint32_t const cps[1] = { 0x224b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_099)
{
    // 224C  ; [*066B.0020.0002] 
    // ALL EQUAL TO

    uint32_t const cps[1] = { 0x224c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_100)
{
    // 224D  ; [*066C.0020.0002] 
    // EQUIVALENT TO

    uint32_t const cps[1] = { 0x224d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_101)
{
    // 224E  ; [*066D.0020.0002] 
    // GEOMETRICALLY EQUIVALENT TO

    uint32_t const cps[1] = { 0x224e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_102)
{
    // 224F  ; [*066E.0020.0002] 
    // DIFFERENCE BETWEEN

    uint32_t const cps[1] = { 0x224f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_103)
{
    // 2250  ; [*066F.0020.0002] 
    // APPROACHES THE LIMIT

    uint32_t const cps[1] = { 0x2250 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x66f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_104)
{
    // 2251  ; [*0670.0020.0002] 
    // GEOMETRICALLY EQUAL TO

    uint32_t const cps[1] = { 0x2251 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x670), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_105)
{
    // 2252  ; [*0671.0020.0002] 
    // APPROXIMATELY EQUAL TO OR THE IMAGE OF

    uint32_t const cps[1] = { 0x2252 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x671), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_106)
{
    // 2253  ; [*0672.0020.0002] 
    // IMAGE OF OR APPROXIMATELY EQUAL TO

    uint32_t const cps[1] = { 0x2253 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x672), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_107)
{
    // 2254  ; [*0673.0020.0002] 
    // COLON EQUALS

    uint32_t const cps[1] = { 0x2254 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x673), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_108)
{
    // 2255  ; [*0674.0020.0002] 
    // EQUALS COLON

    uint32_t const cps[1] = { 0x2255 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x674), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_109)
{
    // 2256  ; [*0675.0020.0002] 
    // RING IN EQUAL TO

    uint32_t const cps[1] = { 0x2256 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x675), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_110)
{
    // 2257  ; [*0676.0020.0002] 
    // RING EQUAL TO

    uint32_t const cps[1] = { 0x2257 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x676), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_111)
{
    // 2258  ; [*0677.0020.0002] 
    // CORRESPONDS TO

    uint32_t const cps[1] = { 0x2258 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x677), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_112)
{
    // 2259  ; [*0678.0020.0002] 
    // ESTIMATES

    uint32_t const cps[1] = { 0x2259 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x678), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_113)
{
    // 225A  ; [*0679.0020.0002] 
    // EQUIANGULAR TO

    uint32_t const cps[1] = { 0x225a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x679), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_114)
{
    // 225B  ; [*067A.0020.0002] 
    // STAR EQUALS

    uint32_t const cps[1] = { 0x225b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_115)
{
    // 225C  ; [*067B.0020.0002] 
    // DELTA EQUAL TO

    uint32_t const cps[1] = { 0x225c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_116)
{
    // 225D  ; [*067C.0020.0002] 
    // EQUAL TO BY DEFINITION

    uint32_t const cps[1] = { 0x225d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_117)
{
    // 225E  ; [*067D.0020.0002] 
    // MEASURED BY

    uint32_t const cps[1] = { 0x225e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_118)
{
    // 225F  ; [*067E.0020.0002] 
    // QUESTIONED EQUAL TO

    uint32_t const cps[1] = { 0x225f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_119)
{
    // 2260  ; [*0631.0020.0002][.0000.002F.0002] 
    // NOT EQUAL TO

    uint32_t const cps[1] = { 0x2260 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_120)
{
    // 2261  ; [*067F.0020.0002] 
    // IDENTICAL TO

    uint32_t const cps[1] = { 0x2261 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x67f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_121)
{
    // 2262  ; [*067F.0020.0002][.0000.002F.0002] 
    // NOT IDENTICAL TO

    uint32_t const cps[1] = { 0x2262 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x67f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_122)
{
    // 2263  ; [*0680.0020.0002] 
    // STRICTLY EQUIVALENT TO

    uint32_t const cps[1] = { 0x2263 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x680), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_123)
{
    // 2264  ; [*0681.0020.0002] 
    // LESS-THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2264 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x681), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_124)
{
    // 2265  ; [*0682.0020.0002] 
    // GREATER-THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2265 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x682), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_125)
{
    // 2266  ; [*0683.0020.0002] 
    // LESS-THAN OVER EQUAL TO

    uint32_t const cps[1] = { 0x2266 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x683), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_126)
{
    // 2267  ; [*0684.0020.0002] 
    // GREATER-THAN OVER EQUAL TO

    uint32_t const cps[1] = { 0x2267 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x684), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_127)
{
    // 2268  ; [*0685.0020.0002] 
    // LESS-THAN BUT NOT EQUAL TO

    uint32_t const cps[1] = { 0x2268 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x685), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_128)
{
    // 2269  ; [*0686.0020.0002] 
    // GREATER-THAN BUT NOT EQUAL TO

    uint32_t const cps[1] = { 0x2269 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x686), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_129)
{
    // 226A  ; [*0687.0020.0002] 
    // MUCH LESS-THAN

    uint32_t const cps[1] = { 0x226a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x687), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_130)
{
    // 226B  ; [*0688.0020.0002] 
    // MUCH GREATER-THAN

    uint32_t const cps[1] = { 0x226b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x688), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_131)
{
    // 226C  ; [*0689.0020.0002] 
    // BETWEEN

    uint32_t const cps[1] = { 0x226c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x689), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_132)
{
    // 226D  ; [*066C.0020.0002][.0000.002F.0002] 
    // NOT EQUIVALENT TO

    uint32_t const cps[1] = { 0x226d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x66c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_133)
{
    // 226E  ; [*0630.0020.0002][.0000.002F.0002] 
    // NOT LESS-THAN

    uint32_t const cps[1] = { 0x226e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x630), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_134)
{
    // 226F  ; [*0632.0020.0002][.0000.002F.0002] 
    // NOT GREATER-THAN

    uint32_t const cps[1] = { 0x226f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x632), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_135)
{
    // 2270  ; [*0681.0020.0002][.0000.002F.0002] 
    // NEITHER LESS-THAN NOR EQUAL TO

    uint32_t const cps[1] = { 0x2270 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x681), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_136)
{
    // 2271  ; [*0682.0020.0002][.0000.002F.0002] 
    // NEITHER GREATER-THAN NOR EQUAL TO

    uint32_t const cps[1] = { 0x2271 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x682), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_137)
{
    // 2272  ; [*068A.0020.0002] 
    // LESS-THAN OR EQUIVALENT TO

    uint32_t const cps[1] = { 0x2272 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_138)
{
    // 2273  ; [*068B.0020.0002] 
    // GREATER-THAN OR EQUIVALENT TO

    uint32_t const cps[1] = { 0x2273 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_139)
{
    // 2274  ; [*068A.0020.0002][.0000.002F.0002] 
    // NEITHER LESS-THAN NOR EQUIVALENT TO

    uint32_t const cps[1] = { 0x2274 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x68a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_140)
{
    // 2275  ; [*068B.0020.0002][.0000.002F.0002] 
    // NEITHER GREATER-THAN NOR EQUIVALENT TO

    uint32_t const cps[1] = { 0x2275 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x68b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_141)
{
    // 2276  ; [*068C.0020.0002] 
    // LESS-THAN OR GREATER-THAN

    uint32_t const cps[1] = { 0x2276 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_142)
{
    // 2277  ; [*068D.0020.0002] 
    // GREATER-THAN OR LESS-THAN

    uint32_t const cps[1] = { 0x2277 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_143)
{
    // 2278  ; [*068C.0020.0002][.0000.002F.0002] 
    // NEITHER LESS-THAN NOR GREATER-THAN

    uint32_t const cps[1] = { 0x2278 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x68c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_144)
{
    // 2279  ; [*068D.0020.0002][.0000.002F.0002] 
    // NEITHER GREATER-THAN NOR LESS-THAN

    uint32_t const cps[1] = { 0x2279 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x68d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_055_145)
{
    // 227A  ; [*068E.0020.0002] 
    // PRECEDES

    uint32_t const cps[1] = { 0x227a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_146)
{
    // 227B  ; [*068F.0020.0002] 
    // SUCCEEDS

    uint32_t const cps[1] = { 0x227b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x68f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_147)
{
    // 227C  ; [*0690.0020.0002] 
    // PRECEDES OR EQUAL TO

    uint32_t const cps[1] = { 0x227c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x690), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_148)
{
    // 227D  ; [*0691.0020.0002] 
    // SUCCEEDS OR EQUAL TO

    uint32_t const cps[1] = { 0x227d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x691), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_055_149)
{
    // 227E  ; [*0692.0020.0002] 
    // PRECEDES OR EQUIVALENT TO

    uint32_t const cps[1] = { 0x227e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x692), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

