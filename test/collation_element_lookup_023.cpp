// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_023_000)
{
    // 0E55  ; [.1CA8.0020.0002] 
    // THAI DIGIT FIVE

    uint32_t const cps[1] = { 0xe55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_001)
{
    // 0E56  ; [.1CA9.0020.0002] 
    // THAI DIGIT SIX

    uint32_t const cps[1] = { 0xe56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_002)
{
    // 0E57  ; [.1CAA.0020.0002] 
    // THAI DIGIT SEVEN

    uint32_t const cps[1] = { 0xe57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_003)
{
    // 0E58  ; [.1CAB.0020.0002] 
    // THAI DIGIT EIGHT

    uint32_t const cps[1] = { 0xe58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_004)
{
    // 0E59  ; [.1CAC.0020.0002] 
    // THAI DIGIT NINE

    uint32_t const cps[1] = { 0xe59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_005)
{
    // 0E5A  ; [*03F5.0020.0002] 
    // THAI CHARACTER ANGKHANKHU

    uint32_t const cps[1] = { 0xe5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_006)
{
    // 0E5B  ; [*03F6.0020.0002] 
    // THAI CHARACTER KHOMUT

    uint32_t const cps[1] = { 0xe5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_007)
{
    // 0E81  ; [.2E61.0020.0002] 
    // LAO LETTER KO

    uint32_t const cps[1] = { 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_008)
{
    // 0E82  ; [.2E62.0020.0002] 
    // LAO LETTER KHO SUNG

    uint32_t const cps[1] = { 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_009)
{
    // 0E84  ; [.2E63.0020.0002] 
    // LAO LETTER KHO TAM

    uint32_t const cps[1] = { 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_010)
{
    // 0E87  ; [.2E64.0020.0002] 
    // LAO LETTER NGO

    uint32_t const cps[1] = { 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_011)
{
    // 0E88  ; [.2E65.0020.0002] 
    // LAO LETTER CO

    uint32_t const cps[1] = { 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_012)
{
    // 0E8A  ; [.2E67.0020.0002] 
    // LAO LETTER SO TAM

    uint32_t const cps[1] = { 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_013)
{
    // 0E8D  ; [.2E69.0020.0002] 
    // LAO LETTER NYO

    uint32_t const cps[1] = { 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_014)
{
    // 0E94  ; [.2E6A.0020.0002] 
    // LAO LETTER DO

    uint32_t const cps[1] = { 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_015)
{
    // 0E95  ; [.2E6B.0020.0002] 
    // LAO LETTER TO

    uint32_t const cps[1] = { 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_016)
{
    // 0E96  ; [.2E6C.0020.0002] 
    // LAO LETTER THO SUNG

    uint32_t const cps[1] = { 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_017)
{
    // 0E97  ; [.2E6D.0020.0002] 
    // LAO LETTER THO TAM

    uint32_t const cps[1] = { 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_018)
{
    // 0E99  ; [.2E6E.0020.0002] 
    // LAO LETTER NO

    uint32_t const cps[1] = { 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_019)
{
    // 0E9A  ; [.2E6F.0020.0002] 
    // LAO LETTER BO

    uint32_t const cps[1] = { 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_020)
{
    // 0E9B  ; [.2E70.0020.0002] 
    // LAO LETTER PO

    uint32_t const cps[1] = { 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_021)
{
    // 0E9C  ; [.2E71.0020.0002] 
    // LAO LETTER PHO SUNG

    uint32_t const cps[1] = { 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_022)
{
    // 0E9D  ; [.2E72.0020.0002] 
    // LAO LETTER FO TAM

    uint32_t const cps[1] = { 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_023)
{
    // 0E9E  ; [.2E73.0020.0002] 
    // LAO LETTER PHO TAM

    uint32_t const cps[1] = { 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_024)
{
    // 0E9F  ; [.2E74.0020.0002] 
    // LAO LETTER FO SUNG

    uint32_t const cps[1] = { 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_025)
{
    // 0EA1  ; [.2E75.0020.0002] 
    // LAO LETTER MO

    uint32_t const cps[1] = { 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_026)
{
    // 0EA2  ; [.2E76.0020.0002] 
    // LAO LETTER YO

    uint32_t const cps[1] = { 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_027)
{
    // 0EA3  ; [.2E77.0020.0002] 
    // LAO LETTER LO LING

    uint32_t const cps[1] = { 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_028)
{
    // 0EA5  ; [.2E78.0020.0002] 
    // LAO LETTER LO LOOT

    uint32_t const cps[1] = { 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_029)
{
    // 0EA7  ; [.2E79.0020.0002] 
    // LAO LETTER WO

    uint32_t const cps[1] = { 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_030)
{
    // 0EAA  ; [.2E66.0020.0002] 
    // LAO LETTER SO SUNG

    uint32_t const cps[1] = { 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_031)
{
    // 0EAB  ; [.2E7A.0020.0002] 
    // LAO LETTER HO SUNG

    uint32_t const cps[1] = { 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_032)
{
    // 0EAD  ; [.2E7B.0020.0002] 
    // LAO LETTER O

    uint32_t const cps[1] = { 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_033)
{
    // 0EAE  ; [.2E7C.0020.0002] 
    // LAO LETTER HO TAM

    uint32_t const cps[1] = { 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_034)
{
    // 0EAF  ; [.2E7D.0020.0002] 
    // LAO ELLIPSIS

    uint32_t const cps[1] = { 0xeaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_035)
{
    // 0EB0  ; [.2E7E.0020.0002] 
    // LAO VOWEL SIGN A

    uint32_t const cps[1] = { 0xeb0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_036)
{
    // 0EB1  ; [.2E7F.0020.0002] 
    // LAO VOWEL SIGN MAI KAN

    uint32_t const cps[1] = { 0xeb1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_037)
{
    // 0EB2  ; [.2E80.0020.0002] 
    // LAO VOWEL SIGN AA

    uint32_t const cps[1] = { 0xeb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e80), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_038)
{
    // 0EB3  ; [.2E81.0020.0002] 
    // LAO VOWEL SIGN AM

    uint32_t const cps[1] = { 0xeb3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e81), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_039)
{
    // 0EB4  ; [.2E82.0020.0002] 
    // LAO VOWEL SIGN I

    uint32_t const cps[1] = { 0xeb4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e82), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_040)
{
    // 0EB5  ; [.2E83.0020.0002] 
    // LAO VOWEL SIGN II

    uint32_t const cps[1] = { 0xeb5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e83), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_041)
{
    // 0EB6  ; [.2E84.0020.0002] 
    // LAO VOWEL SIGN Y

    uint32_t const cps[1] = { 0xeb6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e84), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_042)
{
    // 0EB7  ; [.2E85.0020.0002] 
    // LAO VOWEL SIGN YY

    uint32_t const cps[1] = { 0xeb7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e85), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_043)
{
    // 0EB8  ; [.2E86.0020.0002] 
    // LAO VOWEL SIGN U

    uint32_t const cps[1] = { 0xeb8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e86), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_044)
{
    // 0EB9  ; [.2E87.0020.0002] 
    // LAO VOWEL SIGN UU

    uint32_t const cps[1] = { 0xeb9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e87), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_045)
{
    // 0EBB  ; [.2E88.0020.0002] 
    // LAO VOWEL SIGN MAI KON

    uint32_t const cps[1] = { 0xebb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e88), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_046)
{
    // 0EBC  ; [.2E89.0020.0002] 
    // LAO SEMIVOWEL SIGN LO

    uint32_t const cps[1] = { 0xebc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e89), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_047)
{
    // 0EBD  ; [.2E8A.0020.0002] 
    // LAO SEMIVOWEL SIGN NYO

    uint32_t const cps[1] = { 0xebd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_023_048)
{
    // 0EC0  ; [.2E8B.0020.0002] 
    // LAO VOWEL SIGN E

    uint32_t const cps[1] = { 0xec0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_049)
{
    // 0EC0 0E81 ; [.2E61.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER KO>

    uint32_t const cps[2] = { 0xec0, 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_050)
{
    // 0EC0 0E82 ; [.2E62.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER KHO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_051)
{
    // 0EC0 0E84 ; [.2E63.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER KHO TAM>

    uint32_t const cps[2] = { 0xec0, 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_052)
{
    // 0EC0 0E87 ; [.2E64.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER NGO>

    uint32_t const cps[2] = { 0xec0, 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_053)
{
    // 0EC0 0E88 ; [.2E65.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER CO>

    uint32_t const cps[2] = { 0xec0, 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_054)
{
    // 0EC0 0E8A ; [.2E67.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER SO TAM>

    uint32_t const cps[2] = { 0xec0, 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_055)
{
    // 0EC0 0E8D ; [.2E69.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER NYO>

    uint32_t const cps[2] = { 0xec0, 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_056)
{
    // 0EC0 0E94 ; [.2E6A.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER DO>

    uint32_t const cps[2] = { 0xec0, 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_057)
{
    // 0EC0 0E95 ; [.2E6B.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER TO>

    uint32_t const cps[2] = { 0xec0, 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_058)
{
    // 0EC0 0E96 ; [.2E6C.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER THO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_059)
{
    // 0EC0 0E97 ; [.2E6D.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER THO TAM>

    uint32_t const cps[2] = { 0xec0, 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_060)
{
    // 0EC0 0E99 ; [.2E6E.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER NO>

    uint32_t const cps[2] = { 0xec0, 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_061)
{
    // 0EC0 0E9A ; [.2E6F.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER BO>

    uint32_t const cps[2] = { 0xec0, 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_062)
{
    // 0EC0 0E9B ; [.2E70.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER PO>

    uint32_t const cps[2] = { 0xec0, 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_063)
{
    // 0EC0 0E9C ; [.2E71.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER PHO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_064)
{
    // 0EC0 0E9D ; [.2E72.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER FO TAM>

    uint32_t const cps[2] = { 0xec0, 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_065)
{
    // 0EC0 0E9E ; [.2E73.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER PHO TAM>

    uint32_t const cps[2] = { 0xec0, 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_066)
{
    // 0EC0 0E9F ; [.2E74.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER FO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_067)
{
    // 0EC0 0EA1 ; [.2E75.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER MO>

    uint32_t const cps[2] = { 0xec0, 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_068)
{
    // 0EC0 0EA2 ; [.2E76.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER YO>

    uint32_t const cps[2] = { 0xec0, 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_069)
{
    // 0EC0 0EA3 ; [.2E77.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER LO LING>

    uint32_t const cps[2] = { 0xec0, 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_070)
{
    // 0EC0 0EA5 ; [.2E78.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER LO LOOT>

    uint32_t const cps[2] = { 0xec0, 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_071)
{
    // 0EC0 0EA7 ; [.2E79.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER WO>

    uint32_t const cps[2] = { 0xec0, 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_072)
{
    // 0EC0 0EAA ; [.2E66.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER SO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_073)
{
    // 0EC0 0EAB ; [.2E7A.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER HO SUNG>

    uint32_t const cps[2] = { 0xec0, 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_074)
{
    // 0EC0 0EAD ; [.2E7B.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER O>

    uint32_t const cps[2] = { 0xec0, 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_075)
{
    // 0EC0 0EAE ; [.2E7C.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER HO TAM>

    uint32_t const cps[2] = { 0xec0, 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_076)
{
    // 0EC0 0EDC ; [.2E7A.0020.0004][.2E6E.0020.0004][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO HO NO>

    uint32_t const cps[2] = { 0xec0, 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_077)
{
    // 0EC0 0EDD ; [.2E7A.0020.0004][.2E75.0020.0004][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO HO MO>

    uint32_t const cps[2] = { 0xec0, 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_078)
{
    // 0EC0 0EDE ; [.2E60.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER KHMU GO>

    uint32_t const cps[2] = { 0xec0, 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_079)
{
    // 0EC0 0EDF ; [.2E68.0020.0002][.2E8B.0020.0002] 
    // <LAO VOWEL SIGN E, LAO LETTER KHMU NYO>

    uint32_t const cps[2] = { 0xec0, 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_080)
{
    // 0EC1  ; [.2E8C.0020.0002] 
    // LAO VOWEL SIGN EI

    uint32_t const cps[1] = { 0xec1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_081)
{
    // 0EC1 0E81 ; [.2E61.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER KO>

    uint32_t const cps[2] = { 0xec1, 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_082)
{
    // 0EC1 0E82 ; [.2E62.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER KHO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_083)
{
    // 0EC1 0E84 ; [.2E63.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER KHO TAM>

    uint32_t const cps[2] = { 0xec1, 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_084)
{
    // 0EC1 0E87 ; [.2E64.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER NGO>

    uint32_t const cps[2] = { 0xec1, 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_085)
{
    // 0EC1 0E88 ; [.2E65.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER CO>

    uint32_t const cps[2] = { 0xec1, 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_086)
{
    // 0EC1 0E8A ; [.2E67.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER SO TAM>

    uint32_t const cps[2] = { 0xec1, 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_087)
{
    // 0EC1 0E8D ; [.2E69.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER NYO>

    uint32_t const cps[2] = { 0xec1, 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_088)
{
    // 0EC1 0E94 ; [.2E6A.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER DO>

    uint32_t const cps[2] = { 0xec1, 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_089)
{
    // 0EC1 0E95 ; [.2E6B.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER TO>

    uint32_t const cps[2] = { 0xec1, 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_090)
{
    // 0EC1 0E96 ; [.2E6C.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER THO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_091)
{
    // 0EC1 0E97 ; [.2E6D.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER THO TAM>

    uint32_t const cps[2] = { 0xec1, 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_092)
{
    // 0EC1 0E99 ; [.2E6E.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER NO>

    uint32_t const cps[2] = { 0xec1, 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_093)
{
    // 0EC1 0E9A ; [.2E6F.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER BO>

    uint32_t const cps[2] = { 0xec1, 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_094)
{
    // 0EC1 0E9B ; [.2E70.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER PO>

    uint32_t const cps[2] = { 0xec1, 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_095)
{
    // 0EC1 0E9C ; [.2E71.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER PHO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_096)
{
    // 0EC1 0E9D ; [.2E72.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER FO TAM>

    uint32_t const cps[2] = { 0xec1, 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_097)
{
    // 0EC1 0E9E ; [.2E73.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER PHO TAM>

    uint32_t const cps[2] = { 0xec1, 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_098)
{
    // 0EC1 0E9F ; [.2E74.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER FO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_099)
{
    // 0EC1 0EA1 ; [.2E75.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER MO>

    uint32_t const cps[2] = { 0xec1, 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_100)
{
    // 0EC1 0EA2 ; [.2E76.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER YO>

    uint32_t const cps[2] = { 0xec1, 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_101)
{
    // 0EC1 0EA3 ; [.2E77.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER LO LING>

    uint32_t const cps[2] = { 0xec1, 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_102)
{
    // 0EC1 0EA5 ; [.2E78.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER LO LOOT>

    uint32_t const cps[2] = { 0xec1, 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_103)
{
    // 0EC1 0EA7 ; [.2E79.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER WO>

    uint32_t const cps[2] = { 0xec1, 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_104)
{
    // 0EC1 0EAA ; [.2E66.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER SO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_105)
{
    // 0EC1 0EAB ; [.2E7A.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER HO SUNG>

    uint32_t const cps[2] = { 0xec1, 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_106)
{
    // 0EC1 0EAD ; [.2E7B.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER O>

    uint32_t const cps[2] = { 0xec1, 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_107)
{
    // 0EC1 0EAE ; [.2E7C.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER HO TAM>

    uint32_t const cps[2] = { 0xec1, 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_108)
{
    // 0EC1 0EDC ; [.2E7A.0020.0004][.2E6E.0020.0004][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO HO NO>

    uint32_t const cps[2] = { 0xec1, 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_109)
{
    // 0EC1 0EDD ; [.2E7A.0020.0004][.2E75.0020.0004][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO HO MO>

    uint32_t const cps[2] = { 0xec1, 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_110)
{
    // 0EC1 0EDE ; [.2E60.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER KHMU GO>

    uint32_t const cps[2] = { 0xec1, 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_111)
{
    // 0EC1 0EDF ; [.2E68.0020.0002][.2E8C.0020.0002] 
    // <LAO VOWEL SIGN EI, LAO LETTER KHMU NYO>

    uint32_t const cps[2] = { 0xec1, 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_112)
{
    // 0EC2  ; [.2E8D.0020.0002] 
    // LAO VOWEL SIGN O

    uint32_t const cps[1] = { 0xec2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_113)
{
    // 0EC2 0E81 ; [.2E61.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER KO>

    uint32_t const cps[2] = { 0xec2, 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_114)
{
    // 0EC2 0E82 ; [.2E62.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER KHO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_115)
{
    // 0EC2 0E84 ; [.2E63.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER KHO TAM>

    uint32_t const cps[2] = { 0xec2, 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_116)
{
    // 0EC2 0E87 ; [.2E64.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER NGO>

    uint32_t const cps[2] = { 0xec2, 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_117)
{
    // 0EC2 0E88 ; [.2E65.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER CO>

    uint32_t const cps[2] = { 0xec2, 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_118)
{
    // 0EC2 0E8A ; [.2E67.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER SO TAM>

    uint32_t const cps[2] = { 0xec2, 0xe8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e67), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_119)
{
    // 0EC2 0E8D ; [.2E69.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER NYO>

    uint32_t const cps[2] = { 0xec2, 0xe8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e69), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_120)
{
    // 0EC2 0E94 ; [.2E6A.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER DO>

    uint32_t const cps[2] = { 0xec2, 0xe94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_121)
{
    // 0EC2 0E95 ; [.2E6B.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER TO>

    uint32_t const cps[2] = { 0xec2, 0xe95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_122)
{
    // 0EC2 0E96 ; [.2E6C.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER THO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xe96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_123)
{
    // 0EC2 0E97 ; [.2E6D.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER THO TAM>

    uint32_t const cps[2] = { 0xec2, 0xe97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_124)
{
    // 0EC2 0E99 ; [.2E6E.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER NO>

    uint32_t const cps[2] = { 0xec2, 0xe99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_125)
{
    // 0EC2 0E9A ; [.2E6F.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER BO>

    uint32_t const cps[2] = { 0xec2, 0xe9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e6f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_126)
{
    // 0EC2 0E9B ; [.2E70.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER PO>

    uint32_t const cps[2] = { 0xec2, 0xe9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e70), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_127)
{
    // 0EC2 0E9C ; [.2E71.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER PHO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xe9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_128)
{
    // 0EC2 0E9D ; [.2E72.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER FO TAM>

    uint32_t const cps[2] = { 0xec2, 0xe9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e72), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_129)
{
    // 0EC2 0E9E ; [.2E73.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER PHO TAM>

    uint32_t const cps[2] = { 0xec2, 0xe9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e73), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_130)
{
    // 0EC2 0E9F ; [.2E74.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER FO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xe9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e74), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_131)
{
    // 0EC2 0EA1 ; [.2E75.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER MO>

    uint32_t const cps[2] = { 0xec2, 0xea1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_132)
{
    // 0EC2 0EA2 ; [.2E76.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER YO>

    uint32_t const cps[2] = { 0xec2, 0xea2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e76), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_133)
{
    // 0EC2 0EA3 ; [.2E77.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER LO LING>

    uint32_t const cps[2] = { 0xec2, 0xea3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e77), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_134)
{
    // 0EC2 0EA5 ; [.2E78.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER LO LOOT>

    uint32_t const cps[2] = { 0xec2, 0xea5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e78), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_135)
{
    // 0EC2 0EA7 ; [.2E79.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER WO>

    uint32_t const cps[2] = { 0xec2, 0xea7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e79), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_136)
{
    // 0EC2 0EAA ; [.2E66.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER SO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xeaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e66), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_137)
{
    // 0EC2 0EAB ; [.2E7A.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER HO SUNG>

    uint32_t const cps[2] = { 0xec2, 0xeab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_138)
{
    // 0EC2 0EAD ; [.2E7B.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER O>

    uint32_t const cps[2] = { 0xec2, 0xead };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_139)
{
    // 0EC2 0EAE ; [.2E7C.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER HO TAM>

    uint32_t const cps[2] = { 0xec2, 0xeae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e7c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_140)
{
    // 0EC2 0EDC ; [.2E7A.0020.0004][.2E6E.0020.0004][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO HO NO>

    uint32_t const cps[2] = { 0xec2, 0xedc };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e6e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_141)
{
    // 0EC2 0EDD ; [.2E7A.0020.0004][.2E75.0020.0004][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO HO MO>

    uint32_t const cps[2] = { 0xec2, 0xedd };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2e7a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e75), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 3));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_142)
{
    // 0EC2 0EDE ; [.2E60.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER KHMU GO>

    uint32_t const cps[2] = { 0xec2, 0xede };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e60), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_143)
{
    // 0EC2 0EDF ; [.2E68.0020.0002][.2E8D.0020.0002] 
    // <LAO VOWEL SIGN O, LAO LETTER KHMU NYO>

    uint32_t const cps[2] = { 0xec2, 0xedf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e68), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_144)
{
    // 0EC3  ; [.2E8E.0020.0002] 
    // LAO VOWEL SIGN AY

    uint32_t const cps[1] = { 0xec3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_145)
{
    // 0EC3 0E81 ; [.2E61.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER KO>

    uint32_t const cps[2] = { 0xec3, 0xe81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e61), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_146)
{
    // 0EC3 0E82 ; [.2E62.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER KHO SUNG>

    uint32_t const cps[2] = { 0xec3, 0xe82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e62), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_147)
{
    // 0EC3 0E84 ; [.2E63.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER KHO TAM>

    uint32_t const cps[2] = { 0xec3, 0xe84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e63), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_148)
{
    // 0EC3 0E87 ; [.2E64.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER NGO>

    uint32_t const cps[2] = { 0xec3, 0xe87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e64), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_023_149)
{
    // 0EC3 0E88 ; [.2E65.0020.0002][.2E8E.0020.0002] 
    // <LAO VOWEL SIGN AY, LAO LETTER CO>

    uint32_t const cps[2] = { 0xec3, 0xe88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e65), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2e8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

