// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_077_000)
{
    // 10E7E 0041;	
    // (‚Äéêπæ‚Äé) RUMI FRACTION TWO THIRDS	[1B45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E7E, 0x0041 };
    uint32_t const ces[9] = { 0x1B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_001)
{
    // 10E7E 0062;	
    // (‚Äéêπæ‚Äé) RUMI FRACTION TWO THIRDS	[1B45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E7E, 0x0062 };
    uint32_t const ces[9] = { 0x1B45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_002)
{
    // 2CFD 0021;	
    // (‚≥Ω) COPTIC FRACTION ONE HALF	[1B46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFD, 0x0021 };
    uint32_t const ces[9] = { 0x1B46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_003)
{
    // 2CFD 003F;	
    // (‚≥Ω) COPTIC FRACTION ONE HALF	[1B46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFD, 0x003F };
    uint32_t const ces[9] = { 0x1B46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_004)
{
    // 2CFD 0061;	
    // (‚≥Ω) COPTIC FRACTION ONE HALF	[1B46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFD, 0x0061 };
    uint32_t const ces[9] = { 0x1B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_005)
{
    // 2CFD 0041;	
    // (‚≥Ω) COPTIC FRACTION ONE HALF	[1B46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CFD, 0x0041 };
    uint32_t const ces[9] = { 0x1B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_006)
{
    // 2CFD 0062;	
    // (‚≥Ω) COPTIC FRACTION ONE HALF	[1B46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CFD, 0x0062 };
    uint32_t const ces[9] = { 0x1B46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_007)
{
    // 10322 0021;	
    // (êå¢) OLD ITALIC NUMERAL TEN	[1B47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10322, 0x0021 };
    uint32_t const ces[9] = { 0x1B47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_008)
{
    // 10322 003F;	
    // (êå¢) OLD ITALIC NUMERAL TEN	[1B47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10322, 0x003F };
    uint32_t const ces[9] = { 0x1B47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_009)
{
    // 10322 0061;	
    // (êå¢) OLD ITALIC NUMERAL TEN	[1B47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10322, 0x0061 };
    uint32_t const ces[9] = { 0x1B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_010)
{
    // 10322 0041;	
    // (êå¢) OLD ITALIC NUMERAL TEN	[1B47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10322, 0x0041 };
    uint32_t const ces[9] = { 0x1B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_011)
{
    // 10322 0062;	
    // (êå¢) OLD ITALIC NUMERAL TEN	[1B47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10322, 0x0062 };
    uint32_t const ces[9] = { 0x1B47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_012)
{
    // 10323 0021;	
    // (êå£) OLD ITALIC NUMERAL FIFTY	[1B48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10323, 0x0021 };
    uint32_t const ces[9] = { 0x1B48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_013)
{
    // 10323 003F;	
    // (êå£) OLD ITALIC NUMERAL FIFTY	[1B48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10323, 0x003F };
    uint32_t const ces[9] = { 0x1B48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_014)
{
    // 10323 0061;	
    // (êå£) OLD ITALIC NUMERAL FIFTY	[1B48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10323, 0x0061 };
    uint32_t const ces[9] = { 0x1B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_015)
{
    // 10323 0041;	
    // (êå£) OLD ITALIC NUMERAL FIFTY	[1B48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10323, 0x0041 };
    uint32_t const ces[9] = { 0x1B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_016)
{
    // 10323 0062;	
    // (êå£) OLD ITALIC NUMERAL FIFTY	[1B48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10323, 0x0062 };
    uint32_t const ces[9] = { 0x1B48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_017)
{
    // 10CFC 0021;	
    // (‚Äé‚Äéê≥º‚Äé‚Äé) OLD HUNGARIAN NUMBER TEN	[1B49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFC, 0x0021 };
    uint32_t const ces[9] = { 0x1B49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_018)
{
    // 10CFC 003F;	
    // (‚Äé‚Äéê≥º‚Äé‚Äé) OLD HUNGARIAN NUMBER TEN	[1B49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFC, 0x003F };
    uint32_t const ces[9] = { 0x1B49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_019)
{
    // 10CFC 0061;	
    // (‚Äé‚Äéê≥º‚Äé‚Äé) OLD HUNGARIAN NUMBER TEN	[1B49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFC, 0x0061 };
    uint32_t const ces[9] = { 0x1B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_020)
{
    // 10CFC 0041;	
    // (‚Äé‚Äéê≥º‚Äé‚Äé) OLD HUNGARIAN NUMBER TEN	[1B49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CFC, 0x0041 };
    uint32_t const ces[9] = { 0x1B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_021)
{
    // 10CFC 0062;	
    // (‚Äé‚Äéê≥º‚Äé‚Äé) OLD HUNGARIAN NUMBER TEN	[1B49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFC, 0x0062 };
    uint32_t const ces[9] = { 0x1B49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_022)
{
    // 10CFD 0021;	
    // (‚Äé‚Äéê≥Ω‚Äé‚Äé) OLD HUNGARIAN NUMBER FIFTY	[1B4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFD, 0x0021 };
    uint32_t const ces[9] = { 0x1B4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_023)
{
    // 10CFD 003F;	
    // (‚Äé‚Äéê≥Ω‚Äé‚Äé) OLD HUNGARIAN NUMBER FIFTY	[1B4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFD, 0x003F };
    uint32_t const ces[9] = { 0x1B4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_024)
{
    // 10CFD 0061;	
    // (‚Äé‚Äéê≥Ω‚Äé‚Äé) OLD HUNGARIAN NUMBER FIFTY	[1B4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFD, 0x0061 };
    uint32_t const ces[9] = { 0x1B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_025)
{
    // 10CFD 0041;	
    // (‚Äé‚Äéê≥Ω‚Äé‚Äé) OLD HUNGARIAN NUMBER FIFTY	[1B4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CFD, 0x0041 };
    uint32_t const ces[9] = { 0x1B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_026)
{
    // 10CFD 0062;	
    // (‚Äé‚Äéê≥Ω‚Äé‚Äé) OLD HUNGARIAN NUMBER FIFTY	[1B4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFD, 0x0062 };
    uint32_t const ces[9] = { 0x1B4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_027)
{
    // 10CFE 0021;	
    // (‚Äé‚Äéê≥æ‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE HUNDRED	[1B4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFE, 0x0021 };
    uint32_t const ces[9] = { 0x1B4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_028)
{
    // 10CFE 003F;	
    // (‚Äé‚Äéê≥æ‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE HUNDRED	[1B4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFE, 0x003F };
    uint32_t const ces[9] = { 0x1B4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_029)
{
    // 10CFE 0061;	
    // (‚Äé‚Äéê≥æ‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE HUNDRED	[1B4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFE, 0x0061 };
    uint32_t const ces[9] = { 0x1B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_030)
{
    // 10CFE 0041;	
    // (‚Äé‚Äéê≥æ‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE HUNDRED	[1B4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CFE, 0x0041 };
    uint32_t const ces[9] = { 0x1B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_031)
{
    // 10CFE 0062;	
    // (‚Äé‚Äéê≥æ‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE HUNDRED	[1B4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFE, 0x0062 };
    uint32_t const ces[9] = { 0x1B4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_032)
{
    // 10CFF 0021;	
    // (‚Äé‚Äéê≥ø‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE THOUSAND	[1B4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFF, 0x0021 };
    uint32_t const ces[9] = { 0x1B4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_033)
{
    // 10CFF 003F;	
    // (‚Äé‚Äéê≥ø‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE THOUSAND	[1B4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFF, 0x003F };
    uint32_t const ces[9] = { 0x1B4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_034)
{
    // 10CFF 0061;	
    // (‚Äé‚Äéê≥ø‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE THOUSAND	[1B4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFF, 0x0061 };
    uint32_t const ces[9] = { 0x1B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_035)
{
    // 10CFF 0041;	
    // (‚Äé‚Äéê≥ø‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE THOUSAND	[1B4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CFF, 0x0041 };
    uint32_t const ces[9] = { 0x1B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_036)
{
    // 10CFF 0062;	
    // (‚Äé‚Äéê≥ø‚Äé‚Äé) OLD HUNGARIAN NUMBER ONE THOUSAND	[1B4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFF, 0x0062 };
    uint32_t const ces[9] = { 0x1B4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_037)
{
    // 10110 0021;	
    // (êÑê) AEGEAN NUMBER TEN	[1B4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10110, 0x0021 };
    uint32_t const ces[9] = { 0x1B4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_038)
{
    // 10110 003F;	
    // (êÑê) AEGEAN NUMBER TEN	[1B4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10110, 0x003F };
    uint32_t const ces[9] = { 0x1B4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_039)
{
    // 10110 0061;	
    // (êÑê) AEGEAN NUMBER TEN	[1B4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10110, 0x0061 };
    uint32_t const ces[9] = { 0x1B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_040)
{
    // 10110 0041;	
    // (êÑê) AEGEAN NUMBER TEN	[1B4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10110, 0x0041 };
    uint32_t const ces[9] = { 0x1B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_041)
{
    // 10110 0062;	
    // (êÑê) AEGEAN NUMBER TEN	[1B4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10110, 0x0062 };
    uint32_t const ces[9] = { 0x1B4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_042)
{
    // 10111 0021;	
    // (êÑë) AEGEAN NUMBER TWENTY	[1B4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10111, 0x0021 };
    uint32_t const ces[9] = { 0x1B4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_043)
{
    // 10111 003F;	
    // (êÑë) AEGEAN NUMBER TWENTY	[1B4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10111, 0x003F };
    uint32_t const ces[9] = { 0x1B4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_044)
{
    // 10111 0061;	
    // (êÑë) AEGEAN NUMBER TWENTY	[1B4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10111, 0x0061 };
    uint32_t const ces[9] = { 0x1B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_045)
{
    // 10111 0041;	
    // (êÑë) AEGEAN NUMBER TWENTY	[1B4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10111, 0x0041 };
    uint32_t const ces[9] = { 0x1B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_046)
{
    // 10111 0062;	
    // (êÑë) AEGEAN NUMBER TWENTY	[1B4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10111, 0x0062 };
    uint32_t const ces[9] = { 0x1B4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_047)
{
    // 10112 0021;	
    // (êÑí) AEGEAN NUMBER THIRTY	[1B4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10112, 0x0021 };
    uint32_t const ces[9] = { 0x1B4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_048)
{
    // 10112 003F;	
    // (êÑí) AEGEAN NUMBER THIRTY	[1B4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10112, 0x003F };
    uint32_t const ces[9] = { 0x1B4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_049)
{
    // 10112 0061;	
    // (êÑí) AEGEAN NUMBER THIRTY	[1B4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10112, 0x0061 };
    uint32_t const ces[9] = { 0x1B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_050)
{
    // 10112 0041;	
    // (êÑí) AEGEAN NUMBER THIRTY	[1B4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10112, 0x0041 };
    uint32_t const ces[9] = { 0x1B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_051)
{
    // 10112 0062;	
    // (êÑí) AEGEAN NUMBER THIRTY	[1B4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10112, 0x0062 };
    uint32_t const ces[9] = { 0x1B4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_052)
{
    // 10113 0021;	
    // (êÑì) AEGEAN NUMBER FORTY	[1B50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10113, 0x0021 };
    uint32_t const ces[9] = { 0x1B50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_053)
{
    // 10113 003F;	
    // (êÑì) AEGEAN NUMBER FORTY	[1B50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10113, 0x003F };
    uint32_t const ces[9] = { 0x1B50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_054)
{
    // 10113 0061;	
    // (êÑì) AEGEAN NUMBER FORTY	[1B50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10113, 0x0061 };
    uint32_t const ces[9] = { 0x1B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_055)
{
    // 10113 0041;	
    // (êÑì) AEGEAN NUMBER FORTY	[1B50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10113, 0x0041 };
    uint32_t const ces[9] = { 0x1B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_056)
{
    // 10113 0062;	
    // (êÑì) AEGEAN NUMBER FORTY	[1B50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10113, 0x0062 };
    uint32_t const ces[9] = { 0x1B50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_057)
{
    // 10114 0021;	
    // (êÑî) AEGEAN NUMBER FIFTY	[1B51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10114, 0x0021 };
    uint32_t const ces[9] = { 0x1B51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_058)
{
    // 10114 003F;	
    // (êÑî) AEGEAN NUMBER FIFTY	[1B51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10114, 0x003F };
    uint32_t const ces[9] = { 0x1B51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_059)
{
    // 10114 0061;	
    // (êÑî) AEGEAN NUMBER FIFTY	[1B51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10114, 0x0061 };
    uint32_t const ces[9] = { 0x1B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_060)
{
    // 10114 0041;	
    // (êÑî) AEGEAN NUMBER FIFTY	[1B51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10114, 0x0041 };
    uint32_t const ces[9] = { 0x1B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_061)
{
    // 10114 0062;	
    // (êÑî) AEGEAN NUMBER FIFTY	[1B51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10114, 0x0062 };
    uint32_t const ces[9] = { 0x1B51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_062)
{
    // 10115 0021;	
    // (êÑï) AEGEAN NUMBER SIXTY	[1B52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10115, 0x0021 };
    uint32_t const ces[9] = { 0x1B52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_063)
{
    // 10115 003F;	
    // (êÑï) AEGEAN NUMBER SIXTY	[1B52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10115, 0x003F };
    uint32_t const ces[9] = { 0x1B52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_064)
{
    // 10115 0061;	
    // (êÑï) AEGEAN NUMBER SIXTY	[1B52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10115, 0x0061 };
    uint32_t const ces[9] = { 0x1B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_065)
{
    // 10115 0041;	
    // (êÑï) AEGEAN NUMBER SIXTY	[1B52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10115, 0x0041 };
    uint32_t const ces[9] = { 0x1B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_066)
{
    // 10115 0062;	
    // (êÑï) AEGEAN NUMBER SIXTY	[1B52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10115, 0x0062 };
    uint32_t const ces[9] = { 0x1B52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_067)
{
    // 10116 0021;	
    // (êÑñ) AEGEAN NUMBER SEVENTY	[1B53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10116, 0x0021 };
    uint32_t const ces[9] = { 0x1B53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_068)
{
    // 10116 003F;	
    // (êÑñ) AEGEAN NUMBER SEVENTY	[1B53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10116, 0x003F };
    uint32_t const ces[9] = { 0x1B53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_069)
{
    // 10116 0061;	
    // (êÑñ) AEGEAN NUMBER SEVENTY	[1B53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10116, 0x0061 };
    uint32_t const ces[9] = { 0x1B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_070)
{
    // 10116 0041;	
    // (êÑñ) AEGEAN NUMBER SEVENTY	[1B53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10116, 0x0041 };
    uint32_t const ces[9] = { 0x1B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_071)
{
    // 10116 0062;	
    // (êÑñ) AEGEAN NUMBER SEVENTY	[1B53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10116, 0x0062 };
    uint32_t const ces[9] = { 0x1B53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_072)
{
    // 10117 0021;	
    // (êÑó) AEGEAN NUMBER EIGHTY	[1B54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10117, 0x0021 };
    uint32_t const ces[9] = { 0x1B54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_073)
{
    // 10117 003F;	
    // (êÑó) AEGEAN NUMBER EIGHTY	[1B54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10117, 0x003F };
    uint32_t const ces[9] = { 0x1B54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_074)
{
    // 10117 0061;	
    // (êÑó) AEGEAN NUMBER EIGHTY	[1B54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10117, 0x0061 };
    uint32_t const ces[9] = { 0x1B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_075)
{
    // 10117 0041;	
    // (êÑó) AEGEAN NUMBER EIGHTY	[1B54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10117, 0x0041 };
    uint32_t const ces[9] = { 0x1B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_076)
{
    // 10117 0062;	
    // (êÑó) AEGEAN NUMBER EIGHTY	[1B54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10117, 0x0062 };
    uint32_t const ces[9] = { 0x1B54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_077)
{
    // 10118 0021;	
    // (êÑò) AEGEAN NUMBER NINETY	[1B55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10118, 0x0021 };
    uint32_t const ces[9] = { 0x1B55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_078)
{
    // 10118 003F;	
    // (êÑò) AEGEAN NUMBER NINETY	[1B55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10118, 0x003F };
    uint32_t const ces[9] = { 0x1B55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_079)
{
    // 10118 0061;	
    // (êÑò) AEGEAN NUMBER NINETY	[1B55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10118, 0x0061 };
    uint32_t const ces[9] = { 0x1B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_080)
{
    // 10118 0041;	
    // (êÑò) AEGEAN NUMBER NINETY	[1B55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10118, 0x0041 };
    uint32_t const ces[9] = { 0x1B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_081)
{
    // 10118 0062;	
    // (êÑò) AEGEAN NUMBER NINETY	[1B55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10118, 0x0062 };
    uint32_t const ces[9] = { 0x1B55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_082)
{
    // 10119 0021;	
    // (êÑô) AEGEAN NUMBER ONE HUNDRED	[1B56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10119, 0x0021 };
    uint32_t const ces[9] = { 0x1B56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_083)
{
    // 10119 003F;	
    // (êÑô) AEGEAN NUMBER ONE HUNDRED	[1B56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10119, 0x003F };
    uint32_t const ces[9] = { 0x1B56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_084)
{
    // 10119 0061;	
    // (êÑô) AEGEAN NUMBER ONE HUNDRED	[1B56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10119, 0x0061 };
    uint32_t const ces[9] = { 0x1B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_085)
{
    // 10119 0041;	
    // (êÑô) AEGEAN NUMBER ONE HUNDRED	[1B56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10119, 0x0041 };
    uint32_t const ces[9] = { 0x1B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_086)
{
    // 10119 0062;	
    // (êÑô) AEGEAN NUMBER ONE HUNDRED	[1B56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10119, 0x0062 };
    uint32_t const ces[9] = { 0x1B56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_087)
{
    // 1011A 0021;	
    // (êÑö) AEGEAN NUMBER TWO HUNDRED	[1B57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011A, 0x0021 };
    uint32_t const ces[9] = { 0x1B57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_088)
{
    // 1011A 003F;	
    // (êÑö) AEGEAN NUMBER TWO HUNDRED	[1B57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011A, 0x003F };
    uint32_t const ces[9] = { 0x1B57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_089)
{
    // 1011A 0061;	
    // (êÑö) AEGEAN NUMBER TWO HUNDRED	[1B57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011A, 0x0061 };
    uint32_t const ces[9] = { 0x1B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_090)
{
    // 1011A 0041;	
    // (êÑö) AEGEAN NUMBER TWO HUNDRED	[1B57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011A, 0x0041 };
    uint32_t const ces[9] = { 0x1B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_091)
{
    // 1011A 0062;	
    // (êÑö) AEGEAN NUMBER TWO HUNDRED	[1B57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011A, 0x0062 };
    uint32_t const ces[9] = { 0x1B57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_092)
{
    // 1011B 0021;	
    // (êÑõ) AEGEAN NUMBER THREE HUNDRED	[1B58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011B, 0x0021 };
    uint32_t const ces[9] = { 0x1B58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_093)
{
    // 1011B 003F;	
    // (êÑõ) AEGEAN NUMBER THREE HUNDRED	[1B58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011B, 0x003F };
    uint32_t const ces[9] = { 0x1B58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_094)
{
    // 1011B 0061;	
    // (êÑõ) AEGEAN NUMBER THREE HUNDRED	[1B58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011B, 0x0061 };
    uint32_t const ces[9] = { 0x1B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_095)
{
    // 1011B 0041;	
    // (êÑõ) AEGEAN NUMBER THREE HUNDRED	[1B58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011B, 0x0041 };
    uint32_t const ces[9] = { 0x1B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_096)
{
    // 1011B 0062;	
    // (êÑõ) AEGEAN NUMBER THREE HUNDRED	[1B58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011B, 0x0062 };
    uint32_t const ces[9] = { 0x1B58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_097)
{
    // 1011C 0021;	
    // (êÑú) AEGEAN NUMBER FOUR HUNDRED	[1B59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011C, 0x0021 };
    uint32_t const ces[9] = { 0x1B59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_098)
{
    // 1011C 003F;	
    // (êÑú) AEGEAN NUMBER FOUR HUNDRED	[1B59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011C, 0x003F };
    uint32_t const ces[9] = { 0x1B59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_099)
{
    // 1011C 0061;	
    // (êÑú) AEGEAN NUMBER FOUR HUNDRED	[1B59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011C, 0x0061 };
    uint32_t const ces[9] = { 0x1B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_100)
{
    // 1011C 0041;	
    // (êÑú) AEGEAN NUMBER FOUR HUNDRED	[1B59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011C, 0x0041 };
    uint32_t const ces[9] = { 0x1B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_101)
{
    // 1011C 0062;	
    // (êÑú) AEGEAN NUMBER FOUR HUNDRED	[1B59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011C, 0x0062 };
    uint32_t const ces[9] = { 0x1B59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_102)
{
    // 1011D 0021;	
    // (êÑù) AEGEAN NUMBER FIVE HUNDRED	[1B5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011D, 0x0021 };
    uint32_t const ces[9] = { 0x1B5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_103)
{
    // 1011D 003F;	
    // (êÑù) AEGEAN NUMBER FIVE HUNDRED	[1B5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011D, 0x003F };
    uint32_t const ces[9] = { 0x1B5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_104)
{
    // 1011D 0061;	
    // (êÑù) AEGEAN NUMBER FIVE HUNDRED	[1B5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011D, 0x0061 };
    uint32_t const ces[9] = { 0x1B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_105)
{
    // 1011D 0041;	
    // (êÑù) AEGEAN NUMBER FIVE HUNDRED	[1B5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011D, 0x0041 };
    uint32_t const ces[9] = { 0x1B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_106)
{
    // 1011D 0062;	
    // (êÑù) AEGEAN NUMBER FIVE HUNDRED	[1B5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011D, 0x0062 };
    uint32_t const ces[9] = { 0x1B5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_107)
{
    // 1011E 0021;	
    // (êÑû) AEGEAN NUMBER SIX HUNDRED	[1B5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011E, 0x0021 };
    uint32_t const ces[9] = { 0x1B5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_108)
{
    // 1011E 003F;	
    // (êÑû) AEGEAN NUMBER SIX HUNDRED	[1B5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011E, 0x003F };
    uint32_t const ces[9] = { 0x1B5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_109)
{
    // 1011E 0061;	
    // (êÑû) AEGEAN NUMBER SIX HUNDRED	[1B5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011E, 0x0061 };
    uint32_t const ces[9] = { 0x1B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_110)
{
    // 1011E 0041;	
    // (êÑû) AEGEAN NUMBER SIX HUNDRED	[1B5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011E, 0x0041 };
    uint32_t const ces[9] = { 0x1B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_111)
{
    // 1011E 0062;	
    // (êÑû) AEGEAN NUMBER SIX HUNDRED	[1B5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011E, 0x0062 };
    uint32_t const ces[9] = { 0x1B5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_112)
{
    // 1011F 0021;	
    // (êÑü) AEGEAN NUMBER SEVEN HUNDRED	[1B5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011F, 0x0021 };
    uint32_t const ces[9] = { 0x1B5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_113)
{
    // 1011F 003F;	
    // (êÑü) AEGEAN NUMBER SEVEN HUNDRED	[1B5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011F, 0x003F };
    uint32_t const ces[9] = { 0x1B5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_114)
{
    // 1011F 0061;	
    // (êÑü) AEGEAN NUMBER SEVEN HUNDRED	[1B5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011F, 0x0061 };
    uint32_t const ces[9] = { 0x1B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_115)
{
    // 1011F 0041;	
    // (êÑü) AEGEAN NUMBER SEVEN HUNDRED	[1B5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1011F, 0x0041 };
    uint32_t const ces[9] = { 0x1B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_116)
{
    // 1011F 0062;	
    // (êÑü) AEGEAN NUMBER SEVEN HUNDRED	[1B5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1011F, 0x0062 };
    uint32_t const ces[9] = { 0x1B5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_117)
{
    // 10120 0021;	
    // (êÑ†) AEGEAN NUMBER EIGHT HUNDRED	[1B5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10120, 0x0021 };
    uint32_t const ces[9] = { 0x1B5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_118)
{
    // 10120 003F;	
    // (êÑ†) AEGEAN NUMBER EIGHT HUNDRED	[1B5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10120, 0x003F };
    uint32_t const ces[9] = { 0x1B5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_119)
{
    // 10120 0061;	
    // (êÑ†) AEGEAN NUMBER EIGHT HUNDRED	[1B5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10120, 0x0061 };
    uint32_t const ces[9] = { 0x1B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_120)
{
    // 10120 0041;	
    // (êÑ†) AEGEAN NUMBER EIGHT HUNDRED	[1B5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10120, 0x0041 };
    uint32_t const ces[9] = { 0x1B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_121)
{
    // 10120 0062;	
    // (êÑ†) AEGEAN NUMBER EIGHT HUNDRED	[1B5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10120, 0x0062 };
    uint32_t const ces[9] = { 0x1B5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_122)
{
    // 10121 0021;	
    // (êÑ°) AEGEAN NUMBER NINE HUNDRED	[1B5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10121, 0x0021 };
    uint32_t const ces[9] = { 0x1B5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_123)
{
    // 10121 003F;	
    // (êÑ°) AEGEAN NUMBER NINE HUNDRED	[1B5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10121, 0x003F };
    uint32_t const ces[9] = { 0x1B5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_124)
{
    // 10121 0061;	
    // (êÑ°) AEGEAN NUMBER NINE HUNDRED	[1B5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10121, 0x0061 };
    uint32_t const ces[9] = { 0x1B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_125)
{
    // 10121 0041;	
    // (êÑ°) AEGEAN NUMBER NINE HUNDRED	[1B5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10121, 0x0041 };
    uint32_t const ces[9] = { 0x1B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_126)
{
    // 10121 0062;	
    // (êÑ°) AEGEAN NUMBER NINE HUNDRED	[1B5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10121, 0x0062 };
    uint32_t const ces[9] = { 0x1B5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_127)
{
    // 10122 0021;	
    // (êÑ¢) AEGEAN NUMBER ONE THOUSAND	[1B5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10122, 0x0021 };
    uint32_t const ces[9] = { 0x1B5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_128)
{
    // 10122 003F;	
    // (êÑ¢) AEGEAN NUMBER ONE THOUSAND	[1B5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10122, 0x003F };
    uint32_t const ces[9] = { 0x1B5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_129)
{
    // 10122 0061;	
    // (êÑ¢) AEGEAN NUMBER ONE THOUSAND	[1B5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10122, 0x0061 };
    uint32_t const ces[9] = { 0x1B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_130)
{
    // 10122 0041;	
    // (êÑ¢) AEGEAN NUMBER ONE THOUSAND	[1B5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10122, 0x0041 };
    uint32_t const ces[9] = { 0x1B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_131)
{
    // 10122 0062;	
    // (êÑ¢) AEGEAN NUMBER ONE THOUSAND	[1B5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10122, 0x0062 };
    uint32_t const ces[9] = { 0x1B5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_132)
{
    // 10123 0021;	
    // (êÑ£) AEGEAN NUMBER TWO THOUSAND	[1B60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10123, 0x0021 };
    uint32_t const ces[9] = { 0x1B60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_133)
{
    // 10123 003F;	
    // (êÑ£) AEGEAN NUMBER TWO THOUSAND	[1B60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10123, 0x003F };
    uint32_t const ces[9] = { 0x1B60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_134)
{
    // 10123 0061;	
    // (êÑ£) AEGEAN NUMBER TWO THOUSAND	[1B60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10123, 0x0061 };
    uint32_t const ces[9] = { 0x1B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_135)
{
    // 10123 0041;	
    // (êÑ£) AEGEAN NUMBER TWO THOUSAND	[1B60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10123, 0x0041 };
    uint32_t const ces[9] = { 0x1B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_136)
{
    // 10123 0062;	
    // (êÑ£) AEGEAN NUMBER TWO THOUSAND	[1B60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10123, 0x0062 };
    uint32_t const ces[9] = { 0x1B60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_137)
{
    // 10124 0021;	
    // (êÑ§) AEGEAN NUMBER THREE THOUSAND	[1B61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10124, 0x0021 };
    uint32_t const ces[9] = { 0x1B61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_138)
{
    // 10124 003F;	
    // (êÑ§) AEGEAN NUMBER THREE THOUSAND	[1B61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10124, 0x003F };
    uint32_t const ces[9] = { 0x1B61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_139)
{
    // 10124 0061;	
    // (êÑ§) AEGEAN NUMBER THREE THOUSAND	[1B61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10124, 0x0061 };
    uint32_t const ces[9] = { 0x1B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_140)
{
    // 10124 0041;	
    // (êÑ§) AEGEAN NUMBER THREE THOUSAND	[1B61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10124, 0x0041 };
    uint32_t const ces[9] = { 0x1B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_141)
{
    // 10124 0062;	
    // (êÑ§) AEGEAN NUMBER THREE THOUSAND	[1B61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10124, 0x0062 };
    uint32_t const ces[9] = { 0x1B61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_142)
{
    // 10125 0021;	
    // (êÑ•) AEGEAN NUMBER FOUR THOUSAND	[1B62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10125, 0x0021 };
    uint32_t const ces[9] = { 0x1B62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_143)
{
    // 10125 003F;	
    // (êÑ•) AEGEAN NUMBER FOUR THOUSAND	[1B62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10125, 0x003F };
    uint32_t const ces[9] = { 0x1B62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_144)
{
    // 10125 0061;	
    // (êÑ•) AEGEAN NUMBER FOUR THOUSAND	[1B62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10125, 0x0061 };
    uint32_t const ces[9] = { 0x1B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_145)
{
    // 10125 0041;	
    // (êÑ•) AEGEAN NUMBER FOUR THOUSAND	[1B62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10125, 0x0041 };
    uint32_t const ces[9] = { 0x1B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_146)
{
    // 10125 0062;	
    // (êÑ•) AEGEAN NUMBER FOUR THOUSAND	[1B62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10125, 0x0062 };
    uint32_t const ces[9] = { 0x1B62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_147)
{
    // 10126 0021;	
    // (êÑ¶) AEGEAN NUMBER FIVE THOUSAND	[1B63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10126, 0x0021 };
    uint32_t const ces[9] = { 0x1B63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_148)
{
    // 10126 003F;	
    // (êÑ¶) AEGEAN NUMBER FIVE THOUSAND	[1B63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10126, 0x003F };
    uint32_t const ces[9] = { 0x1B63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_149)
{
    // 10126 0061;	
    // (êÑ¶) AEGEAN NUMBER FIVE THOUSAND	[1B63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10126, 0x0061 };
    uint32_t const ces[9] = { 0x1B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_150)
{
    // 10126 0041;	
    // (êÑ¶) AEGEAN NUMBER FIVE THOUSAND	[1B63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10126, 0x0041 };
    uint32_t const ces[9] = { 0x1B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_151)
{
    // 10126 0062;	
    // (êÑ¶) AEGEAN NUMBER FIVE THOUSAND	[1B63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10126, 0x0062 };
    uint32_t const ces[9] = { 0x1B63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_152)
{
    // 10127 0021;	
    // (êÑß) AEGEAN NUMBER SIX THOUSAND	[1B64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10127, 0x0021 };
    uint32_t const ces[9] = { 0x1B64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_153)
{
    // 10127 003F;	
    // (êÑß) AEGEAN NUMBER SIX THOUSAND	[1B64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10127, 0x003F };
    uint32_t const ces[9] = { 0x1B64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_154)
{
    // 10127 0061;	
    // (êÑß) AEGEAN NUMBER SIX THOUSAND	[1B64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10127, 0x0061 };
    uint32_t const ces[9] = { 0x1B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_155)
{
    // 10127 0041;	
    // (êÑß) AEGEAN NUMBER SIX THOUSAND	[1B64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10127, 0x0041 };
    uint32_t const ces[9] = { 0x1B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_156)
{
    // 10127 0062;	
    // (êÑß) AEGEAN NUMBER SIX THOUSAND	[1B64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10127, 0x0062 };
    uint32_t const ces[9] = { 0x1B64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_157)
{
    // 10128 0021;	
    // (êÑ®) AEGEAN NUMBER SEVEN THOUSAND	[1B65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10128, 0x0021 };
    uint32_t const ces[9] = { 0x1B65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_158)
{
    // 10128 003F;	
    // (êÑ®) AEGEAN NUMBER SEVEN THOUSAND	[1B65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10128, 0x003F };
    uint32_t const ces[9] = { 0x1B65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_159)
{
    // 10128 0061;	
    // (êÑ®) AEGEAN NUMBER SEVEN THOUSAND	[1B65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10128, 0x0061 };
    uint32_t const ces[9] = { 0x1B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_160)
{
    // 10128 0041;	
    // (êÑ®) AEGEAN NUMBER SEVEN THOUSAND	[1B65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10128, 0x0041 };
    uint32_t const ces[9] = { 0x1B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_161)
{
    // 10128 0062;	
    // (êÑ®) AEGEAN NUMBER SEVEN THOUSAND	[1B65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10128, 0x0062 };
    uint32_t const ces[9] = { 0x1B65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_162)
{
    // 10129 0021;	
    // (êÑ©) AEGEAN NUMBER EIGHT THOUSAND	[1B66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10129, 0x0021 };
    uint32_t const ces[9] = { 0x1B66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_163)
{
    // 10129 003F;	
    // (êÑ©) AEGEAN NUMBER EIGHT THOUSAND	[1B66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10129, 0x003F };
    uint32_t const ces[9] = { 0x1B66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_164)
{
    // 10129 0061;	
    // (êÑ©) AEGEAN NUMBER EIGHT THOUSAND	[1B66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10129, 0x0061 };
    uint32_t const ces[9] = { 0x1B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_165)
{
    // 10129 0041;	
    // (êÑ©) AEGEAN NUMBER EIGHT THOUSAND	[1B66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10129, 0x0041 };
    uint32_t const ces[9] = { 0x1B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_166)
{
    // 10129 0062;	
    // (êÑ©) AEGEAN NUMBER EIGHT THOUSAND	[1B66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10129, 0x0062 };
    uint32_t const ces[9] = { 0x1B66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_167)
{
    // 1012A 0021;	
    // (êÑ™) AEGEAN NUMBER NINE THOUSAND	[1B67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012A, 0x0021 };
    uint32_t const ces[9] = { 0x1B67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_168)
{
    // 1012A 003F;	
    // (êÑ™) AEGEAN NUMBER NINE THOUSAND	[1B67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012A, 0x003F };
    uint32_t const ces[9] = { 0x1B67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_169)
{
    // 1012A 0061;	
    // (êÑ™) AEGEAN NUMBER NINE THOUSAND	[1B67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012A, 0x0061 };
    uint32_t const ces[9] = { 0x1B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_170)
{
    // 1012A 0041;	
    // (êÑ™) AEGEAN NUMBER NINE THOUSAND	[1B67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012A, 0x0041 };
    uint32_t const ces[9] = { 0x1B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_171)
{
    // 1012A 0062;	
    // (êÑ™) AEGEAN NUMBER NINE THOUSAND	[1B67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012A, 0x0062 };
    uint32_t const ces[9] = { 0x1B67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_172)
{
    // 1012B 0021;	
    // (êÑ´) AEGEAN NUMBER TEN THOUSAND	[1B68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012B, 0x0021 };
    uint32_t const ces[9] = { 0x1B68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_173)
{
    // 1012B 003F;	
    // (êÑ´) AEGEAN NUMBER TEN THOUSAND	[1B68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012B, 0x003F };
    uint32_t const ces[9] = { 0x1B68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_174)
{
    // 1012B 0061;	
    // (êÑ´) AEGEAN NUMBER TEN THOUSAND	[1B68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012B, 0x0061 };
    uint32_t const ces[9] = { 0x1B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_175)
{
    // 1012B 0041;	
    // (êÑ´) AEGEAN NUMBER TEN THOUSAND	[1B68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012B, 0x0041 };
    uint32_t const ces[9] = { 0x1B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_176)
{
    // 1012B 0062;	
    // (êÑ´) AEGEAN NUMBER TEN THOUSAND	[1B68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012B, 0x0062 };
    uint32_t const ces[9] = { 0x1B68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_177)
{
    // 1012C 0021;	
    // (êÑ¨) AEGEAN NUMBER TWENTY THOUSAND	[1B69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012C, 0x0021 };
    uint32_t const ces[9] = { 0x1B69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_178)
{
    // 1012C 003F;	
    // (êÑ¨) AEGEAN NUMBER TWENTY THOUSAND	[1B69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012C, 0x003F };
    uint32_t const ces[9] = { 0x1B69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_179)
{
    // 1012C 0061;	
    // (êÑ¨) AEGEAN NUMBER TWENTY THOUSAND	[1B69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012C, 0x0061 };
    uint32_t const ces[9] = { 0x1B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_180)
{
    // 1012C 0041;	
    // (êÑ¨) AEGEAN NUMBER TWENTY THOUSAND	[1B69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012C, 0x0041 };
    uint32_t const ces[9] = { 0x1B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_181)
{
    // 1012C 0062;	
    // (êÑ¨) AEGEAN NUMBER TWENTY THOUSAND	[1B69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012C, 0x0062 };
    uint32_t const ces[9] = { 0x1B69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_182)
{
    // 1012D 0021;	
    // (êÑ≠) AEGEAN NUMBER THIRTY THOUSAND	[1B6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012D, 0x0021 };
    uint32_t const ces[9] = { 0x1B6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_183)
{
    // 1012D 003F;	
    // (êÑ≠) AEGEAN NUMBER THIRTY THOUSAND	[1B6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012D, 0x003F };
    uint32_t const ces[9] = { 0x1B6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_184)
{
    // 1012D 0061;	
    // (êÑ≠) AEGEAN NUMBER THIRTY THOUSAND	[1B6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012D, 0x0061 };
    uint32_t const ces[9] = { 0x1B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_185)
{
    // 1012D 0041;	
    // (êÑ≠) AEGEAN NUMBER THIRTY THOUSAND	[1B6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012D, 0x0041 };
    uint32_t const ces[9] = { 0x1B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_186)
{
    // 1012D 0062;	
    // (êÑ≠) AEGEAN NUMBER THIRTY THOUSAND	[1B6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012D, 0x0062 };
    uint32_t const ces[9] = { 0x1B6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_187)
{
    // 1012E 0021;	
    // (êÑÆ) AEGEAN NUMBER FORTY THOUSAND	[1B6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012E, 0x0021 };
    uint32_t const ces[9] = { 0x1B6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_188)
{
    // 1012E 003F;	
    // (êÑÆ) AEGEAN NUMBER FORTY THOUSAND	[1B6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012E, 0x003F };
    uint32_t const ces[9] = { 0x1B6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_189)
{
    // 1012E 0061;	
    // (êÑÆ) AEGEAN NUMBER FORTY THOUSAND	[1B6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012E, 0x0061 };
    uint32_t const ces[9] = { 0x1B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_190)
{
    // 1012E 0041;	
    // (êÑÆ) AEGEAN NUMBER FORTY THOUSAND	[1B6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012E, 0x0041 };
    uint32_t const ces[9] = { 0x1B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_191)
{
    // 1012E 0062;	
    // (êÑÆ) AEGEAN NUMBER FORTY THOUSAND	[1B6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012E, 0x0062 };
    uint32_t const ces[9] = { 0x1B6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_192)
{
    // 1012F 0021;	
    // (êÑØ) AEGEAN NUMBER FIFTY THOUSAND	[1B6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012F, 0x0021 };
    uint32_t const ces[9] = { 0x1B6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_193)
{
    // 1012F 003F;	
    // (êÑØ) AEGEAN NUMBER FIFTY THOUSAND	[1B6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012F, 0x003F };
    uint32_t const ces[9] = { 0x1B6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_194)
{
    // 1012F 0061;	
    // (êÑØ) AEGEAN NUMBER FIFTY THOUSAND	[1B6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012F, 0x0061 };
    uint32_t const ces[9] = { 0x1B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_195)
{
    // 1012F 0041;	
    // (êÑØ) AEGEAN NUMBER FIFTY THOUSAND	[1B6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1012F, 0x0041 };
    uint32_t const ces[9] = { 0x1B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_196)
{
    // 1012F 0062;	
    // (êÑØ) AEGEAN NUMBER FIFTY THOUSAND	[1B6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1012F, 0x0062 };
    uint32_t const ces[9] = { 0x1B6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_197)
{
    // 10130 0021;	
    // (êÑ∞) AEGEAN NUMBER SIXTY THOUSAND	[1B6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10130, 0x0021 };
    uint32_t const ces[9] = { 0x1B6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_198)
{
    // 10130 003F;	
    // (êÑ∞) AEGEAN NUMBER SIXTY THOUSAND	[1B6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10130, 0x003F };
    uint32_t const ces[9] = { 0x1B6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_199)
{
    // 10130 0061;	
    // (êÑ∞) AEGEAN NUMBER SIXTY THOUSAND	[1B6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10130, 0x0061 };
    uint32_t const ces[9] = { 0x1B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_200)
{
    // 10130 0041;	
    // (êÑ∞) AEGEAN NUMBER SIXTY THOUSAND	[1B6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10130, 0x0041 };
    uint32_t const ces[9] = { 0x1B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_201)
{
    // 10130 0062;	
    // (êÑ∞) AEGEAN NUMBER SIXTY THOUSAND	[1B6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10130, 0x0062 };
    uint32_t const ces[9] = { 0x1B6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_202)
{
    // 10131 0021;	
    // (êÑ±) AEGEAN NUMBER SEVENTY THOUSAND	[1B6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10131, 0x0021 };
    uint32_t const ces[9] = { 0x1B6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_203)
{
    // 10131 003F;	
    // (êÑ±) AEGEAN NUMBER SEVENTY THOUSAND	[1B6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10131, 0x003F };
    uint32_t const ces[9] = { 0x1B6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_204)
{
    // 10131 0061;	
    // (êÑ±) AEGEAN NUMBER SEVENTY THOUSAND	[1B6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10131, 0x0061 };
    uint32_t const ces[9] = { 0x1B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_205)
{
    // 10131 0041;	
    // (êÑ±) AEGEAN NUMBER SEVENTY THOUSAND	[1B6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10131, 0x0041 };
    uint32_t const ces[9] = { 0x1B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_206)
{
    // 10131 0062;	
    // (êÑ±) AEGEAN NUMBER SEVENTY THOUSAND	[1B6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10131, 0x0062 };
    uint32_t const ces[9] = { 0x1B6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_207)
{
    // 10132 0021;	
    // (êÑ≤) AEGEAN NUMBER EIGHTY THOUSAND	[1B6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10132, 0x0021 };
    uint32_t const ces[9] = { 0x1B6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_208)
{
    // 10132 003F;	
    // (êÑ≤) AEGEAN NUMBER EIGHTY THOUSAND	[1B6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10132, 0x003F };
    uint32_t const ces[9] = { 0x1B6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_209)
{
    // 10132 0061;	
    // (êÑ≤) AEGEAN NUMBER EIGHTY THOUSAND	[1B6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10132, 0x0061 };
    uint32_t const ces[9] = { 0x1B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_210)
{
    // 10132 0041;	
    // (êÑ≤) AEGEAN NUMBER EIGHTY THOUSAND	[1B6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10132, 0x0041 };
    uint32_t const ces[9] = { 0x1B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_211)
{
    // 10132 0062;	
    // (êÑ≤) AEGEAN NUMBER EIGHTY THOUSAND	[1B6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10132, 0x0062 };
    uint32_t const ces[9] = { 0x1B6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_212)
{
    // 10133 0021;	
    // (êÑ≥) AEGEAN NUMBER NINETY THOUSAND	[1B70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10133, 0x0021 };
    uint32_t const ces[9] = { 0x1B70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_213)
{
    // 10133 003F;	
    // (êÑ≥) AEGEAN NUMBER NINETY THOUSAND	[1B70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10133, 0x003F };
    uint32_t const ces[9] = { 0x1B70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_214)
{
    // 10133 0061;	
    // (êÑ≥) AEGEAN NUMBER NINETY THOUSAND	[1B70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10133, 0x0061 };
    uint32_t const ces[9] = { 0x1B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_215)
{
    // 10133 0041;	
    // (êÑ≥) AEGEAN NUMBER NINETY THOUSAND	[1B70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10133, 0x0041 };
    uint32_t const ces[9] = { 0x1B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_216)
{
    // 10133 0062;	
    // (êÑ≥) AEGEAN NUMBER NINETY THOUSAND	[1B70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10133, 0x0062 };
    uint32_t const ces[9] = { 0x1B70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_217)
{
    // 10140 0021;	
    // (êÖÄ) GREEK ACROPHONIC ATTIC ONE QUARTER	[1B71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10140, 0x0021 };
    uint32_t const ces[9] = { 0x1B71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_218)
{
    // 10140 003F;	
    // (êÖÄ) GREEK ACROPHONIC ATTIC ONE QUARTER	[1B71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10140, 0x003F };
    uint32_t const ces[9] = { 0x1B71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_219)
{
    // 10140 0061;	
    // (êÖÄ) GREEK ACROPHONIC ATTIC ONE QUARTER	[1B71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10140, 0x0061 };
    uint32_t const ces[9] = { 0x1B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_220)
{
    // 10140 0041;	
    // (êÖÄ) GREEK ACROPHONIC ATTIC ONE QUARTER	[1B71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10140, 0x0041 };
    uint32_t const ces[9] = { 0x1B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_221)
{
    // 10140 0062;	
    // (êÖÄ) GREEK ACROPHONIC ATTIC ONE QUARTER	[1B71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10140, 0x0062 };
    uint32_t const ces[9] = { 0x1B71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_222)
{
    // 10141 0021;	
    // (êÖÅ) GREEK ACROPHONIC ATTIC ONE HALF	[1B72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10141, 0x0021 };
    uint32_t const ces[9] = { 0x1B72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_223)
{
    // 10141 003F;	
    // (êÖÅ) GREEK ACROPHONIC ATTIC ONE HALF	[1B72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10141, 0x003F };
    uint32_t const ces[9] = { 0x1B72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_224)
{
    // 10141 0061;	
    // (êÖÅ) GREEK ACROPHONIC ATTIC ONE HALF	[1B72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10141, 0x0061 };
    uint32_t const ces[9] = { 0x1B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_225)
{
    // 10141 0041;	
    // (êÖÅ) GREEK ACROPHONIC ATTIC ONE HALF	[1B72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10141, 0x0041 };
    uint32_t const ces[9] = { 0x1B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_226)
{
    // 10141 0062;	
    // (êÖÅ) GREEK ACROPHONIC ATTIC ONE HALF	[1B72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10141, 0x0062 };
    uint32_t const ces[9] = { 0x1B72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_227)
{
    // 10144 0021;	
    // (êÖÑ) GREEK ACROPHONIC ATTIC FIFTY	[1B73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10144, 0x0021 };
    uint32_t const ces[9] = { 0x1B73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_228)
{
    // 10144 003F;	
    // (êÖÑ) GREEK ACROPHONIC ATTIC FIFTY	[1B73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10144, 0x003F };
    uint32_t const ces[9] = { 0x1B73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_229)
{
    // 10144 0061;	
    // (êÖÑ) GREEK ACROPHONIC ATTIC FIFTY	[1B73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10144, 0x0061 };
    uint32_t const ces[9] = { 0x1B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_230)
{
    // 10144 0041;	
    // (êÖÑ) GREEK ACROPHONIC ATTIC FIFTY	[1B73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10144, 0x0041 };
    uint32_t const ces[9] = { 0x1B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_231)
{
    // 10144 0062;	
    // (êÖÑ) GREEK ACROPHONIC ATTIC FIFTY	[1B73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10144, 0x0062 };
    uint32_t const ces[9] = { 0x1B73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_232)
{
    // 10145 0021;	
    // (êÖÖ) GREEK ACROPHONIC ATTIC FIVE HUNDRED	[1B74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10145, 0x0021 };
    uint32_t const ces[9] = { 0x1B74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_233)
{
    // 10145 003F;	
    // (êÖÖ) GREEK ACROPHONIC ATTIC FIVE HUNDRED	[1B74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10145, 0x003F };
    uint32_t const ces[9] = { 0x1B74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_234)
{
    // 10145 0061;	
    // (êÖÖ) GREEK ACROPHONIC ATTIC FIVE HUNDRED	[1B74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10145, 0x0061 };
    uint32_t const ces[9] = { 0x1B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_235)
{
    // 10145 0041;	
    // (êÖÖ) GREEK ACROPHONIC ATTIC FIVE HUNDRED	[1B74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10145, 0x0041 };
    uint32_t const ces[9] = { 0x1B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_236)
{
    // 10145 0062;	
    // (êÖÖ) GREEK ACROPHONIC ATTIC FIVE HUNDRED	[1B74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10145, 0x0062 };
    uint32_t const ces[9] = { 0x1B74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_237)
{
    // 10146 0021;	
    // (êÖÜ) GREEK ACROPHONIC ATTIC FIVE THOUSAND	[1B75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10146, 0x0021 };
    uint32_t const ces[9] = { 0x1B75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_238)
{
    // 10146 003F;	
    // (êÖÜ) GREEK ACROPHONIC ATTIC FIVE THOUSAND	[1B75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10146, 0x003F };
    uint32_t const ces[9] = { 0x1B75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_239)
{
    // 10146 0061;	
    // (êÖÜ) GREEK ACROPHONIC ATTIC FIVE THOUSAND	[1B75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10146, 0x0061 };
    uint32_t const ces[9] = { 0x1B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_240)
{
    // 10146 0041;	
    // (êÖÜ) GREEK ACROPHONIC ATTIC FIVE THOUSAND	[1B75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10146, 0x0041 };
    uint32_t const ces[9] = { 0x1B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_241)
{
    // 10146 0062;	
    // (êÖÜ) GREEK ACROPHONIC ATTIC FIVE THOUSAND	[1B75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10146, 0x0062 };
    uint32_t const ces[9] = { 0x1B75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_242)
{
    // 10147 0021;	
    // (êÖá) GREEK ACROPHONIC ATTIC FIFTY THOUSAND	[1B76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10147, 0x0021 };
    uint32_t const ces[9] = { 0x1B76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_243)
{
    // 10147 003F;	
    // (êÖá) GREEK ACROPHONIC ATTIC FIFTY THOUSAND	[1B76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10147, 0x003F };
    uint32_t const ces[9] = { 0x1B76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_244)
{
    // 10147 0061;	
    // (êÖá) GREEK ACROPHONIC ATTIC FIFTY THOUSAND	[1B76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10147, 0x0061 };
    uint32_t const ces[9] = { 0x1B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_245)
{
    // 10147 0041;	
    // (êÖá) GREEK ACROPHONIC ATTIC FIFTY THOUSAND	[1B76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10147, 0x0041 };
    uint32_t const ces[9] = { 0x1B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_246)
{
    // 10147 0062;	
    // (êÖá) GREEK ACROPHONIC ATTIC FIFTY THOUSAND	[1B76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10147, 0x0062 };
    uint32_t const ces[9] = { 0x1B76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_247)
{
    // 10149 0021;	
    // (êÖâ) GREEK ACROPHONIC ATTIC TEN TALENTS	[1B77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10149, 0x0021 };
    uint32_t const ces[9] = { 0x1B77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_248)
{
    // 10149 003F;	
    // (êÖâ) GREEK ACROPHONIC ATTIC TEN TALENTS	[1B77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10149, 0x003F };
    uint32_t const ces[9] = { 0x1B77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_249)
{
    // 10149 0061;	
    // (êÖâ) GREEK ACROPHONIC ATTIC TEN TALENTS	[1B77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10149, 0x0061 };
    uint32_t const ces[9] = { 0x1B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_250)
{
    // 10149 0041;	
    // (êÖâ) GREEK ACROPHONIC ATTIC TEN TALENTS	[1B77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10149, 0x0041 };
    uint32_t const ces[9] = { 0x1B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_251)
{
    // 10149 0062;	
    // (êÖâ) GREEK ACROPHONIC ATTIC TEN TALENTS	[1B77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10149, 0x0062 };
    uint32_t const ces[9] = { 0x1B77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_252)
{
    // 1014A 0021;	
    // (êÖä) GREEK ACROPHONIC ATTIC FIFTY TALENTS	[1B78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014A, 0x0021 };
    uint32_t const ces[9] = { 0x1B78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_253)
{
    // 1014A 003F;	
    // (êÖä) GREEK ACROPHONIC ATTIC FIFTY TALENTS	[1B78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014A, 0x003F };
    uint32_t const ces[9] = { 0x1B78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_254)
{
    // 1014A 0061;	
    // (êÖä) GREEK ACROPHONIC ATTIC FIFTY TALENTS	[1B78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014A, 0x0061 };
    uint32_t const ces[9] = { 0x1B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_255)
{
    // 1014A 0041;	
    // (êÖä) GREEK ACROPHONIC ATTIC FIFTY TALENTS	[1B78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014A, 0x0041 };
    uint32_t const ces[9] = { 0x1B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_256)
{
    // 1014A 0062;	
    // (êÖä) GREEK ACROPHONIC ATTIC FIFTY TALENTS	[1B78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014A, 0x0062 };
    uint32_t const ces[9] = { 0x1B78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_257)
{
    // 1014B 0021;	
    // (êÖã) GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS	[1B79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014B, 0x0021 };
    uint32_t const ces[9] = { 0x1B79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_258)
{
    // 1014B 003F;	
    // (êÖã) GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS	[1B79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014B, 0x003F };
    uint32_t const ces[9] = { 0x1B79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_259)
{
    // 1014B 0061;	
    // (êÖã) GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS	[1B79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014B, 0x0061 };
    uint32_t const ces[9] = { 0x1B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_260)
{
    // 1014B 0041;	
    // (êÖã) GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS	[1B79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014B, 0x0041 };
    uint32_t const ces[9] = { 0x1B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_261)
{
    // 1014B 0062;	
    // (êÖã) GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS	[1B79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014B, 0x0062 };
    uint32_t const ces[9] = { 0x1B79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_262)
{
    // 1014C 0021;	
    // (êÖå) GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS	[1B7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014C, 0x0021 };
    uint32_t const ces[9] = { 0x1B7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_263)
{
    // 1014C 003F;	
    // (êÖå) GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS	[1B7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014C, 0x003F };
    uint32_t const ces[9] = { 0x1B7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_264)
{
    // 1014C 0061;	
    // (êÖå) GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS	[1B7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014C, 0x0061 };
    uint32_t const ces[9] = { 0x1B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_265)
{
    // 1014C 0041;	
    // (êÖå) GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS	[1B7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014C, 0x0041 };
    uint32_t const ces[9] = { 0x1B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_266)
{
    // 1014C 0062;	
    // (êÖå) GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS	[1B7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014C, 0x0062 };
    uint32_t const ces[9] = { 0x1B7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_267)
{
    // 1014D 0021;	
    // (êÖç) GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS	[1B7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014D, 0x0021 };
    uint32_t const ces[9] = { 0x1B7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_268)
{
    // 1014D 003F;	
    // (êÖç) GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS	[1B7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014D, 0x003F };
    uint32_t const ces[9] = { 0x1B7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_269)
{
    // 1014D 0061;	
    // (êÖç) GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS	[1B7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014D, 0x0061 };
    uint32_t const ces[9] = { 0x1B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_270)
{
    // 1014D 0041;	
    // (êÖç) GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS	[1B7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014D, 0x0041 };
    uint32_t const ces[9] = { 0x1B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_271)
{
    // 1014D 0062;	
    // (êÖç) GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS	[1B7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014D, 0x0062 };
    uint32_t const ces[9] = { 0x1B7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_272)
{
    // 1014E 0021;	
    // (êÖé) GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS	[1B7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014E, 0x0021 };
    uint32_t const ces[9] = { 0x1B7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_273)
{
    // 1014E 003F;	
    // (êÖé) GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS	[1B7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014E, 0x003F };
    uint32_t const ces[9] = { 0x1B7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_274)
{
    // 1014E 0061;	
    // (êÖé) GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS	[1B7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014E, 0x0061 };
    uint32_t const ces[9] = { 0x1B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_275)
{
    // 1014E 0041;	
    // (êÖé) GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS	[1B7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014E, 0x0041 };
    uint32_t const ces[9] = { 0x1B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_276)
{
    // 1014E 0062;	
    // (êÖé) GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS	[1B7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014E, 0x0062 };
    uint32_t const ces[9] = { 0x1B7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_277)
{
    // 10150 0021;	
    // (êÖê) GREEK ACROPHONIC ATTIC TEN STATERS	[1B7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10150, 0x0021 };
    uint32_t const ces[9] = { 0x1B7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_278)
{
    // 10150 003F;	
    // (êÖê) GREEK ACROPHONIC ATTIC TEN STATERS	[1B7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10150, 0x003F };
    uint32_t const ces[9] = { 0x1B7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_279)
{
    // 10150 0061;	
    // (êÖê) GREEK ACROPHONIC ATTIC TEN STATERS	[1B7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10150, 0x0061 };
    uint32_t const ces[9] = { 0x1B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_280)
{
    // 10150 0041;	
    // (êÖê) GREEK ACROPHONIC ATTIC TEN STATERS	[1B7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10150, 0x0041 };
    uint32_t const ces[9] = { 0x1B7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_281)
{
    // 10150 0062;	
    // (êÖê) GREEK ACROPHONIC ATTIC TEN STATERS	[1B7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10150, 0x0062 };
    uint32_t const ces[9] = { 0x1B7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_282)
{
    // 10151 0021;	
    // (êÖë) GREEK ACROPHONIC ATTIC FIFTY STATERS	[1B7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10151, 0x0021 };
    uint32_t const ces[9] = { 0x1B7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_283)
{
    // 10151 003F;	
    // (êÖë) GREEK ACROPHONIC ATTIC FIFTY STATERS	[1B7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10151, 0x003F };
    uint32_t const ces[9] = { 0x1B7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_284)
{
    // 10151 0061;	
    // (êÖë) GREEK ACROPHONIC ATTIC FIFTY STATERS	[1B7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10151, 0x0061 };
    uint32_t const ces[9] = { 0x1B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_285)
{
    // 10151 0041;	
    // (êÖë) GREEK ACROPHONIC ATTIC FIFTY STATERS	[1B7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10151, 0x0041 };
    uint32_t const ces[9] = { 0x1B7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_286)
{
    // 10151 0062;	
    // (êÖë) GREEK ACROPHONIC ATTIC FIFTY STATERS	[1B7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10151, 0x0062 };
    uint32_t const ces[9] = { 0x1B7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_287)
{
    // 10152 0021;	
    // (êÖí) GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS	[1B7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10152, 0x0021 };
    uint32_t const ces[9] = { 0x1B7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_288)
{
    // 10152 003F;	
    // (êÖí) GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS	[1B7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10152, 0x003F };
    uint32_t const ces[9] = { 0x1B7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_289)
{
    // 10152 0061;	
    // (êÖí) GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS	[1B7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10152, 0x0061 };
    uint32_t const ces[9] = { 0x1B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_290)
{
    // 10152 0041;	
    // (êÖí) GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS	[1B7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10152, 0x0041 };
    uint32_t const ces[9] = { 0x1B7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_291)
{
    // 10152 0062;	
    // (êÖí) GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS	[1B7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10152, 0x0062 };
    uint32_t const ces[9] = { 0x1B7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_292)
{
    // 10153 0021;	
    // (êÖì) GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS	[1B80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10153, 0x0021 };
    uint32_t const ces[9] = { 0x1B80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_293)
{
    // 10153 003F;	
    // (êÖì) GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS	[1B80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10153, 0x003F };
    uint32_t const ces[9] = { 0x1B80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_294)
{
    // 10153 0061;	
    // (êÖì) GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS	[1B80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10153, 0x0061 };
    uint32_t const ces[9] = { 0x1B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_295)
{
    // 10153 0041;	
    // (êÖì) GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS	[1B80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10153, 0x0041 };
    uint32_t const ces[9] = { 0x1B80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_296)
{
    // 10153 0062;	
    // (êÖì) GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS	[1B80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10153, 0x0062 };
    uint32_t const ces[9] = { 0x1B80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_297)
{
    // 10154 0021;	
    // (êÖî) GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS	[1B81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10154, 0x0021 };
    uint32_t const ces[9] = { 0x1B81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_298)
{
    // 10154 003F;	
    // (êÖî) GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS	[1B81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10154, 0x003F };
    uint32_t const ces[9] = { 0x1B81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_299)
{
    // 10154 0061;	
    // (êÖî) GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS	[1B81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10154, 0x0061 };
    uint32_t const ces[9] = { 0x1B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_300)
{
    // 10154 0041;	
    // (êÖî) GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS	[1B81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10154, 0x0041 };
    uint32_t const ces[9] = { 0x1B81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_301)
{
    // 10154 0062;	
    // (êÖî) GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS	[1B81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10154, 0x0062 };
    uint32_t const ces[9] = { 0x1B81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_302)
{
    // 10155 0021;	
    // (êÖï) GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS	[1B82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10155, 0x0021 };
    uint32_t const ces[9] = { 0x1B82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_303)
{
    // 10155 003F;	
    // (êÖï) GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS	[1B82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10155, 0x003F };
    uint32_t const ces[9] = { 0x1B82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_304)
{
    // 10155 0061;	
    // (êÖï) GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS	[1B82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10155, 0x0061 };
    uint32_t const ces[9] = { 0x1B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_305)
{
    // 10155 0041;	
    // (êÖï) GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS	[1B82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10155, 0x0041 };
    uint32_t const ces[9] = { 0x1B82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_306)
{
    // 10155 0062;	
    // (êÖï) GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS	[1B82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10155, 0x0062 };
    uint32_t const ces[9] = { 0x1B82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_307)
{
    // 10156 0021;	
    // (êÖñ) GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS	[1B83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10156, 0x0021 };
    uint32_t const ces[9] = { 0x1B83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_308)
{
    // 10156 003F;	
    // (êÖñ) GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS	[1B83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10156, 0x003F };
    uint32_t const ces[9] = { 0x1B83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_309)
{
    // 10156 0061;	
    // (êÖñ) GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS	[1B83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10156, 0x0061 };
    uint32_t const ces[9] = { 0x1B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_310)
{
    // 10156 0041;	
    // (êÖñ) GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS	[1B83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10156, 0x0041 };
    uint32_t const ces[9] = { 0x1B83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_311)
{
    // 10156 0062;	
    // (êÖñ) GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS	[1B83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10156, 0x0062 };
    uint32_t const ces[9] = { 0x1B83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_312)
{
    // 10157 0021;	
    // (êÖó) GREEK ACROPHONIC ATTIC TEN MNAS	[1B84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10157, 0x0021 };
    uint32_t const ces[9] = { 0x1B84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_313)
{
    // 10157 003F;	
    // (êÖó) GREEK ACROPHONIC ATTIC TEN MNAS	[1B84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10157, 0x003F };
    uint32_t const ces[9] = { 0x1B84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_314)
{
    // 10157 0061;	
    // (êÖó) GREEK ACROPHONIC ATTIC TEN MNAS	[1B84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10157, 0x0061 };
    uint32_t const ces[9] = { 0x1B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_315)
{
    // 10157 0041;	
    // (êÖó) GREEK ACROPHONIC ATTIC TEN MNAS	[1B84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10157, 0x0041 };
    uint32_t const ces[9] = { 0x1B84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_316)
{
    // 10157 0062;	
    // (êÖó) GREEK ACROPHONIC ATTIC TEN MNAS	[1B84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10157, 0x0062 };
    uint32_t const ces[9] = { 0x1B84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_317)
{
    // 10160 0021;	
    // (êÖ†) GREEK ACROPHONIC TROEZENIAN TEN	[1B85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10160, 0x0021 };
    uint32_t const ces[9] = { 0x1B85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_318)
{
    // 10160 003F;	
    // (êÖ†) GREEK ACROPHONIC TROEZENIAN TEN	[1B85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10160, 0x003F };
    uint32_t const ces[9] = { 0x1B85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_319)
{
    // 10160 0061;	
    // (êÖ†) GREEK ACROPHONIC TROEZENIAN TEN	[1B85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10160, 0x0061 };
    uint32_t const ces[9] = { 0x1B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_320)
{
    // 10160 0041;	
    // (êÖ†) GREEK ACROPHONIC TROEZENIAN TEN	[1B85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10160, 0x0041 };
    uint32_t const ces[9] = { 0x1B85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_321)
{
    // 10160 0062;	
    // (êÖ†) GREEK ACROPHONIC TROEZENIAN TEN	[1B85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10160, 0x0062 };
    uint32_t const ces[9] = { 0x1B85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_322)
{
    // 10161 0021;	
    // (êÖ°) GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM	[1B86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10161, 0x0021 };
    uint32_t const ces[9] = { 0x1B86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_323)
{
    // 10161 003F;	
    // (êÖ°) GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM	[1B86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10161, 0x003F };
    uint32_t const ces[9] = { 0x1B86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_324)
{
    // 10161 0061;	
    // (êÖ°) GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM	[1B86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10161, 0x0061 };
    uint32_t const ces[9] = { 0x1B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_325)
{
    // 10161 0041;	
    // (êÖ°) GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM	[1B86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10161, 0x0041 };
    uint32_t const ces[9] = { 0x1B86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_326)
{
    // 10161 0062;	
    // (êÖ°) GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM	[1B86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10161, 0x0062 };
    uint32_t const ces[9] = { 0x1B86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_327)
{
    // 10162 0021;	
    // (êÖ¢) GREEK ACROPHONIC HERMIONIAN TEN	[1B87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10162, 0x0021 };
    uint32_t const ces[9] = { 0x1B87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_328)
{
    // 10162 003F;	
    // (êÖ¢) GREEK ACROPHONIC HERMIONIAN TEN	[1B87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10162, 0x003F };
    uint32_t const ces[9] = { 0x1B87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_329)
{
    // 10162 0061;	
    // (êÖ¢) GREEK ACROPHONIC HERMIONIAN TEN	[1B87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10162, 0x0061 };
    uint32_t const ces[9] = { 0x1B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_330)
{
    // 10162 0041;	
    // (êÖ¢) GREEK ACROPHONIC HERMIONIAN TEN	[1B87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10162, 0x0041 };
    uint32_t const ces[9] = { 0x1B87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_331)
{
    // 10162 0062;	
    // (êÖ¢) GREEK ACROPHONIC HERMIONIAN TEN	[1B87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10162, 0x0062 };
    uint32_t const ces[9] = { 0x1B87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_332)
{
    // 10163 0021;	
    // (êÖ£) GREEK ACROPHONIC MESSENIAN TEN	[1B88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10163, 0x0021 };
    uint32_t const ces[9] = { 0x1B88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_333)
{
    // 10163 003F;	
    // (êÖ£) GREEK ACROPHONIC MESSENIAN TEN	[1B88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10163, 0x003F };
    uint32_t const ces[9] = { 0x1B88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_334)
{
    // 10163 0061;	
    // (êÖ£) GREEK ACROPHONIC MESSENIAN TEN	[1B88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10163, 0x0061 };
    uint32_t const ces[9] = { 0x1B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_335)
{
    // 10163 0041;	
    // (êÖ£) GREEK ACROPHONIC MESSENIAN TEN	[1B88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10163, 0x0041 };
    uint32_t const ces[9] = { 0x1B88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_336)
{
    // 10163 0062;	
    // (êÖ£) GREEK ACROPHONIC MESSENIAN TEN	[1B88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10163, 0x0062 };
    uint32_t const ces[9] = { 0x1B88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_337)
{
    // 10164 0021;	
    // (êÖ§) GREEK ACROPHONIC THESPIAN TEN	[1B89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10164, 0x0021 };
    uint32_t const ces[9] = { 0x1B89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_338)
{
    // 10164 003F;	
    // (êÖ§) GREEK ACROPHONIC THESPIAN TEN	[1B89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10164, 0x003F };
    uint32_t const ces[9] = { 0x1B89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_339)
{
    // 10164 0061;	
    // (êÖ§) GREEK ACROPHONIC THESPIAN TEN	[1B89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10164, 0x0061 };
    uint32_t const ces[9] = { 0x1B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_340)
{
    // 10164 0041;	
    // (êÖ§) GREEK ACROPHONIC THESPIAN TEN	[1B89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10164, 0x0041 };
    uint32_t const ces[9] = { 0x1B89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_341)
{
    // 10164 0062;	
    // (êÖ§) GREEK ACROPHONIC THESPIAN TEN	[1B89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10164, 0x0062 };
    uint32_t const ces[9] = { 0x1B89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_342)
{
    // 10165 0021;	
    // (êÖ•) GREEK ACROPHONIC THESPIAN THIRTY	[1B8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10165, 0x0021 };
    uint32_t const ces[9] = { 0x1B8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_343)
{
    // 10165 003F;	
    // (êÖ•) GREEK ACROPHONIC THESPIAN THIRTY	[1B8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10165, 0x003F };
    uint32_t const ces[9] = { 0x1B8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_344)
{
    // 10165 0061;	
    // (êÖ•) GREEK ACROPHONIC THESPIAN THIRTY	[1B8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10165, 0x0061 };
    uint32_t const ces[9] = { 0x1B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_345)
{
    // 10165 0041;	
    // (êÖ•) GREEK ACROPHONIC THESPIAN THIRTY	[1B8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10165, 0x0041 };
    uint32_t const ces[9] = { 0x1B8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_346)
{
    // 10165 0062;	
    // (êÖ•) GREEK ACROPHONIC THESPIAN THIRTY	[1B8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10165, 0x0062 };
    uint32_t const ces[9] = { 0x1B8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_347)
{
    // 10166 0021;	
    // (êÖ¶) GREEK ACROPHONIC TROEZENIAN FIFTY	[1B8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10166, 0x0021 };
    uint32_t const ces[9] = { 0x1B8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_348)
{
    // 10166 003F;	
    // (êÖ¶) GREEK ACROPHONIC TROEZENIAN FIFTY	[1B8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10166, 0x003F };
    uint32_t const ces[9] = { 0x1B8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_349)
{
    // 10166 0061;	
    // (êÖ¶) GREEK ACROPHONIC TROEZENIAN FIFTY	[1B8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10166, 0x0061 };
    uint32_t const ces[9] = { 0x1B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_350)
{
    // 10166 0041;	
    // (êÖ¶) GREEK ACROPHONIC TROEZENIAN FIFTY	[1B8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10166, 0x0041 };
    uint32_t const ces[9] = { 0x1B8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_351)
{
    // 10166 0062;	
    // (êÖ¶) GREEK ACROPHONIC TROEZENIAN FIFTY	[1B8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10166, 0x0062 };
    uint32_t const ces[9] = { 0x1B8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_352)
{
    // 10167 0021;	
    // (êÖß) GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM	[1B8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10167, 0x0021 };
    uint32_t const ces[9] = { 0x1B8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_353)
{
    // 10167 003F;	
    // (êÖß) GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM	[1B8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10167, 0x003F };
    uint32_t const ces[9] = { 0x1B8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_354)
{
    // 10167 0061;	
    // (êÖß) GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM	[1B8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10167, 0x0061 };
    uint32_t const ces[9] = { 0x1B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_355)
{
    // 10167 0041;	
    // (êÖß) GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM	[1B8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10167, 0x0041 };
    uint32_t const ces[9] = { 0x1B8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_356)
{
    // 10167 0062;	
    // (êÖß) GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM	[1B8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10167, 0x0062 };
    uint32_t const ces[9] = { 0x1B8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_357)
{
    // 10168 0021;	
    // (êÖ®) GREEK ACROPHONIC HERMIONIAN FIFTY	[1B8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10168, 0x0021 };
    uint32_t const ces[9] = { 0x1B8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_358)
{
    // 10168 003F;	
    // (êÖ®) GREEK ACROPHONIC HERMIONIAN FIFTY	[1B8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10168, 0x003F };
    uint32_t const ces[9] = { 0x1B8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_359)
{
    // 10168 0061;	
    // (êÖ®) GREEK ACROPHONIC HERMIONIAN FIFTY	[1B8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10168, 0x0061 };
    uint32_t const ces[9] = { 0x1B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_360)
{
    // 10168 0041;	
    // (êÖ®) GREEK ACROPHONIC HERMIONIAN FIFTY	[1B8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10168, 0x0041 };
    uint32_t const ces[9] = { 0x1B8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_361)
{
    // 10168 0062;	
    // (êÖ®) GREEK ACROPHONIC HERMIONIAN FIFTY	[1B8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10168, 0x0062 };
    uint32_t const ces[9] = { 0x1B8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_362)
{
    // 10169 0021;	
    // (êÖ©) GREEK ACROPHONIC THESPIAN FIFTY	[1B8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10169, 0x0021 };
    uint32_t const ces[9] = { 0x1B8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_363)
{
    // 10169 003F;	
    // (êÖ©) GREEK ACROPHONIC THESPIAN FIFTY	[1B8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10169, 0x003F };
    uint32_t const ces[9] = { 0x1B8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_364)
{
    // 10169 0061;	
    // (êÖ©) GREEK ACROPHONIC THESPIAN FIFTY	[1B8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10169, 0x0061 };
    uint32_t const ces[9] = { 0x1B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_365)
{
    // 10169 0041;	
    // (êÖ©) GREEK ACROPHONIC THESPIAN FIFTY	[1B8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10169, 0x0041 };
    uint32_t const ces[9] = { 0x1B8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_366)
{
    // 10169 0062;	
    // (êÖ©) GREEK ACROPHONIC THESPIAN FIFTY	[1B8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10169, 0x0062 };
    uint32_t const ces[9] = { 0x1B8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_367)
{
    // 1016A 0021;	
    // (êÖ™) GREEK ACROPHONIC THESPIAN ONE HUNDRED	[1B8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016A, 0x0021 };
    uint32_t const ces[9] = { 0x1B8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_368)
{
    // 1016A 003F;	
    // (êÖ™) GREEK ACROPHONIC THESPIAN ONE HUNDRED	[1B8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016A, 0x003F };
    uint32_t const ces[9] = { 0x1B8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_369)
{
    // 1016A 0061;	
    // (êÖ™) GREEK ACROPHONIC THESPIAN ONE HUNDRED	[1B8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016A, 0x0061 };
    uint32_t const ces[9] = { 0x1B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_370)
{
    // 1016A 0041;	
    // (êÖ™) GREEK ACROPHONIC THESPIAN ONE HUNDRED	[1B8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016A, 0x0041 };
    uint32_t const ces[9] = { 0x1B8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_371)
{
    // 1016A 0062;	
    // (êÖ™) GREEK ACROPHONIC THESPIAN ONE HUNDRED	[1B8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016A, 0x0062 };
    uint32_t const ces[9] = { 0x1B8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_372)
{
    // 1016B 0021;	
    // (êÖ´) GREEK ACROPHONIC THESPIAN THREE HUNDRED	[1B90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016B, 0x0021 };
    uint32_t const ces[9] = { 0x1B90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_373)
{
    // 1016B 003F;	
    // (êÖ´) GREEK ACROPHONIC THESPIAN THREE HUNDRED	[1B90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016B, 0x003F };
    uint32_t const ces[9] = { 0x1B90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_374)
{
    // 1016B 0061;	
    // (êÖ´) GREEK ACROPHONIC THESPIAN THREE HUNDRED	[1B90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016B, 0x0061 };
    uint32_t const ces[9] = { 0x1B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_375)
{
    // 1016B 0041;	
    // (êÖ´) GREEK ACROPHONIC THESPIAN THREE HUNDRED	[1B90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016B, 0x0041 };
    uint32_t const ces[9] = { 0x1B90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_376)
{
    // 1016B 0062;	
    // (êÖ´) GREEK ACROPHONIC THESPIAN THREE HUNDRED	[1B90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016B, 0x0062 };
    uint32_t const ces[9] = { 0x1B90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_377)
{
    // 1016C 0021;	
    // (êÖ¨) GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED	[1B91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016C, 0x0021 };
    uint32_t const ces[9] = { 0x1B91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_378)
{
    // 1016C 003F;	
    // (êÖ¨) GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED	[1B91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016C, 0x003F };
    uint32_t const ces[9] = { 0x1B91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_379)
{
    // 1016C 0061;	
    // (êÖ¨) GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED	[1B91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016C, 0x0061 };
    uint32_t const ces[9] = { 0x1B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_380)
{
    // 1016C 0041;	
    // (êÖ¨) GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED	[1B91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016C, 0x0041 };
    uint32_t const ces[9] = { 0x1B91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_381)
{
    // 1016C 0062;	
    // (êÖ¨) GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED	[1B91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016C, 0x0062 };
    uint32_t const ces[9] = { 0x1B91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_382)
{
    // 1016D 0021;	
    // (êÖ≠) GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED	[1B92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016D, 0x0021 };
    uint32_t const ces[9] = { 0x1B92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_383)
{
    // 1016D 003F;	
    // (êÖ≠) GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED	[1B92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016D, 0x003F };
    uint32_t const ces[9] = { 0x1B92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_384)
{
    // 1016D 0061;	
    // (êÖ≠) GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED	[1B92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016D, 0x0061 };
    uint32_t const ces[9] = { 0x1B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_385)
{
    // 1016D 0041;	
    // (êÖ≠) GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED	[1B92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016D, 0x0041 };
    uint32_t const ces[9] = { 0x1B92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_386)
{
    // 1016D 0062;	
    // (êÖ≠) GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED	[1B92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016D, 0x0062 };
    uint32_t const ces[9] = { 0x1B92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_387)
{
    // 1016E 0021;	
    // (êÖÆ) GREEK ACROPHONIC THESPIAN FIVE HUNDRED	[1B93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016E, 0x0021 };
    uint32_t const ces[9] = { 0x1B93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_388)
{
    // 1016E 003F;	
    // (êÖÆ) GREEK ACROPHONIC THESPIAN FIVE HUNDRED	[1B93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016E, 0x003F };
    uint32_t const ces[9] = { 0x1B93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_389)
{
    // 1016E 0061;	
    // (êÖÆ) GREEK ACROPHONIC THESPIAN FIVE HUNDRED	[1B93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016E, 0x0061 };
    uint32_t const ces[9] = { 0x1B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_390)
{
    // 1016E 0041;	
    // (êÖÆ) GREEK ACROPHONIC THESPIAN FIVE HUNDRED	[1B93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016E, 0x0041 };
    uint32_t const ces[9] = { 0x1B93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_391)
{
    // 1016E 0062;	
    // (êÖÆ) GREEK ACROPHONIC THESPIAN FIVE HUNDRED	[1B93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016E, 0x0062 };
    uint32_t const ces[9] = { 0x1B93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_392)
{
    // 1016F 0021;	
    // (êÖØ) GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED	[1B94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016F, 0x0021 };
    uint32_t const ces[9] = { 0x1B94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_393)
{
    // 1016F 003F;	
    // (êÖØ) GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED	[1B94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016F, 0x003F };
    uint32_t const ces[9] = { 0x1B94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_394)
{
    // 1016F 0061;	
    // (êÖØ) GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED	[1B94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016F, 0x0061 };
    uint32_t const ces[9] = { 0x1B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_395)
{
    // 1016F 0041;	
    // (êÖØ) GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED	[1B94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1016F, 0x0041 };
    uint32_t const ces[9] = { 0x1B94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_396)
{
    // 1016F 0062;	
    // (êÖØ) GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED	[1B94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1016F, 0x0062 };
    uint32_t const ces[9] = { 0x1B94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_397)
{
    // 10170 0021;	
    // (êÖ∞) GREEK ACROPHONIC NAXIAN FIVE HUNDRED	[1B95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10170, 0x0021 };
    uint32_t const ces[9] = { 0x1B95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_398)
{
    // 10170 003F;	
    // (êÖ∞) GREEK ACROPHONIC NAXIAN FIVE HUNDRED	[1B95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10170, 0x003F };
    uint32_t const ces[9] = { 0x1B95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_399)
{
    // 10170 0061;	
    // (êÖ∞) GREEK ACROPHONIC NAXIAN FIVE HUNDRED	[1B95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10170, 0x0061 };
    uint32_t const ces[9] = { 0x1B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_400)
{
    // 10170 0041;	
    // (êÖ∞) GREEK ACROPHONIC NAXIAN FIVE HUNDRED	[1B95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10170, 0x0041 };
    uint32_t const ces[9] = { 0x1B95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_401)
{
    // 10170 0062;	
    // (êÖ∞) GREEK ACROPHONIC NAXIAN FIVE HUNDRED	[1B95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10170, 0x0062 };
    uint32_t const ces[9] = { 0x1B95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_402)
{
    // 10171 0021;	
    // (êÖ±) GREEK ACROPHONIC THESPIAN ONE THOUSAND	[1B96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10171, 0x0021 };
    uint32_t const ces[9] = { 0x1B96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_403)
{
    // 10171 003F;	
    // (êÖ±) GREEK ACROPHONIC THESPIAN ONE THOUSAND	[1B96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10171, 0x003F };
    uint32_t const ces[9] = { 0x1B96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_404)
{
    // 10171 0061;	
    // (êÖ±) GREEK ACROPHONIC THESPIAN ONE THOUSAND	[1B96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10171, 0x0061 };
    uint32_t const ces[9] = { 0x1B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_405)
{
    // 10171 0041;	
    // (êÖ±) GREEK ACROPHONIC THESPIAN ONE THOUSAND	[1B96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10171, 0x0041 };
    uint32_t const ces[9] = { 0x1B96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_406)
{
    // 10171 0062;	
    // (êÖ±) GREEK ACROPHONIC THESPIAN ONE THOUSAND	[1B96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10171, 0x0062 };
    uint32_t const ces[9] = { 0x1B96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_407)
{
    // 10172 0021;	
    // (êÖ≤) GREEK ACROPHONIC THESPIAN FIVE THOUSAND	[1B97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10172, 0x0021 };
    uint32_t const ces[9] = { 0x1B97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_408)
{
    // 10172 003F;	
    // (êÖ≤) GREEK ACROPHONIC THESPIAN FIVE THOUSAND	[1B97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10172, 0x003F };
    uint32_t const ces[9] = { 0x1B97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_409)
{
    // 10172 0061;	
    // (êÖ≤) GREEK ACROPHONIC THESPIAN FIVE THOUSAND	[1B97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10172, 0x0061 };
    uint32_t const ces[9] = { 0x1B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_410)
{
    // 10172 0041;	
    // (êÖ≤) GREEK ACROPHONIC THESPIAN FIVE THOUSAND	[1B97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10172, 0x0041 };
    uint32_t const ces[9] = { 0x1B97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_411)
{
    // 10172 0062;	
    // (êÖ≤) GREEK ACROPHONIC THESPIAN FIVE THOUSAND	[1B97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10172, 0x0062 };
    uint32_t const ces[9] = { 0x1B97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_412)
{
    // 10174 0021;	
    // (êÖ¥) GREEK ACROPHONIC STRATIAN FIFTY MNAS	[1B98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10174, 0x0021 };
    uint32_t const ces[9] = { 0x1B98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_413)
{
    // 10174 003F;	
    // (êÖ¥) GREEK ACROPHONIC STRATIAN FIFTY MNAS	[1B98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10174, 0x003F };
    uint32_t const ces[9] = { 0x1B98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_414)
{
    // 10174 0061;	
    // (êÖ¥) GREEK ACROPHONIC STRATIAN FIFTY MNAS	[1B98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10174, 0x0061 };
    uint32_t const ces[9] = { 0x1B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_415)
{
    // 10174 0041;	
    // (êÖ¥) GREEK ACROPHONIC STRATIAN FIFTY MNAS	[1B98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10174, 0x0041 };
    uint32_t const ces[9] = { 0x1B98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_416)
{
    // 10174 0062;	
    // (êÖ¥) GREEK ACROPHONIC STRATIAN FIFTY MNAS	[1B98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10174, 0x0062 };
    uint32_t const ces[9] = { 0x1B98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_417)
{
    // 10175 0021;	
    // (êÖµ) GREEK ONE HALF SIGN	[1B99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10175, 0x0021 };
    uint32_t const ces[9] = { 0x1B99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_418)
{
    // 10175 003F;	
    // (êÖµ) GREEK ONE HALF SIGN	[1B99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10175, 0x003F };
    uint32_t const ces[9] = { 0x1B99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_419)
{
    // 10175 0061;	
    // (êÖµ) GREEK ONE HALF SIGN	[1B99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10175, 0x0061 };
    uint32_t const ces[9] = { 0x1B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_420)
{
    // 10175 0041;	
    // (êÖµ) GREEK ONE HALF SIGN	[1B99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10175, 0x0041 };
    uint32_t const ces[9] = { 0x1B99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_421)
{
    // 10175 0062;	
    // (êÖµ) GREEK ONE HALF SIGN	[1B99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10175, 0x0062 };
    uint32_t const ces[9] = { 0x1B99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_422)
{
    // 10176 0021;	
    // (êÖ∂) GREEK ONE HALF SIGN ALTERNATE FORM	[1B9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10176, 0x0021 };
    uint32_t const ces[9] = { 0x1B9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_423)
{
    // 10176 003F;	
    // (êÖ∂) GREEK ONE HALF SIGN ALTERNATE FORM	[1B9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10176, 0x003F };
    uint32_t const ces[9] = { 0x1B9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_424)
{
    // 10176 0061;	
    // (êÖ∂) GREEK ONE HALF SIGN ALTERNATE FORM	[1B9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10176, 0x0061 };
    uint32_t const ces[9] = { 0x1B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_425)
{
    // 10176 0041;	
    // (êÖ∂) GREEK ONE HALF SIGN ALTERNATE FORM	[1B9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10176, 0x0041 };
    uint32_t const ces[9] = { 0x1B9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_426)
{
    // 10176 0062;	
    // (êÖ∂) GREEK ONE HALF SIGN ALTERNATE FORM	[1B9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10176, 0x0062 };
    uint32_t const ces[9] = { 0x1B9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_427)
{
    // 10177 0021;	
    // (êÖ∑) GREEK TWO THIRDS SIGN	[1B9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10177, 0x0021 };
    uint32_t const ces[9] = { 0x1B9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_428)
{
    // 10177 003F;	
    // (êÖ∑) GREEK TWO THIRDS SIGN	[1B9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10177, 0x003F };
    uint32_t const ces[9] = { 0x1B9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_429)
{
    // 10177 0061;	
    // (êÖ∑) GREEK TWO THIRDS SIGN	[1B9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10177, 0x0061 };
    uint32_t const ces[9] = { 0x1B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_430)
{
    // 10177 0041;	
    // (êÖ∑) GREEK TWO THIRDS SIGN	[1B9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10177, 0x0041 };
    uint32_t const ces[9] = { 0x1B9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_431)
{
    // 10177 0062;	
    // (êÖ∑) GREEK TWO THIRDS SIGN	[1B9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10177, 0x0062 };
    uint32_t const ces[9] = { 0x1B9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_432)
{
    // 10178 0021;	
    // (êÖ∏) GREEK THREE QUARTERS SIGN	[1B9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10178, 0x0021 };
    uint32_t const ces[9] = { 0x1B9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_433)
{
    // 10178 003F;	
    // (êÖ∏) GREEK THREE QUARTERS SIGN	[1B9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10178, 0x003F };
    uint32_t const ces[9] = { 0x1B9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_434)
{
    // 10178 0061;	
    // (êÖ∏) GREEK THREE QUARTERS SIGN	[1B9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10178, 0x0061 };
    uint32_t const ces[9] = { 0x1B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_435)
{
    // 10178 0041;	
    // (êÖ∏) GREEK THREE QUARTERS SIGN	[1B9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10178, 0x0041 };
    uint32_t const ces[9] = { 0x1B9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_436)
{
    // 10178 0062;	
    // (êÖ∏) GREEK THREE QUARTERS SIGN	[1B9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10178, 0x0062 };
    uint32_t const ces[9] = { 0x1B9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_437)
{
    // 1018B 0021;	
    // (êÜã) GREEK ONE QUARTER SIGN	[1B9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018B, 0x0021 };
    uint32_t const ces[9] = { 0x1B9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_438)
{
    // 1018B 003F;	
    // (êÜã) GREEK ONE QUARTER SIGN	[1B9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018B, 0x003F };
    uint32_t const ces[9] = { 0x1B9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_439)
{
    // 1018B 0061;	
    // (êÜã) GREEK ONE QUARTER SIGN	[1B9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018B, 0x0061 };
    uint32_t const ces[9] = { 0x1B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_440)
{
    // 1018B 0041;	
    // (êÜã) GREEK ONE QUARTER SIGN	[1B9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1018B, 0x0041 };
    uint32_t const ces[9] = { 0x1B9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_441)
{
    // 1018B 0062;	
    // (êÜã) GREEK ONE QUARTER SIGN	[1B9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018B, 0x0062 };
    uint32_t const ces[9] = { 0x1B9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_442)
{
    // 102EA 0021;	
    // (êã™) COPTIC EPACT NUMBER TEN	[1B9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EA, 0x0021 };
    uint32_t const ces[9] = { 0x1B9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_443)
{
    // 102EA 003F;	
    // (êã™) COPTIC EPACT NUMBER TEN	[1B9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EA, 0x003F };
    uint32_t const ces[9] = { 0x1B9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_444)
{
    // 102EA 0061;	
    // (êã™) COPTIC EPACT NUMBER TEN	[1B9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EA, 0x0061 };
    uint32_t const ces[9] = { 0x1B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_445)
{
    // 102EA 0041;	
    // (êã™) COPTIC EPACT NUMBER TEN	[1B9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102EA, 0x0041 };
    uint32_t const ces[9] = { 0x1B9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_446)
{
    // 102EA 0062;	
    // (êã™) COPTIC EPACT NUMBER TEN	[1B9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EA, 0x0062 };
    uint32_t const ces[9] = { 0x1B9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_447)
{
    // 102EB 0021;	
    // (êã´) COPTIC EPACT NUMBER TWENTY	[1B9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EB, 0x0021 };
    uint32_t const ces[9] = { 0x1B9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_448)
{
    // 102EB 003F;	
    // (êã´) COPTIC EPACT NUMBER TWENTY	[1B9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EB, 0x003F };
    uint32_t const ces[9] = { 0x1B9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_449)
{
    // 102EB 0061;	
    // (êã´) COPTIC EPACT NUMBER TWENTY	[1B9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EB, 0x0061 };
    uint32_t const ces[9] = { 0x1B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_450)
{
    // 102EB 0041;	
    // (êã´) COPTIC EPACT NUMBER TWENTY	[1B9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102EB, 0x0041 };
    uint32_t const ces[9] = { 0x1B9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_451)
{
    // 102EB 0062;	
    // (êã´) COPTIC EPACT NUMBER TWENTY	[1B9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EB, 0x0062 };
    uint32_t const ces[9] = { 0x1B9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_452)
{
    // 102EC 0021;	
    // (êã¨) COPTIC EPACT NUMBER THIRTY	[1BA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EC, 0x0021 };
    uint32_t const ces[9] = { 0x1BA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_453)
{
    // 102EC 003F;	
    // (êã¨) COPTIC EPACT NUMBER THIRTY	[1BA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EC, 0x003F };
    uint32_t const ces[9] = { 0x1BA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_454)
{
    // 102EC 0061;	
    // (êã¨) COPTIC EPACT NUMBER THIRTY	[1BA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EC, 0x0061 };
    uint32_t const ces[9] = { 0x1BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_455)
{
    // 102EC 0041;	
    // (êã¨) COPTIC EPACT NUMBER THIRTY	[1BA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102EC, 0x0041 };
    uint32_t const ces[9] = { 0x1BA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_456)
{
    // 102EC 0062;	
    // (êã¨) COPTIC EPACT NUMBER THIRTY	[1BA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EC, 0x0062 };
    uint32_t const ces[9] = { 0x1BA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_457)
{
    // 102ED 0021;	
    // (êã≠) COPTIC EPACT NUMBER FORTY	[1BA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102ED, 0x0021 };
    uint32_t const ces[9] = { 0x1BA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_458)
{
    // 102ED 003F;	
    // (êã≠) COPTIC EPACT NUMBER FORTY	[1BA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102ED, 0x003F };
    uint32_t const ces[9] = { 0x1BA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_459)
{
    // 102ED 0061;	
    // (êã≠) COPTIC EPACT NUMBER FORTY	[1BA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102ED, 0x0061 };
    uint32_t const ces[9] = { 0x1BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_460)
{
    // 102ED 0041;	
    // (êã≠) COPTIC EPACT NUMBER FORTY	[1BA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102ED, 0x0041 };
    uint32_t const ces[9] = { 0x1BA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_461)
{
    // 102ED 0062;	
    // (êã≠) COPTIC EPACT NUMBER FORTY	[1BA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102ED, 0x0062 };
    uint32_t const ces[9] = { 0x1BA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_462)
{
    // 102EE 0021;	
    // (êãÆ) COPTIC EPACT NUMBER FIFTY	[1BA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EE, 0x0021 };
    uint32_t const ces[9] = { 0x1BA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_463)
{
    // 102EE 003F;	
    // (êãÆ) COPTIC EPACT NUMBER FIFTY	[1BA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EE, 0x003F };
    uint32_t const ces[9] = { 0x1BA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_464)
{
    // 102EE 0061;	
    // (êãÆ) COPTIC EPACT NUMBER FIFTY	[1BA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EE, 0x0061 };
    uint32_t const ces[9] = { 0x1BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_465)
{
    // 102EE 0041;	
    // (êãÆ) COPTIC EPACT NUMBER FIFTY	[1BA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102EE, 0x0041 };
    uint32_t const ces[9] = { 0x1BA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_466)
{
    // 102EE 0062;	
    // (êãÆ) COPTIC EPACT NUMBER FIFTY	[1BA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EE, 0x0062 };
    uint32_t const ces[9] = { 0x1BA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_467)
{
    // 102EF 0021;	
    // (êãØ) COPTIC EPACT NUMBER SIXTY	[1BA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EF, 0x0021 };
    uint32_t const ces[9] = { 0x1BA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_468)
{
    // 102EF 003F;	
    // (êãØ) COPTIC EPACT NUMBER SIXTY	[1BA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EF, 0x003F };
    uint32_t const ces[9] = { 0x1BA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_469)
{
    // 102EF 0061;	
    // (êãØ) COPTIC EPACT NUMBER SIXTY	[1BA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EF, 0x0061 };
    uint32_t const ces[9] = { 0x1BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_470)
{
    // 102EF 0041;	
    // (êãØ) COPTIC EPACT NUMBER SIXTY	[1BA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102EF, 0x0041 };
    uint32_t const ces[9] = { 0x1BA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_471)
{
    // 102EF 0062;	
    // (êãØ) COPTIC EPACT NUMBER SIXTY	[1BA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102EF, 0x0062 };
    uint32_t const ces[9] = { 0x1BA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_472)
{
    // 102F0 0021;	
    // (êã∞) COPTIC EPACT NUMBER SEVENTY	[1BA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F0, 0x0021 };
    uint32_t const ces[9] = { 0x1BA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_473)
{
    // 102F0 003F;	
    // (êã∞) COPTIC EPACT NUMBER SEVENTY	[1BA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F0, 0x003F };
    uint32_t const ces[9] = { 0x1BA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_474)
{
    // 102F0 0061;	
    // (êã∞) COPTIC EPACT NUMBER SEVENTY	[1BA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F0, 0x0061 };
    uint32_t const ces[9] = { 0x1BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_475)
{
    // 102F0 0041;	
    // (êã∞) COPTIC EPACT NUMBER SEVENTY	[1BA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F0, 0x0041 };
    uint32_t const ces[9] = { 0x1BA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_476)
{
    // 102F0 0062;	
    // (êã∞) COPTIC EPACT NUMBER SEVENTY	[1BA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F0, 0x0062 };
    uint32_t const ces[9] = { 0x1BA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_477)
{
    // 102F1 0021;	
    // (êã±) COPTIC EPACT NUMBER EIGHTY	[1BA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F1, 0x0021 };
    uint32_t const ces[9] = { 0x1BA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_478)
{
    // 102F1 003F;	
    // (êã±) COPTIC EPACT NUMBER EIGHTY	[1BA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F1, 0x003F };
    uint32_t const ces[9] = { 0x1BA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_479)
{
    // 102F1 0061;	
    // (êã±) COPTIC EPACT NUMBER EIGHTY	[1BA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F1, 0x0061 };
    uint32_t const ces[9] = { 0x1BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_480)
{
    // 102F1 0041;	
    // (êã±) COPTIC EPACT NUMBER EIGHTY	[1BA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F1, 0x0041 };
    uint32_t const ces[9] = { 0x1BA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_481)
{
    // 102F1 0062;	
    // (êã±) COPTIC EPACT NUMBER EIGHTY	[1BA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F1, 0x0062 };
    uint32_t const ces[9] = { 0x1BA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_482)
{
    // 102F2 0021;	
    // (êã≤) COPTIC EPACT NUMBER NINETY	[1BA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F2, 0x0021 };
    uint32_t const ces[9] = { 0x1BA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_483)
{
    // 102F2 003F;	
    // (êã≤) COPTIC EPACT NUMBER NINETY	[1BA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F2, 0x003F };
    uint32_t const ces[9] = { 0x1BA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_484)
{
    // 102F2 0061;	
    // (êã≤) COPTIC EPACT NUMBER NINETY	[1BA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F2, 0x0061 };
    uint32_t const ces[9] = { 0x1BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_485)
{
    // 102F2 0041;	
    // (êã≤) COPTIC EPACT NUMBER NINETY	[1BA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F2, 0x0041 };
    uint32_t const ces[9] = { 0x1BA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_486)
{
    // 102F2 0062;	
    // (êã≤) COPTIC EPACT NUMBER NINETY	[1BA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F2, 0x0062 };
    uint32_t const ces[9] = { 0x1BA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_487)
{
    // 102F3 0021;	
    // (êã≥) COPTIC EPACT NUMBER ONE HUNDRED	[1BA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F3, 0x0021 };
    uint32_t const ces[9] = { 0x1BA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_488)
{
    // 102F3 003F;	
    // (êã≥) COPTIC EPACT NUMBER ONE HUNDRED	[1BA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F3, 0x003F };
    uint32_t const ces[9] = { 0x1BA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_489)
{
    // 102F3 0061;	
    // (êã≥) COPTIC EPACT NUMBER ONE HUNDRED	[1BA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F3, 0x0061 };
    uint32_t const ces[9] = { 0x1BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_490)
{
    // 102F3 0041;	
    // (êã≥) COPTIC EPACT NUMBER ONE HUNDRED	[1BA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F3, 0x0041 };
    uint32_t const ces[9] = { 0x1BA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_491)
{
    // 102F3 0062;	
    // (êã≥) COPTIC EPACT NUMBER ONE HUNDRED	[1BA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F3, 0x0062 };
    uint32_t const ces[9] = { 0x1BA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_492)
{
    // 102F4 0021;	
    // (êã¥) COPTIC EPACT NUMBER TWO HUNDRED	[1BA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F4, 0x0021 };
    uint32_t const ces[9] = { 0x1BA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_493)
{
    // 102F4 003F;	
    // (êã¥) COPTIC EPACT NUMBER TWO HUNDRED	[1BA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F4, 0x003F };
    uint32_t const ces[9] = { 0x1BA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_494)
{
    // 102F4 0061;	
    // (êã¥) COPTIC EPACT NUMBER TWO HUNDRED	[1BA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F4, 0x0061 };
    uint32_t const ces[9] = { 0x1BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_495)
{
    // 102F4 0041;	
    // (êã¥) COPTIC EPACT NUMBER TWO HUNDRED	[1BA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F4, 0x0041 };
    uint32_t const ces[9] = { 0x1BA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_496)
{
    // 102F4 0062;	
    // (êã¥) COPTIC EPACT NUMBER TWO HUNDRED	[1BA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F4, 0x0062 };
    uint32_t const ces[9] = { 0x1BA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_497)
{
    // 102F5 0021;	
    // (êãµ) COPTIC EPACT NUMBER THREE HUNDRED	[1BA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F5, 0x0021 };
    uint32_t const ces[9] = { 0x1BA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_498)
{
    // 102F5 003F;	
    // (êãµ) COPTIC EPACT NUMBER THREE HUNDRED	[1BA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F5, 0x003F };
    uint32_t const ces[9] = { 0x1BA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_077_499)
{
    // 102F5 0061;	
    // (êãµ) COPTIC EPACT NUMBER THREE HUNDRED	[1BA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F5, 0x0061 };
    uint32_t const ces[9] = { 0x1BA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

