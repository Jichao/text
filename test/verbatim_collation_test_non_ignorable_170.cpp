// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_170_000)
{
    // 0C2E 0041;	
    // (మ) TELUGU LETTER MA	[288F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2E, 0x0041 };
    uint32_t const ces[9] = { 0x288F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_001)
{
    // 0C2E 0062;	
    // (మ) TELUGU LETTER MA	[288F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2E, 0x0062 };
    uint32_t const ces[9] = { 0x288F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_002)
{
    // 0C2F 0021;	
    // (య) TELUGU LETTER YA	[2890 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2F, 0x0021 };
    uint32_t const ces[9] = { 0x2890, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_003)
{
    // 0C2F 003F;	
    // (య) TELUGU LETTER YA	[2890 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2F, 0x003F };
    uint32_t const ces[9] = { 0x2890, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_004)
{
    // 0C2F 0061;	
    // (య) TELUGU LETTER YA	[2890 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2F, 0x0061 };
    uint32_t const ces[9] = { 0x2890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_005)
{
    // 0C2F 0041;	
    // (య) TELUGU LETTER YA	[2890 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2F, 0x0041 };
    uint32_t const ces[9] = { 0x2890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_006)
{
    // 0C2F 0062;	
    // (య) TELUGU LETTER YA	[2890 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2F, 0x0062 };
    uint32_t const ces[9] = { 0x2890, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_007)
{
    // 0C30 0021;	
    // (ర) TELUGU LETTER RA	[2891 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C30, 0x0021 };
    uint32_t const ces[9] = { 0x2891, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_008)
{
    // 0C30 003F;	
    // (ర) TELUGU LETTER RA	[2891 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C30, 0x003F };
    uint32_t const ces[9] = { 0x2891, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_009)
{
    // 0C30 0061;	
    // (ర) TELUGU LETTER RA	[2891 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C30, 0x0061 };
    uint32_t const ces[9] = { 0x2891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_010)
{
    // 0C30 0041;	
    // (ర) TELUGU LETTER RA	[2891 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C30, 0x0041 };
    uint32_t const ces[9] = { 0x2891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_011)
{
    // 0C30 0062;	
    // (ర) TELUGU LETTER RA	[2891 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C30, 0x0062 };
    uint32_t const ces[9] = { 0x2891, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_012)
{
    // 0C31 0021;	
    // (ఱ) TELUGU LETTER RRA	[2892 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C31, 0x0021 };
    uint32_t const ces[9] = { 0x2892, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_013)
{
    // 0C31 003F;	
    // (ఱ) TELUGU LETTER RRA	[2892 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C31, 0x003F };
    uint32_t const ces[9] = { 0x2892, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_014)
{
    // 0C31 0061;	
    // (ఱ) TELUGU LETTER RRA	[2892 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C31, 0x0061 };
    uint32_t const ces[9] = { 0x2892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_015)
{
    // 0C31 0041;	
    // (ఱ) TELUGU LETTER RRA	[2892 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C31, 0x0041 };
    uint32_t const ces[9] = { 0x2892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_016)
{
    // 0C31 0062;	
    // (ఱ) TELUGU LETTER RRA	[2892 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C31, 0x0062 };
    uint32_t const ces[9] = { 0x2892, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_017)
{
    // 0C32 0021;	
    // (ల) TELUGU LETTER LA	[2893 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C32, 0x0021 };
    uint32_t const ces[9] = { 0x2893, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_018)
{
    // 0C32 003F;	
    // (ల) TELUGU LETTER LA	[2893 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C32, 0x003F };
    uint32_t const ces[9] = { 0x2893, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_019)
{
    // 0C32 0061;	
    // (ల) TELUGU LETTER LA	[2893 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C32, 0x0061 };
    uint32_t const ces[9] = { 0x2893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_020)
{
    // 0C32 0041;	
    // (ల) TELUGU LETTER LA	[2893 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C32, 0x0041 };
    uint32_t const ces[9] = { 0x2893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_021)
{
    // 0C32 0062;	
    // (ల) TELUGU LETTER LA	[2893 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C32, 0x0062 };
    uint32_t const ces[9] = { 0x2893, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_022)
{
    // 0C35 0021;	
    // (వ) TELUGU LETTER VA	[2894 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C35, 0x0021 };
    uint32_t const ces[9] = { 0x2894, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_023)
{
    // 0C35 003F;	
    // (వ) TELUGU LETTER VA	[2894 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C35, 0x003F };
    uint32_t const ces[9] = { 0x2894, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_024)
{
    // 0C35 0061;	
    // (వ) TELUGU LETTER VA	[2894 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C35, 0x0061 };
    uint32_t const ces[9] = { 0x2894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_025)
{
    // 0C35 0041;	
    // (వ) TELUGU LETTER VA	[2894 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C35, 0x0041 };
    uint32_t const ces[9] = { 0x2894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_026)
{
    // 0C35 0062;	
    // (వ) TELUGU LETTER VA	[2894 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C35, 0x0062 };
    uint32_t const ces[9] = { 0x2894, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_027)
{
    // 0C36 0021;	
    // (శ) TELUGU LETTER SHA	[2895 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C36, 0x0021 };
    uint32_t const ces[9] = { 0x2895, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_028)
{
    // 0C36 003F;	
    // (శ) TELUGU LETTER SHA	[2895 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C36, 0x003F };
    uint32_t const ces[9] = { 0x2895, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_029)
{
    // 0C36 0061;	
    // (శ) TELUGU LETTER SHA	[2895 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C36, 0x0061 };
    uint32_t const ces[9] = { 0x2895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_030)
{
    // 0C36 0041;	
    // (శ) TELUGU LETTER SHA	[2895 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C36, 0x0041 };
    uint32_t const ces[9] = { 0x2895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_031)
{
    // 0C36 0062;	
    // (శ) TELUGU LETTER SHA	[2895 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C36, 0x0062 };
    uint32_t const ces[9] = { 0x2895, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_032)
{
    // 0C37 0021;	
    // (ష) TELUGU LETTER SSA	[2896 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C37, 0x0021 };
    uint32_t const ces[9] = { 0x2896, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_033)
{
    // 0C37 003F;	
    // (ష) TELUGU LETTER SSA	[2896 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C37, 0x003F };
    uint32_t const ces[9] = { 0x2896, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_034)
{
    // 0C37 0061;	
    // (ష) TELUGU LETTER SSA	[2896 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C37, 0x0061 };
    uint32_t const ces[9] = { 0x2896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_035)
{
    // 0C37 0041;	
    // (ష) TELUGU LETTER SSA	[2896 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C37, 0x0041 };
    uint32_t const ces[9] = { 0x2896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_036)
{
    // 0C37 0062;	
    // (ష) TELUGU LETTER SSA	[2896 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C37, 0x0062 };
    uint32_t const ces[9] = { 0x2896, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_037)
{
    // 0C38 0021;	
    // (స) TELUGU LETTER SA	[2897 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C38, 0x0021 };
    uint32_t const ces[9] = { 0x2897, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_038)
{
    // 0C38 003F;	
    // (స) TELUGU LETTER SA	[2897 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C38, 0x003F };
    uint32_t const ces[9] = { 0x2897, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_039)
{
    // 0C38 0061;	
    // (స) TELUGU LETTER SA	[2897 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C38, 0x0061 };
    uint32_t const ces[9] = { 0x2897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_040)
{
    // 0C38 0041;	
    // (స) TELUGU LETTER SA	[2897 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C38, 0x0041 };
    uint32_t const ces[9] = { 0x2897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_041)
{
    // 0C38 0062;	
    // (స) TELUGU LETTER SA	[2897 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C38, 0x0062 };
    uint32_t const ces[9] = { 0x2897, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_042)
{
    // 0C39 0021;	
    // (హ) TELUGU LETTER HA	[2898 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C39, 0x0021 };
    uint32_t const ces[9] = { 0x2898, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_043)
{
    // 0C39 003F;	
    // (హ) TELUGU LETTER HA	[2898 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C39, 0x003F };
    uint32_t const ces[9] = { 0x2898, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_044)
{
    // 0C39 0061;	
    // (హ) TELUGU LETTER HA	[2898 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C39, 0x0061 };
    uint32_t const ces[9] = { 0x2898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_045)
{
    // 0C39 0041;	
    // (హ) TELUGU LETTER HA	[2898 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C39, 0x0041 };
    uint32_t const ces[9] = { 0x2898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_046)
{
    // 0C39 0062;	
    // (హ) TELUGU LETTER HA	[2898 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C39, 0x0062 };
    uint32_t const ces[9] = { 0x2898, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_047)
{
    // 0C33 0021;	
    // (ళ) TELUGU LETTER LLA	[2899 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C33, 0x0021 };
    uint32_t const ces[9] = { 0x2899, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_048)
{
    // 0C33 003F;	
    // (ళ) TELUGU LETTER LLA	[2899 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C33, 0x003F };
    uint32_t const ces[9] = { 0x2899, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_049)
{
    // 0C33 0061;	
    // (ళ) TELUGU LETTER LLA	[2899 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C33, 0x0061 };
    uint32_t const ces[9] = { 0x2899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_050)
{
    // 0C33 0041;	
    // (ళ) TELUGU LETTER LLA	[2899 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C33, 0x0041 };
    uint32_t const ces[9] = { 0x2899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_051)
{
    // 0C33 0062;	
    // (ళ) TELUGU LETTER LLA	[2899 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C33, 0x0062 };
    uint32_t const ces[9] = { 0x2899, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_052)
{
    // 0C34 0021;	
    // (ఴ) TELUGU LETTER LLLA	[289A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C34, 0x0021 };
    uint32_t const ces[9] = { 0x289A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_053)
{
    // 0C34 003F;	
    // (ఴ) TELUGU LETTER LLLA	[289A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C34, 0x003F };
    uint32_t const ces[9] = { 0x289A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_054)
{
    // 0C34 0061;	
    // (ఴ) TELUGU LETTER LLLA	[289A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C34, 0x0061 };
    uint32_t const ces[9] = { 0x289A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_055)
{
    // 0C34 0041;	
    // (ఴ) TELUGU LETTER LLLA	[289A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C34, 0x0041 };
    uint32_t const ces[9] = { 0x289A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_056)
{
    // 0C34 0062;	
    // (ఴ) TELUGU LETTER LLLA	[289A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C34, 0x0062 };
    uint32_t const ces[9] = { 0x289A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_057)
{
    // 0C5A 0021;	
    // (ౚ) TELUGU LETTER RRRA	[289B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C5A, 0x0021 };
    uint32_t const ces[9] = { 0x289B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_058)
{
    // 0C5A 003F;	
    // (ౚ) TELUGU LETTER RRRA	[289B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C5A, 0x003F };
    uint32_t const ces[9] = { 0x289B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_059)
{
    // 0C5A 0061;	
    // (ౚ) TELUGU LETTER RRRA	[289B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C5A, 0x0061 };
    uint32_t const ces[9] = { 0x289B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_060)
{
    // 0C5A 0041;	
    // (ౚ) TELUGU LETTER RRRA	[289B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C5A, 0x0041 };
    uint32_t const ces[9] = { 0x289B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_061)
{
    // 0C5A 0062;	
    // (ౚ) TELUGU LETTER RRRA	[289B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C5A, 0x0062 };
    uint32_t const ces[9] = { 0x289B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_062)
{
    // 0C3D 0021;	
    // (ఽ) TELUGU SIGN AVAGRAHA	[289C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3D, 0x0021 };
    uint32_t const ces[9] = { 0x289C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_063)
{
    // 0C3D 003F;	
    // (ఽ) TELUGU SIGN AVAGRAHA	[289C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3D, 0x003F };
    uint32_t const ces[9] = { 0x289C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_064)
{
    // 0C3D 0061;	
    // (ఽ) TELUGU SIGN AVAGRAHA	[289C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3D, 0x0061 };
    uint32_t const ces[9] = { 0x289C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_065)
{
    // 0C3D 0041;	
    // (ఽ) TELUGU SIGN AVAGRAHA	[289C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C3D, 0x0041 };
    uint32_t const ces[9] = { 0x289C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_066)
{
    // 0C3D 0062;	
    // (ఽ) TELUGU SIGN AVAGRAHA	[289C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3D, 0x0062 };
    uint32_t const ces[9] = { 0x289C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_067)
{
    // 0C3E 0021;	
    // (ా) TELUGU VOWEL SIGN AA	[289D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3E, 0x0021 };
    uint32_t const ces[9] = { 0x289D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_068)
{
    // 0C3E 003F;	
    // (ా) TELUGU VOWEL SIGN AA	[289D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3E, 0x003F };
    uint32_t const ces[9] = { 0x289D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_069)
{
    // 0C3E 0061;	
    // (ా) TELUGU VOWEL SIGN AA	[289D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3E, 0x0061 };
    uint32_t const ces[9] = { 0x289D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_070)
{
    // 0C3E 0041;	
    // (ా) TELUGU VOWEL SIGN AA	[289D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C3E, 0x0041 };
    uint32_t const ces[9] = { 0x289D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_071)
{
    // 0C3E 0062;	
    // (ా) TELUGU VOWEL SIGN AA	[289D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3E, 0x0062 };
    uint32_t const ces[9] = { 0x289D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_072)
{
    // 0C3F 0021;	
    // (ి) TELUGU VOWEL SIGN I	[289E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3F, 0x0021 };
    uint32_t const ces[9] = { 0x289E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_073)
{
    // 0C3F 003F;	
    // (ి) TELUGU VOWEL SIGN I	[289E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3F, 0x003F };
    uint32_t const ces[9] = { 0x289E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_074)
{
    // 0C3F 0061;	
    // (ి) TELUGU VOWEL SIGN I	[289E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3F, 0x0061 };
    uint32_t const ces[9] = { 0x289E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_075)
{
    // 0C3F 0041;	
    // (ి) TELUGU VOWEL SIGN I	[289E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C3F, 0x0041 };
    uint32_t const ces[9] = { 0x289E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_076)
{
    // 0C3F 0062;	
    // (ి) TELUGU VOWEL SIGN I	[289E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C3F, 0x0062 };
    uint32_t const ces[9] = { 0x289E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_077)
{
    // 0C40 0021;	
    // (ీ) TELUGU VOWEL SIGN II	[289F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C40, 0x0021 };
    uint32_t const ces[9] = { 0x289F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_078)
{
    // 0C40 003F;	
    // (ీ) TELUGU VOWEL SIGN II	[289F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C40, 0x003F };
    uint32_t const ces[9] = { 0x289F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_079)
{
    // 0C40 0061;	
    // (ీ) TELUGU VOWEL SIGN II	[289F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C40, 0x0061 };
    uint32_t const ces[9] = { 0x289F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_080)
{
    // 0C40 0041;	
    // (ీ) TELUGU VOWEL SIGN II	[289F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C40, 0x0041 };
    uint32_t const ces[9] = { 0x289F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_081)
{
    // 0C40 0062;	
    // (ీ) TELUGU VOWEL SIGN II	[289F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C40, 0x0062 };
    uint32_t const ces[9] = { 0x289F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_082)
{
    // 0C41 0021;	
    // (ు) TELUGU VOWEL SIGN U	[28A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C41, 0x0021 };
    uint32_t const ces[9] = { 0x28A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_083)
{
    // 0C41 003F;	
    // (ు) TELUGU VOWEL SIGN U	[28A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C41, 0x003F };
    uint32_t const ces[9] = { 0x28A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_084)
{
    // 0C41 0061;	
    // (ు) TELUGU VOWEL SIGN U	[28A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C41, 0x0061 };
    uint32_t const ces[9] = { 0x28A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_085)
{
    // 0C41 0041;	
    // (ు) TELUGU VOWEL SIGN U	[28A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C41, 0x0041 };
    uint32_t const ces[9] = { 0x28A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_086)
{
    // 0C41 0062;	
    // (ు) TELUGU VOWEL SIGN U	[28A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C41, 0x0062 };
    uint32_t const ces[9] = { 0x28A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_087)
{
    // 0C42 0021;	
    // (ూ) TELUGU VOWEL SIGN UU	[28A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C42, 0x0021 };
    uint32_t const ces[9] = { 0x28A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_088)
{
    // 0C42 003F;	
    // (ూ) TELUGU VOWEL SIGN UU	[28A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C42, 0x003F };
    uint32_t const ces[9] = { 0x28A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_089)
{
    // 0C42 0061;	
    // (ూ) TELUGU VOWEL SIGN UU	[28A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C42, 0x0061 };
    uint32_t const ces[9] = { 0x28A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_090)
{
    // 0C42 0041;	
    // (ూ) TELUGU VOWEL SIGN UU	[28A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C42, 0x0041 };
    uint32_t const ces[9] = { 0x28A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_091)
{
    // 0C42 0062;	
    // (ూ) TELUGU VOWEL SIGN UU	[28A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C42, 0x0062 };
    uint32_t const ces[9] = { 0x28A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_092)
{
    // 0C43 0021;	
    // (ృ) TELUGU VOWEL SIGN VOCALIC R	[28A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C43, 0x0021 };
    uint32_t const ces[9] = { 0x28A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_093)
{
    // 0C43 003F;	
    // (ృ) TELUGU VOWEL SIGN VOCALIC R	[28A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C43, 0x003F };
    uint32_t const ces[9] = { 0x28A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_094)
{
    // 0C43 0061;	
    // (ృ) TELUGU VOWEL SIGN VOCALIC R	[28A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C43, 0x0061 };
    uint32_t const ces[9] = { 0x28A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_095)
{
    // 0C43 0041;	
    // (ృ) TELUGU VOWEL SIGN VOCALIC R	[28A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C43, 0x0041 };
    uint32_t const ces[9] = { 0x28A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_096)
{
    // 0C43 0062;	
    // (ృ) TELUGU VOWEL SIGN VOCALIC R	[28A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C43, 0x0062 };
    uint32_t const ces[9] = { 0x28A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_097)
{
    // 0C44 0021;	
    // (ౄ) TELUGU VOWEL SIGN VOCALIC RR	[28A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C44, 0x0021 };
    uint32_t const ces[9] = { 0x28A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_098)
{
    // 0C44 003F;	
    // (ౄ) TELUGU VOWEL SIGN VOCALIC RR	[28A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C44, 0x003F };
    uint32_t const ces[9] = { 0x28A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_099)
{
    // 0C44 0061;	
    // (ౄ) TELUGU VOWEL SIGN VOCALIC RR	[28A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C44, 0x0061 };
    uint32_t const ces[9] = { 0x28A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_100)
{
    // 0C44 0041;	
    // (ౄ) TELUGU VOWEL SIGN VOCALIC RR	[28A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C44, 0x0041 };
    uint32_t const ces[9] = { 0x28A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_101)
{
    // 0C44 0062;	
    // (ౄ) TELUGU VOWEL SIGN VOCALIC RR	[28A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C44, 0x0062 };
    uint32_t const ces[9] = { 0x28A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_102)
{
    // 0C62 0021;	
    // (ౢ) TELUGU VOWEL SIGN VOCALIC L	[28A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C62, 0x0021 };
    uint32_t const ces[9] = { 0x28A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_103)
{
    // 0C62 003F;	
    // (ౢ) TELUGU VOWEL SIGN VOCALIC L	[28A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C62, 0x003F };
    uint32_t const ces[9] = { 0x28A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_104)
{
    // 0C62 0061;	
    // (ౢ) TELUGU VOWEL SIGN VOCALIC L	[28A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C62, 0x0061 };
    uint32_t const ces[9] = { 0x28A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_105)
{
    // 0C62 0041;	
    // (ౢ) TELUGU VOWEL SIGN VOCALIC L	[28A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C62, 0x0041 };
    uint32_t const ces[9] = { 0x28A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_106)
{
    // 0C62 0062;	
    // (ౢ) TELUGU VOWEL SIGN VOCALIC L	[28A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C62, 0x0062 };
    uint32_t const ces[9] = { 0x28A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_107)
{
    // 0C63 0021;	
    // (ౣ) TELUGU VOWEL SIGN VOCALIC LL	[28A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C63, 0x0021 };
    uint32_t const ces[9] = { 0x28A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_108)
{
    // 0C63 003F;	
    // (ౣ) TELUGU VOWEL SIGN VOCALIC LL	[28A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C63, 0x003F };
    uint32_t const ces[9] = { 0x28A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_109)
{
    // 0C63 0061;	
    // (ౣ) TELUGU VOWEL SIGN VOCALIC LL	[28A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C63, 0x0061 };
    uint32_t const ces[9] = { 0x28A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_110)
{
    // 0C63 0041;	
    // (ౣ) TELUGU VOWEL SIGN VOCALIC LL	[28A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C63, 0x0041 };
    uint32_t const ces[9] = { 0x28A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_111)
{
    // 0C63 0062;	
    // (ౣ) TELUGU VOWEL SIGN VOCALIC LL	[28A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C63, 0x0062 };
    uint32_t const ces[9] = { 0x28A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_112)
{
    // 0C46 0021;	
    // (ె) TELUGU VOWEL SIGN E	[28A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C46, 0x0021 };
    uint32_t const ces[9] = { 0x28A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_113)
{
    // 0C46 003F;	
    // (ె) TELUGU VOWEL SIGN E	[28A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C46, 0x003F };
    uint32_t const ces[9] = { 0x28A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_114)
{
    // 0C46 0061;	
    // (ె) TELUGU VOWEL SIGN E	[28A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C46, 0x0061 };
    uint32_t const ces[9] = { 0x28A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_115)
{
    // 0C46 0041;	
    // (ె) TELUGU VOWEL SIGN E	[28A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C46, 0x0041 };
    uint32_t const ces[9] = { 0x28A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_116)
{
    // 0C46 0062;	
    // (ె) TELUGU VOWEL SIGN E	[28A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C46, 0x0062 };
    uint32_t const ces[9] = { 0x28A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_117)
{
    // 0C46 0001 0C56 0061;	
    // (ె'\u0001'ౖ) TELUGU VOWEL SIGN E, <START OF HEADING>, TELUGU AI LENGTH MARK	[28A6 28AE 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0C46, 0x0001, 0x0C56, 0x0061 };
    uint32_t const ces[12] = { 0x28A6, 0x28AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_118)
{
    // 0C47 0021;	
    // (ే) TELUGU VOWEL SIGN EE	[28A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C47, 0x0021 };
    uint32_t const ces[9] = { 0x28A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_119)
{
    // 0C47 003F;	
    // (ే) TELUGU VOWEL SIGN EE	[28A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C47, 0x003F };
    uint32_t const ces[9] = { 0x28A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_120)
{
    // 0C47 0061;	
    // (ే) TELUGU VOWEL SIGN EE	[28A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C47, 0x0061 };
    uint32_t const ces[9] = { 0x28A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_121)
{
    // 0C47 0041;	
    // (ే) TELUGU VOWEL SIGN EE	[28A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C47, 0x0041 };
    uint32_t const ces[9] = { 0x28A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_122)
{
    // 0C47 0062;	
    // (ే) TELUGU VOWEL SIGN EE	[28A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C47, 0x0062 };
    uint32_t const ces[9] = { 0x28A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_123)
{
    // 0C46 0334 0C56;	
    // (ె̴) TELUGU VOWEL SIGN E, COMBINING TILDE OVERLAY	[28A8 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0334, 0x0C56 };
    uint32_t const ces[8] = { 0x28A8, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_124)
{
    // 0C46 0C56 0334;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x0334 };
    uint32_t const ces[8] = { 0x28A8, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_125)
{
    // 0C48 0334;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0C48, 0x0334 };
    uint32_t const ces[8] = { 0x28A8, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_126)
{
    // 0C46 0C56 0021;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x0021 };
    uint32_t const ces[9] = { 0x28A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_127)
{
    // 0C48 0021;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C48, 0x0021 };
    uint32_t const ces[9] = { 0x28A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_128)
{
    // 0C46 0C56 003F;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x003F };
    uint32_t const ces[9] = { 0x28A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_129)
{
    // 0C48 003F;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C48, 0x003F };
    uint32_t const ces[9] = { 0x28A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_130)
{
    // 0C46 0C56 0061;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x0061 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_131)
{
    // 0C48 0061;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C48, 0x0061 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_132)
{
    // 0C46 0591 0C56 0061;	
    // (ై֑) TELUGU VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TELUGU AI LENGTH MARK	[28A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0C46, 0x0591, 0x0C56, 0x0061 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_133)
{
    // 0C46 1D165 0C56 0061;	
    // (ై𝅥) TELUGU VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TELUGU AI LENGTH MARK	[28A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0C46, 0x1D165, 0x0C56, 0x0061 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_134)
{
    // 0C46 0C56 0041;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x0041 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_135)
{
    // 0C48 0041;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C48, 0x0041 };
    uint32_t const ces[9] = { 0x28A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_136)
{
    // 0C46 0C56 0062;	
    // (ై) TELUGU VOWEL SIGN E, TELUGU AI LENGTH MARK	[28A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0C46, 0x0C56, 0x0062 };
    uint32_t const ces[9] = { 0x28A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_137)
{
    // 0C48 0062;	
    // (ై) TELUGU VOWEL SIGN AI	[28A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C48, 0x0062 };
    uint32_t const ces[9] = { 0x28A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_138)
{
    // 0C4A 0021;	
    // (ొ) TELUGU VOWEL SIGN O	[28A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4A, 0x0021 };
    uint32_t const ces[9] = { 0x28A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_139)
{
    // 0C4A 003F;	
    // (ొ) TELUGU VOWEL SIGN O	[28A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4A, 0x003F };
    uint32_t const ces[9] = { 0x28A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_140)
{
    // 0C4A 0061;	
    // (ొ) TELUGU VOWEL SIGN O	[28A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4A, 0x0061 };
    uint32_t const ces[9] = { 0x28A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_141)
{
    // 0C4A 0041;	
    // (ొ) TELUGU VOWEL SIGN O	[28A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C4A, 0x0041 };
    uint32_t const ces[9] = { 0x28A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_142)
{
    // 0C4A 0062;	
    // (ొ) TELUGU VOWEL SIGN O	[28A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4A, 0x0062 };
    uint32_t const ces[9] = { 0x28A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_143)
{
    // 0C4B 0021;	
    // (ో) TELUGU VOWEL SIGN OO	[28AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4B, 0x0021 };
    uint32_t const ces[9] = { 0x28AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_144)
{
    // 0C4B 003F;	
    // (ో) TELUGU VOWEL SIGN OO	[28AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4B, 0x003F };
    uint32_t const ces[9] = { 0x28AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_145)
{
    // 0C4B 0061;	
    // (ో) TELUGU VOWEL SIGN OO	[28AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4B, 0x0061 };
    uint32_t const ces[9] = { 0x28AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_146)
{
    // 0C4B 0041;	
    // (ో) TELUGU VOWEL SIGN OO	[28AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C4B, 0x0041 };
    uint32_t const ces[9] = { 0x28AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_147)
{
    // 0C4B 0062;	
    // (ో) TELUGU VOWEL SIGN OO	[28AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4B, 0x0062 };
    uint32_t const ces[9] = { 0x28AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_148)
{
    // 0C4C 0021;	
    // (ౌ) TELUGU VOWEL SIGN AU	[28AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4C, 0x0021 };
    uint32_t const ces[9] = { 0x28AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_149)
{
    // 0C4C 003F;	
    // (ౌ) TELUGU VOWEL SIGN AU	[28AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4C, 0x003F };
    uint32_t const ces[9] = { 0x28AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_150)
{
    // 0C4C 0061;	
    // (ౌ) TELUGU VOWEL SIGN AU	[28AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4C, 0x0061 };
    uint32_t const ces[9] = { 0x28AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_151)
{
    // 0C4C 0041;	
    // (ౌ) TELUGU VOWEL SIGN AU	[28AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C4C, 0x0041 };
    uint32_t const ces[9] = { 0x28AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_152)
{
    // 0C4C 0062;	
    // (ౌ) TELUGU VOWEL SIGN AU	[28AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4C, 0x0062 };
    uint32_t const ces[9] = { 0x28AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_153)
{
    // 0334 0C4D;	
    // (్) TELUGU SIGN VIRAMA	[28AC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0C4D };
    uint32_t const ces[8] = { 0x28AC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_154)
{
    // 0C4D 0334;	
    // (్) TELUGU SIGN VIRAMA	[28AC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4D, 0x0334 };
    uint32_t const ces[8] = { 0x28AC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_155)
{
    // 0C4D 0021;	
    // (్) TELUGU SIGN VIRAMA	[28AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4D, 0x0021 };
    uint32_t const ces[9] = { 0x28AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_156)
{
    // 0C4D 003F;	
    // (్) TELUGU SIGN VIRAMA	[28AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4D, 0x003F };
    uint32_t const ces[9] = { 0x28AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_157)
{
    // 0C4D 0061;	
    // (్) TELUGU SIGN VIRAMA	[28AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4D, 0x0061 };
    uint32_t const ces[9] = { 0x28AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_158)
{
    // 0C4D 0041;	
    // (్) TELUGU SIGN VIRAMA	[28AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C4D, 0x0041 };
    uint32_t const ces[9] = { 0x28AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_159)
{
    // 0C4D 0062;	
    // (్) TELUGU SIGN VIRAMA	[28AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C4D, 0x0062 };
    uint32_t const ces[9] = { 0x28AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_160)
{
    // 0334 0C55;	
    // (ౕ) TELUGU LENGTH MARK	[28AD | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0C55 };
    uint32_t const ces[8] = { 0x28AD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_161)
{
    // 0C55 0334;	
    // (ౕ) TELUGU LENGTH MARK	[28AD | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C55, 0x0334 };
    uint32_t const ces[8] = { 0x28AD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_162)
{
    // 0C55 0021;	
    // (ౕ) TELUGU LENGTH MARK	[28AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C55, 0x0021 };
    uint32_t const ces[9] = { 0x28AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_163)
{
    // 0C55 003F;	
    // (ౕ) TELUGU LENGTH MARK	[28AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C55, 0x003F };
    uint32_t const ces[9] = { 0x28AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_164)
{
    // 0C55 0061;	
    // (ౕ) TELUGU LENGTH MARK	[28AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C55, 0x0061 };
    uint32_t const ces[9] = { 0x28AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_165)
{
    // 0C55 0041;	
    // (ౕ) TELUGU LENGTH MARK	[28AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C55, 0x0041 };
    uint32_t const ces[9] = { 0x28AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_166)
{
    // 0C55 0062;	
    // (ౕ) TELUGU LENGTH MARK	[28AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C55, 0x0062 };
    uint32_t const ces[9] = { 0x28AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_167)
{
    // 0334 0C56;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0C56 };
    uint32_t const ces[8] = { 0x28AE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_168)
{
    // 0C56 0334;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C56, 0x0334 };
    uint32_t const ces[8] = { 0x28AE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_169)
{
    // 0C56 0021;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C56, 0x0021 };
    uint32_t const ces[9] = { 0x28AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_170)
{
    // 0C56 003F;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C56, 0x003F };
    uint32_t const ces[9] = { 0x28AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_171)
{
    // 0C56 0061;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C56, 0x0061 };
    uint32_t const ces[9] = { 0x28AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_172)
{
    // 0C56 0041;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C56, 0x0041 };
    uint32_t const ces[9] = { 0x28AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_173)
{
    // 0C56 0062;	
    // (ౖ) TELUGU AI LENGTH MARK	[28AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C56, 0x0062 };
    uint32_t const ces[9] = { 0x28AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_174)
{
    // 0C85 0021;	
    // (ಅ) KANNADA LETTER A	[28AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C85, 0x0021 };
    uint32_t const ces[9] = { 0x28AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_175)
{
    // 0C85 003F;	
    // (ಅ) KANNADA LETTER A	[28AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C85, 0x003F };
    uint32_t const ces[9] = { 0x28AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_176)
{
    // 0C85 0061;	
    // (ಅ) KANNADA LETTER A	[28AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C85, 0x0061 };
    uint32_t const ces[9] = { 0x28AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_177)
{
    // 0C85 0041;	
    // (ಅ) KANNADA LETTER A	[28AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C85, 0x0041 };
    uint32_t const ces[9] = { 0x28AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_178)
{
    // 0C85 0062;	
    // (ಅ) KANNADA LETTER A	[28AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C85, 0x0062 };
    uint32_t const ces[9] = { 0x28AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_179)
{
    // 0C86 0021;	
    // (ಆ) KANNADA LETTER AA	[28B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C86, 0x0021 };
    uint32_t const ces[9] = { 0x28B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_180)
{
    // 0C86 003F;	
    // (ಆ) KANNADA LETTER AA	[28B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C86, 0x003F };
    uint32_t const ces[9] = { 0x28B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_181)
{
    // 0C86 0061;	
    // (ಆ) KANNADA LETTER AA	[28B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C86, 0x0061 };
    uint32_t const ces[9] = { 0x28B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_182)
{
    // 0C86 0041;	
    // (ಆ) KANNADA LETTER AA	[28B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C86, 0x0041 };
    uint32_t const ces[9] = { 0x28B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_183)
{
    // 0C86 0062;	
    // (ಆ) KANNADA LETTER AA	[28B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C86, 0x0062 };
    uint32_t const ces[9] = { 0x28B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_184)
{
    // 0C87 0021;	
    // (ಇ) KANNADA LETTER I	[28B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C87, 0x0021 };
    uint32_t const ces[9] = { 0x28B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_185)
{
    // 0C87 003F;	
    // (ಇ) KANNADA LETTER I	[28B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C87, 0x003F };
    uint32_t const ces[9] = { 0x28B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_186)
{
    // 0C87 0061;	
    // (ಇ) KANNADA LETTER I	[28B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C87, 0x0061 };
    uint32_t const ces[9] = { 0x28B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_187)
{
    // 0C87 0041;	
    // (ಇ) KANNADA LETTER I	[28B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C87, 0x0041 };
    uint32_t const ces[9] = { 0x28B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_188)
{
    // 0C87 0062;	
    // (ಇ) KANNADA LETTER I	[28B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C87, 0x0062 };
    uint32_t const ces[9] = { 0x28B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_189)
{
    // 0C88 0021;	
    // (ಈ) KANNADA LETTER II	[28B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C88, 0x0021 };
    uint32_t const ces[9] = { 0x28B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_190)
{
    // 0C88 003F;	
    // (ಈ) KANNADA LETTER II	[28B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C88, 0x003F };
    uint32_t const ces[9] = { 0x28B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_191)
{
    // 0C88 0061;	
    // (ಈ) KANNADA LETTER II	[28B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C88, 0x0061 };
    uint32_t const ces[9] = { 0x28B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_192)
{
    // 0C88 0041;	
    // (ಈ) KANNADA LETTER II	[28B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C88, 0x0041 };
    uint32_t const ces[9] = { 0x28B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_193)
{
    // 0C88 0062;	
    // (ಈ) KANNADA LETTER II	[28B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C88, 0x0062 };
    uint32_t const ces[9] = { 0x28B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_194)
{
    // 0C89 0021;	
    // (ಉ) KANNADA LETTER U	[28B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C89, 0x0021 };
    uint32_t const ces[9] = { 0x28B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_195)
{
    // 0C89 003F;	
    // (ಉ) KANNADA LETTER U	[28B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C89, 0x003F };
    uint32_t const ces[9] = { 0x28B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_196)
{
    // 0C89 0061;	
    // (ಉ) KANNADA LETTER U	[28B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C89, 0x0061 };
    uint32_t const ces[9] = { 0x28B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_197)
{
    // 0C89 0041;	
    // (ಉ) KANNADA LETTER U	[28B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C89, 0x0041 };
    uint32_t const ces[9] = { 0x28B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_198)
{
    // 0C89 0062;	
    // (ಉ) KANNADA LETTER U	[28B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C89, 0x0062 };
    uint32_t const ces[9] = { 0x28B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_199)
{
    // 0C8A 0021;	
    // (ಊ) KANNADA LETTER UU	[28B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8A, 0x0021 };
    uint32_t const ces[9] = { 0x28B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_200)
{
    // 0C8A 003F;	
    // (ಊ) KANNADA LETTER UU	[28B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8A, 0x003F };
    uint32_t const ces[9] = { 0x28B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_201)
{
    // 0C8A 0061;	
    // (ಊ) KANNADA LETTER UU	[28B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8A, 0x0061 };
    uint32_t const ces[9] = { 0x28B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_202)
{
    // 0C8A 0041;	
    // (ಊ) KANNADA LETTER UU	[28B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C8A, 0x0041 };
    uint32_t const ces[9] = { 0x28B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_203)
{
    // 0C8A 0062;	
    // (ಊ) KANNADA LETTER UU	[28B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8A, 0x0062 };
    uint32_t const ces[9] = { 0x28B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_204)
{
    // 0C8B 0021;	
    // (ಋ) KANNADA LETTER VOCALIC R	[28B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8B, 0x0021 };
    uint32_t const ces[9] = { 0x28B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_205)
{
    // 0C8B 003F;	
    // (ಋ) KANNADA LETTER VOCALIC R	[28B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8B, 0x003F };
    uint32_t const ces[9] = { 0x28B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_206)
{
    // 0C8B 0061;	
    // (ಋ) KANNADA LETTER VOCALIC R	[28B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8B, 0x0061 };
    uint32_t const ces[9] = { 0x28B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_207)
{
    // 0C8B 0041;	
    // (ಋ) KANNADA LETTER VOCALIC R	[28B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C8B, 0x0041 };
    uint32_t const ces[9] = { 0x28B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_208)
{
    // 0C8B 0062;	
    // (ಋ) KANNADA LETTER VOCALIC R	[28B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8B, 0x0062 };
    uint32_t const ces[9] = { 0x28B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_209)
{
    // 0CE0 0021;	
    // (ೠ) KANNADA LETTER VOCALIC RR	[28B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE0, 0x0021 };
    uint32_t const ces[9] = { 0x28B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_210)
{
    // 0CE0 003F;	
    // (ೠ) KANNADA LETTER VOCALIC RR	[28B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE0, 0x003F };
    uint32_t const ces[9] = { 0x28B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_211)
{
    // 0CE0 0061;	
    // (ೠ) KANNADA LETTER VOCALIC RR	[28B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE0, 0x0061 };
    uint32_t const ces[9] = { 0x28B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_212)
{
    // 0CE0 0041;	
    // (ೠ) KANNADA LETTER VOCALIC RR	[28B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CE0, 0x0041 };
    uint32_t const ces[9] = { 0x28B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_213)
{
    // 0CE0 0062;	
    // (ೠ) KANNADA LETTER VOCALIC RR	[28B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE0, 0x0062 };
    uint32_t const ces[9] = { 0x28B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_214)
{
    // 0C8C 0021;	
    // (ಌ) KANNADA LETTER VOCALIC L	[28B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8C, 0x0021 };
    uint32_t const ces[9] = { 0x28B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_215)
{
    // 0C8C 003F;	
    // (ಌ) KANNADA LETTER VOCALIC L	[28B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8C, 0x003F };
    uint32_t const ces[9] = { 0x28B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_216)
{
    // 0C8C 0061;	
    // (ಌ) KANNADA LETTER VOCALIC L	[28B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8C, 0x0061 };
    uint32_t const ces[9] = { 0x28B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_217)
{
    // 0C8C 0041;	
    // (ಌ) KANNADA LETTER VOCALIC L	[28B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C8C, 0x0041 };
    uint32_t const ces[9] = { 0x28B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_218)
{
    // 0C8C 0062;	
    // (ಌ) KANNADA LETTER VOCALIC L	[28B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8C, 0x0062 };
    uint32_t const ces[9] = { 0x28B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_219)
{
    // 0CE1 0021;	
    // (ೡ) KANNADA LETTER VOCALIC LL	[28B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE1, 0x0021 };
    uint32_t const ces[9] = { 0x28B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_220)
{
    // 0CE1 003F;	
    // (ೡ) KANNADA LETTER VOCALIC LL	[28B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE1, 0x003F };
    uint32_t const ces[9] = { 0x28B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_221)
{
    // 0CE1 0061;	
    // (ೡ) KANNADA LETTER VOCALIC LL	[28B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE1, 0x0061 };
    uint32_t const ces[9] = { 0x28B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_222)
{
    // 0CE1 0041;	
    // (ೡ) KANNADA LETTER VOCALIC LL	[28B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CE1, 0x0041 };
    uint32_t const ces[9] = { 0x28B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_223)
{
    // 0CE1 0062;	
    // (ೡ) KANNADA LETTER VOCALIC LL	[28B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE1, 0x0062 };
    uint32_t const ces[9] = { 0x28B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_224)
{
    // 0C8E 0021;	
    // (ಎ) KANNADA LETTER E	[28B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8E, 0x0021 };
    uint32_t const ces[9] = { 0x28B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_225)
{
    // 0C8E 003F;	
    // (ಎ) KANNADA LETTER E	[28B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8E, 0x003F };
    uint32_t const ces[9] = { 0x28B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_226)
{
    // 0C8E 0061;	
    // (ಎ) KANNADA LETTER E	[28B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8E, 0x0061 };
    uint32_t const ces[9] = { 0x28B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_227)
{
    // 0C8E 0041;	
    // (ಎ) KANNADA LETTER E	[28B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C8E, 0x0041 };
    uint32_t const ces[9] = { 0x28B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_228)
{
    // 0C8E 0062;	
    // (ಎ) KANNADA LETTER E	[28B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8E, 0x0062 };
    uint32_t const ces[9] = { 0x28B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_229)
{
    // 0C8F 0021;	
    // (ಏ) KANNADA LETTER EE	[28BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8F, 0x0021 };
    uint32_t const ces[9] = { 0x28BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_230)
{
    // 0C8F 003F;	
    // (ಏ) KANNADA LETTER EE	[28BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8F, 0x003F };
    uint32_t const ces[9] = { 0x28BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_231)
{
    // 0C8F 0061;	
    // (ಏ) KANNADA LETTER EE	[28BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8F, 0x0061 };
    uint32_t const ces[9] = { 0x28BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_232)
{
    // 0C8F 0041;	
    // (ಏ) KANNADA LETTER EE	[28BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C8F, 0x0041 };
    uint32_t const ces[9] = { 0x28BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_233)
{
    // 0C8F 0062;	
    // (ಏ) KANNADA LETTER EE	[28BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C8F, 0x0062 };
    uint32_t const ces[9] = { 0x28BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_234)
{
    // 0C90 0021;	
    // (ಐ) KANNADA LETTER AI	[28BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C90, 0x0021 };
    uint32_t const ces[9] = { 0x28BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_235)
{
    // 0C90 003F;	
    // (ಐ) KANNADA LETTER AI	[28BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C90, 0x003F };
    uint32_t const ces[9] = { 0x28BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_236)
{
    // 0C90 0061;	
    // (ಐ) KANNADA LETTER AI	[28BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C90, 0x0061 };
    uint32_t const ces[9] = { 0x28BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_237)
{
    // 0C90 0041;	
    // (ಐ) KANNADA LETTER AI	[28BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C90, 0x0041 };
    uint32_t const ces[9] = { 0x28BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_238)
{
    // 0C90 0062;	
    // (ಐ) KANNADA LETTER AI	[28BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C90, 0x0062 };
    uint32_t const ces[9] = { 0x28BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_239)
{
    // 0C92 0021;	
    // (ಒ) KANNADA LETTER O	[28BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C92, 0x0021 };
    uint32_t const ces[9] = { 0x28BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_240)
{
    // 0C92 003F;	
    // (ಒ) KANNADA LETTER O	[28BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C92, 0x003F };
    uint32_t const ces[9] = { 0x28BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_241)
{
    // 0C92 0061;	
    // (ಒ) KANNADA LETTER O	[28BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C92, 0x0061 };
    uint32_t const ces[9] = { 0x28BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_242)
{
    // 0C92 0041;	
    // (ಒ) KANNADA LETTER O	[28BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C92, 0x0041 };
    uint32_t const ces[9] = { 0x28BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_243)
{
    // 0C92 0062;	
    // (ಒ) KANNADA LETTER O	[28BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C92, 0x0062 };
    uint32_t const ces[9] = { 0x28BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_244)
{
    // 0C93 0021;	
    // (ಓ) KANNADA LETTER OO	[28BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C93, 0x0021 };
    uint32_t const ces[9] = { 0x28BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_245)
{
    // 0C93 003F;	
    // (ಓ) KANNADA LETTER OO	[28BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C93, 0x003F };
    uint32_t const ces[9] = { 0x28BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_246)
{
    // 0C93 0061;	
    // (ಓ) KANNADA LETTER OO	[28BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C93, 0x0061 };
    uint32_t const ces[9] = { 0x28BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_247)
{
    // 0C93 0041;	
    // (ಓ) KANNADA LETTER OO	[28BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C93, 0x0041 };
    uint32_t const ces[9] = { 0x28BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_248)
{
    // 0C93 0062;	
    // (ಓ) KANNADA LETTER OO	[28BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C93, 0x0062 };
    uint32_t const ces[9] = { 0x28BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_249)
{
    // 0C94 0021;	
    // (ಔ) KANNADA LETTER AU	[28BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C94, 0x0021 };
    uint32_t const ces[9] = { 0x28BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_250)
{
    // 0C94 003F;	
    // (ಔ) KANNADA LETTER AU	[28BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C94, 0x003F };
    uint32_t const ces[9] = { 0x28BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_251)
{
    // 0C94 0061;	
    // (ಔ) KANNADA LETTER AU	[28BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C94, 0x0061 };
    uint32_t const ces[9] = { 0x28BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_252)
{
    // 0C94 0041;	
    // (ಔ) KANNADA LETTER AU	[28BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C94, 0x0041 };
    uint32_t const ces[9] = { 0x28BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_253)
{
    // 0C94 0062;	
    // (ಔ) KANNADA LETTER AU	[28BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C94, 0x0062 };
    uint32_t const ces[9] = { 0x28BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_254)
{
    // 0C95 0021;	
    // (ಕ) KANNADA LETTER KA	[28BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C95, 0x0021 };
    uint32_t const ces[9] = { 0x28BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_255)
{
    // 0C95 003F;	
    // (ಕ) KANNADA LETTER KA	[28BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C95, 0x003F };
    uint32_t const ces[9] = { 0x28BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_256)
{
    // 0C95 0061;	
    // (ಕ) KANNADA LETTER KA	[28BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C95, 0x0061 };
    uint32_t const ces[9] = { 0x28BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_257)
{
    // 0C95 0041;	
    // (ಕ) KANNADA LETTER KA	[28BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C95, 0x0041 };
    uint32_t const ces[9] = { 0x28BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_258)
{
    // 0C95 0062;	
    // (ಕ) KANNADA LETTER KA	[28BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C95, 0x0062 };
    uint32_t const ces[9] = { 0x28BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_259)
{
    // 0C96 0021;	
    // (ಖ) KANNADA LETTER KHA	[28C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C96, 0x0021 };
    uint32_t const ces[9] = { 0x28C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_260)
{
    // 0C96 003F;	
    // (ಖ) KANNADA LETTER KHA	[28C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C96, 0x003F };
    uint32_t const ces[9] = { 0x28C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_261)
{
    // 0C96 0061;	
    // (ಖ) KANNADA LETTER KHA	[28C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C96, 0x0061 };
    uint32_t const ces[9] = { 0x28C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_262)
{
    // 0C96 0041;	
    // (ಖ) KANNADA LETTER KHA	[28C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C96, 0x0041 };
    uint32_t const ces[9] = { 0x28C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_263)
{
    // 0C96 0062;	
    // (ಖ) KANNADA LETTER KHA	[28C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C96, 0x0062 };
    uint32_t const ces[9] = { 0x28C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_264)
{
    // 0C97 0021;	
    // (ಗ) KANNADA LETTER GA	[28C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C97, 0x0021 };
    uint32_t const ces[9] = { 0x28C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_265)
{
    // 0C97 003F;	
    // (ಗ) KANNADA LETTER GA	[28C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C97, 0x003F };
    uint32_t const ces[9] = { 0x28C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_266)
{
    // 0C97 0061;	
    // (ಗ) KANNADA LETTER GA	[28C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C97, 0x0061 };
    uint32_t const ces[9] = { 0x28C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_267)
{
    // 0C97 0041;	
    // (ಗ) KANNADA LETTER GA	[28C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C97, 0x0041 };
    uint32_t const ces[9] = { 0x28C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_268)
{
    // 0C97 0062;	
    // (ಗ) KANNADA LETTER GA	[28C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C97, 0x0062 };
    uint32_t const ces[9] = { 0x28C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_269)
{
    // 0C98 0021;	
    // (ಘ) KANNADA LETTER GHA	[28C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C98, 0x0021 };
    uint32_t const ces[9] = { 0x28C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_270)
{
    // 0C98 003F;	
    // (ಘ) KANNADA LETTER GHA	[28C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C98, 0x003F };
    uint32_t const ces[9] = { 0x28C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_271)
{
    // 0C98 0061;	
    // (ಘ) KANNADA LETTER GHA	[28C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C98, 0x0061 };
    uint32_t const ces[9] = { 0x28C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_272)
{
    // 0C98 0041;	
    // (ಘ) KANNADA LETTER GHA	[28C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C98, 0x0041 };
    uint32_t const ces[9] = { 0x28C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_273)
{
    // 0C98 0062;	
    // (ಘ) KANNADA LETTER GHA	[28C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C98, 0x0062 };
    uint32_t const ces[9] = { 0x28C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_274)
{
    // 0C99 0021;	
    // (ಙ) KANNADA LETTER NGA	[28C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C99, 0x0021 };
    uint32_t const ces[9] = { 0x28C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_275)
{
    // 0C99 003F;	
    // (ಙ) KANNADA LETTER NGA	[28C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C99, 0x003F };
    uint32_t const ces[9] = { 0x28C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_276)
{
    // 0C99 0061;	
    // (ಙ) KANNADA LETTER NGA	[28C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C99, 0x0061 };
    uint32_t const ces[9] = { 0x28C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_277)
{
    // 0C99 0041;	
    // (ಙ) KANNADA LETTER NGA	[28C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C99, 0x0041 };
    uint32_t const ces[9] = { 0x28C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_278)
{
    // 0C99 0062;	
    // (ಙ) KANNADA LETTER NGA	[28C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C99, 0x0062 };
    uint32_t const ces[9] = { 0x28C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_279)
{
    // 0C9A 0021;	
    // (ಚ) KANNADA LETTER CA	[28C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9A, 0x0021 };
    uint32_t const ces[9] = { 0x28C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_280)
{
    // 0C9A 003F;	
    // (ಚ) KANNADA LETTER CA	[28C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9A, 0x003F };
    uint32_t const ces[9] = { 0x28C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_281)
{
    // 0C9A 0061;	
    // (ಚ) KANNADA LETTER CA	[28C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9A, 0x0061 };
    uint32_t const ces[9] = { 0x28C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_282)
{
    // 0C9A 0041;	
    // (ಚ) KANNADA LETTER CA	[28C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9A, 0x0041 };
    uint32_t const ces[9] = { 0x28C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_283)
{
    // 0C9A 0062;	
    // (ಚ) KANNADA LETTER CA	[28C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9A, 0x0062 };
    uint32_t const ces[9] = { 0x28C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_284)
{
    // 0C9B 0021;	
    // (ಛ) KANNADA LETTER CHA	[28C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9B, 0x0021 };
    uint32_t const ces[9] = { 0x28C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_285)
{
    // 0C9B 003F;	
    // (ಛ) KANNADA LETTER CHA	[28C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9B, 0x003F };
    uint32_t const ces[9] = { 0x28C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_286)
{
    // 0C9B 0061;	
    // (ಛ) KANNADA LETTER CHA	[28C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9B, 0x0061 };
    uint32_t const ces[9] = { 0x28C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_287)
{
    // 0C9B 0041;	
    // (ಛ) KANNADA LETTER CHA	[28C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9B, 0x0041 };
    uint32_t const ces[9] = { 0x28C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_288)
{
    // 0C9B 0062;	
    // (ಛ) KANNADA LETTER CHA	[28C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9B, 0x0062 };
    uint32_t const ces[9] = { 0x28C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_289)
{
    // 0C9C 0021;	
    // (ಜ) KANNADA LETTER JA	[28C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9C, 0x0021 };
    uint32_t const ces[9] = { 0x28C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_290)
{
    // 0C9C 003F;	
    // (ಜ) KANNADA LETTER JA	[28C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9C, 0x003F };
    uint32_t const ces[9] = { 0x28C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_291)
{
    // 0C9C 0061;	
    // (ಜ) KANNADA LETTER JA	[28C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9C, 0x0061 };
    uint32_t const ces[9] = { 0x28C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_292)
{
    // 0C9C 0041;	
    // (ಜ) KANNADA LETTER JA	[28C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9C, 0x0041 };
    uint32_t const ces[9] = { 0x28C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_293)
{
    // 0C9C 0062;	
    // (ಜ) KANNADA LETTER JA	[28C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9C, 0x0062 };
    uint32_t const ces[9] = { 0x28C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_294)
{
    // 0C9D 0021;	
    // (ಝ) KANNADA LETTER JHA	[28C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9D, 0x0021 };
    uint32_t const ces[9] = { 0x28C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_295)
{
    // 0C9D 003F;	
    // (ಝ) KANNADA LETTER JHA	[28C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9D, 0x003F };
    uint32_t const ces[9] = { 0x28C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_296)
{
    // 0C9D 0061;	
    // (ಝ) KANNADA LETTER JHA	[28C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9D, 0x0061 };
    uint32_t const ces[9] = { 0x28C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_297)
{
    // 0C9D 0041;	
    // (ಝ) KANNADA LETTER JHA	[28C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9D, 0x0041 };
    uint32_t const ces[9] = { 0x28C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_298)
{
    // 0C9D 0062;	
    // (ಝ) KANNADA LETTER JHA	[28C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9D, 0x0062 };
    uint32_t const ces[9] = { 0x28C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_299)
{
    // 0C9E 0021;	
    // (ಞ) KANNADA LETTER NYA	[28C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9E, 0x0021 };
    uint32_t const ces[9] = { 0x28C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_300)
{
    // 0C9E 003F;	
    // (ಞ) KANNADA LETTER NYA	[28C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9E, 0x003F };
    uint32_t const ces[9] = { 0x28C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_301)
{
    // 0C9E 0061;	
    // (ಞ) KANNADA LETTER NYA	[28C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9E, 0x0061 };
    uint32_t const ces[9] = { 0x28C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_302)
{
    // 0C9E 0041;	
    // (ಞ) KANNADA LETTER NYA	[28C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9E, 0x0041 };
    uint32_t const ces[9] = { 0x28C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_303)
{
    // 0C9E 0062;	
    // (ಞ) KANNADA LETTER NYA	[28C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9E, 0x0062 };
    uint32_t const ces[9] = { 0x28C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_304)
{
    // 0C9F 0021;	
    // (ಟ) KANNADA LETTER TTA	[28C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9F, 0x0021 };
    uint32_t const ces[9] = { 0x28C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_305)
{
    // 0C9F 003F;	
    // (ಟ) KANNADA LETTER TTA	[28C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9F, 0x003F };
    uint32_t const ces[9] = { 0x28C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_306)
{
    // 0C9F 0061;	
    // (ಟ) KANNADA LETTER TTA	[28C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9F, 0x0061 };
    uint32_t const ces[9] = { 0x28C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_307)
{
    // 0C9F 0041;	
    // (ಟ) KANNADA LETTER TTA	[28C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C9F, 0x0041 };
    uint32_t const ces[9] = { 0x28C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_308)
{
    // 0C9F 0062;	
    // (ಟ) KANNADA LETTER TTA	[28C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C9F, 0x0062 };
    uint32_t const ces[9] = { 0x28C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_309)
{
    // 0CA0 0021;	
    // (ಠ) KANNADA LETTER TTHA	[28CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA0, 0x0021 };
    uint32_t const ces[9] = { 0x28CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_310)
{
    // 0CA0 003F;	
    // (ಠ) KANNADA LETTER TTHA	[28CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA0, 0x003F };
    uint32_t const ces[9] = { 0x28CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_311)
{
    // 0CA0 0061;	
    // (ಠ) KANNADA LETTER TTHA	[28CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA0, 0x0061 };
    uint32_t const ces[9] = { 0x28CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_312)
{
    // 0CA0 0041;	
    // (ಠ) KANNADA LETTER TTHA	[28CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA0, 0x0041 };
    uint32_t const ces[9] = { 0x28CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_313)
{
    // 0CA0 0062;	
    // (ಠ) KANNADA LETTER TTHA	[28CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA0, 0x0062 };
    uint32_t const ces[9] = { 0x28CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_314)
{
    // 0CA1 0021;	
    // (ಡ) KANNADA LETTER DDA	[28CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA1, 0x0021 };
    uint32_t const ces[9] = { 0x28CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_315)
{
    // 0CA1 003F;	
    // (ಡ) KANNADA LETTER DDA	[28CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA1, 0x003F };
    uint32_t const ces[9] = { 0x28CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_316)
{
    // 0CA1 0061;	
    // (ಡ) KANNADA LETTER DDA	[28CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA1, 0x0061 };
    uint32_t const ces[9] = { 0x28CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_317)
{
    // 0CA1 0041;	
    // (ಡ) KANNADA LETTER DDA	[28CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA1, 0x0041 };
    uint32_t const ces[9] = { 0x28CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_318)
{
    // 0CA1 0062;	
    // (ಡ) KANNADA LETTER DDA	[28CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA1, 0x0062 };
    uint32_t const ces[9] = { 0x28CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_319)
{
    // 0CA2 0021;	
    // (ಢ) KANNADA LETTER DDHA	[28CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA2, 0x0021 };
    uint32_t const ces[9] = { 0x28CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_320)
{
    // 0CA2 003F;	
    // (ಢ) KANNADA LETTER DDHA	[28CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA2, 0x003F };
    uint32_t const ces[9] = { 0x28CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_321)
{
    // 0CA2 0061;	
    // (ಢ) KANNADA LETTER DDHA	[28CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA2, 0x0061 };
    uint32_t const ces[9] = { 0x28CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_322)
{
    // 0CA2 0041;	
    // (ಢ) KANNADA LETTER DDHA	[28CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA2, 0x0041 };
    uint32_t const ces[9] = { 0x28CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_323)
{
    // 0CA2 0062;	
    // (ಢ) KANNADA LETTER DDHA	[28CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA2, 0x0062 };
    uint32_t const ces[9] = { 0x28CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_324)
{
    // 0CA3 0021;	
    // (ಣ) KANNADA LETTER NNA	[28CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA3, 0x0021 };
    uint32_t const ces[9] = { 0x28CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_325)
{
    // 0CA3 003F;	
    // (ಣ) KANNADA LETTER NNA	[28CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA3, 0x003F };
    uint32_t const ces[9] = { 0x28CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_326)
{
    // 0CA3 0061;	
    // (ಣ) KANNADA LETTER NNA	[28CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA3, 0x0061 };
    uint32_t const ces[9] = { 0x28CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_327)
{
    // 0CA3 0041;	
    // (ಣ) KANNADA LETTER NNA	[28CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA3, 0x0041 };
    uint32_t const ces[9] = { 0x28CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_328)
{
    // 0CA3 0062;	
    // (ಣ) KANNADA LETTER NNA	[28CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA3, 0x0062 };
    uint32_t const ces[9] = { 0x28CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_329)
{
    // 0CA4 0021;	
    // (ತ) KANNADA LETTER TA	[28CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA4, 0x0021 };
    uint32_t const ces[9] = { 0x28CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_330)
{
    // 0CA4 003F;	
    // (ತ) KANNADA LETTER TA	[28CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA4, 0x003F };
    uint32_t const ces[9] = { 0x28CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_331)
{
    // 0CA4 0061;	
    // (ತ) KANNADA LETTER TA	[28CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA4, 0x0061 };
    uint32_t const ces[9] = { 0x28CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_332)
{
    // 0CA4 0041;	
    // (ತ) KANNADA LETTER TA	[28CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA4, 0x0041 };
    uint32_t const ces[9] = { 0x28CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_333)
{
    // 0CA4 0062;	
    // (ತ) KANNADA LETTER TA	[28CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA4, 0x0062 };
    uint32_t const ces[9] = { 0x28CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_334)
{
    // 0CA5 0021;	
    // (ಥ) KANNADA LETTER THA	[28CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA5, 0x0021 };
    uint32_t const ces[9] = { 0x28CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_335)
{
    // 0CA5 003F;	
    // (ಥ) KANNADA LETTER THA	[28CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA5, 0x003F };
    uint32_t const ces[9] = { 0x28CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_336)
{
    // 0CA5 0061;	
    // (ಥ) KANNADA LETTER THA	[28CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA5, 0x0061 };
    uint32_t const ces[9] = { 0x28CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_337)
{
    // 0CA5 0041;	
    // (ಥ) KANNADA LETTER THA	[28CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA5, 0x0041 };
    uint32_t const ces[9] = { 0x28CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_338)
{
    // 0CA5 0062;	
    // (ಥ) KANNADA LETTER THA	[28CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA5, 0x0062 };
    uint32_t const ces[9] = { 0x28CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_339)
{
    // 0CA6 0021;	
    // (ದ) KANNADA LETTER DA	[28D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA6, 0x0021 };
    uint32_t const ces[9] = { 0x28D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_340)
{
    // 0CA6 003F;	
    // (ದ) KANNADA LETTER DA	[28D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA6, 0x003F };
    uint32_t const ces[9] = { 0x28D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_341)
{
    // 0CA6 0061;	
    // (ದ) KANNADA LETTER DA	[28D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA6, 0x0061 };
    uint32_t const ces[9] = { 0x28D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_342)
{
    // 0CA6 0041;	
    // (ದ) KANNADA LETTER DA	[28D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA6, 0x0041 };
    uint32_t const ces[9] = { 0x28D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_343)
{
    // 0CA6 0062;	
    // (ದ) KANNADA LETTER DA	[28D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA6, 0x0062 };
    uint32_t const ces[9] = { 0x28D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_344)
{
    // 0CA7 0021;	
    // (ಧ) KANNADA LETTER DHA	[28D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA7, 0x0021 };
    uint32_t const ces[9] = { 0x28D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_345)
{
    // 0CA7 003F;	
    // (ಧ) KANNADA LETTER DHA	[28D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA7, 0x003F };
    uint32_t const ces[9] = { 0x28D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_346)
{
    // 0CA7 0061;	
    // (ಧ) KANNADA LETTER DHA	[28D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA7, 0x0061 };
    uint32_t const ces[9] = { 0x28D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_347)
{
    // 0CA7 0041;	
    // (ಧ) KANNADA LETTER DHA	[28D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA7, 0x0041 };
    uint32_t const ces[9] = { 0x28D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_348)
{
    // 0CA7 0062;	
    // (ಧ) KANNADA LETTER DHA	[28D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA7, 0x0062 };
    uint32_t const ces[9] = { 0x28D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_349)
{
    // 0CA8 0021;	
    // (ನ) KANNADA LETTER NA	[28D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA8, 0x0021 };
    uint32_t const ces[9] = { 0x28D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_350)
{
    // 0CA8 003F;	
    // (ನ) KANNADA LETTER NA	[28D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA8, 0x003F };
    uint32_t const ces[9] = { 0x28D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_351)
{
    // 0CA8 0061;	
    // (ನ) KANNADA LETTER NA	[28D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA8, 0x0061 };
    uint32_t const ces[9] = { 0x28D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_352)
{
    // 0CA8 0041;	
    // (ನ) KANNADA LETTER NA	[28D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CA8, 0x0041 };
    uint32_t const ces[9] = { 0x28D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_353)
{
    // 0CA8 0062;	
    // (ನ) KANNADA LETTER NA	[28D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CA8, 0x0062 };
    uint32_t const ces[9] = { 0x28D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_354)
{
    // 0CAA 0021;	
    // (ಪ) KANNADA LETTER PA	[28D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAA, 0x0021 };
    uint32_t const ces[9] = { 0x28D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_355)
{
    // 0CAA 003F;	
    // (ಪ) KANNADA LETTER PA	[28D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAA, 0x003F };
    uint32_t const ces[9] = { 0x28D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_356)
{
    // 0CAA 0061;	
    // (ಪ) KANNADA LETTER PA	[28D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAA, 0x0061 };
    uint32_t const ces[9] = { 0x28D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_357)
{
    // 0CAA 0041;	
    // (ಪ) KANNADA LETTER PA	[28D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAA, 0x0041 };
    uint32_t const ces[9] = { 0x28D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_358)
{
    // 0CAA 0062;	
    // (ಪ) KANNADA LETTER PA	[28D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAA, 0x0062 };
    uint32_t const ces[9] = { 0x28D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_359)
{
    // 0CAB 0021;	
    // (ಫ) KANNADA LETTER PHA	[28D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAB, 0x0021 };
    uint32_t const ces[9] = { 0x28D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_360)
{
    // 0CAB 003F;	
    // (ಫ) KANNADA LETTER PHA	[28D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAB, 0x003F };
    uint32_t const ces[9] = { 0x28D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_361)
{
    // 0CAB 0061;	
    // (ಫ) KANNADA LETTER PHA	[28D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAB, 0x0061 };
    uint32_t const ces[9] = { 0x28D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_362)
{
    // 0CAB 0041;	
    // (ಫ) KANNADA LETTER PHA	[28D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAB, 0x0041 };
    uint32_t const ces[9] = { 0x28D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_363)
{
    // 0CAB 0062;	
    // (ಫ) KANNADA LETTER PHA	[28D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAB, 0x0062 };
    uint32_t const ces[9] = { 0x28D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_364)
{
    // 0CAC 0021;	
    // (ಬ) KANNADA LETTER BA	[28D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAC, 0x0021 };
    uint32_t const ces[9] = { 0x28D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_365)
{
    // 0CAC 003F;	
    // (ಬ) KANNADA LETTER BA	[28D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAC, 0x003F };
    uint32_t const ces[9] = { 0x28D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_366)
{
    // 0CAC 0061;	
    // (ಬ) KANNADA LETTER BA	[28D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAC, 0x0061 };
    uint32_t const ces[9] = { 0x28D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_367)
{
    // 0CAC 0041;	
    // (ಬ) KANNADA LETTER BA	[28D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAC, 0x0041 };
    uint32_t const ces[9] = { 0x28D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_368)
{
    // 0CAC 0062;	
    // (ಬ) KANNADA LETTER BA	[28D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAC, 0x0062 };
    uint32_t const ces[9] = { 0x28D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_369)
{
    // 0CAD 0021;	
    // (ಭ) KANNADA LETTER BHA	[28D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAD, 0x0021 };
    uint32_t const ces[9] = { 0x28D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_370)
{
    // 0CAD 003F;	
    // (ಭ) KANNADA LETTER BHA	[28D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAD, 0x003F };
    uint32_t const ces[9] = { 0x28D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_371)
{
    // 0CAD 0061;	
    // (ಭ) KANNADA LETTER BHA	[28D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAD, 0x0061 };
    uint32_t const ces[9] = { 0x28D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_372)
{
    // 0CAD 0041;	
    // (ಭ) KANNADA LETTER BHA	[28D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAD, 0x0041 };
    uint32_t const ces[9] = { 0x28D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_373)
{
    // 0CAD 0062;	
    // (ಭ) KANNADA LETTER BHA	[28D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAD, 0x0062 };
    uint32_t const ces[9] = { 0x28D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_374)
{
    // 0CAE 0021;	
    // (ಮ) KANNADA LETTER MA	[28D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAE, 0x0021 };
    uint32_t const ces[9] = { 0x28D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_375)
{
    // 0CAE 003F;	
    // (ಮ) KANNADA LETTER MA	[28D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAE, 0x003F };
    uint32_t const ces[9] = { 0x28D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_376)
{
    // 0CAE 0061;	
    // (ಮ) KANNADA LETTER MA	[28D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAE, 0x0061 };
    uint32_t const ces[9] = { 0x28D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_377)
{
    // 0CAE 0041;	
    // (ಮ) KANNADA LETTER MA	[28D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAE, 0x0041 };
    uint32_t const ces[9] = { 0x28D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_378)
{
    // 0CAE 0062;	
    // (ಮ) KANNADA LETTER MA	[28D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAE, 0x0062 };
    uint32_t const ces[9] = { 0x28D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_379)
{
    // 0CAF 0021;	
    // (ಯ) KANNADA LETTER YA	[28D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAF, 0x0021 };
    uint32_t const ces[9] = { 0x28D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_380)
{
    // 0CAF 003F;	
    // (ಯ) KANNADA LETTER YA	[28D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAF, 0x003F };
    uint32_t const ces[9] = { 0x28D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_381)
{
    // 0CAF 0061;	
    // (ಯ) KANNADA LETTER YA	[28D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAF, 0x0061 };
    uint32_t const ces[9] = { 0x28D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_382)
{
    // 0CAF 0041;	
    // (ಯ) KANNADA LETTER YA	[28D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CAF, 0x0041 };
    uint32_t const ces[9] = { 0x28D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_383)
{
    // 0CAF 0062;	
    // (ಯ) KANNADA LETTER YA	[28D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CAF, 0x0062 };
    uint32_t const ces[9] = { 0x28D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_384)
{
    // 0CB0 0021;	
    // (ರ) KANNADA LETTER RA	[28D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB0, 0x0021 };
    uint32_t const ces[9] = { 0x28D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_385)
{
    // 0CB0 003F;	
    // (ರ) KANNADA LETTER RA	[28D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB0, 0x003F };
    uint32_t const ces[9] = { 0x28D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_386)
{
    // 0CB0 0061;	
    // (ರ) KANNADA LETTER RA	[28D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB0, 0x0061 };
    uint32_t const ces[9] = { 0x28D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_387)
{
    // 0CB0 0041;	
    // (ರ) KANNADA LETTER RA	[28D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB0, 0x0041 };
    uint32_t const ces[9] = { 0x28D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_388)
{
    // 0CB0 0062;	
    // (ರ) KANNADA LETTER RA	[28D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB0, 0x0062 };
    uint32_t const ces[9] = { 0x28D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_389)
{
    // 0CB1 0021;	
    // (ಱ) KANNADA LETTER RRA	[28DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB1, 0x0021 };
    uint32_t const ces[9] = { 0x28DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_390)
{
    // 0CB1 003F;	
    // (ಱ) KANNADA LETTER RRA	[28DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB1, 0x003F };
    uint32_t const ces[9] = { 0x28DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_391)
{
    // 0CB1 0061;	
    // (ಱ) KANNADA LETTER RRA	[28DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB1, 0x0061 };
    uint32_t const ces[9] = { 0x28DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_392)
{
    // 0CB1 0041;	
    // (ಱ) KANNADA LETTER RRA	[28DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB1, 0x0041 };
    uint32_t const ces[9] = { 0x28DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_393)
{
    // 0CB1 0062;	
    // (ಱ) KANNADA LETTER RRA	[28DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB1, 0x0062 };
    uint32_t const ces[9] = { 0x28DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_394)
{
    // 0CB2 0021;	
    // (ಲ) KANNADA LETTER LA	[28DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB2, 0x0021 };
    uint32_t const ces[9] = { 0x28DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_395)
{
    // 0CB2 003F;	
    // (ಲ) KANNADA LETTER LA	[28DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB2, 0x003F };
    uint32_t const ces[9] = { 0x28DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_396)
{
    // 0CB2 0061;	
    // (ಲ) KANNADA LETTER LA	[28DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB2, 0x0061 };
    uint32_t const ces[9] = { 0x28DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_397)
{
    // 0CB2 0041;	
    // (ಲ) KANNADA LETTER LA	[28DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB2, 0x0041 };
    uint32_t const ces[9] = { 0x28DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_398)
{
    // 0CB2 0062;	
    // (ಲ) KANNADA LETTER LA	[28DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB2, 0x0062 };
    uint32_t const ces[9] = { 0x28DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_399)
{
    // 0CB5 0021;	
    // (ವ) KANNADA LETTER VA	[28DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB5, 0x0021 };
    uint32_t const ces[9] = { 0x28DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_400)
{
    // 0CB5 003F;	
    // (ವ) KANNADA LETTER VA	[28DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB5, 0x003F };
    uint32_t const ces[9] = { 0x28DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_401)
{
    // 0CB5 0061;	
    // (ವ) KANNADA LETTER VA	[28DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB5, 0x0061 };
    uint32_t const ces[9] = { 0x28DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_402)
{
    // 0CB5 0041;	
    // (ವ) KANNADA LETTER VA	[28DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB5, 0x0041 };
    uint32_t const ces[9] = { 0x28DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_403)
{
    // 0CB5 0062;	
    // (ವ) KANNADA LETTER VA	[28DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB5, 0x0062 };
    uint32_t const ces[9] = { 0x28DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_404)
{
    // 0CB6 0021;	
    // (ಶ) KANNADA LETTER SHA	[28DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB6, 0x0021 };
    uint32_t const ces[9] = { 0x28DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_405)
{
    // 0CB6 003F;	
    // (ಶ) KANNADA LETTER SHA	[28DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB6, 0x003F };
    uint32_t const ces[9] = { 0x28DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_406)
{
    // 0CB6 0061;	
    // (ಶ) KANNADA LETTER SHA	[28DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB6, 0x0061 };
    uint32_t const ces[9] = { 0x28DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_407)
{
    // 0CB6 0041;	
    // (ಶ) KANNADA LETTER SHA	[28DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB6, 0x0041 };
    uint32_t const ces[9] = { 0x28DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_408)
{
    // 0CB6 0062;	
    // (ಶ) KANNADA LETTER SHA	[28DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB6, 0x0062 };
    uint32_t const ces[9] = { 0x28DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_409)
{
    // 0CB7 0021;	
    // (ಷ) KANNADA LETTER SSA	[28DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB7, 0x0021 };
    uint32_t const ces[9] = { 0x28DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_410)
{
    // 0CB7 003F;	
    // (ಷ) KANNADA LETTER SSA	[28DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB7, 0x003F };
    uint32_t const ces[9] = { 0x28DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_411)
{
    // 0CB7 0061;	
    // (ಷ) KANNADA LETTER SSA	[28DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB7, 0x0061 };
    uint32_t const ces[9] = { 0x28DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_412)
{
    // 0CB7 0041;	
    // (ಷ) KANNADA LETTER SSA	[28DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB7, 0x0041 };
    uint32_t const ces[9] = { 0x28DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_413)
{
    // 0CB7 0062;	
    // (ಷ) KANNADA LETTER SSA	[28DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB7, 0x0062 };
    uint32_t const ces[9] = { 0x28DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_414)
{
    // 0CB8 0021;	
    // (ಸ) KANNADA LETTER SA	[28DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB8, 0x0021 };
    uint32_t const ces[9] = { 0x28DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_415)
{
    // 0CB8 003F;	
    // (ಸ) KANNADA LETTER SA	[28DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB8, 0x003F };
    uint32_t const ces[9] = { 0x28DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_416)
{
    // 0CB8 0061;	
    // (ಸ) KANNADA LETTER SA	[28DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB8, 0x0061 };
    uint32_t const ces[9] = { 0x28DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_417)
{
    // 0CB8 0041;	
    // (ಸ) KANNADA LETTER SA	[28DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB8, 0x0041 };
    uint32_t const ces[9] = { 0x28DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_418)
{
    // 0CB8 0062;	
    // (ಸ) KANNADA LETTER SA	[28DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB8, 0x0062 };
    uint32_t const ces[9] = { 0x28DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_419)
{
    // 0CB9 0021;	
    // (ಹ) KANNADA LETTER HA	[28E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB9, 0x0021 };
    uint32_t const ces[9] = { 0x28E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_420)
{
    // 0CB9 003F;	
    // (ಹ) KANNADA LETTER HA	[28E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB9, 0x003F };
    uint32_t const ces[9] = { 0x28E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_421)
{
    // 0CB9 0061;	
    // (ಹ) KANNADA LETTER HA	[28E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB9, 0x0061 };
    uint32_t const ces[9] = { 0x28E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_422)
{
    // 0CB9 0041;	
    // (ಹ) KANNADA LETTER HA	[28E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB9, 0x0041 };
    uint32_t const ces[9] = { 0x28E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_423)
{
    // 0CB9 0062;	
    // (ಹ) KANNADA LETTER HA	[28E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB9, 0x0062 };
    uint32_t const ces[9] = { 0x28E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_424)
{
    // 0CB3 0021;	
    // (ಳ) KANNADA LETTER LLA	[28E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB3, 0x0021 };
    uint32_t const ces[9] = { 0x28E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_425)
{
    // 0CB3 003F;	
    // (ಳ) KANNADA LETTER LLA	[28E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB3, 0x003F };
    uint32_t const ces[9] = { 0x28E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_426)
{
    // 0CB3 0061;	
    // (ಳ) KANNADA LETTER LLA	[28E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB3, 0x0061 };
    uint32_t const ces[9] = { 0x28E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_427)
{
    // 0CB3 0041;	
    // (ಳ) KANNADA LETTER LLA	[28E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CB3, 0x0041 };
    uint32_t const ces[9] = { 0x28E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_428)
{
    // 0CB3 0062;	
    // (ಳ) KANNADA LETTER LLA	[28E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CB3, 0x0062 };
    uint32_t const ces[9] = { 0x28E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_429)
{
    // 0CDE 0021;	
    // (ೞ) KANNADA LETTER FA	[28E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CDE, 0x0021 };
    uint32_t const ces[9] = { 0x28E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_430)
{
    // 0CDE 003F;	
    // (ೞ) KANNADA LETTER FA	[28E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CDE, 0x003F };
    uint32_t const ces[9] = { 0x28E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_431)
{
    // 0CDE 0061;	
    // (ೞ) KANNADA LETTER FA	[28E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CDE, 0x0061 };
    uint32_t const ces[9] = { 0x28E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_432)
{
    // 0CDE 0041;	
    // (ೞ) KANNADA LETTER FA	[28E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CDE, 0x0041 };
    uint32_t const ces[9] = { 0x28E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_433)
{
    // 0CDE 0062;	
    // (ೞ) KANNADA LETTER FA	[28E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CDE, 0x0062 };
    uint32_t const ces[9] = { 0x28E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_434)
{
    // 0CBD 0021;	
    // (ಽ) KANNADA SIGN AVAGRAHA	[28E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBD, 0x0021 };
    uint32_t const ces[9] = { 0x28E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_435)
{
    // 0CBD 003F;	
    // (ಽ) KANNADA SIGN AVAGRAHA	[28E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBD, 0x003F };
    uint32_t const ces[9] = { 0x28E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_436)
{
    // 0CBD 0061;	
    // (ಽ) KANNADA SIGN AVAGRAHA	[28E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBD, 0x0061 };
    uint32_t const ces[9] = { 0x28E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_437)
{
    // 0CBD 0041;	
    // (ಽ) KANNADA SIGN AVAGRAHA	[28E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CBD, 0x0041 };
    uint32_t const ces[9] = { 0x28E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_438)
{
    // 0CBD 0062;	
    // (ಽ) KANNADA SIGN AVAGRAHA	[28E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBD, 0x0062 };
    uint32_t const ces[9] = { 0x28E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_439)
{
    // 0CF1 0021;	
    // (ೱ) KANNADA SIGN JIHVAMULIYA	[28E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF1, 0x0021 };
    uint32_t const ces[9] = { 0x28E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_440)
{
    // 0CF1 003F;	
    // (ೱ) KANNADA SIGN JIHVAMULIYA	[28E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF1, 0x003F };
    uint32_t const ces[9] = { 0x28E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_441)
{
    // 0CF1 0061;	
    // (ೱ) KANNADA SIGN JIHVAMULIYA	[28E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF1, 0x0061 };
    uint32_t const ces[9] = { 0x28E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_442)
{
    // 0CF1 0041;	
    // (ೱ) KANNADA SIGN JIHVAMULIYA	[28E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CF1, 0x0041 };
    uint32_t const ces[9] = { 0x28E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_443)
{
    // 0CF1 0062;	
    // (ೱ) KANNADA SIGN JIHVAMULIYA	[28E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF1, 0x0062 };
    uint32_t const ces[9] = { 0x28E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_444)
{
    // 0CF2 0021;	
    // (ೲ) KANNADA SIGN UPADHMANIYA	[28E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF2, 0x0021 };
    uint32_t const ces[9] = { 0x28E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_445)
{
    // 0CF2 003F;	
    // (ೲ) KANNADA SIGN UPADHMANIYA	[28E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF2, 0x003F };
    uint32_t const ces[9] = { 0x28E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_446)
{
    // 0CF2 0061;	
    // (ೲ) KANNADA SIGN UPADHMANIYA	[28E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF2, 0x0061 };
    uint32_t const ces[9] = { 0x28E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_447)
{
    // 0CF2 0041;	
    // (ೲ) KANNADA SIGN UPADHMANIYA	[28E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CF2, 0x0041 };
    uint32_t const ces[9] = { 0x28E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_448)
{
    // 0CF2 0062;	
    // (ೲ) KANNADA SIGN UPADHMANIYA	[28E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CF2, 0x0062 };
    uint32_t const ces[9] = { 0x28E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_449)
{
    // 0C80 0021;	
    // (ಀ) KANNADA SIGN SPACING CANDRABINDU	[28E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C80, 0x0021 };
    uint32_t const ces[9] = { 0x28E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_450)
{
    // 0C80 003F;	
    // (ಀ) KANNADA SIGN SPACING CANDRABINDU	[28E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C80, 0x003F };
    uint32_t const ces[9] = { 0x28E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_451)
{
    // 0C80 0061;	
    // (ಀ) KANNADA SIGN SPACING CANDRABINDU	[28E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C80, 0x0061 };
    uint32_t const ces[9] = { 0x28E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_452)
{
    // 0C80 0041;	
    // (ಀ) KANNADA SIGN SPACING CANDRABINDU	[28E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C80, 0x0041 };
    uint32_t const ces[9] = { 0x28E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_453)
{
    // 0C80 0062;	
    // (ಀ) KANNADA SIGN SPACING CANDRABINDU	[28E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C80, 0x0062 };
    uint32_t const ces[9] = { 0x28E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_454)
{
    // 0CBE 0021;	
    // (ಾ) KANNADA VOWEL SIGN AA	[28E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBE, 0x0021 };
    uint32_t const ces[9] = { 0x28E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_455)
{
    // 0CBE 003F;	
    // (ಾ) KANNADA VOWEL SIGN AA	[28E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBE, 0x003F };
    uint32_t const ces[9] = { 0x28E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_456)
{
    // 0CBE 0061;	
    // (ಾ) KANNADA VOWEL SIGN AA	[28E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBE, 0x0061 };
    uint32_t const ces[9] = { 0x28E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_457)
{
    // 0CBE 0041;	
    // (ಾ) KANNADA VOWEL SIGN AA	[28E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CBE, 0x0041 };
    uint32_t const ces[9] = { 0x28E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_458)
{
    // 0CBE 0062;	
    // (ಾ) KANNADA VOWEL SIGN AA	[28E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBE, 0x0062 };
    uint32_t const ces[9] = { 0x28E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_459)
{
    // 0CBF 0021;	
    // (ಿ) KANNADA VOWEL SIGN I	[28E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBF, 0x0021 };
    uint32_t const ces[9] = { 0x28E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_460)
{
    // 0CBF 003F;	
    // (ಿ) KANNADA VOWEL SIGN I	[28E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBF, 0x003F };
    uint32_t const ces[9] = { 0x28E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_461)
{
    // 0CBF 0061;	
    // (ಿ) KANNADA VOWEL SIGN I	[28E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBF, 0x0061 };
    uint32_t const ces[9] = { 0x28E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_462)
{
    // 0CBF 0041;	
    // (ಿ) KANNADA VOWEL SIGN I	[28E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CBF, 0x0041 };
    uint32_t const ces[9] = { 0x28E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_463)
{
    // 0CBF 0062;	
    // (ಿ) KANNADA VOWEL SIGN I	[28E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBF, 0x0062 };
    uint32_t const ces[9] = { 0x28E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_464)
{
    // 0CBF 0001 0CD5 0061;	
    // (ಿ'\u0001'ೕ) KANNADA VOWEL SIGN I, <START OF HEADING>, KANNADA LENGTH MARK	[28E8 28F7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0CBF, 0x0001, 0x0CD5, 0x0061 };
    uint32_t const ces[12] = { 0x28E8, 0x28F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_465)
{
    // 0CBF 0591 0CD5 0061;	
    // (ಿ֑ೕ) KANNADA VOWEL SIGN I, HEBREW ACCENT ETNAHTA, KANNADA LENGTH MARK	[28E8 28F7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0CBF, 0x0591, 0x0CD5, 0x0061 };
    uint32_t const ces[12] = { 0x28E8, 0x28F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_466)
{
    // 0CBF 1D165 0CD5 0061;	
    // (ಿ𝅥ೕ) KANNADA VOWEL SIGN I, MUSICAL SYMBOL COMBINING STEM, KANNADA LENGTH MARK	[28E8 28F7 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0CBF, 0x1D165, 0x0CD5, 0x0061 };
    uint32_t const ces[12] = { 0x28E8, 0x28F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_467)
{
    // 0CBF 0CD5 0021;	
    // (ೀ) KANNADA VOWEL SIGN I, KANNADA LENGTH MARK	[28E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0CBF, 0x0CD5, 0x0021 };
    uint32_t const ces[9] = { 0x28E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_468)
{
    // 0CC0 0021;	
    // (ೀ) KANNADA VOWEL SIGN II	[28E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC0, 0x0021 };
    uint32_t const ces[9] = { 0x28E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_469)
{
    // 0CBF 0CD5 003F;	
    // (ೀ) KANNADA VOWEL SIGN I, KANNADA LENGTH MARK	[28E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0CBF, 0x0CD5, 0x003F };
    uint32_t const ces[9] = { 0x28E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_470)
{
    // 0CC0 003F;	
    // (ೀ) KANNADA VOWEL SIGN II	[28E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC0, 0x003F };
    uint32_t const ces[9] = { 0x28E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_471)
{
    // 0CBF 0CD5 0061;	
    // (ೀ) KANNADA VOWEL SIGN I, KANNADA LENGTH MARK	[28E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0CBF, 0x0CD5, 0x0061 };
    uint32_t const ces[9] = { 0x28E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_472)
{
    // 0CC0 0061;	
    // (ೀ) KANNADA VOWEL SIGN II	[28E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC0, 0x0061 };
    uint32_t const ces[9] = { 0x28E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_473)
{
    // 0CBF 0CD5 0041;	
    // (ೀ) KANNADA VOWEL SIGN I, KANNADA LENGTH MARK	[28E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0CBF, 0x0CD5, 0x0041 };
    uint32_t const ces[9] = { 0x28E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_474)
{
    // 0CC0 0041;	
    // (ೀ) KANNADA VOWEL SIGN II	[28E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CC0, 0x0041 };
    uint32_t const ces[9] = { 0x28E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_475)
{
    // 0CBF 0CD5 0062;	
    // (ೀ) KANNADA VOWEL SIGN I, KANNADA LENGTH MARK	[28E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0CBF, 0x0CD5, 0x0062 };
    uint32_t const ces[9] = { 0x28E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_476)
{
    // 0CC0 0062;	
    // (ೀ) KANNADA VOWEL SIGN II	[28E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC0, 0x0062 };
    uint32_t const ces[9] = { 0x28E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_477)
{
    // 0CC1 0021;	
    // (ು) KANNADA VOWEL SIGN U	[28EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC1, 0x0021 };
    uint32_t const ces[9] = { 0x28EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_478)
{
    // 0CC1 003F;	
    // (ು) KANNADA VOWEL SIGN U	[28EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC1, 0x003F };
    uint32_t const ces[9] = { 0x28EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_479)
{
    // 0CC1 0061;	
    // (ು) KANNADA VOWEL SIGN U	[28EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC1, 0x0061 };
    uint32_t const ces[9] = { 0x28EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_480)
{
    // 0CC1 0041;	
    // (ು) KANNADA VOWEL SIGN U	[28EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CC1, 0x0041 };
    uint32_t const ces[9] = { 0x28EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_481)
{
    // 0CC1 0062;	
    // (ು) KANNADA VOWEL SIGN U	[28EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC1, 0x0062 };
    uint32_t const ces[9] = { 0x28EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_482)
{
    // 0CC2 0021;	
    // (ೂ) KANNADA VOWEL SIGN UU	[28EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC2, 0x0021 };
    uint32_t const ces[9] = { 0x28EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_483)
{
    // 0CC2 003F;	
    // (ೂ) KANNADA VOWEL SIGN UU	[28EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC2, 0x003F };
    uint32_t const ces[9] = { 0x28EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_484)
{
    // 0CC2 0061;	
    // (ೂ) KANNADA VOWEL SIGN UU	[28EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC2, 0x0061 };
    uint32_t const ces[9] = { 0x28EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_485)
{
    // 0CC2 0041;	
    // (ೂ) KANNADA VOWEL SIGN UU	[28EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CC2, 0x0041 };
    uint32_t const ces[9] = { 0x28EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_486)
{
    // 0CC2 0062;	
    // (ೂ) KANNADA VOWEL SIGN UU	[28EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC2, 0x0062 };
    uint32_t const ces[9] = { 0x28EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_487)
{
    // 0CC3 0021;	
    // (ೃ) KANNADA VOWEL SIGN VOCALIC R	[28EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC3, 0x0021 };
    uint32_t const ces[9] = { 0x28EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_488)
{
    // 0CC3 003F;	
    // (ೃ) KANNADA VOWEL SIGN VOCALIC R	[28EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC3, 0x003F };
    uint32_t const ces[9] = { 0x28EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_489)
{
    // 0CC3 0061;	
    // (ೃ) KANNADA VOWEL SIGN VOCALIC R	[28EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC3, 0x0061 };
    uint32_t const ces[9] = { 0x28EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_490)
{
    // 0CC3 0041;	
    // (ೃ) KANNADA VOWEL SIGN VOCALIC R	[28EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CC3, 0x0041 };
    uint32_t const ces[9] = { 0x28EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_491)
{
    // 0CC3 0062;	
    // (ೃ) KANNADA VOWEL SIGN VOCALIC R	[28EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC3, 0x0062 };
    uint32_t const ces[9] = { 0x28EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_492)
{
    // 0CC4 0021;	
    // (ೄ) KANNADA VOWEL SIGN VOCALIC RR	[28ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC4, 0x0021 };
    uint32_t const ces[9] = { 0x28ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_493)
{
    // 0CC4 003F;	
    // (ೄ) KANNADA VOWEL SIGN VOCALIC RR	[28ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC4, 0x003F };
    uint32_t const ces[9] = { 0x28ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_494)
{
    // 0CC4 0061;	
    // (ೄ) KANNADA VOWEL SIGN VOCALIC RR	[28ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC4, 0x0061 };
    uint32_t const ces[9] = { 0x28ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_495)
{
    // 0CC4 0041;	
    // (ೄ) KANNADA VOWEL SIGN VOCALIC RR	[28ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CC4, 0x0041 };
    uint32_t const ces[9] = { 0x28ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_496)
{
    // 0CC4 0062;	
    // (ೄ) KANNADA VOWEL SIGN VOCALIC RR	[28ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CC4, 0x0062 };
    uint32_t const ces[9] = { 0x28ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_497)
{
    // 0CE2 0021;	
    // (ೢ) KANNADA VOWEL SIGN VOCALIC L	[28EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE2, 0x0021 };
    uint32_t const ces[9] = { 0x28EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_498)
{
    // 0CE2 003F;	
    // (ೢ) KANNADA VOWEL SIGN VOCALIC L	[28EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE2, 0x003F };
    uint32_t const ces[9] = { 0x28EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_170_499)
{
    // 0CE2 0061;	
    // (ೢ) KANNADA VOWEL SIGN VOCALIC L	[28EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE2, 0x0061 };
    uint32_t const ces[9] = { 0x28EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

