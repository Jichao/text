// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_027_000)
{
    // 23DC 0041;	
    // (⏜) TOP PARENTHESIS	[07D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DC, 0x0041 };
    uint32_t const ces[9] = { 0x07D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_001)
{
    // 23DC 0062;	
    // (⏜) TOP PARENTHESIS	[07D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DC, 0x0062 };
    uint32_t const ces[9] = { 0x07D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_002)
{
    // 23DD 0021;	
    // (⏝) BOTTOM PARENTHESIS	[07DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DD, 0x0021 };
    uint32_t const ces[9] = { 0x07DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_003)
{
    // 23DD 003F;	
    // (⏝) BOTTOM PARENTHESIS	[07DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DD, 0x003F };
    uint32_t const ces[9] = { 0x07DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_004)
{
    // 23DD 0061;	
    // (⏝) BOTTOM PARENTHESIS	[07DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DD, 0x0061 };
    uint32_t const ces[9] = { 0x07DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_005)
{
    // 23DD 0041;	
    // (⏝) BOTTOM PARENTHESIS	[07DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DD, 0x0041 };
    uint32_t const ces[9] = { 0x07DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_006)
{
    // 23DD 0062;	
    // (⏝) BOTTOM PARENTHESIS	[07DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DD, 0x0062 };
    uint32_t const ces[9] = { 0x07DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_007)
{
    // 23DE 0021;	
    // (⏞) TOP CURLY BRACKET	[07DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DE, 0x0021 };
    uint32_t const ces[9] = { 0x07DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_008)
{
    // 23DE 003F;	
    // (⏞) TOP CURLY BRACKET	[07DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DE, 0x003F };
    uint32_t const ces[9] = { 0x07DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_009)
{
    // 23DE 0061;	
    // (⏞) TOP CURLY BRACKET	[07DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DE, 0x0061 };
    uint32_t const ces[9] = { 0x07DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_010)
{
    // 23DE 0041;	
    // (⏞) TOP CURLY BRACKET	[07DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DE, 0x0041 };
    uint32_t const ces[9] = { 0x07DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_011)
{
    // 23DE 0062;	
    // (⏞) TOP CURLY BRACKET	[07DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DE, 0x0062 };
    uint32_t const ces[9] = { 0x07DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_012)
{
    // 23DF 0021;	
    // (⏟) BOTTOM CURLY BRACKET	[07DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DF, 0x0021 };
    uint32_t const ces[9] = { 0x07DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_013)
{
    // 23DF 003F;	
    // (⏟) BOTTOM CURLY BRACKET	[07DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DF, 0x003F };
    uint32_t const ces[9] = { 0x07DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_014)
{
    // 23DF 0061;	
    // (⏟) BOTTOM CURLY BRACKET	[07DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DF, 0x0061 };
    uint32_t const ces[9] = { 0x07DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_015)
{
    // 23DF 0041;	
    // (⏟) BOTTOM CURLY BRACKET	[07DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DF, 0x0041 };
    uint32_t const ces[9] = { 0x07DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_016)
{
    // 23DF 0062;	
    // (⏟) BOTTOM CURLY BRACKET	[07DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DF, 0x0062 };
    uint32_t const ces[9] = { 0x07DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_017)
{
    // 23E0 0021;	
    // (⏠) TOP TORTOISE SHELL BRACKET	[07DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E0, 0x0021 };
    uint32_t const ces[9] = { 0x07DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_018)
{
    // 23E0 003F;	
    // (⏠) TOP TORTOISE SHELL BRACKET	[07DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E0, 0x003F };
    uint32_t const ces[9] = { 0x07DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_019)
{
    // 23E0 0061;	
    // (⏠) TOP TORTOISE SHELL BRACKET	[07DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E0, 0x0061 };
    uint32_t const ces[9] = { 0x07DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_020)
{
    // 23E0 0041;	
    // (⏠) TOP TORTOISE SHELL BRACKET	[07DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E0, 0x0041 };
    uint32_t const ces[9] = { 0x07DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_021)
{
    // 23E0 0062;	
    // (⏠) TOP TORTOISE SHELL BRACKET	[07DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E0, 0x0062 };
    uint32_t const ces[9] = { 0x07DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_022)
{
    // 23E1 0021;	
    // (⏡) BOTTOM TORTOISE SHELL BRACKET	[07DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E1, 0x0021 };
    uint32_t const ces[9] = { 0x07DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_023)
{
    // 23E1 003F;	
    // (⏡) BOTTOM TORTOISE SHELL BRACKET	[07DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E1, 0x003F };
    uint32_t const ces[9] = { 0x07DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_024)
{
    // 23E1 0061;	
    // (⏡) BOTTOM TORTOISE SHELL BRACKET	[07DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E1, 0x0061 };
    uint32_t const ces[9] = { 0x07DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_025)
{
    // 23E1 0041;	
    // (⏡) BOTTOM TORTOISE SHELL BRACKET	[07DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E1, 0x0041 };
    uint32_t const ces[9] = { 0x07DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_026)
{
    // 23E1 0062;	
    // (⏡) BOTTOM TORTOISE SHELL BRACKET	[07DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E1, 0x0062 };
    uint32_t const ces[9] = { 0x07DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_027)
{
    // 23E2 0021;	
    // (⏢) WHITE TRAPEZIUM	[07DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E2, 0x0021 };
    uint32_t const ces[9] = { 0x07DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_028)
{
    // 23E2 003F;	
    // (⏢) WHITE TRAPEZIUM	[07DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E2, 0x003F };
    uint32_t const ces[9] = { 0x07DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_029)
{
    // 23E2 0061;	
    // (⏢) WHITE TRAPEZIUM	[07DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E2, 0x0061 };
    uint32_t const ces[9] = { 0x07DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_030)
{
    // 23E2 0041;	
    // (⏢) WHITE TRAPEZIUM	[07DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E2, 0x0041 };
    uint32_t const ces[9] = { 0x07DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_031)
{
    // 23E2 0062;	
    // (⏢) WHITE TRAPEZIUM	[07DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E2, 0x0062 };
    uint32_t const ces[9] = { 0x07DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_032)
{
    // 23E3 0021;	
    // (⏣) BENZENE RING WITH CIRCLE	[07E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E3, 0x0021 };
    uint32_t const ces[9] = { 0x07E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_033)
{
    // 23E3 003F;	
    // (⏣) BENZENE RING WITH CIRCLE	[07E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E3, 0x003F };
    uint32_t const ces[9] = { 0x07E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_034)
{
    // 23E3 0061;	
    // (⏣) BENZENE RING WITH CIRCLE	[07E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E3, 0x0061 };
    uint32_t const ces[9] = { 0x07E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_035)
{
    // 23E3 0041;	
    // (⏣) BENZENE RING WITH CIRCLE	[07E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E3, 0x0041 };
    uint32_t const ces[9] = { 0x07E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_036)
{
    // 23E3 0062;	
    // (⏣) BENZENE RING WITH CIRCLE	[07E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E3, 0x0062 };
    uint32_t const ces[9] = { 0x07E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_037)
{
    // 23E4 0021;	
    // (⏤) STRAIGHTNESS	[07E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E4, 0x0021 };
    uint32_t const ces[9] = { 0x07E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_038)
{
    // 23E4 003F;	
    // (⏤) STRAIGHTNESS	[07E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E4, 0x003F };
    uint32_t const ces[9] = { 0x07E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_039)
{
    // 23E4 0061;	
    // (⏤) STRAIGHTNESS	[07E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E4, 0x0061 };
    uint32_t const ces[9] = { 0x07E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_040)
{
    // 23E4 0041;	
    // (⏤) STRAIGHTNESS	[07E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E4, 0x0041 };
    uint32_t const ces[9] = { 0x07E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_041)
{
    // 23E4 0062;	
    // (⏤) STRAIGHTNESS	[07E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E4, 0x0062 };
    uint32_t const ces[9] = { 0x07E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_042)
{
    // 23E5 0021;	
    // (⏥) FLATNESS	[07E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E5, 0x0021 };
    uint32_t const ces[9] = { 0x07E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_043)
{
    // 23E5 003F;	
    // (⏥) FLATNESS	[07E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E5, 0x003F };
    uint32_t const ces[9] = { 0x07E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_044)
{
    // 23E5 0061;	
    // (⏥) FLATNESS	[07E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E5, 0x0061 };
    uint32_t const ces[9] = { 0x07E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_045)
{
    // 23E5 0041;	
    // (⏥) FLATNESS	[07E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E5, 0x0041 };
    uint32_t const ces[9] = { 0x07E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_046)
{
    // 23E5 0062;	
    // (⏥) FLATNESS	[07E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E5, 0x0062 };
    uint32_t const ces[9] = { 0x07E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_047)
{
    // 23E6 0021;	
    // (⏦) AC CURRENT	[07E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E6, 0x0021 };
    uint32_t const ces[9] = { 0x07E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_048)
{
    // 23E6 003F;	
    // (⏦) AC CURRENT	[07E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E6, 0x003F };
    uint32_t const ces[9] = { 0x07E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_049)
{
    // 23E6 0061;	
    // (⏦) AC CURRENT	[07E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E6, 0x0061 };
    uint32_t const ces[9] = { 0x07E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_050)
{
    // 23E6 0041;	
    // (⏦) AC CURRENT	[07E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E6, 0x0041 };
    uint32_t const ces[9] = { 0x07E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_051)
{
    // 23E6 0062;	
    // (⏦) AC CURRENT	[07E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E6, 0x0062 };
    uint32_t const ces[9] = { 0x07E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_052)
{
    // 23E7 0021;	
    // (⏧) ELECTRICAL INTERSECTION	[07E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E7, 0x0021 };
    uint32_t const ces[9] = { 0x07E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_053)
{
    // 23E7 003F;	
    // (⏧) ELECTRICAL INTERSECTION	[07E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E7, 0x003F };
    uint32_t const ces[9] = { 0x07E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_054)
{
    // 23E7 0061;	
    // (⏧) ELECTRICAL INTERSECTION	[07E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E7, 0x0061 };
    uint32_t const ces[9] = { 0x07E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_055)
{
    // 23E7 0041;	
    // (⏧) ELECTRICAL INTERSECTION	[07E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E7, 0x0041 };
    uint32_t const ces[9] = { 0x07E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_056)
{
    // 23E7 0062;	
    // (⏧) ELECTRICAL INTERSECTION	[07E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E7, 0x0062 };
    uint32_t const ces[9] = { 0x07E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_057)
{
    // 23E8 0021;	
    // (⏨) DECIMAL EXPONENT SYMBOL	[07E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E8, 0x0021 };
    uint32_t const ces[9] = { 0x07E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_058)
{
    // 23E8 003F;	
    // (⏨) DECIMAL EXPONENT SYMBOL	[07E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E8, 0x003F };
    uint32_t const ces[9] = { 0x07E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_059)
{
    // 23E8 0061;	
    // (⏨) DECIMAL EXPONENT SYMBOL	[07E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E8, 0x0061 };
    uint32_t const ces[9] = { 0x07E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_060)
{
    // 23E8 0041;	
    // (⏨) DECIMAL EXPONENT SYMBOL	[07E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E8, 0x0041 };
    uint32_t const ces[9] = { 0x07E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_061)
{
    // 23E8 0062;	
    // (⏨) DECIMAL EXPONENT SYMBOL	[07E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E8, 0x0062 };
    uint32_t const ces[9] = { 0x07E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_062)
{
    // 23E9 0021;	
    // (⏩) BLACK RIGHT-POINTING DOUBLE TRIANGLE	[07E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E9, 0x0021 };
    uint32_t const ces[9] = { 0x07E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_063)
{
    // 23E9 003F;	
    // (⏩) BLACK RIGHT-POINTING DOUBLE TRIANGLE	[07E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E9, 0x003F };
    uint32_t const ces[9] = { 0x07E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_064)
{
    // 23E9 0061;	
    // (⏩) BLACK RIGHT-POINTING DOUBLE TRIANGLE	[07E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E9, 0x0061 };
    uint32_t const ces[9] = { 0x07E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_065)
{
    // 23E9 0041;	
    // (⏩) BLACK RIGHT-POINTING DOUBLE TRIANGLE	[07E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23E9, 0x0041 };
    uint32_t const ces[9] = { 0x07E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_066)
{
    // 23E9 0062;	
    // (⏩) BLACK RIGHT-POINTING DOUBLE TRIANGLE	[07E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23E9, 0x0062 };
    uint32_t const ces[9] = { 0x07E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_067)
{
    // 23EA 0021;	
    // (⏪) BLACK LEFT-POINTING DOUBLE TRIANGLE	[07E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EA, 0x0021 };
    uint32_t const ces[9] = { 0x07E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_068)
{
    // 23EA 003F;	
    // (⏪) BLACK LEFT-POINTING DOUBLE TRIANGLE	[07E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EA, 0x003F };
    uint32_t const ces[9] = { 0x07E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_069)
{
    // 23EA 0061;	
    // (⏪) BLACK LEFT-POINTING DOUBLE TRIANGLE	[07E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EA, 0x0061 };
    uint32_t const ces[9] = { 0x07E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_070)
{
    // 23EA 0041;	
    // (⏪) BLACK LEFT-POINTING DOUBLE TRIANGLE	[07E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23EA, 0x0041 };
    uint32_t const ces[9] = { 0x07E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_071)
{
    // 23EA 0062;	
    // (⏪) BLACK LEFT-POINTING DOUBLE TRIANGLE	[07E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EA, 0x0062 };
    uint32_t const ces[9] = { 0x07E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_072)
{
    // 23EB 0021;	
    // (⏫) BLACK UP-POINTING DOUBLE TRIANGLE	[07E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EB, 0x0021 };
    uint32_t const ces[9] = { 0x07E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_073)
{
    // 23EB 003F;	
    // (⏫) BLACK UP-POINTING DOUBLE TRIANGLE	[07E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EB, 0x003F };
    uint32_t const ces[9] = { 0x07E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_074)
{
    // 23EB 0061;	
    // (⏫) BLACK UP-POINTING DOUBLE TRIANGLE	[07E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EB, 0x0061 };
    uint32_t const ces[9] = { 0x07E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_075)
{
    // 23EB 0041;	
    // (⏫) BLACK UP-POINTING DOUBLE TRIANGLE	[07E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23EB, 0x0041 };
    uint32_t const ces[9] = { 0x07E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_076)
{
    // 23EB 0062;	
    // (⏫) BLACK UP-POINTING DOUBLE TRIANGLE	[07E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EB, 0x0062 };
    uint32_t const ces[9] = { 0x07E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_077)
{
    // 23EC 0021;	
    // (⏬) BLACK DOWN-POINTING DOUBLE TRIANGLE	[07E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EC, 0x0021 };
    uint32_t const ces[9] = { 0x07E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_078)
{
    // 23EC 003F;	
    // (⏬) BLACK DOWN-POINTING DOUBLE TRIANGLE	[07E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EC, 0x003F };
    uint32_t const ces[9] = { 0x07E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_079)
{
    // 23EC 0061;	
    // (⏬) BLACK DOWN-POINTING DOUBLE TRIANGLE	[07E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EC, 0x0061 };
    uint32_t const ces[9] = { 0x07E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_080)
{
    // 23EC 0041;	
    // (⏬) BLACK DOWN-POINTING DOUBLE TRIANGLE	[07E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23EC, 0x0041 };
    uint32_t const ces[9] = { 0x07E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_081)
{
    // 23EC 0062;	
    // (⏬) BLACK DOWN-POINTING DOUBLE TRIANGLE	[07E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EC, 0x0062 };
    uint32_t const ces[9] = { 0x07E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_082)
{
    // 23ED 0021;	
    // (⏭) BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23ED, 0x0021 };
    uint32_t const ces[9] = { 0x07EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_083)
{
    // 23ED 003F;	
    // (⏭) BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23ED, 0x003F };
    uint32_t const ces[9] = { 0x07EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_084)
{
    // 23ED 0061;	
    // (⏭) BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23ED, 0x0061 };
    uint32_t const ces[9] = { 0x07EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_085)
{
    // 23ED 0041;	
    // (⏭) BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23ED, 0x0041 };
    uint32_t const ces[9] = { 0x07EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_086)
{
    // 23ED 0062;	
    // (⏭) BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23ED, 0x0062 };
    uint32_t const ces[9] = { 0x07EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_087)
{
    // 23EE 0021;	
    // (⏮) BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EE, 0x0021 };
    uint32_t const ces[9] = { 0x07EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_088)
{
    // 23EE 003F;	
    // (⏮) BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EE, 0x003F };
    uint32_t const ces[9] = { 0x07EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_089)
{
    // 23EE 0061;	
    // (⏮) BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EE, 0x0061 };
    uint32_t const ces[9] = { 0x07EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_090)
{
    // 23EE 0041;	
    // (⏮) BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23EE, 0x0041 };
    uint32_t const ces[9] = { 0x07EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_091)
{
    // 23EE 0062;	
    // (⏮) BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR	[07EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EE, 0x0062 };
    uint32_t const ces[9] = { 0x07EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_092)
{
    // 23EF 0021;	
    // (⏯) BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR	[07EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EF, 0x0021 };
    uint32_t const ces[9] = { 0x07EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_093)
{
    // 23EF 003F;	
    // (⏯) BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR	[07EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EF, 0x003F };
    uint32_t const ces[9] = { 0x07EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_094)
{
    // 23EF 0061;	
    // (⏯) BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR	[07EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EF, 0x0061 };
    uint32_t const ces[9] = { 0x07EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_095)
{
    // 23EF 0041;	
    // (⏯) BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR	[07EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23EF, 0x0041 };
    uint32_t const ces[9] = { 0x07EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_096)
{
    // 23EF 0062;	
    // (⏯) BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR	[07EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23EF, 0x0062 };
    uint32_t const ces[9] = { 0x07EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_097)
{
    // 23F0 0021;	
    // (⏰) ALARM CLOCK	[07ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F0, 0x0021 };
    uint32_t const ces[9] = { 0x07ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_098)
{
    // 23F0 003F;	
    // (⏰) ALARM CLOCK	[07ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F0, 0x003F };
    uint32_t const ces[9] = { 0x07ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_099)
{
    // 23F0 0061;	
    // (⏰) ALARM CLOCK	[07ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F0, 0x0061 };
    uint32_t const ces[9] = { 0x07ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_100)
{
    // 23F0 0041;	
    // (⏰) ALARM CLOCK	[07ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F0, 0x0041 };
    uint32_t const ces[9] = { 0x07ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_101)
{
    // 23F0 0062;	
    // (⏰) ALARM CLOCK	[07ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F0, 0x0062 };
    uint32_t const ces[9] = { 0x07ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_102)
{
    // 23F1 0021;	
    // (⏱) STOPWATCH	[07EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F1, 0x0021 };
    uint32_t const ces[9] = { 0x07EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_103)
{
    // 23F1 003F;	
    // (⏱) STOPWATCH	[07EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F1, 0x003F };
    uint32_t const ces[9] = { 0x07EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_104)
{
    // 23F1 0061;	
    // (⏱) STOPWATCH	[07EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F1, 0x0061 };
    uint32_t const ces[9] = { 0x07EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_105)
{
    // 23F1 0041;	
    // (⏱) STOPWATCH	[07EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F1, 0x0041 };
    uint32_t const ces[9] = { 0x07EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_106)
{
    // 23F1 0062;	
    // (⏱) STOPWATCH	[07EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F1, 0x0062 };
    uint32_t const ces[9] = { 0x07EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_107)
{
    // 23F2 0021;	
    // (⏲) TIMER CLOCK	[07EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F2, 0x0021 };
    uint32_t const ces[9] = { 0x07EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_108)
{
    // 23F2 003F;	
    // (⏲) TIMER CLOCK	[07EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F2, 0x003F };
    uint32_t const ces[9] = { 0x07EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_109)
{
    // 23F2 0061;	
    // (⏲) TIMER CLOCK	[07EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F2, 0x0061 };
    uint32_t const ces[9] = { 0x07EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_110)
{
    // 23F2 0041;	
    // (⏲) TIMER CLOCK	[07EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F2, 0x0041 };
    uint32_t const ces[9] = { 0x07EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_111)
{
    // 23F2 0062;	
    // (⏲) TIMER CLOCK	[07EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F2, 0x0062 };
    uint32_t const ces[9] = { 0x07EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_112)
{
    // 23F3 0021;	
    // (⏳) HOURGLASS WITH FLOWING SAND	[07F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F3, 0x0021 };
    uint32_t const ces[9] = { 0x07F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_113)
{
    // 23F3 003F;	
    // (⏳) HOURGLASS WITH FLOWING SAND	[07F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F3, 0x003F };
    uint32_t const ces[9] = { 0x07F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_114)
{
    // 23F3 0061;	
    // (⏳) HOURGLASS WITH FLOWING SAND	[07F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F3, 0x0061 };
    uint32_t const ces[9] = { 0x07F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_115)
{
    // 23F3 0041;	
    // (⏳) HOURGLASS WITH FLOWING SAND	[07F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F3, 0x0041 };
    uint32_t const ces[9] = { 0x07F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_116)
{
    // 23F3 0062;	
    // (⏳) HOURGLASS WITH FLOWING SAND	[07F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F3, 0x0062 };
    uint32_t const ces[9] = { 0x07F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_117)
{
    // 23F4 0021;	
    // (⏴) BLACK MEDIUM LEFT-POINTING TRIANGLE	[07F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F4, 0x0021 };
    uint32_t const ces[9] = { 0x07F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_118)
{
    // 23F4 003F;	
    // (⏴) BLACK MEDIUM LEFT-POINTING TRIANGLE	[07F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F4, 0x003F };
    uint32_t const ces[9] = { 0x07F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_119)
{
    // 23F4 0061;	
    // (⏴) BLACK MEDIUM LEFT-POINTING TRIANGLE	[07F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F4, 0x0061 };
    uint32_t const ces[9] = { 0x07F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_120)
{
    // 23F4 0041;	
    // (⏴) BLACK MEDIUM LEFT-POINTING TRIANGLE	[07F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F4, 0x0041 };
    uint32_t const ces[9] = { 0x07F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_121)
{
    // 23F4 0062;	
    // (⏴) BLACK MEDIUM LEFT-POINTING TRIANGLE	[07F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F4, 0x0062 };
    uint32_t const ces[9] = { 0x07F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_122)
{
    // 23F5 0021;	
    // (⏵) BLACK MEDIUM RIGHT-POINTING TRIANGLE	[07F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F5, 0x0021 };
    uint32_t const ces[9] = { 0x07F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_123)
{
    // 23F5 003F;	
    // (⏵) BLACK MEDIUM RIGHT-POINTING TRIANGLE	[07F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F5, 0x003F };
    uint32_t const ces[9] = { 0x07F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_124)
{
    // 23F5 0061;	
    // (⏵) BLACK MEDIUM RIGHT-POINTING TRIANGLE	[07F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F5, 0x0061 };
    uint32_t const ces[9] = { 0x07F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_125)
{
    // 23F5 0041;	
    // (⏵) BLACK MEDIUM RIGHT-POINTING TRIANGLE	[07F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F5, 0x0041 };
    uint32_t const ces[9] = { 0x07F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_126)
{
    // 23F5 0062;	
    // (⏵) BLACK MEDIUM RIGHT-POINTING TRIANGLE	[07F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F5, 0x0062 };
    uint32_t const ces[9] = { 0x07F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_127)
{
    // 23F6 0021;	
    // (⏶) BLACK MEDIUM UP-POINTING TRIANGLE	[07F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F6, 0x0021 };
    uint32_t const ces[9] = { 0x07F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_128)
{
    // 23F6 003F;	
    // (⏶) BLACK MEDIUM UP-POINTING TRIANGLE	[07F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F6, 0x003F };
    uint32_t const ces[9] = { 0x07F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_129)
{
    // 23F6 0061;	
    // (⏶) BLACK MEDIUM UP-POINTING TRIANGLE	[07F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F6, 0x0061 };
    uint32_t const ces[9] = { 0x07F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_130)
{
    // 23F6 0041;	
    // (⏶) BLACK MEDIUM UP-POINTING TRIANGLE	[07F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F6, 0x0041 };
    uint32_t const ces[9] = { 0x07F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_131)
{
    // 23F6 0062;	
    // (⏶) BLACK MEDIUM UP-POINTING TRIANGLE	[07F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F6, 0x0062 };
    uint32_t const ces[9] = { 0x07F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_132)
{
    // 23F7 0021;	
    // (⏷) BLACK MEDIUM DOWN-POINTING TRIANGLE	[07F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F7, 0x0021 };
    uint32_t const ces[9] = { 0x07F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_133)
{
    // 23F7 003F;	
    // (⏷) BLACK MEDIUM DOWN-POINTING TRIANGLE	[07F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F7, 0x003F };
    uint32_t const ces[9] = { 0x07F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_134)
{
    // 23F7 0061;	
    // (⏷) BLACK MEDIUM DOWN-POINTING TRIANGLE	[07F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F7, 0x0061 };
    uint32_t const ces[9] = { 0x07F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_135)
{
    // 23F7 0041;	
    // (⏷) BLACK MEDIUM DOWN-POINTING TRIANGLE	[07F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F7, 0x0041 };
    uint32_t const ces[9] = { 0x07F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_136)
{
    // 23F7 0062;	
    // (⏷) BLACK MEDIUM DOWN-POINTING TRIANGLE	[07F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F7, 0x0062 };
    uint32_t const ces[9] = { 0x07F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_137)
{
    // 23F8 0021;	
    // (⏸) DOUBLE VERTICAL BAR	[07F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F8, 0x0021 };
    uint32_t const ces[9] = { 0x07F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_138)
{
    // 23F8 003F;	
    // (⏸) DOUBLE VERTICAL BAR	[07F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F8, 0x003F };
    uint32_t const ces[9] = { 0x07F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_139)
{
    // 23F8 0061;	
    // (⏸) DOUBLE VERTICAL BAR	[07F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F8, 0x0061 };
    uint32_t const ces[9] = { 0x07F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_140)
{
    // 23F8 0041;	
    // (⏸) DOUBLE VERTICAL BAR	[07F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F8, 0x0041 };
    uint32_t const ces[9] = { 0x07F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_141)
{
    // 23F8 0062;	
    // (⏸) DOUBLE VERTICAL BAR	[07F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F8, 0x0062 };
    uint32_t const ces[9] = { 0x07F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_142)
{
    // 23F9 0021;	
    // (⏹) BLACK SQUARE FOR STOP	[07F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F9, 0x0021 };
    uint32_t const ces[9] = { 0x07F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_143)
{
    // 23F9 003F;	
    // (⏹) BLACK SQUARE FOR STOP	[07F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F9, 0x003F };
    uint32_t const ces[9] = { 0x07F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_144)
{
    // 23F9 0061;	
    // (⏹) BLACK SQUARE FOR STOP	[07F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F9, 0x0061 };
    uint32_t const ces[9] = { 0x07F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_145)
{
    // 23F9 0041;	
    // (⏹) BLACK SQUARE FOR STOP	[07F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23F9, 0x0041 };
    uint32_t const ces[9] = { 0x07F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_146)
{
    // 23F9 0062;	
    // (⏹) BLACK SQUARE FOR STOP	[07F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23F9, 0x0062 };
    uint32_t const ces[9] = { 0x07F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_147)
{
    // 23FA 0021;	
    // (⏺) BLACK CIRCLE FOR RECORD	[07F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FA, 0x0021 };
    uint32_t const ces[9] = { 0x07F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_148)
{
    // 23FA 003F;	
    // (⏺) BLACK CIRCLE FOR RECORD	[07F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FA, 0x003F };
    uint32_t const ces[9] = { 0x07F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_149)
{
    // 23FA 0061;	
    // (⏺) BLACK CIRCLE FOR RECORD	[07F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FA, 0x0061 };
    uint32_t const ces[9] = { 0x07F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_150)
{
    // 23FA 0041;	
    // (⏺) BLACK CIRCLE FOR RECORD	[07F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FA, 0x0041 };
    uint32_t const ces[9] = { 0x07F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_151)
{
    // 23FA 0062;	
    // (⏺) BLACK CIRCLE FOR RECORD	[07F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FA, 0x0062 };
    uint32_t const ces[9] = { 0x07F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_152)
{
    // 23FB 0021;	
    // (⏻) POWER SYMBOL	[07F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FB, 0x0021 };
    uint32_t const ces[9] = { 0x07F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_153)
{
    // 23FB 003F;	
    // (⏻) POWER SYMBOL	[07F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FB, 0x003F };
    uint32_t const ces[9] = { 0x07F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_154)
{
    // 23FB 0061;	
    // (⏻) POWER SYMBOL	[07F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FB, 0x0061 };
    uint32_t const ces[9] = { 0x07F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_155)
{
    // 23FB 0041;	
    // (⏻) POWER SYMBOL	[07F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FB, 0x0041 };
    uint32_t const ces[9] = { 0x07F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_156)
{
    // 23FB 0062;	
    // (⏻) POWER SYMBOL	[07F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FB, 0x0062 };
    uint32_t const ces[9] = { 0x07F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_157)
{
    // 23FC 0021;	
    // (⏼) POWER ON-OFF SYMBOL	[07F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FC, 0x0021 };
    uint32_t const ces[9] = { 0x07F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_158)
{
    // 23FC 003F;	
    // (⏼) POWER ON-OFF SYMBOL	[07F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FC, 0x003F };
    uint32_t const ces[9] = { 0x07F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_159)
{
    // 23FC 0061;	
    // (⏼) POWER ON-OFF SYMBOL	[07F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FC, 0x0061 };
    uint32_t const ces[9] = { 0x07F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_160)
{
    // 23FC 0041;	
    // (⏼) POWER ON-OFF SYMBOL	[07F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FC, 0x0041 };
    uint32_t const ces[9] = { 0x07F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_161)
{
    // 23FC 0062;	
    // (⏼) POWER ON-OFF SYMBOL	[07F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FC, 0x0062 };
    uint32_t const ces[9] = { 0x07F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_162)
{
    // 23FD 0021;	
    // (⏽) POWER ON SYMBOL	[07FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FD, 0x0021 };
    uint32_t const ces[9] = { 0x07FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_163)
{
    // 23FD 003F;	
    // (⏽) POWER ON SYMBOL	[07FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FD, 0x003F };
    uint32_t const ces[9] = { 0x07FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_164)
{
    // 23FD 0061;	
    // (⏽) POWER ON SYMBOL	[07FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FD, 0x0061 };
    uint32_t const ces[9] = { 0x07FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_165)
{
    // 23FD 0041;	
    // (⏽) POWER ON SYMBOL	[07FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FD, 0x0041 };
    uint32_t const ces[9] = { 0x07FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_166)
{
    // 23FD 0062;	
    // (⏽) POWER ON SYMBOL	[07FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FD, 0x0062 };
    uint32_t const ces[9] = { 0x07FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_167)
{
    // 23FE 0021;	
    // (⏾) POWER SLEEP SYMBOL	[07FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FE, 0x0021 };
    uint32_t const ces[9] = { 0x07FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_168)
{
    // 23FE 003F;	
    // (⏾) POWER SLEEP SYMBOL	[07FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FE, 0x003F };
    uint32_t const ces[9] = { 0x07FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_169)
{
    // 23FE 0061;	
    // (⏾) POWER SLEEP SYMBOL	[07FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FE, 0x0061 };
    uint32_t const ces[9] = { 0x07FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_170)
{
    // 23FE 0041;	
    // (⏾) POWER SLEEP SYMBOL	[07FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FE, 0x0041 };
    uint32_t const ces[9] = { 0x07FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_171)
{
    // 23FE 0062;	
    // (⏾) POWER SLEEP SYMBOL	[07FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FE, 0x0062 };
    uint32_t const ces[9] = { 0x07FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_172)
{
    // 23FF 0021;	
    // (⏿) OBSERVER EYE SYMBOL	[07FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FF, 0x0021 };
    uint32_t const ces[9] = { 0x07FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_173)
{
    // 23FF 003F;	
    // (⏿) OBSERVER EYE SYMBOL	[07FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FF, 0x003F };
    uint32_t const ces[9] = { 0x07FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_174)
{
    // 23FF 0061;	
    // (⏿) OBSERVER EYE SYMBOL	[07FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FF, 0x0061 };
    uint32_t const ces[9] = { 0x07FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_175)
{
    // 23FF 0041;	
    // (⏿) OBSERVER EYE SYMBOL	[07FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23FF, 0x0041 };
    uint32_t const ces[9] = { 0x07FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_176)
{
    // 23FF 0062;	
    // (⏿) OBSERVER EYE SYMBOL	[07FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23FF, 0x0062 };
    uint32_t const ces[9] = { 0x07FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_177)
{
    // 2400 0021;	
    // (␀) SYMBOL FOR NULL	[07FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2400, 0x0021 };
    uint32_t const ces[9] = { 0x07FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_178)
{
    // 2400 003F;	
    // (␀) SYMBOL FOR NULL	[07FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2400, 0x003F };
    uint32_t const ces[9] = { 0x07FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_179)
{
    // 2400 0061;	
    // (␀) SYMBOL FOR NULL	[07FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2400, 0x0061 };
    uint32_t const ces[9] = { 0x07FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_180)
{
    // 2400 0041;	
    // (␀) SYMBOL FOR NULL	[07FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2400, 0x0041 };
    uint32_t const ces[9] = { 0x07FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_181)
{
    // 2400 0062;	
    // (␀) SYMBOL FOR NULL	[07FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2400, 0x0062 };
    uint32_t const ces[9] = { 0x07FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_182)
{
    // 2401 0021;	
    // (␁) SYMBOL FOR START OF HEADING	[07FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2401, 0x0021 };
    uint32_t const ces[9] = { 0x07FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_183)
{
    // 2401 003F;	
    // (␁) SYMBOL FOR START OF HEADING	[07FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2401, 0x003F };
    uint32_t const ces[9] = { 0x07FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_184)
{
    // 2401 0061;	
    // (␁) SYMBOL FOR START OF HEADING	[07FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2401, 0x0061 };
    uint32_t const ces[9] = { 0x07FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_185)
{
    // 2401 0041;	
    // (␁) SYMBOL FOR START OF HEADING	[07FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2401, 0x0041 };
    uint32_t const ces[9] = { 0x07FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_186)
{
    // 2401 0062;	
    // (␁) SYMBOL FOR START OF HEADING	[07FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2401, 0x0062 };
    uint32_t const ces[9] = { 0x07FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_187)
{
    // 2402 0021;	
    // (␂) SYMBOL FOR START OF TEXT	[07FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2402, 0x0021 };
    uint32_t const ces[9] = { 0x07FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_188)
{
    // 2402 003F;	
    // (␂) SYMBOL FOR START OF TEXT	[07FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2402, 0x003F };
    uint32_t const ces[9] = { 0x07FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_189)
{
    // 2402 0061;	
    // (␂) SYMBOL FOR START OF TEXT	[07FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2402, 0x0061 };
    uint32_t const ces[9] = { 0x07FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_190)
{
    // 2402 0041;	
    // (␂) SYMBOL FOR START OF TEXT	[07FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2402, 0x0041 };
    uint32_t const ces[9] = { 0x07FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_191)
{
    // 2402 0062;	
    // (␂) SYMBOL FOR START OF TEXT	[07FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2402, 0x0062 };
    uint32_t const ces[9] = { 0x07FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_192)
{
    // 2403 0021;	
    // (␃) SYMBOL FOR END OF TEXT	[0800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2403, 0x0021 };
    uint32_t const ces[9] = { 0x0800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_193)
{
    // 2403 003F;	
    // (␃) SYMBOL FOR END OF TEXT	[0800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2403, 0x003F };
    uint32_t const ces[9] = { 0x0800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_194)
{
    // 2403 0061;	
    // (␃) SYMBOL FOR END OF TEXT	[0800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2403, 0x0061 };
    uint32_t const ces[9] = { 0x0800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_195)
{
    // 2403 0041;	
    // (␃) SYMBOL FOR END OF TEXT	[0800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2403, 0x0041 };
    uint32_t const ces[9] = { 0x0800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_196)
{
    // 2403 0062;	
    // (␃) SYMBOL FOR END OF TEXT	[0800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2403, 0x0062 };
    uint32_t const ces[9] = { 0x0800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_197)
{
    // 2404 0021;	
    // (␄) SYMBOL FOR END OF TRANSMISSION	[0801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2404, 0x0021 };
    uint32_t const ces[9] = { 0x0801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_198)
{
    // 2404 003F;	
    // (␄) SYMBOL FOR END OF TRANSMISSION	[0801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2404, 0x003F };
    uint32_t const ces[9] = { 0x0801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_199)
{
    // 2404 0061;	
    // (␄) SYMBOL FOR END OF TRANSMISSION	[0801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2404, 0x0061 };
    uint32_t const ces[9] = { 0x0801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_200)
{
    // 2404 0041;	
    // (␄) SYMBOL FOR END OF TRANSMISSION	[0801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2404, 0x0041 };
    uint32_t const ces[9] = { 0x0801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_201)
{
    // 2404 0062;	
    // (␄) SYMBOL FOR END OF TRANSMISSION	[0801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2404, 0x0062 };
    uint32_t const ces[9] = { 0x0801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_202)
{
    // 2405 0021;	
    // (␅) SYMBOL FOR ENQUIRY	[0802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2405, 0x0021 };
    uint32_t const ces[9] = { 0x0802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_203)
{
    // 2405 003F;	
    // (␅) SYMBOL FOR ENQUIRY	[0802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2405, 0x003F };
    uint32_t const ces[9] = { 0x0802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_204)
{
    // 2405 0061;	
    // (␅) SYMBOL FOR ENQUIRY	[0802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2405, 0x0061 };
    uint32_t const ces[9] = { 0x0802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_205)
{
    // 2405 0041;	
    // (␅) SYMBOL FOR ENQUIRY	[0802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2405, 0x0041 };
    uint32_t const ces[9] = { 0x0802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_206)
{
    // 2405 0062;	
    // (␅) SYMBOL FOR ENQUIRY	[0802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2405, 0x0062 };
    uint32_t const ces[9] = { 0x0802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_207)
{
    // 2406 0021;	
    // (␆) SYMBOL FOR ACKNOWLEDGE	[0803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2406, 0x0021 };
    uint32_t const ces[9] = { 0x0803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_208)
{
    // 2406 003F;	
    // (␆) SYMBOL FOR ACKNOWLEDGE	[0803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2406, 0x003F };
    uint32_t const ces[9] = { 0x0803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_209)
{
    // 2406 0061;	
    // (␆) SYMBOL FOR ACKNOWLEDGE	[0803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2406, 0x0061 };
    uint32_t const ces[9] = { 0x0803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_210)
{
    // 2406 0041;	
    // (␆) SYMBOL FOR ACKNOWLEDGE	[0803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2406, 0x0041 };
    uint32_t const ces[9] = { 0x0803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_211)
{
    // 2406 0062;	
    // (␆) SYMBOL FOR ACKNOWLEDGE	[0803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2406, 0x0062 };
    uint32_t const ces[9] = { 0x0803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_212)
{
    // 2407 0021;	
    // (␇) SYMBOL FOR BELL	[0804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2407, 0x0021 };
    uint32_t const ces[9] = { 0x0804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_213)
{
    // 2407 003F;	
    // (␇) SYMBOL FOR BELL	[0804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2407, 0x003F };
    uint32_t const ces[9] = { 0x0804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_214)
{
    // 2407 0061;	
    // (␇) SYMBOL FOR BELL	[0804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2407, 0x0061 };
    uint32_t const ces[9] = { 0x0804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_215)
{
    // 2407 0041;	
    // (␇) SYMBOL FOR BELL	[0804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2407, 0x0041 };
    uint32_t const ces[9] = { 0x0804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_216)
{
    // 2407 0062;	
    // (␇) SYMBOL FOR BELL	[0804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2407, 0x0062 };
    uint32_t const ces[9] = { 0x0804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_217)
{
    // 2408 0021;	
    // (␈) SYMBOL FOR BACKSPACE	[0805 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2408, 0x0021 };
    uint32_t const ces[9] = { 0x0805, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_218)
{
    // 2408 003F;	
    // (␈) SYMBOL FOR BACKSPACE	[0805 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2408, 0x003F };
    uint32_t const ces[9] = { 0x0805, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_219)
{
    // 2408 0061;	
    // (␈) SYMBOL FOR BACKSPACE	[0805 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2408, 0x0061 };
    uint32_t const ces[9] = { 0x0805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_220)
{
    // 2408 0041;	
    // (␈) SYMBOL FOR BACKSPACE	[0805 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2408, 0x0041 };
    uint32_t const ces[9] = { 0x0805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_221)
{
    // 2408 0062;	
    // (␈) SYMBOL FOR BACKSPACE	[0805 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2408, 0x0062 };
    uint32_t const ces[9] = { 0x0805, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_222)
{
    // 2409 0021;	
    // (␉) SYMBOL FOR HORIZONTAL TABULATION	[0806 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2409, 0x0021 };
    uint32_t const ces[9] = { 0x0806, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_223)
{
    // 2409 003F;	
    // (␉) SYMBOL FOR HORIZONTAL TABULATION	[0806 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2409, 0x003F };
    uint32_t const ces[9] = { 0x0806, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_224)
{
    // 2409 0061;	
    // (␉) SYMBOL FOR HORIZONTAL TABULATION	[0806 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2409, 0x0061 };
    uint32_t const ces[9] = { 0x0806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_225)
{
    // 2409 0041;	
    // (␉) SYMBOL FOR HORIZONTAL TABULATION	[0806 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2409, 0x0041 };
    uint32_t const ces[9] = { 0x0806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_226)
{
    // 2409 0062;	
    // (␉) SYMBOL FOR HORIZONTAL TABULATION	[0806 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2409, 0x0062 };
    uint32_t const ces[9] = { 0x0806, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_227)
{
    // 240A 0021;	
    // (␊) SYMBOL FOR LINE FEED	[0807 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240A, 0x0021 };
    uint32_t const ces[9] = { 0x0807, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_228)
{
    // 240A 003F;	
    // (␊) SYMBOL FOR LINE FEED	[0807 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240A, 0x003F };
    uint32_t const ces[9] = { 0x0807, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_229)
{
    // 240A 0061;	
    // (␊) SYMBOL FOR LINE FEED	[0807 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240A, 0x0061 };
    uint32_t const ces[9] = { 0x0807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_230)
{
    // 240A 0041;	
    // (␊) SYMBOL FOR LINE FEED	[0807 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240A, 0x0041 };
    uint32_t const ces[9] = { 0x0807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_231)
{
    // 240A 0062;	
    // (␊) SYMBOL FOR LINE FEED	[0807 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240A, 0x0062 };
    uint32_t const ces[9] = { 0x0807, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_232)
{
    // 240B 0021;	
    // (␋) SYMBOL FOR VERTICAL TABULATION	[0808 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240B, 0x0021 };
    uint32_t const ces[9] = { 0x0808, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_233)
{
    // 240B 003F;	
    // (␋) SYMBOL FOR VERTICAL TABULATION	[0808 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240B, 0x003F };
    uint32_t const ces[9] = { 0x0808, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_234)
{
    // 240B 0061;	
    // (␋) SYMBOL FOR VERTICAL TABULATION	[0808 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240B, 0x0061 };
    uint32_t const ces[9] = { 0x0808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_235)
{
    // 240B 0041;	
    // (␋) SYMBOL FOR VERTICAL TABULATION	[0808 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240B, 0x0041 };
    uint32_t const ces[9] = { 0x0808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_236)
{
    // 240B 0062;	
    // (␋) SYMBOL FOR VERTICAL TABULATION	[0808 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240B, 0x0062 };
    uint32_t const ces[9] = { 0x0808, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_237)
{
    // 240C 0021;	
    // (␌) SYMBOL FOR FORM FEED	[0809 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240C, 0x0021 };
    uint32_t const ces[9] = { 0x0809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_238)
{
    // 240C 003F;	
    // (␌) SYMBOL FOR FORM FEED	[0809 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240C, 0x003F };
    uint32_t const ces[9] = { 0x0809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_239)
{
    // 240C 0061;	
    // (␌) SYMBOL FOR FORM FEED	[0809 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240C, 0x0061 };
    uint32_t const ces[9] = { 0x0809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_240)
{
    // 240C 0041;	
    // (␌) SYMBOL FOR FORM FEED	[0809 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240C, 0x0041 };
    uint32_t const ces[9] = { 0x0809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_241)
{
    // 240C 0062;	
    // (␌) SYMBOL FOR FORM FEED	[0809 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240C, 0x0062 };
    uint32_t const ces[9] = { 0x0809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_242)
{
    // 240D 0021;	
    // (␍) SYMBOL FOR CARRIAGE RETURN	[080A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240D, 0x0021 };
    uint32_t const ces[9] = { 0x080A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_243)
{
    // 240D 003F;	
    // (␍) SYMBOL FOR CARRIAGE RETURN	[080A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240D, 0x003F };
    uint32_t const ces[9] = { 0x080A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_244)
{
    // 240D 0061;	
    // (␍) SYMBOL FOR CARRIAGE RETURN	[080A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240D, 0x0061 };
    uint32_t const ces[9] = { 0x080A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_245)
{
    // 240D 0041;	
    // (␍) SYMBOL FOR CARRIAGE RETURN	[080A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240D, 0x0041 };
    uint32_t const ces[9] = { 0x080A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_246)
{
    // 240D 0062;	
    // (␍) SYMBOL FOR CARRIAGE RETURN	[080A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240D, 0x0062 };
    uint32_t const ces[9] = { 0x080A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_247)
{
    // 240E 0021;	
    // (␎) SYMBOL FOR SHIFT OUT	[080B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240E, 0x0021 };
    uint32_t const ces[9] = { 0x080B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_248)
{
    // 240E 003F;	
    // (␎) SYMBOL FOR SHIFT OUT	[080B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240E, 0x003F };
    uint32_t const ces[9] = { 0x080B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_249)
{
    // 240E 0061;	
    // (␎) SYMBOL FOR SHIFT OUT	[080B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240E, 0x0061 };
    uint32_t const ces[9] = { 0x080B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_250)
{
    // 240E 0041;	
    // (␎) SYMBOL FOR SHIFT OUT	[080B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240E, 0x0041 };
    uint32_t const ces[9] = { 0x080B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_251)
{
    // 240E 0062;	
    // (␎) SYMBOL FOR SHIFT OUT	[080B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240E, 0x0062 };
    uint32_t const ces[9] = { 0x080B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_252)
{
    // 240F 0021;	
    // (␏) SYMBOL FOR SHIFT IN	[080C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240F, 0x0021 };
    uint32_t const ces[9] = { 0x080C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_253)
{
    // 240F 003F;	
    // (␏) SYMBOL FOR SHIFT IN	[080C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240F, 0x003F };
    uint32_t const ces[9] = { 0x080C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_254)
{
    // 240F 0061;	
    // (␏) SYMBOL FOR SHIFT IN	[080C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240F, 0x0061 };
    uint32_t const ces[9] = { 0x080C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_255)
{
    // 240F 0041;	
    // (␏) SYMBOL FOR SHIFT IN	[080C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x240F, 0x0041 };
    uint32_t const ces[9] = { 0x080C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_256)
{
    // 240F 0062;	
    // (␏) SYMBOL FOR SHIFT IN	[080C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x240F, 0x0062 };
    uint32_t const ces[9] = { 0x080C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_257)
{
    // 2410 0021;	
    // (␐) SYMBOL FOR DATA LINK ESCAPE	[080D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2410, 0x0021 };
    uint32_t const ces[9] = { 0x080D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_258)
{
    // 2410 003F;	
    // (␐) SYMBOL FOR DATA LINK ESCAPE	[080D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2410, 0x003F };
    uint32_t const ces[9] = { 0x080D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_259)
{
    // 2410 0061;	
    // (␐) SYMBOL FOR DATA LINK ESCAPE	[080D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2410, 0x0061 };
    uint32_t const ces[9] = { 0x080D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_260)
{
    // 2410 0041;	
    // (␐) SYMBOL FOR DATA LINK ESCAPE	[080D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2410, 0x0041 };
    uint32_t const ces[9] = { 0x080D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_261)
{
    // 2410 0062;	
    // (␐) SYMBOL FOR DATA LINK ESCAPE	[080D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2410, 0x0062 };
    uint32_t const ces[9] = { 0x080D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_262)
{
    // 2411 0021;	
    // (␑) SYMBOL FOR DEVICE CONTROL ONE	[080E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2411, 0x0021 };
    uint32_t const ces[9] = { 0x080E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_263)
{
    // 2411 003F;	
    // (␑) SYMBOL FOR DEVICE CONTROL ONE	[080E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2411, 0x003F };
    uint32_t const ces[9] = { 0x080E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_264)
{
    // 2411 0061;	
    // (␑) SYMBOL FOR DEVICE CONTROL ONE	[080E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2411, 0x0061 };
    uint32_t const ces[9] = { 0x080E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_265)
{
    // 2411 0041;	
    // (␑) SYMBOL FOR DEVICE CONTROL ONE	[080E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2411, 0x0041 };
    uint32_t const ces[9] = { 0x080E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_266)
{
    // 2411 0062;	
    // (␑) SYMBOL FOR DEVICE CONTROL ONE	[080E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2411, 0x0062 };
    uint32_t const ces[9] = { 0x080E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_267)
{
    // 2412 0021;	
    // (␒) SYMBOL FOR DEVICE CONTROL TWO	[080F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2412, 0x0021 };
    uint32_t const ces[9] = { 0x080F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_268)
{
    // 2412 003F;	
    // (␒) SYMBOL FOR DEVICE CONTROL TWO	[080F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2412, 0x003F };
    uint32_t const ces[9] = { 0x080F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_269)
{
    // 2412 0061;	
    // (␒) SYMBOL FOR DEVICE CONTROL TWO	[080F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2412, 0x0061 };
    uint32_t const ces[9] = { 0x080F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_270)
{
    // 2412 0041;	
    // (␒) SYMBOL FOR DEVICE CONTROL TWO	[080F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2412, 0x0041 };
    uint32_t const ces[9] = { 0x080F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_271)
{
    // 2412 0062;	
    // (␒) SYMBOL FOR DEVICE CONTROL TWO	[080F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2412, 0x0062 };
    uint32_t const ces[9] = { 0x080F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_272)
{
    // 2413 0021;	
    // (␓) SYMBOL FOR DEVICE CONTROL THREE	[0810 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2413, 0x0021 };
    uint32_t const ces[9] = { 0x0810, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_273)
{
    // 2413 003F;	
    // (␓) SYMBOL FOR DEVICE CONTROL THREE	[0810 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2413, 0x003F };
    uint32_t const ces[9] = { 0x0810, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_274)
{
    // 2413 0061;	
    // (␓) SYMBOL FOR DEVICE CONTROL THREE	[0810 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2413, 0x0061 };
    uint32_t const ces[9] = { 0x0810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_275)
{
    // 2413 0041;	
    // (␓) SYMBOL FOR DEVICE CONTROL THREE	[0810 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2413, 0x0041 };
    uint32_t const ces[9] = { 0x0810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_276)
{
    // 2413 0062;	
    // (␓) SYMBOL FOR DEVICE CONTROL THREE	[0810 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2413, 0x0062 };
    uint32_t const ces[9] = { 0x0810, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_277)
{
    // 2414 0021;	
    // (␔) SYMBOL FOR DEVICE CONTROL FOUR	[0811 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2414, 0x0021 };
    uint32_t const ces[9] = { 0x0811, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_278)
{
    // 2414 003F;	
    // (␔) SYMBOL FOR DEVICE CONTROL FOUR	[0811 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2414, 0x003F };
    uint32_t const ces[9] = { 0x0811, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_279)
{
    // 2414 0061;	
    // (␔) SYMBOL FOR DEVICE CONTROL FOUR	[0811 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2414, 0x0061 };
    uint32_t const ces[9] = { 0x0811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_280)
{
    // 2414 0041;	
    // (␔) SYMBOL FOR DEVICE CONTROL FOUR	[0811 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2414, 0x0041 };
    uint32_t const ces[9] = { 0x0811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_281)
{
    // 2414 0062;	
    // (␔) SYMBOL FOR DEVICE CONTROL FOUR	[0811 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2414, 0x0062 };
    uint32_t const ces[9] = { 0x0811, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_282)
{
    // 2415 0021;	
    // (␕) SYMBOL FOR NEGATIVE ACKNOWLEDGE	[0812 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2415, 0x0021 };
    uint32_t const ces[9] = { 0x0812, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_283)
{
    // 2415 003F;	
    // (␕) SYMBOL FOR NEGATIVE ACKNOWLEDGE	[0812 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2415, 0x003F };
    uint32_t const ces[9] = { 0x0812, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_284)
{
    // 2415 0061;	
    // (␕) SYMBOL FOR NEGATIVE ACKNOWLEDGE	[0812 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2415, 0x0061 };
    uint32_t const ces[9] = { 0x0812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_285)
{
    // 2415 0041;	
    // (␕) SYMBOL FOR NEGATIVE ACKNOWLEDGE	[0812 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2415, 0x0041 };
    uint32_t const ces[9] = { 0x0812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_286)
{
    // 2415 0062;	
    // (␕) SYMBOL FOR NEGATIVE ACKNOWLEDGE	[0812 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2415, 0x0062 };
    uint32_t const ces[9] = { 0x0812, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_287)
{
    // 2416 0021;	
    // (␖) SYMBOL FOR SYNCHRONOUS IDLE	[0813 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2416, 0x0021 };
    uint32_t const ces[9] = { 0x0813, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_288)
{
    // 2416 003F;	
    // (␖) SYMBOL FOR SYNCHRONOUS IDLE	[0813 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2416, 0x003F };
    uint32_t const ces[9] = { 0x0813, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_289)
{
    // 2416 0061;	
    // (␖) SYMBOL FOR SYNCHRONOUS IDLE	[0813 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2416, 0x0061 };
    uint32_t const ces[9] = { 0x0813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_290)
{
    // 2416 0041;	
    // (␖) SYMBOL FOR SYNCHRONOUS IDLE	[0813 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2416, 0x0041 };
    uint32_t const ces[9] = { 0x0813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_291)
{
    // 2416 0062;	
    // (␖) SYMBOL FOR SYNCHRONOUS IDLE	[0813 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2416, 0x0062 };
    uint32_t const ces[9] = { 0x0813, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_292)
{
    // 2417 0021;	
    // (␗) SYMBOL FOR END OF TRANSMISSION BLOCK	[0814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2417, 0x0021 };
    uint32_t const ces[9] = { 0x0814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_293)
{
    // 2417 003F;	
    // (␗) SYMBOL FOR END OF TRANSMISSION BLOCK	[0814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2417, 0x003F };
    uint32_t const ces[9] = { 0x0814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_294)
{
    // 2417 0061;	
    // (␗) SYMBOL FOR END OF TRANSMISSION BLOCK	[0814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2417, 0x0061 };
    uint32_t const ces[9] = { 0x0814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_295)
{
    // 2417 0041;	
    // (␗) SYMBOL FOR END OF TRANSMISSION BLOCK	[0814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2417, 0x0041 };
    uint32_t const ces[9] = { 0x0814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_296)
{
    // 2417 0062;	
    // (␗) SYMBOL FOR END OF TRANSMISSION BLOCK	[0814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2417, 0x0062 };
    uint32_t const ces[9] = { 0x0814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_297)
{
    // 2418 0021;	
    // (␘) SYMBOL FOR CANCEL	[0815 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2418, 0x0021 };
    uint32_t const ces[9] = { 0x0815, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_298)
{
    // 2418 003F;	
    // (␘) SYMBOL FOR CANCEL	[0815 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2418, 0x003F };
    uint32_t const ces[9] = { 0x0815, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_299)
{
    // 2418 0061;	
    // (␘) SYMBOL FOR CANCEL	[0815 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2418, 0x0061 };
    uint32_t const ces[9] = { 0x0815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_300)
{
    // 2418 0041;	
    // (␘) SYMBOL FOR CANCEL	[0815 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2418, 0x0041 };
    uint32_t const ces[9] = { 0x0815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_301)
{
    // 2418 0062;	
    // (␘) SYMBOL FOR CANCEL	[0815 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2418, 0x0062 };
    uint32_t const ces[9] = { 0x0815, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_302)
{
    // 2419 0021;	
    // (␙) SYMBOL FOR END OF MEDIUM	[0816 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2419, 0x0021 };
    uint32_t const ces[9] = { 0x0816, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_303)
{
    // 2419 003F;	
    // (␙) SYMBOL FOR END OF MEDIUM	[0816 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2419, 0x003F };
    uint32_t const ces[9] = { 0x0816, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_304)
{
    // 2419 0061;	
    // (␙) SYMBOL FOR END OF MEDIUM	[0816 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2419, 0x0061 };
    uint32_t const ces[9] = { 0x0816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_305)
{
    // 2419 0041;	
    // (␙) SYMBOL FOR END OF MEDIUM	[0816 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2419, 0x0041 };
    uint32_t const ces[9] = { 0x0816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_306)
{
    // 2419 0062;	
    // (␙) SYMBOL FOR END OF MEDIUM	[0816 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2419, 0x0062 };
    uint32_t const ces[9] = { 0x0816, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_307)
{
    // 241A 0021;	
    // (␚) SYMBOL FOR SUBSTITUTE	[0817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241A, 0x0021 };
    uint32_t const ces[9] = { 0x0817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_308)
{
    // 241A 003F;	
    // (␚) SYMBOL FOR SUBSTITUTE	[0817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241A, 0x003F };
    uint32_t const ces[9] = { 0x0817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_309)
{
    // 241A 0061;	
    // (␚) SYMBOL FOR SUBSTITUTE	[0817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241A, 0x0061 };
    uint32_t const ces[9] = { 0x0817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_310)
{
    // 241A 0041;	
    // (␚) SYMBOL FOR SUBSTITUTE	[0817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241A, 0x0041 };
    uint32_t const ces[9] = { 0x0817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_311)
{
    // 241A 0062;	
    // (␚) SYMBOL FOR SUBSTITUTE	[0817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241A, 0x0062 };
    uint32_t const ces[9] = { 0x0817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_312)
{
    // 241B 0021;	
    // (␛) SYMBOL FOR ESCAPE	[0818 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241B, 0x0021 };
    uint32_t const ces[9] = { 0x0818, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_313)
{
    // 241B 003F;	
    // (␛) SYMBOL FOR ESCAPE	[0818 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241B, 0x003F };
    uint32_t const ces[9] = { 0x0818, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_314)
{
    // 241B 0061;	
    // (␛) SYMBOL FOR ESCAPE	[0818 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241B, 0x0061 };
    uint32_t const ces[9] = { 0x0818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_315)
{
    // 241B 0041;	
    // (␛) SYMBOL FOR ESCAPE	[0818 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241B, 0x0041 };
    uint32_t const ces[9] = { 0x0818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_316)
{
    // 241B 0062;	
    // (␛) SYMBOL FOR ESCAPE	[0818 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241B, 0x0062 };
    uint32_t const ces[9] = { 0x0818, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_317)
{
    // 241C 0021;	
    // (␜) SYMBOL FOR FILE SEPARATOR	[0819 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241C, 0x0021 };
    uint32_t const ces[9] = { 0x0819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_318)
{
    // 241C 003F;	
    // (␜) SYMBOL FOR FILE SEPARATOR	[0819 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241C, 0x003F };
    uint32_t const ces[9] = { 0x0819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_319)
{
    // 241C 0061;	
    // (␜) SYMBOL FOR FILE SEPARATOR	[0819 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241C, 0x0061 };
    uint32_t const ces[9] = { 0x0819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_320)
{
    // 241C 0041;	
    // (␜) SYMBOL FOR FILE SEPARATOR	[0819 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241C, 0x0041 };
    uint32_t const ces[9] = { 0x0819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_321)
{
    // 241C 0062;	
    // (␜) SYMBOL FOR FILE SEPARATOR	[0819 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241C, 0x0062 };
    uint32_t const ces[9] = { 0x0819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_322)
{
    // 241D 0021;	
    // (␝) SYMBOL FOR GROUP SEPARATOR	[081A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241D, 0x0021 };
    uint32_t const ces[9] = { 0x081A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_323)
{
    // 241D 003F;	
    // (␝) SYMBOL FOR GROUP SEPARATOR	[081A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241D, 0x003F };
    uint32_t const ces[9] = { 0x081A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_324)
{
    // 241D 0061;	
    // (␝) SYMBOL FOR GROUP SEPARATOR	[081A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241D, 0x0061 };
    uint32_t const ces[9] = { 0x081A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_325)
{
    // 241D 0041;	
    // (␝) SYMBOL FOR GROUP SEPARATOR	[081A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241D, 0x0041 };
    uint32_t const ces[9] = { 0x081A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_326)
{
    // 241D 0062;	
    // (␝) SYMBOL FOR GROUP SEPARATOR	[081A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241D, 0x0062 };
    uint32_t const ces[9] = { 0x081A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_327)
{
    // 241E 0021;	
    // (␞) SYMBOL FOR RECORD SEPARATOR	[081B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241E, 0x0021 };
    uint32_t const ces[9] = { 0x081B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_328)
{
    // 241E 003F;	
    // (␞) SYMBOL FOR RECORD SEPARATOR	[081B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241E, 0x003F };
    uint32_t const ces[9] = { 0x081B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_329)
{
    // 241E 0061;	
    // (␞) SYMBOL FOR RECORD SEPARATOR	[081B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241E, 0x0061 };
    uint32_t const ces[9] = { 0x081B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_330)
{
    // 241E 0041;	
    // (␞) SYMBOL FOR RECORD SEPARATOR	[081B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241E, 0x0041 };
    uint32_t const ces[9] = { 0x081B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_331)
{
    // 241E 0062;	
    // (␞) SYMBOL FOR RECORD SEPARATOR	[081B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241E, 0x0062 };
    uint32_t const ces[9] = { 0x081B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_332)
{
    // 241F 0021;	
    // (␟) SYMBOL FOR UNIT SEPARATOR	[081C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241F, 0x0021 };
    uint32_t const ces[9] = { 0x081C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_333)
{
    // 241F 003F;	
    // (␟) SYMBOL FOR UNIT SEPARATOR	[081C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241F, 0x003F };
    uint32_t const ces[9] = { 0x081C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_334)
{
    // 241F 0061;	
    // (␟) SYMBOL FOR UNIT SEPARATOR	[081C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241F, 0x0061 };
    uint32_t const ces[9] = { 0x081C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_335)
{
    // 241F 0041;	
    // (␟) SYMBOL FOR UNIT SEPARATOR	[081C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x241F, 0x0041 };
    uint32_t const ces[9] = { 0x081C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_336)
{
    // 241F 0062;	
    // (␟) SYMBOL FOR UNIT SEPARATOR	[081C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x241F, 0x0062 };
    uint32_t const ces[9] = { 0x081C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_337)
{
    // 2420 0021;	
    // (␠) SYMBOL FOR SPACE	[081D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2420, 0x0021 };
    uint32_t const ces[9] = { 0x081D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_338)
{
    // 2420 003F;	
    // (␠) SYMBOL FOR SPACE	[081D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2420, 0x003F };
    uint32_t const ces[9] = { 0x081D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_339)
{
    // 2420 0061;	
    // (␠) SYMBOL FOR SPACE	[081D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2420, 0x0061 };
    uint32_t const ces[9] = { 0x081D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_340)
{
    // 2420 0041;	
    // (␠) SYMBOL FOR SPACE	[081D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2420, 0x0041 };
    uint32_t const ces[9] = { 0x081D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_341)
{
    // 2420 0062;	
    // (␠) SYMBOL FOR SPACE	[081D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2420, 0x0062 };
    uint32_t const ces[9] = { 0x081D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_342)
{
    // 2421 0021;	
    // (␡) SYMBOL FOR DELETE	[081E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2421, 0x0021 };
    uint32_t const ces[9] = { 0x081E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_343)
{
    // 2421 003F;	
    // (␡) SYMBOL FOR DELETE	[081E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2421, 0x003F };
    uint32_t const ces[9] = { 0x081E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_344)
{
    // 2421 0061;	
    // (␡) SYMBOL FOR DELETE	[081E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2421, 0x0061 };
    uint32_t const ces[9] = { 0x081E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_345)
{
    // 2421 0041;	
    // (␡) SYMBOL FOR DELETE	[081E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2421, 0x0041 };
    uint32_t const ces[9] = { 0x081E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_346)
{
    // 2421 0062;	
    // (␡) SYMBOL FOR DELETE	[081E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2421, 0x0062 };
    uint32_t const ces[9] = { 0x081E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_347)
{
    // 2422 0021;	
    // (␢) BLANK SYMBOL	[081F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2422, 0x0021 };
    uint32_t const ces[9] = { 0x081F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_348)
{
    // 2422 003F;	
    // (␢) BLANK SYMBOL	[081F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2422, 0x003F };
    uint32_t const ces[9] = { 0x081F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_349)
{
    // 2422 0061;	
    // (␢) BLANK SYMBOL	[081F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2422, 0x0061 };
    uint32_t const ces[9] = { 0x081F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_350)
{
    // 2422 0041;	
    // (␢) BLANK SYMBOL	[081F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2422, 0x0041 };
    uint32_t const ces[9] = { 0x081F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_351)
{
    // 2422 0062;	
    // (␢) BLANK SYMBOL	[081F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2422, 0x0062 };
    uint32_t const ces[9] = { 0x081F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_352)
{
    // 2423 0021;	
    // (␣) OPEN BOX	[0820 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2423, 0x0021 };
    uint32_t const ces[9] = { 0x0820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_353)
{
    // 2423 003F;	
    // (␣) OPEN BOX	[0820 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2423, 0x003F };
    uint32_t const ces[9] = { 0x0820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_354)
{
    // 2423 0061;	
    // (␣) OPEN BOX	[0820 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2423, 0x0061 };
    uint32_t const ces[9] = { 0x0820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_355)
{
    // 2423 0041;	
    // (␣) OPEN BOX	[0820 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2423, 0x0041 };
    uint32_t const ces[9] = { 0x0820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_356)
{
    // 2423 0062;	
    // (␣) OPEN BOX	[0820 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2423, 0x0062 };
    uint32_t const ces[9] = { 0x0820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_357)
{
    // 2424 0021;	
    // (␤) SYMBOL FOR NEWLINE	[0821 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2424, 0x0021 };
    uint32_t const ces[9] = { 0x0821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_358)
{
    // 2424 003F;	
    // (␤) SYMBOL FOR NEWLINE	[0821 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2424, 0x003F };
    uint32_t const ces[9] = { 0x0821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_359)
{
    // 2424 0061;	
    // (␤) SYMBOL FOR NEWLINE	[0821 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2424, 0x0061 };
    uint32_t const ces[9] = { 0x0821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_360)
{
    // 2424 0041;	
    // (␤) SYMBOL FOR NEWLINE	[0821 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2424, 0x0041 };
    uint32_t const ces[9] = { 0x0821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_361)
{
    // 2424 0062;	
    // (␤) SYMBOL FOR NEWLINE	[0821 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2424, 0x0062 };
    uint32_t const ces[9] = { 0x0821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_362)
{
    // 2425 0021;	
    // (␥) SYMBOL FOR DELETE FORM TWO	[0822 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2425, 0x0021 };
    uint32_t const ces[9] = { 0x0822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_363)
{
    // 2425 003F;	
    // (␥) SYMBOL FOR DELETE FORM TWO	[0822 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2425, 0x003F };
    uint32_t const ces[9] = { 0x0822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_364)
{
    // 2425 0061;	
    // (␥) SYMBOL FOR DELETE FORM TWO	[0822 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2425, 0x0061 };
    uint32_t const ces[9] = { 0x0822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_365)
{
    // 2425 0041;	
    // (␥) SYMBOL FOR DELETE FORM TWO	[0822 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2425, 0x0041 };
    uint32_t const ces[9] = { 0x0822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_366)
{
    // 2425 0062;	
    // (␥) SYMBOL FOR DELETE FORM TWO	[0822 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2425, 0x0062 };
    uint32_t const ces[9] = { 0x0822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_367)
{
    // 2426 0021;	
    // (␦) SYMBOL FOR SUBSTITUTE FORM TWO	[0823 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2426, 0x0021 };
    uint32_t const ces[9] = { 0x0823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_368)
{
    // 2426 003F;	
    // (␦) SYMBOL FOR SUBSTITUTE FORM TWO	[0823 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2426, 0x003F };
    uint32_t const ces[9] = { 0x0823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_369)
{
    // 2426 0061;	
    // (␦) SYMBOL FOR SUBSTITUTE FORM TWO	[0823 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2426, 0x0061 };
    uint32_t const ces[9] = { 0x0823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_370)
{
    // 2426 0041;	
    // (␦) SYMBOL FOR SUBSTITUTE FORM TWO	[0823 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2426, 0x0041 };
    uint32_t const ces[9] = { 0x0823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_371)
{
    // 2426 0062;	
    // (␦) SYMBOL FOR SUBSTITUTE FORM TWO	[0823 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2426, 0x0062 };
    uint32_t const ces[9] = { 0x0823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_372)
{
    // 2440 0021;	
    // (⑀) OCR HOOK	[0824 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2440, 0x0021 };
    uint32_t const ces[9] = { 0x0824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_373)
{
    // 2440 003F;	
    // (⑀) OCR HOOK	[0824 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2440, 0x003F };
    uint32_t const ces[9] = { 0x0824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_374)
{
    // 2440 0061;	
    // (⑀) OCR HOOK	[0824 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2440, 0x0061 };
    uint32_t const ces[9] = { 0x0824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_375)
{
    // 2440 0041;	
    // (⑀) OCR HOOK	[0824 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2440, 0x0041 };
    uint32_t const ces[9] = { 0x0824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_376)
{
    // 2440 0062;	
    // (⑀) OCR HOOK	[0824 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2440, 0x0062 };
    uint32_t const ces[9] = { 0x0824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_377)
{
    // 2441 0021;	
    // (⑁) OCR CHAIR	[0825 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2441, 0x0021 };
    uint32_t const ces[9] = { 0x0825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_378)
{
    // 2441 003F;	
    // (⑁) OCR CHAIR	[0825 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2441, 0x003F };
    uint32_t const ces[9] = { 0x0825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_379)
{
    // 2441 0061;	
    // (⑁) OCR CHAIR	[0825 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2441, 0x0061 };
    uint32_t const ces[9] = { 0x0825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_380)
{
    // 2441 0041;	
    // (⑁) OCR CHAIR	[0825 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2441, 0x0041 };
    uint32_t const ces[9] = { 0x0825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_381)
{
    // 2441 0062;	
    // (⑁) OCR CHAIR	[0825 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2441, 0x0062 };
    uint32_t const ces[9] = { 0x0825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_382)
{
    // 2442 0021;	
    // (⑂) OCR FORK	[0826 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2442, 0x0021 };
    uint32_t const ces[9] = { 0x0826, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_383)
{
    // 2442 003F;	
    // (⑂) OCR FORK	[0826 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2442, 0x003F };
    uint32_t const ces[9] = { 0x0826, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_384)
{
    // 2442 0061;	
    // (⑂) OCR FORK	[0826 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2442, 0x0061 };
    uint32_t const ces[9] = { 0x0826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_385)
{
    // 2442 0041;	
    // (⑂) OCR FORK	[0826 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2442, 0x0041 };
    uint32_t const ces[9] = { 0x0826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_386)
{
    // 2442 0062;	
    // (⑂) OCR FORK	[0826 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2442, 0x0062 };
    uint32_t const ces[9] = { 0x0826, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_387)
{
    // 2443 0021;	
    // (⑃) OCR INVERTED FORK	[0827 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2443, 0x0021 };
    uint32_t const ces[9] = { 0x0827, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_388)
{
    // 2443 003F;	
    // (⑃) OCR INVERTED FORK	[0827 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2443, 0x003F };
    uint32_t const ces[9] = { 0x0827, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_389)
{
    // 2443 0061;	
    // (⑃) OCR INVERTED FORK	[0827 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2443, 0x0061 };
    uint32_t const ces[9] = { 0x0827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_390)
{
    // 2443 0041;	
    // (⑃) OCR INVERTED FORK	[0827 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2443, 0x0041 };
    uint32_t const ces[9] = { 0x0827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_391)
{
    // 2443 0062;	
    // (⑃) OCR INVERTED FORK	[0827 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2443, 0x0062 };
    uint32_t const ces[9] = { 0x0827, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_392)
{
    // 2444 0021;	
    // (⑄) OCR BELT BUCKLE	[0828 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2444, 0x0021 };
    uint32_t const ces[9] = { 0x0828, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_393)
{
    // 2444 003F;	
    // (⑄) OCR BELT BUCKLE	[0828 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2444, 0x003F };
    uint32_t const ces[9] = { 0x0828, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_394)
{
    // 2444 0061;	
    // (⑄) OCR BELT BUCKLE	[0828 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2444, 0x0061 };
    uint32_t const ces[9] = { 0x0828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_395)
{
    // 2444 0041;	
    // (⑄) OCR BELT BUCKLE	[0828 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2444, 0x0041 };
    uint32_t const ces[9] = { 0x0828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_396)
{
    // 2444 0062;	
    // (⑄) OCR BELT BUCKLE	[0828 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2444, 0x0062 };
    uint32_t const ces[9] = { 0x0828, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_397)
{
    // 2445 0021;	
    // (⑅) OCR BOW TIE	[0829 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2445, 0x0021 };
    uint32_t const ces[9] = { 0x0829, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_398)
{
    // 2445 003F;	
    // (⑅) OCR BOW TIE	[0829 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2445, 0x003F };
    uint32_t const ces[9] = { 0x0829, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_399)
{
    // 2445 0061;	
    // (⑅) OCR BOW TIE	[0829 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2445, 0x0061 };
    uint32_t const ces[9] = { 0x0829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_400)
{
    // 2445 0041;	
    // (⑅) OCR BOW TIE	[0829 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2445, 0x0041 };
    uint32_t const ces[9] = { 0x0829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_401)
{
    // 2445 0062;	
    // (⑅) OCR BOW TIE	[0829 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2445, 0x0062 };
    uint32_t const ces[9] = { 0x0829, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_402)
{
    // 2446 0021;	
    // (⑆) OCR BRANCH BANK IDENTIFICATION	[082A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2446, 0x0021 };
    uint32_t const ces[9] = { 0x082A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_403)
{
    // 2446 003F;	
    // (⑆) OCR BRANCH BANK IDENTIFICATION	[082A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2446, 0x003F };
    uint32_t const ces[9] = { 0x082A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_404)
{
    // 2446 0061;	
    // (⑆) OCR BRANCH BANK IDENTIFICATION	[082A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2446, 0x0061 };
    uint32_t const ces[9] = { 0x082A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_405)
{
    // 2446 0041;	
    // (⑆) OCR BRANCH BANK IDENTIFICATION	[082A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2446, 0x0041 };
    uint32_t const ces[9] = { 0x082A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_406)
{
    // 2446 0062;	
    // (⑆) OCR BRANCH BANK IDENTIFICATION	[082A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2446, 0x0062 };
    uint32_t const ces[9] = { 0x082A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_407)
{
    // 2447 0021;	
    // (⑇) OCR AMOUNT OF CHECK	[082B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2447, 0x0021 };
    uint32_t const ces[9] = { 0x082B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_408)
{
    // 2447 003F;	
    // (⑇) OCR AMOUNT OF CHECK	[082B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2447, 0x003F };
    uint32_t const ces[9] = { 0x082B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_409)
{
    // 2447 0061;	
    // (⑇) OCR AMOUNT OF CHECK	[082B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2447, 0x0061 };
    uint32_t const ces[9] = { 0x082B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_410)
{
    // 2447 0041;	
    // (⑇) OCR AMOUNT OF CHECK	[082B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2447, 0x0041 };
    uint32_t const ces[9] = { 0x082B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_411)
{
    // 2447 0062;	
    // (⑇) OCR AMOUNT OF CHECK	[082B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2447, 0x0062 };
    uint32_t const ces[9] = { 0x082B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_412)
{
    // 2448 0021;	
    // (⑈) OCR DASH	[082C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2448, 0x0021 };
    uint32_t const ces[9] = { 0x082C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_413)
{
    // 2448 003F;	
    // (⑈) OCR DASH	[082C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2448, 0x003F };
    uint32_t const ces[9] = { 0x082C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_414)
{
    // 2448 0061;	
    // (⑈) OCR DASH	[082C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2448, 0x0061 };
    uint32_t const ces[9] = { 0x082C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_415)
{
    // 2448 0041;	
    // (⑈) OCR DASH	[082C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2448, 0x0041 };
    uint32_t const ces[9] = { 0x082C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_416)
{
    // 2448 0062;	
    // (⑈) OCR DASH	[082C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2448, 0x0062 };
    uint32_t const ces[9] = { 0x082C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_417)
{
    // 2449 0021;	
    // (⑉) OCR CUSTOMER ACCOUNT NUMBER	[082D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2449, 0x0021 };
    uint32_t const ces[9] = { 0x082D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_418)
{
    // 2449 003F;	
    // (⑉) OCR CUSTOMER ACCOUNT NUMBER	[082D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2449, 0x003F };
    uint32_t const ces[9] = { 0x082D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_419)
{
    // 2449 0061;	
    // (⑉) OCR CUSTOMER ACCOUNT NUMBER	[082D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2449, 0x0061 };
    uint32_t const ces[9] = { 0x082D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_420)
{
    // 2449 0041;	
    // (⑉) OCR CUSTOMER ACCOUNT NUMBER	[082D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2449, 0x0041 };
    uint32_t const ces[9] = { 0x082D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_421)
{
    // 2449 0062;	
    // (⑉) OCR CUSTOMER ACCOUNT NUMBER	[082D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2449, 0x0062 };
    uint32_t const ces[9] = { 0x082D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_422)
{
    // 244A 0021;	
    // (⑊) OCR DOUBLE BACKSLASH	[082E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x244A, 0x0021 };
    uint32_t const ces[9] = { 0x082E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_423)
{
    // 244A 003F;	
    // (⑊) OCR DOUBLE BACKSLASH	[082E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x244A, 0x003F };
    uint32_t const ces[9] = { 0x082E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_424)
{
    // 244A 0061;	
    // (⑊) OCR DOUBLE BACKSLASH	[082E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x244A, 0x0061 };
    uint32_t const ces[9] = { 0x082E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_425)
{
    // 244A 0041;	
    // (⑊) OCR DOUBLE BACKSLASH	[082E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x244A, 0x0041 };
    uint32_t const ces[9] = { 0x082E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_426)
{
    // 244A 0062;	
    // (⑊) OCR DOUBLE BACKSLASH	[082E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x244A, 0x0062 };
    uint32_t const ces[9] = { 0x082E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_427)
{
    // 2500 0021;	
    // (─) BOX DRAWINGS LIGHT HORIZONTAL	[082F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2500, 0x0021 };
    uint32_t const ces[9] = { 0x082F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_428)
{
    // 2500 003F;	
    // (─) BOX DRAWINGS LIGHT HORIZONTAL	[082F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2500, 0x003F };
    uint32_t const ces[9] = { 0x082F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_429)
{
    // 2500 0061;	
    // (─) BOX DRAWINGS LIGHT HORIZONTAL	[082F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2500, 0x0061 };
    uint32_t const ces[9] = { 0x082F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_430)
{
    // 2500 0041;	
    // (─) BOX DRAWINGS LIGHT HORIZONTAL	[082F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2500, 0x0041 };
    uint32_t const ces[9] = { 0x082F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_431)
{
    // 2500 0062;	
    // (─) BOX DRAWINGS LIGHT HORIZONTAL	[082F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2500, 0x0062 };
    uint32_t const ces[9] = { 0x082F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_432)
{
    // 2501 0021;	
    // (━) BOX DRAWINGS HEAVY HORIZONTAL	[0830 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2501, 0x0021 };
    uint32_t const ces[9] = { 0x0830, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_433)
{
    // 2501 003F;	
    // (━) BOX DRAWINGS HEAVY HORIZONTAL	[0830 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2501, 0x003F };
    uint32_t const ces[9] = { 0x0830, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_434)
{
    // 2501 0061;	
    // (━) BOX DRAWINGS HEAVY HORIZONTAL	[0830 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2501, 0x0061 };
    uint32_t const ces[9] = { 0x0830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_435)
{
    // 2501 0041;	
    // (━) BOX DRAWINGS HEAVY HORIZONTAL	[0830 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2501, 0x0041 };
    uint32_t const ces[9] = { 0x0830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_436)
{
    // 2501 0062;	
    // (━) BOX DRAWINGS HEAVY HORIZONTAL	[0830 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2501, 0x0062 };
    uint32_t const ces[9] = { 0x0830, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_437)
{
    // 2502 0021;	
    // (│) BOX DRAWINGS LIGHT VERTICAL	[0831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2502, 0x0021 };
    uint32_t const ces[9] = { 0x0831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_438)
{
    // FFE8 0021;	
    // (￨) HALFWIDTH FORMS LIGHT VERTICAL	[0831 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE8, 0x0021 };
    uint32_t const ces[9] = { 0x0831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_439)
{
    // 2502 003F;	
    // (│) BOX DRAWINGS LIGHT VERTICAL	[0831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2502, 0x003F };
    uint32_t const ces[9] = { 0x0831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_440)
{
    // FFE8 003F;	
    // (￨) HALFWIDTH FORMS LIGHT VERTICAL	[0831 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE8, 0x003F };
    uint32_t const ces[9] = { 0x0831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_441)
{
    // 2502 0061;	
    // (│) BOX DRAWINGS LIGHT VERTICAL	[0831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2502, 0x0061 };
    uint32_t const ces[9] = { 0x0831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_442)
{
    // 2502 0041;	
    // (│) BOX DRAWINGS LIGHT VERTICAL	[0831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2502, 0x0041 };
    uint32_t const ces[9] = { 0x0831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_443)
{
    // FFE8 0061;	
    // (￨) HALFWIDTH FORMS LIGHT VERTICAL	[0831 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE8, 0x0061 };
    uint32_t const ces[9] = { 0x0831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_444)
{
    // FFE8 0041;	
    // (￨) HALFWIDTH FORMS LIGHT VERTICAL	[0831 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFE8, 0x0041 };
    uint32_t const ces[9] = { 0x0831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_445)
{
    // 2502 0062;	
    // (│) BOX DRAWINGS LIGHT VERTICAL	[0831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2502, 0x0062 };
    uint32_t const ces[9] = { 0x0831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_446)
{
    // FFE8 0062;	
    // (￨) HALFWIDTH FORMS LIGHT VERTICAL	[0831 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE8, 0x0062 };
    uint32_t const ces[9] = { 0x0831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_447)
{
    // 2503 0021;	
    // (┃) BOX DRAWINGS HEAVY VERTICAL	[0832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2503, 0x0021 };
    uint32_t const ces[9] = { 0x0832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_448)
{
    // 2503 003F;	
    // (┃) BOX DRAWINGS HEAVY VERTICAL	[0832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2503, 0x003F };
    uint32_t const ces[9] = { 0x0832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_449)
{
    // 2503 0061;	
    // (┃) BOX DRAWINGS HEAVY VERTICAL	[0832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2503, 0x0061 };
    uint32_t const ces[9] = { 0x0832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_450)
{
    // 2503 0041;	
    // (┃) BOX DRAWINGS HEAVY VERTICAL	[0832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2503, 0x0041 };
    uint32_t const ces[9] = { 0x0832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_451)
{
    // 2503 0062;	
    // (┃) BOX DRAWINGS HEAVY VERTICAL	[0832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2503, 0x0062 };
    uint32_t const ces[9] = { 0x0832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_452)
{
    // 2504 0021;	
    // (┄) BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL	[0833 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2504, 0x0021 };
    uint32_t const ces[9] = { 0x0833, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_453)
{
    // 2504 003F;	
    // (┄) BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL	[0833 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2504, 0x003F };
    uint32_t const ces[9] = { 0x0833, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_454)
{
    // 2504 0061;	
    // (┄) BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL	[0833 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2504, 0x0061 };
    uint32_t const ces[9] = { 0x0833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_455)
{
    // 2504 0041;	
    // (┄) BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL	[0833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2504, 0x0041 };
    uint32_t const ces[9] = { 0x0833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_456)
{
    // 2504 0062;	
    // (┄) BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL	[0833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2504, 0x0062 };
    uint32_t const ces[9] = { 0x0833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_457)
{
    // 2505 0021;	
    // (┅) BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL	[0834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2505, 0x0021 };
    uint32_t const ces[9] = { 0x0834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_458)
{
    // 2505 003F;	
    // (┅) BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL	[0834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2505, 0x003F };
    uint32_t const ces[9] = { 0x0834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_459)
{
    // 2505 0061;	
    // (┅) BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL	[0834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2505, 0x0061 };
    uint32_t const ces[9] = { 0x0834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_460)
{
    // 2505 0041;	
    // (┅) BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL	[0834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2505, 0x0041 };
    uint32_t const ces[9] = { 0x0834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_461)
{
    // 2505 0062;	
    // (┅) BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL	[0834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2505, 0x0062 };
    uint32_t const ces[9] = { 0x0834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_462)
{
    // 2506 0021;	
    // (┆) BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL	[0835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2506, 0x0021 };
    uint32_t const ces[9] = { 0x0835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_463)
{
    // 2506 003F;	
    // (┆) BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL	[0835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2506, 0x003F };
    uint32_t const ces[9] = { 0x0835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_464)
{
    // 2506 0061;	
    // (┆) BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL	[0835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2506, 0x0061 };
    uint32_t const ces[9] = { 0x0835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_465)
{
    // 2506 0041;	
    // (┆) BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL	[0835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2506, 0x0041 };
    uint32_t const ces[9] = { 0x0835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_466)
{
    // 2506 0062;	
    // (┆) BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL	[0835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2506, 0x0062 };
    uint32_t const ces[9] = { 0x0835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_467)
{
    // 2507 0021;	
    // (┇) BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL	[0836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2507, 0x0021 };
    uint32_t const ces[9] = { 0x0836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_468)
{
    // 2507 003F;	
    // (┇) BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL	[0836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2507, 0x003F };
    uint32_t const ces[9] = { 0x0836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_469)
{
    // 2507 0061;	
    // (┇) BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL	[0836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2507, 0x0061 };
    uint32_t const ces[9] = { 0x0836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_470)
{
    // 2507 0041;	
    // (┇) BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL	[0836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2507, 0x0041 };
    uint32_t const ces[9] = { 0x0836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_471)
{
    // 2507 0062;	
    // (┇) BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL	[0836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2507, 0x0062 };
    uint32_t const ces[9] = { 0x0836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_472)
{
    // 2508 0021;	
    // (┈) BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL	[0837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2508, 0x0021 };
    uint32_t const ces[9] = { 0x0837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_473)
{
    // 2508 003F;	
    // (┈) BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL	[0837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2508, 0x003F };
    uint32_t const ces[9] = { 0x0837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_474)
{
    // 2508 0061;	
    // (┈) BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL	[0837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2508, 0x0061 };
    uint32_t const ces[9] = { 0x0837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_475)
{
    // 2508 0041;	
    // (┈) BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL	[0837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2508, 0x0041 };
    uint32_t const ces[9] = { 0x0837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_476)
{
    // 2508 0062;	
    // (┈) BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL	[0837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2508, 0x0062 };
    uint32_t const ces[9] = { 0x0837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_477)
{
    // 2509 0021;	
    // (┉) BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL	[0838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2509, 0x0021 };
    uint32_t const ces[9] = { 0x0838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_478)
{
    // 2509 003F;	
    // (┉) BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL	[0838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2509, 0x003F };
    uint32_t const ces[9] = { 0x0838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_479)
{
    // 2509 0061;	
    // (┉) BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL	[0838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2509, 0x0061 };
    uint32_t const ces[9] = { 0x0838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_480)
{
    // 2509 0041;	
    // (┉) BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL	[0838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2509, 0x0041 };
    uint32_t const ces[9] = { 0x0838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_481)
{
    // 2509 0062;	
    // (┉) BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL	[0838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2509, 0x0062 };
    uint32_t const ces[9] = { 0x0838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_482)
{
    // 250A 0021;	
    // (┊) BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL	[0839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250A, 0x0021 };
    uint32_t const ces[9] = { 0x0839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_483)
{
    // 250A 003F;	
    // (┊) BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL	[0839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250A, 0x003F };
    uint32_t const ces[9] = { 0x0839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_484)
{
    // 250A 0061;	
    // (┊) BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL	[0839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250A, 0x0061 };
    uint32_t const ces[9] = { 0x0839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_485)
{
    // 250A 0041;	
    // (┊) BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL	[0839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250A, 0x0041 };
    uint32_t const ces[9] = { 0x0839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_486)
{
    // 250A 0062;	
    // (┊) BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL	[0839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250A, 0x0062 };
    uint32_t const ces[9] = { 0x0839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_487)
{
    // 250B 0021;	
    // (┋) BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL	[083A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250B, 0x0021 };
    uint32_t const ces[9] = { 0x083A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_488)
{
    // 250B 003F;	
    // (┋) BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL	[083A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250B, 0x003F };
    uint32_t const ces[9] = { 0x083A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_489)
{
    // 250B 0061;	
    // (┋) BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL	[083A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250B, 0x0061 };
    uint32_t const ces[9] = { 0x083A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_490)
{
    // 250B 0041;	
    // (┋) BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL	[083A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250B, 0x0041 };
    uint32_t const ces[9] = { 0x083A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_491)
{
    // 250B 0062;	
    // (┋) BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL	[083A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250B, 0x0062 };
    uint32_t const ces[9] = { 0x083A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_492)
{
    // 250C 0021;	
    // (┌) BOX DRAWINGS LIGHT DOWN AND RIGHT	[083B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250C, 0x0021 };
    uint32_t const ces[9] = { 0x083B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_493)
{
    // 250C 003F;	
    // (┌) BOX DRAWINGS LIGHT DOWN AND RIGHT	[083B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250C, 0x003F };
    uint32_t const ces[9] = { 0x083B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_494)
{
    // 250C 0061;	
    // (┌) BOX DRAWINGS LIGHT DOWN AND RIGHT	[083B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250C, 0x0061 };
    uint32_t const ces[9] = { 0x083B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_495)
{
    // 250C 0041;	
    // (┌) BOX DRAWINGS LIGHT DOWN AND RIGHT	[083B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x250C, 0x0041 };
    uint32_t const ces[9] = { 0x083B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_496)
{
    // 250C 0062;	
    // (┌) BOX DRAWINGS LIGHT DOWN AND RIGHT	[083B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250C, 0x0062 };
    uint32_t const ces[9] = { 0x083B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_497)
{
    // 250D 0021;	
    // (┍) BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY	[083C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250D, 0x0021 };
    uint32_t const ces[9] = { 0x083C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_498)
{
    // 250D 003F;	
    // (┍) BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY	[083C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250D, 0x003F };
    uint32_t const ces[9] = { 0x083C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_027_499)
{
    // 250D 0061;	
    // (┍) BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY	[083C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x250D, 0x0061 };
    uint32_t const ces[9] = { 0x083C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

