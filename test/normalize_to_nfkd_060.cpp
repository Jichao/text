// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkd_060_000)
{
    // D170;D170;1110 1167 11AF;D170;1110 1167 11AF; 
    // (텰; 텰; 텰; 텰; 텰; ) HANGUL SYLLABLE TYEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xD170 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_001)
{
    // D171;D171;1110 1167 11B0;D171;1110 1167 11B0; 
    // (텱; 텱; 텱; 텱; 텱; ) HANGUL SYLLABLE TYEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xD171 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_002)
{
    // D172;D172;1110 1167 11B1;D172;1110 1167 11B1; 
    // (텲; 텲; 텲; 텲; 텲; ) HANGUL SYLLABLE TYEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xD172 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_003)
{
    // D173;D173;1110 1167 11B2;D173;1110 1167 11B2; 
    // (텳; 텳; 텳; 텳; 텳; ) HANGUL SYLLABLE TYEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xD173 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_004)
{
    // D174;D174;1110 1167 11B3;D174;1110 1167 11B3; 
    // (텴; 텴; 텴; 텴; 텴; ) HANGUL SYLLABLE TYEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xD174 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_005)
{
    // D175;D175;1110 1167 11B4;D175;1110 1167 11B4; 
    // (텵; 텵; 텵; 텵; 텵; ) HANGUL SYLLABLE TYEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xD175 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_006)
{
    // D176;D176;1110 1167 11B5;D176;1110 1167 11B5; 
    // (텶; 텶; 텶; 텶; 텶; ) HANGUL SYLLABLE TYEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xD176 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_007)
{
    // D177;D177;1110 1167 11B6;D177;1110 1167 11B6; 
    // (텷; 텷; 텷; 텷; 텷; ) HANGUL SYLLABLE TYEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xD177 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_008)
{
    // D178;D178;1110 1167 11B7;D178;1110 1167 11B7; 
    // (텸; 텸; 텸; 텸; 텸; ) HANGUL SYLLABLE TYEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xD178 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_009)
{
    // D179;D179;1110 1167 11B8;D179;1110 1167 11B8; 
    // (텹; 텹; 텹; 텹; 텹; ) HANGUL SYLLABLE TYEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xD179 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_010)
{
    // D17A;D17A;1110 1167 11B9;D17A;1110 1167 11B9; 
    // (텺; 텺; 텺; 텺; 텺; ) HANGUL SYLLABLE TYEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD17A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_011)
{
    // D17B;D17B;1110 1167 11BA;D17B;1110 1167 11BA; 
    // (텻; 텻; 텻; 텻; 텻; ) HANGUL SYLLABLE TYEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xD17B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_012)
{
    // D17C;D17C;1110 1167 11BB;D17C;1110 1167 11BB; 
    // (텼; 텼; 텼; 텼; 텼; ) HANGUL SYLLABLE TYEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xD17C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_013)
{
    // D17D;D17D;1110 1167 11BC;D17D;1110 1167 11BC; 
    // (텽; 텽; 텽; 텽; 텽; ) HANGUL SYLLABLE TYEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xD17D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_014)
{
    // D17E;D17E;1110 1167 11BD;D17E;1110 1167 11BD; 
    // (텾; 텾; 텾; 텾; 텾; ) HANGUL SYLLABLE TYEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD17E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_015)
{
    // D17F;D17F;1110 1167 11BE;D17F;1110 1167 11BE; 
    // (텿; 텿; 텿; 텿; 텿; ) HANGUL SYLLABLE TYEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xD17F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_016)
{
    // D180;D180;1110 1167 11BF;D180;1110 1167 11BF; 
    // (톀; 톀; 톀; 톀; 톀; ) HANGUL SYLLABLE TYEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xD180 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_017)
{
    // D181;D181;1110 1167 11C0;D181;1110 1167 11C0; 
    // (톁; 톁; 톁; 톁; 톁; ) HANGUL SYLLABLE TYEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xD181 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_018)
{
    // D182;D182;1110 1167 11C1;D182;1110 1167 11C1; 
    // (톂; 톂; 톂; 톂; 톂; ) HANGUL SYLLABLE TYEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xD182 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_019)
{
    // D183;D183;1110 1167 11C2;D183;1110 1167 11C2; 
    // (톃; 톃; 톃; 톃; 톃; ) HANGUL SYLLABLE TYEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xD183 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1167, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_020)
{
    // D184;D184;1110 1168;D184;1110 1168; 
    // (톄; 톄; 톄; 톄; 톄; ) HANGUL SYLLABLE TYE
    {
        std::array<uint32_t, 1> const source = {{ 0xD184 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x1168 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_021)
{
    // D185;D185;1110 1168 11A8;D185;1110 1168 11A8; 
    // (톅; 톅; 톅; 톅; 톅; ) HANGUL SYLLABLE TYEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD185 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_022)
{
    // D186;D186;1110 1168 11A9;D186;1110 1168 11A9; 
    // (톆; 톆; 톆; 톆; 톆; ) HANGUL SYLLABLE TYEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD186 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_023)
{
    // D187;D187;1110 1168 11AA;D187;1110 1168 11AA; 
    // (톇; 톇; 톇; 톇; 톇; ) HANGUL SYLLABLE TYEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD187 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_024)
{
    // D188;D188;1110 1168 11AB;D188;1110 1168 11AB; 
    // (톈; 톈; 톈; 톈; 톈; ) HANGUL SYLLABLE TYEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD188 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_025)
{
    // D189;D189;1110 1168 11AC;D189;1110 1168 11AC; 
    // (톉; 톉; 톉; 톉; 톉; ) HANGUL SYLLABLE TYENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD189 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_026)
{
    // D18A;D18A;1110 1168 11AD;D18A;1110 1168 11AD; 
    // (톊; 톊; 톊; 톊; 톊; ) HANGUL SYLLABLE TYENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD18A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_027)
{
    // D18B;D18B;1110 1168 11AE;D18B;1110 1168 11AE; 
    // (톋; 톋; 톋; 톋; 톋; ) HANGUL SYLLABLE TYED
    {
        std::array<uint32_t, 1> const source = {{ 0xD18B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_028)
{
    // D18C;D18C;1110 1168 11AF;D18C;1110 1168 11AF; 
    // (톌; 톌; 톌; 톌; 톌; ) HANGUL SYLLABLE TYEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD18C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_029)
{
    // D18D;D18D;1110 1168 11B0;D18D;1110 1168 11B0; 
    // (톍; 톍; 톍; 톍; 톍; ) HANGUL SYLLABLE TYELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD18D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_030)
{
    // D18E;D18E;1110 1168 11B1;D18E;1110 1168 11B1; 
    // (톎; 톎; 톎; 톎; 톎; ) HANGUL SYLLABLE TYELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD18E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_031)
{
    // D18F;D18F;1110 1168 11B2;D18F;1110 1168 11B2; 
    // (톏; 톏; 톏; 톏; 톏; ) HANGUL SYLLABLE TYELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD18F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_032)
{
    // D190;D190;1110 1168 11B3;D190;1110 1168 11B3; 
    // (톐; 톐; 톐; 톐; 톐; ) HANGUL SYLLABLE TYELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD190 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_033)
{
    // D191;D191;1110 1168 11B4;D191;1110 1168 11B4; 
    // (톑; 톑; 톑; 톑; 톑; ) HANGUL SYLLABLE TYELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD191 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_034)
{
    // D192;D192;1110 1168 11B5;D192;1110 1168 11B5; 
    // (톒; 톒; 톒; 톒; 톒; ) HANGUL SYLLABLE TYELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD192 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_035)
{
    // D193;D193;1110 1168 11B6;D193;1110 1168 11B6; 
    // (톓; 톓; 톓; 톓; 톓; ) HANGUL SYLLABLE TYELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD193 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_036)
{
    // D194;D194;1110 1168 11B7;D194;1110 1168 11B7; 
    // (톔; 톔; 톔; 톔; 톔; ) HANGUL SYLLABLE TYEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD194 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_037)
{
    // D195;D195;1110 1168 11B8;D195;1110 1168 11B8; 
    // (톕; 톕; 톕; 톕; 톕; ) HANGUL SYLLABLE TYEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD195 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_038)
{
    // D196;D196;1110 1168 11B9;D196;1110 1168 11B9; 
    // (톖; 톖; 톖; 톖; 톖; ) HANGUL SYLLABLE TYEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD196 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_039)
{
    // D197;D197;1110 1168 11BA;D197;1110 1168 11BA; 
    // (톗; 톗; 톗; 톗; 톗; ) HANGUL SYLLABLE TYES
    {
        std::array<uint32_t, 1> const source = {{ 0xD197 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_040)
{
    // D198;D198;1110 1168 11BB;D198;1110 1168 11BB; 
    // (톘; 톘; 톘; 톘; 톘; ) HANGUL SYLLABLE TYESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD198 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_041)
{
    // D199;D199;1110 1168 11BC;D199;1110 1168 11BC; 
    // (톙; 톙; 톙; 톙; 톙; ) HANGUL SYLLABLE TYENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD199 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_042)
{
    // D19A;D19A;1110 1168 11BD;D19A;1110 1168 11BD; 
    // (톚; 톚; 톚; 톚; 톚; ) HANGUL SYLLABLE TYEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD19A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_043)
{
    // D19B;D19B;1110 1168 11BE;D19B;1110 1168 11BE; 
    // (톛; 톛; 톛; 톛; 톛; ) HANGUL SYLLABLE TYEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD19B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_044)
{
    // D19C;D19C;1110 1168 11BF;D19C;1110 1168 11BF; 
    // (톜; 톜; 톜; 톜; 톜; ) HANGUL SYLLABLE TYEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD19C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_045)
{
    // D19D;D19D;1110 1168 11C0;D19D;1110 1168 11C0; 
    // (톝; 톝; 톝; 톝; 톝; ) HANGUL SYLLABLE TYET
    {
        std::array<uint32_t, 1> const source = {{ 0xD19D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_046)
{
    // D19E;D19E;1110 1168 11C1;D19E;1110 1168 11C1; 
    // (톞; 톞; 톞; 톞; 톞; ) HANGUL SYLLABLE TYEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD19E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_047)
{
    // D19F;D19F;1110 1168 11C2;D19F;1110 1168 11C2; 
    // (톟; 톟; 톟; 톟; 톟; ) HANGUL SYLLABLE TYEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD19F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1168, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_048)
{
    // D1A0;D1A0;1110 1169;D1A0;1110 1169; 
    // (토; 토; 토; 토; 토; ) HANGUL SYLLABLE TO
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x1169 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_049)
{
    // D1A1;D1A1;1110 1169 11A8;D1A1;1110 1169 11A8; 
    // (톡; 톡; 톡; 톡; 톡; ) HANGUL SYLLABLE TOG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_050)
{
    // D1A2;D1A2;1110 1169 11A9;D1A2;1110 1169 11A9; 
    // (톢; 톢; 톢; 톢; 톢; ) HANGUL SYLLABLE TOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_051)
{
    // D1A3;D1A3;1110 1169 11AA;D1A3;1110 1169 11AA; 
    // (톣; 톣; 톣; 톣; 톣; ) HANGUL SYLLABLE TOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_052)
{
    // D1A4;D1A4;1110 1169 11AB;D1A4;1110 1169 11AB; 
    // (톤; 톤; 톤; 톤; 톤; ) HANGUL SYLLABLE TON
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_053)
{
    // D1A5;D1A5;1110 1169 11AC;D1A5;1110 1169 11AC; 
    // (톥; 톥; 톥; 톥; 톥; ) HANGUL SYLLABLE TONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_054)
{
    // D1A6;D1A6;1110 1169 11AD;D1A6;1110 1169 11AD; 
    // (톦; 톦; 톦; 톦; 톦; ) HANGUL SYLLABLE TONH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_055)
{
    // D1A7;D1A7;1110 1169 11AE;D1A7;1110 1169 11AE; 
    // (톧; 톧; 톧; 톧; 톧; ) HANGUL SYLLABLE TOD
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_056)
{
    // D1A8;D1A8;1110 1169 11AF;D1A8;1110 1169 11AF; 
    // (톨; 톨; 톨; 톨; 톨; ) HANGUL SYLLABLE TOL
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_057)
{
    // D1A9;D1A9;1110 1169 11B0;D1A9;1110 1169 11B0; 
    // (톩; 톩; 톩; 톩; 톩; ) HANGUL SYLLABLE TOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_058)
{
    // D1AA;D1AA;1110 1169 11B1;D1AA;1110 1169 11B1; 
    // (톪; 톪; 톪; 톪; 톪; ) HANGUL SYLLABLE TOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_059)
{
    // D1AB;D1AB;1110 1169 11B2;D1AB;1110 1169 11B2; 
    // (톫; 톫; 톫; 톫; 톫; ) HANGUL SYLLABLE TOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_060)
{
    // D1AC;D1AC;1110 1169 11B3;D1AC;1110 1169 11B3; 
    // (톬; 톬; 톬; 톬; 톬; ) HANGUL SYLLABLE TOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_061)
{
    // D1AD;D1AD;1110 1169 11B4;D1AD;1110 1169 11B4; 
    // (톭; 톭; 톭; 톭; 톭; ) HANGUL SYLLABLE TOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_062)
{
    // D1AE;D1AE;1110 1169 11B5;D1AE;1110 1169 11B5; 
    // (톮; 톮; 톮; 톮; 톮; ) HANGUL SYLLABLE TOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_063)
{
    // D1AF;D1AF;1110 1169 11B6;D1AF;1110 1169 11B6; 
    // (톯; 톯; 톯; 톯; 톯; ) HANGUL SYLLABLE TOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_064)
{
    // D1B0;D1B0;1110 1169 11B7;D1B0;1110 1169 11B7; 
    // (톰; 톰; 톰; 톰; 톰; ) HANGUL SYLLABLE TOM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_065)
{
    // D1B1;D1B1;1110 1169 11B8;D1B1;1110 1169 11B8; 
    // (톱; 톱; 톱; 톱; 톱; ) HANGUL SYLLABLE TOB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_066)
{
    // D1B2;D1B2;1110 1169 11B9;D1B2;1110 1169 11B9; 
    // (톲; 톲; 톲; 톲; 톲; ) HANGUL SYLLABLE TOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_067)
{
    // D1B3;D1B3;1110 1169 11BA;D1B3;1110 1169 11BA; 
    // (톳; 톳; 톳; 톳; 톳; ) HANGUL SYLLABLE TOS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_068)
{
    // D1B4;D1B4;1110 1169 11BB;D1B4;1110 1169 11BB; 
    // (톴; 톴; 톴; 톴; 톴; ) HANGUL SYLLABLE TOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_069)
{
    // D1B5;D1B5;1110 1169 11BC;D1B5;1110 1169 11BC; 
    // (통; 통; 통; 통; 통; ) HANGUL SYLLABLE TONG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_070)
{
    // D1B6;D1B6;1110 1169 11BD;D1B6;1110 1169 11BD; 
    // (톶; 톶; 톶; 톶; 톶; ) HANGUL SYLLABLE TOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_071)
{
    // D1B7;D1B7;1110 1169 11BE;D1B7;1110 1169 11BE; 
    // (톷; 톷; 톷; 톷; 톷; ) HANGUL SYLLABLE TOC
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_072)
{
    // D1B8;D1B8;1110 1169 11BF;D1B8;1110 1169 11BF; 
    // (톸; 톸; 톸; 톸; 톸; ) HANGUL SYLLABLE TOK
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_073)
{
    // D1B9;D1B9;1110 1169 11C0;D1B9;1110 1169 11C0; 
    // (톹; 톹; 톹; 톹; 톹; ) HANGUL SYLLABLE TOT
    {
        std::array<uint32_t, 1> const source = {{ 0xD1B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_074)
{
    // D1BA;D1BA;1110 1169 11C1;D1BA;1110 1169 11C1; 
    // (톺; 톺; 톺; 톺; 톺; ) HANGUL SYLLABLE TOP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_075)
{
    // D1BB;D1BB;1110 1169 11C2;D1BB;1110 1169 11C2; 
    // (톻; 톻; 톻; 톻; 톻; ) HANGUL SYLLABLE TOH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1169, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_076)
{
    // D1BC;D1BC;1110 116A;D1BC;1110 116A; 
    // (톼; 톼; 톼; 톼; 톼; ) HANGUL SYLLABLE TWA
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x116A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_077)
{
    // D1BD;D1BD;1110 116A 11A8;D1BD;1110 116A 11A8; 
    // (톽; 톽; 톽; 톽; 톽; ) HANGUL SYLLABLE TWAG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_078)
{
    // D1BE;D1BE;1110 116A 11A9;D1BE;1110 116A 11A9; 
    // (톾; 톾; 톾; 톾; 톾; ) HANGUL SYLLABLE TWAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_079)
{
    // D1BF;D1BF;1110 116A 11AA;D1BF;1110 116A 11AA; 
    // (톿; 톿; 톿; 톿; 톿; ) HANGUL SYLLABLE TWAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_080)
{
    // D1C0;D1C0;1110 116A 11AB;D1C0;1110 116A 11AB; 
    // (퇀; 퇀; 퇀; 퇀; 퇀; ) HANGUL SYLLABLE TWAN
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_081)
{
    // D1C1;D1C1;1110 116A 11AC;D1C1;1110 116A 11AC; 
    // (퇁; 퇁; 퇁; 퇁; 퇁; ) HANGUL SYLLABLE TWANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_082)
{
    // D1C2;D1C2;1110 116A 11AD;D1C2;1110 116A 11AD; 
    // (퇂; 퇂; 퇂; 퇂; 퇂; ) HANGUL SYLLABLE TWANH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_083)
{
    // D1C3;D1C3;1110 116A 11AE;D1C3;1110 116A 11AE; 
    // (퇃; 퇃; 퇃; 퇃; 퇃; ) HANGUL SYLLABLE TWAD
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_084)
{
    // D1C4;D1C4;1110 116A 11AF;D1C4;1110 116A 11AF; 
    // (퇄; 퇄; 퇄; 퇄; 퇄; ) HANGUL SYLLABLE TWAL
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_085)
{
    // D1C5;D1C5;1110 116A 11B0;D1C5;1110 116A 11B0; 
    // (퇅; 퇅; 퇅; 퇅; 퇅; ) HANGUL SYLLABLE TWALG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_086)
{
    // D1C6;D1C6;1110 116A 11B1;D1C6;1110 116A 11B1; 
    // (퇆; 퇆; 퇆; 퇆; 퇆; ) HANGUL SYLLABLE TWALM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_087)
{
    // D1C7;D1C7;1110 116A 11B2;D1C7;1110 116A 11B2; 
    // (퇇; 퇇; 퇇; 퇇; 퇇; ) HANGUL SYLLABLE TWALB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_088)
{
    // D1C8;D1C8;1110 116A 11B3;D1C8;1110 116A 11B3; 
    // (퇈; 퇈; 퇈; 퇈; 퇈; ) HANGUL SYLLABLE TWALS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_089)
{
    // D1C9;D1C9;1110 116A 11B4;D1C9;1110 116A 11B4; 
    // (퇉; 퇉; 퇉; 퇉; 퇉; ) HANGUL SYLLABLE TWALT
    {
        std::array<uint32_t, 1> const source = {{ 0xD1C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_090)
{
    // D1CA;D1CA;1110 116A 11B5;D1CA;1110 116A 11B5; 
    // (퇊; 퇊; 퇊; 퇊; 퇊; ) HANGUL SYLLABLE TWALP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_091)
{
    // D1CB;D1CB;1110 116A 11B6;D1CB;1110 116A 11B6; 
    // (퇋; 퇋; 퇋; 퇋; 퇋; ) HANGUL SYLLABLE TWALH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_092)
{
    // D1CC;D1CC;1110 116A 11B7;D1CC;1110 116A 11B7; 
    // (퇌; 퇌; 퇌; 퇌; 퇌; ) HANGUL SYLLABLE TWAM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_093)
{
    // D1CD;D1CD;1110 116A 11B8;D1CD;1110 116A 11B8; 
    // (퇍; 퇍; 퇍; 퇍; 퇍; ) HANGUL SYLLABLE TWAB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_094)
{
    // D1CE;D1CE;1110 116A 11B9;D1CE;1110 116A 11B9; 
    // (퇎; 퇎; 퇎; 퇎; 퇎; ) HANGUL SYLLABLE TWABS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_095)
{
    // D1CF;D1CF;1110 116A 11BA;D1CF;1110 116A 11BA; 
    // (퇏; 퇏; 퇏; 퇏; 퇏; ) HANGUL SYLLABLE TWAS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_096)
{
    // D1D0;D1D0;1110 116A 11BB;D1D0;1110 116A 11BB; 
    // (퇐; 퇐; 퇐; 퇐; 퇐; ) HANGUL SYLLABLE TWASS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_097)
{
    // D1D1;D1D1;1110 116A 11BC;D1D1;1110 116A 11BC; 
    // (퇑; 퇑; 퇑; 퇑; 퇑; ) HANGUL SYLLABLE TWANG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_098)
{
    // D1D2;D1D2;1110 116A 11BD;D1D2;1110 116A 11BD; 
    // (퇒; 퇒; 퇒; 퇒; 퇒; ) HANGUL SYLLABLE TWAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_099)
{
    // D1D3;D1D3;1110 116A 11BE;D1D3;1110 116A 11BE; 
    // (퇓; 퇓; 퇓; 퇓; 퇓; ) HANGUL SYLLABLE TWAC
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_100)
{
    // D1D4;D1D4;1110 116A 11BF;D1D4;1110 116A 11BF; 
    // (퇔; 퇔; 퇔; 퇔; 퇔; ) HANGUL SYLLABLE TWAK
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_101)
{
    // D1D5;D1D5;1110 116A 11C0;D1D5;1110 116A 11C0; 
    // (퇕; 퇕; 퇕; 퇕; 퇕; ) HANGUL SYLLABLE TWAT
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_102)
{
    // D1D6;D1D6;1110 116A 11C1;D1D6;1110 116A 11C1; 
    // (퇖; 퇖; 퇖; 퇖; 퇖; ) HANGUL SYLLABLE TWAP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_103)
{
    // D1D7;D1D7;1110 116A 11C2;D1D7;1110 116A 11C2; 
    // (퇗; 퇗; 퇗; 퇗; 퇗; ) HANGUL SYLLABLE TWAH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116A, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_104)
{
    // D1D8;D1D8;1110 116B;D1D8;1110 116B; 
    // (퇘; 퇘; 퇘; 퇘; 퇘; ) HANGUL SYLLABLE TWAE
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x116B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_105)
{
    // D1D9;D1D9;1110 116B 11A8;D1D9;1110 116B 11A8; 
    // (퇙; 퇙; 퇙; 퇙; 퇙; ) HANGUL SYLLABLE TWAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_106)
{
    // D1DA;D1DA;1110 116B 11A9;D1DA;1110 116B 11A9; 
    // (퇚; 퇚; 퇚; 퇚; 퇚; ) HANGUL SYLLABLE TWAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_107)
{
    // D1DB;D1DB;1110 116B 11AA;D1DB;1110 116B 11AA; 
    // (퇛; 퇛; 퇛; 퇛; 퇛; ) HANGUL SYLLABLE TWAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_108)
{
    // D1DC;D1DC;1110 116B 11AB;D1DC;1110 116B 11AB; 
    // (퇜; 퇜; 퇜; 퇜; 퇜; ) HANGUL SYLLABLE TWAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_109)
{
    // D1DD;D1DD;1110 116B 11AC;D1DD;1110 116B 11AC; 
    // (퇝; 퇝; 퇝; 퇝; 퇝; ) HANGUL SYLLABLE TWAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_110)
{
    // D1DE;D1DE;1110 116B 11AD;D1DE;1110 116B 11AD; 
    // (퇞; 퇞; 퇞; 퇞; 퇞; ) HANGUL SYLLABLE TWAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_111)
{
    // D1DF;D1DF;1110 116B 11AE;D1DF;1110 116B 11AE; 
    // (퇟; 퇟; 퇟; 퇟; 퇟; ) HANGUL SYLLABLE TWAED
    {
        std::array<uint32_t, 1> const source = {{ 0xD1DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_112)
{
    // D1E0;D1E0;1110 116B 11AF;D1E0;1110 116B 11AF; 
    // (퇠; 퇠; 퇠; 퇠; 퇠; ) HANGUL SYLLABLE TWAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_113)
{
    // D1E1;D1E1;1110 116B 11B0;D1E1;1110 116B 11B0; 
    // (퇡; 퇡; 퇡; 퇡; 퇡; ) HANGUL SYLLABLE TWAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_114)
{
    // D1E2;D1E2;1110 116B 11B1;D1E2;1110 116B 11B1; 
    // (퇢; 퇢; 퇢; 퇢; 퇢; ) HANGUL SYLLABLE TWAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_115)
{
    // D1E3;D1E3;1110 116B 11B2;D1E3;1110 116B 11B2; 
    // (퇣; 퇣; 퇣; 퇣; 퇣; ) HANGUL SYLLABLE TWAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_116)
{
    // D1E4;D1E4;1110 116B 11B3;D1E4;1110 116B 11B3; 
    // (퇤; 퇤; 퇤; 퇤; 퇤; ) HANGUL SYLLABLE TWAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_117)
{
    // D1E5;D1E5;1110 116B 11B4;D1E5;1110 116B 11B4; 
    // (퇥; 퇥; 퇥; 퇥; 퇥; ) HANGUL SYLLABLE TWAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_118)
{
    // D1E6;D1E6;1110 116B 11B5;D1E6;1110 116B 11B5; 
    // (퇦; 퇦; 퇦; 퇦; 퇦; ) HANGUL SYLLABLE TWAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_119)
{
    // D1E7;D1E7;1110 116B 11B6;D1E7;1110 116B 11B6; 
    // (퇧; 퇧; 퇧; 퇧; 퇧; ) HANGUL SYLLABLE TWAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_120)
{
    // D1E8;D1E8;1110 116B 11B7;D1E8;1110 116B 11B7; 
    // (퇨; 퇨; 퇨; 퇨; 퇨; ) HANGUL SYLLABLE TWAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_121)
{
    // D1E9;D1E9;1110 116B 11B8;D1E9;1110 116B 11B8; 
    // (퇩; 퇩; 퇩; 퇩; 퇩; ) HANGUL SYLLABLE TWAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_122)
{
    // D1EA;D1EA;1110 116B 11B9;D1EA;1110 116B 11B9; 
    // (퇪; 퇪; 퇪; 퇪; 퇪; ) HANGUL SYLLABLE TWAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_123)
{
    // D1EB;D1EB;1110 116B 11BA;D1EB;1110 116B 11BA; 
    // (퇫; 퇫; 퇫; 퇫; 퇫; ) HANGUL SYLLABLE TWAES
    {
        std::array<uint32_t, 1> const source = {{ 0xD1EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_124)
{
    // D1EC;D1EC;1110 116B 11BB;D1EC;1110 116B 11BB; 
    // (퇬; 퇬; 퇬; 퇬; 퇬; ) HANGUL SYLLABLE TWAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_125)
{
    // D1ED;D1ED;1110 116B 11BC;D1ED;1110 116B 11BC; 
    // (퇭; 퇭; 퇭; 퇭; 퇭; ) HANGUL SYLLABLE TWAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_126)
{
    // D1EE;D1EE;1110 116B 11BD;D1EE;1110 116B 11BD; 
    // (퇮; 퇮; 퇮; 퇮; 퇮; ) HANGUL SYLLABLE TWAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_127)
{
    // D1EF;D1EF;1110 116B 11BE;D1EF;1110 116B 11BE; 
    // (퇯; 퇯; 퇯; 퇯; 퇯; ) HANGUL SYLLABLE TWAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD1EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_128)
{
    // D1F0;D1F0;1110 116B 11BF;D1F0;1110 116B 11BF; 
    // (퇰; 퇰; 퇰; 퇰; 퇰; ) HANGUL SYLLABLE TWAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_129)
{
    // D1F1;D1F1;1110 116B 11C0;D1F1;1110 116B 11C0; 
    // (퇱; 퇱; 퇱; 퇱; 퇱; ) HANGUL SYLLABLE TWAET
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_130)
{
    // D1F2;D1F2;1110 116B 11C1;D1F2;1110 116B 11C1; 
    // (퇲; 퇲; 퇲; 퇲; 퇲; ) HANGUL SYLLABLE TWAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_131)
{
    // D1F3;D1F3;1110 116B 11C2;D1F3;1110 116B 11C2; 
    // (퇳; 퇳; 퇳; 퇳; 퇳; ) HANGUL SYLLABLE TWAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116B, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_132)
{
    // D1F4;D1F4;1110 116C;D1F4;1110 116C; 
    // (퇴; 퇴; 퇴; 퇴; 퇴; ) HANGUL SYLLABLE TOE
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x116C }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_133)
{
    // D1F5;D1F5;1110 116C 11A8;D1F5;1110 116C 11A8; 
    // (퇵; 퇵; 퇵; 퇵; 퇵; ) HANGUL SYLLABLE TOEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_134)
{
    // D1F6;D1F6;1110 116C 11A9;D1F6;1110 116C 11A9; 
    // (퇶; 퇶; 퇶; 퇶; 퇶; ) HANGUL SYLLABLE TOEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_135)
{
    // D1F7;D1F7;1110 116C 11AA;D1F7;1110 116C 11AA; 
    // (퇷; 퇷; 퇷; 퇷; 퇷; ) HANGUL SYLLABLE TOEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_136)
{
    // D1F8;D1F8;1110 116C 11AB;D1F8;1110 116C 11AB; 
    // (퇸; 퇸; 퇸; 퇸; 퇸; ) HANGUL SYLLABLE TOEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_137)
{
    // D1F9;D1F9;1110 116C 11AC;D1F9;1110 116C 11AC; 
    // (퇹; 퇹; 퇹; 퇹; 퇹; ) HANGUL SYLLABLE TOENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD1F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_138)
{
    // D1FA;D1FA;1110 116C 11AD;D1FA;1110 116C 11AD; 
    // (퇺; 퇺; 퇺; 퇺; 퇺; ) HANGUL SYLLABLE TOENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_139)
{
    // D1FB;D1FB;1110 116C 11AE;D1FB;1110 116C 11AE; 
    // (퇻; 퇻; 퇻; 퇻; 퇻; ) HANGUL SYLLABLE TOED
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_140)
{
    // D1FC;D1FC;1110 116C 11AF;D1FC;1110 116C 11AF; 
    // (퇼; 퇼; 퇼; 퇼; 퇼; ) HANGUL SYLLABLE TOEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_141)
{
    // D1FD;D1FD;1110 116C 11B0;D1FD;1110 116C 11B0; 
    // (퇽; 퇽; 퇽; 퇽; 퇽; ) HANGUL SYLLABLE TOELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_142)
{
    // D1FE;D1FE;1110 116C 11B1;D1FE;1110 116C 11B1; 
    // (퇾; 퇾; 퇾; 퇾; 퇾; ) HANGUL SYLLABLE TOELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_143)
{
    // D1FF;D1FF;1110 116C 11B2;D1FF;1110 116C 11B2; 
    // (퇿; 퇿; 퇿; 퇿; 퇿; ) HANGUL SYLLABLE TOELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD1FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_144)
{
    // D200;D200;1110 116C 11B3;D200;1110 116C 11B3; 
    // (툀; 툀; 툀; 툀; 툀; ) HANGUL SYLLABLE TOELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD200 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_145)
{
    // D201;D201;1110 116C 11B4;D201;1110 116C 11B4; 
    // (툁; 툁; 툁; 툁; 툁; ) HANGUL SYLLABLE TOELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD201 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_146)
{
    // D202;D202;1110 116C 11B5;D202;1110 116C 11B5; 
    // (툂; 툂; 툂; 툂; 툂; ) HANGUL SYLLABLE TOELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD202 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_147)
{
    // D203;D203;1110 116C 11B6;D203;1110 116C 11B6; 
    // (툃; 툃; 툃; 툃; 툃; ) HANGUL SYLLABLE TOELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD203 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_148)
{
    // D204;D204;1110 116C 11B7;D204;1110 116C 11B7; 
    // (툄; 툄; 툄; 툄; 툄; ) HANGUL SYLLABLE TOEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD204 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_149)
{
    // D205;D205;1110 116C 11B8;D205;1110 116C 11B8; 
    // (툅; 툅; 툅; 툅; 툅; ) HANGUL SYLLABLE TOEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD205 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_150)
{
    // D206;D206;1110 116C 11B9;D206;1110 116C 11B9; 
    // (툆; 툆; 툆; 툆; 툆; ) HANGUL SYLLABLE TOEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD206 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_151)
{
    // D207;D207;1110 116C 11BA;D207;1110 116C 11BA; 
    // (툇; 툇; 툇; 툇; 툇; ) HANGUL SYLLABLE TOES
    {
        std::array<uint32_t, 1> const source = {{ 0xD207 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_152)
{
    // D208;D208;1110 116C 11BB;D208;1110 116C 11BB; 
    // (툈; 툈; 툈; 툈; 툈; ) HANGUL SYLLABLE TOESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD208 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_153)
{
    // D209;D209;1110 116C 11BC;D209;1110 116C 11BC; 
    // (툉; 툉; 툉; 툉; 툉; ) HANGUL SYLLABLE TOENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD209 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_154)
{
    // D20A;D20A;1110 116C 11BD;D20A;1110 116C 11BD; 
    // (툊; 툊; 툊; 툊; 툊; ) HANGUL SYLLABLE TOEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD20A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_155)
{
    // D20B;D20B;1110 116C 11BE;D20B;1110 116C 11BE; 
    // (툋; 툋; 툋; 툋; 툋; ) HANGUL SYLLABLE TOEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD20B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_156)
{
    // D20C;D20C;1110 116C 11BF;D20C;1110 116C 11BF; 
    // (툌; 툌; 툌; 툌; 툌; ) HANGUL SYLLABLE TOEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD20C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_157)
{
    // D20D;D20D;1110 116C 11C0;D20D;1110 116C 11C0; 
    // (툍; 툍; 툍; 툍; 툍; ) HANGUL SYLLABLE TOET
    {
        std::array<uint32_t, 1> const source = {{ 0xD20D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_158)
{
    // D20E;D20E;1110 116C 11C1;D20E;1110 116C 11C1; 
    // (툎; 툎; 툎; 툎; 툎; ) HANGUL SYLLABLE TOEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD20E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_159)
{
    // D20F;D20F;1110 116C 11C2;D20F;1110 116C 11C2; 
    // (툏; 툏; 툏; 툏; 툏; ) HANGUL SYLLABLE TOEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD20F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116C, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_160)
{
    // D210;D210;1110 116D;D210;1110 116D; 
    // (툐; 툐; 툐; 툐; 툐; ) HANGUL SYLLABLE TYO
    {
        std::array<uint32_t, 1> const source = {{ 0xD210 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x116D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_161)
{
    // D211;D211;1110 116D 11A8;D211;1110 116D 11A8; 
    // (툑; 툑; 툑; 툑; 툑; ) HANGUL SYLLABLE TYOG
    {
        std::array<uint32_t, 1> const source = {{ 0xD211 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_162)
{
    // D212;D212;1110 116D 11A9;D212;1110 116D 11A9; 
    // (툒; 툒; 툒; 툒; 툒; ) HANGUL SYLLABLE TYOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD212 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_163)
{
    // D213;D213;1110 116D 11AA;D213;1110 116D 11AA; 
    // (툓; 툓; 툓; 툓; 툓; ) HANGUL SYLLABLE TYOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD213 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_164)
{
    // D214;D214;1110 116D 11AB;D214;1110 116D 11AB; 
    // (툔; 툔; 툔; 툔; 툔; ) HANGUL SYLLABLE TYON
    {
        std::array<uint32_t, 1> const source = {{ 0xD214 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_165)
{
    // D215;D215;1110 116D 11AC;D215;1110 116D 11AC; 
    // (툕; 툕; 툕; 툕; 툕; ) HANGUL SYLLABLE TYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD215 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_166)
{
    // D216;D216;1110 116D 11AD;D216;1110 116D 11AD; 
    // (툖; 툖; 툖; 툖; 툖; ) HANGUL SYLLABLE TYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xD216 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_167)
{
    // D217;D217;1110 116D 11AE;D217;1110 116D 11AE; 
    // (툗; 툗; 툗; 툗; 툗; ) HANGUL SYLLABLE TYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xD217 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_168)
{
    // D218;D218;1110 116D 11AF;D218;1110 116D 11AF; 
    // (툘; 툘; 툘; 툘; 툘; ) HANGUL SYLLABLE TYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xD218 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_169)
{
    // D219;D219;1110 116D 11B0;D219;1110 116D 11B0; 
    // (툙; 툙; 툙; 툙; 툙; ) HANGUL SYLLABLE TYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xD219 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_170)
{
    // D21A;D21A;1110 116D 11B1;D21A;1110 116D 11B1; 
    // (툚; 툚; 툚; 툚; 툚; ) HANGUL SYLLABLE TYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xD21A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_171)
{
    // D21B;D21B;1110 116D 11B2;D21B;1110 116D 11B2; 
    // (툛; 툛; 툛; 툛; 툛; ) HANGUL SYLLABLE TYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xD21B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_172)
{
    // D21C;D21C;1110 116D 11B3;D21C;1110 116D 11B3; 
    // (툜; 툜; 툜; 툜; 툜; ) HANGUL SYLLABLE TYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xD21C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_173)
{
    // D21D;D21D;1110 116D 11B4;D21D;1110 116D 11B4; 
    // (툝; 툝; 툝; 툝; 툝; ) HANGUL SYLLABLE TYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xD21D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_174)
{
    // D21E;D21E;1110 116D 11B5;D21E;1110 116D 11B5; 
    // (툞; 툞; 툞; 툞; 툞; ) HANGUL SYLLABLE TYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xD21E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_175)
{
    // D21F;D21F;1110 116D 11B6;D21F;1110 116D 11B6; 
    // (툟; 툟; 툟; 툟; 툟; ) HANGUL SYLLABLE TYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xD21F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_176)
{
    // D220;D220;1110 116D 11B7;D220;1110 116D 11B7; 
    // (툠; 툠; 툠; 툠; 툠; ) HANGUL SYLLABLE TYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xD220 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_177)
{
    // D221;D221;1110 116D 11B8;D221;1110 116D 11B8; 
    // (툡; 툡; 툡; 툡; 툡; ) HANGUL SYLLABLE TYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xD221 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_178)
{
    // D222;D222;1110 116D 11B9;D222;1110 116D 11B9; 
    // (툢; 툢; 툢; 툢; 툢; ) HANGUL SYLLABLE TYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD222 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_179)
{
    // D223;D223;1110 116D 11BA;D223;1110 116D 11BA; 
    // (툣; 툣; 툣; 툣; 툣; ) HANGUL SYLLABLE TYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xD223 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_180)
{
    // D224;D224;1110 116D 11BB;D224;1110 116D 11BB; 
    // (툤; 툤; 툤; 툤; 툤; ) HANGUL SYLLABLE TYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xD224 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_181)
{
    // D225;D225;1110 116D 11BC;D225;1110 116D 11BC; 
    // (툥; 툥; 툥; 툥; 툥; ) HANGUL SYLLABLE TYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xD225 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_182)
{
    // D226;D226;1110 116D 11BD;D226;1110 116D 11BD; 
    // (툦; 툦; 툦; 툦; 툦; ) HANGUL SYLLABLE TYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD226 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_183)
{
    // D227;D227;1110 116D 11BE;D227;1110 116D 11BE; 
    // (툧; 툧; 툧; 툧; 툧; ) HANGUL SYLLABLE TYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xD227 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_184)
{
    // D228;D228;1110 116D 11BF;D228;1110 116D 11BF; 
    // (툨; 툨; 툨; 툨; 툨; ) HANGUL SYLLABLE TYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xD228 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_185)
{
    // D229;D229;1110 116D 11C0;D229;1110 116D 11C0; 
    // (툩; 툩; 툩; 툩; 툩; ) HANGUL SYLLABLE TYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xD229 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_186)
{
    // D22A;D22A;1110 116D 11C1;D22A;1110 116D 11C1; 
    // (툪; 툪; 툪; 툪; 툪; ) HANGUL SYLLABLE TYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xD22A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_187)
{
    // D22B;D22B;1110 116D 11C2;D22B;1110 116D 11C2; 
    // (툫; 툫; 툫; 툫; 툫; ) HANGUL SYLLABLE TYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xD22B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116D, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_188)
{
    // D22C;D22C;1110 116E;D22C;1110 116E; 
    // (투; 투; 투; 투; 투; ) HANGUL SYLLABLE TU
    {
        std::array<uint32_t, 1> const source = {{ 0xD22C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x116E }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_189)
{
    // D22D;D22D;1110 116E 11A8;D22D;1110 116E 11A8; 
    // (툭; 툭; 툭; 툭; 툭; ) HANGUL SYLLABLE TUG
    {
        std::array<uint32_t, 1> const source = {{ 0xD22D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_190)
{
    // D22E;D22E;1110 116E 11A9;D22E;1110 116E 11A9; 
    // (툮; 툮; 툮; 툮; 툮; ) HANGUL SYLLABLE TUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD22E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_191)
{
    // D22F;D22F;1110 116E 11AA;D22F;1110 116E 11AA; 
    // (툯; 툯; 툯; 툯; 툯; ) HANGUL SYLLABLE TUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD22F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_192)
{
    // D230;D230;1110 116E 11AB;D230;1110 116E 11AB; 
    // (툰; 툰; 툰; 툰; 툰; ) HANGUL SYLLABLE TUN
    {
        std::array<uint32_t, 1> const source = {{ 0xD230 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_193)
{
    // D231;D231;1110 116E 11AC;D231;1110 116E 11AC; 
    // (툱; 툱; 툱; 툱; 툱; ) HANGUL SYLLABLE TUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD231 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_194)
{
    // D232;D232;1110 116E 11AD;D232;1110 116E 11AD; 
    // (툲; 툲; 툲; 툲; 툲; ) HANGUL SYLLABLE TUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xD232 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_195)
{
    // D233;D233;1110 116E 11AE;D233;1110 116E 11AE; 
    // (툳; 툳; 툳; 툳; 툳; ) HANGUL SYLLABLE TUD
    {
        std::array<uint32_t, 1> const source = {{ 0xD233 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_196)
{
    // D234;D234;1110 116E 11AF;D234;1110 116E 11AF; 
    // (툴; 툴; 툴; 툴; 툴; ) HANGUL SYLLABLE TUL
    {
        std::array<uint32_t, 1> const source = {{ 0xD234 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_197)
{
    // D235;D235;1110 116E 11B0;D235;1110 116E 11B0; 
    // (툵; 툵; 툵; 툵; 툵; ) HANGUL SYLLABLE TULG
    {
        std::array<uint32_t, 1> const source = {{ 0xD235 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_198)
{
    // D236;D236;1110 116E 11B1;D236;1110 116E 11B1; 
    // (툶; 툶; 툶; 툶; 툶; ) HANGUL SYLLABLE TULM
    {
        std::array<uint32_t, 1> const source = {{ 0xD236 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_060_199)
{
    // D237;D237;1110 116E 11B2;D237;1110 116E 11B2; 
    // (툷; 툷; 툷; 툷; 툷; ) HANGUL SYLLABLE TULB
    {
        std::array<uint32_t, 1> const source = {{ 0xD237 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x116E, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


