// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_005_000)
{
    // 02EA  ; [*04C7.0020.0002] 
    // MODIFIER LETTER YIN DEPARTING TONE MARK

    uint32_t const cps[1] = { 0x2ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_001)
{
    // 02EB  ; [*04C8.0020.0002] 
    // MODIFIER LETTER YANG DEPARTING TONE MARK

    uint32_t const cps[1] = { 0x2eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_002)
{
    // 02EC  ; [*04C9.0020.0002] 
    // MODIFIER LETTER VOICING

    uint32_t const cps[1] = { 0x2ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_003)
{
    // 02ED  ; [*04CA.0020.0002] 
    // MODIFIER LETTER UNASPIRATED

    uint32_t const cps[1] = { 0x2ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_004)
{
    // 02EE  ; [.1FE5.0020.0002] 
    // MODIFIER LETTER DOUBLE APOSTROPHE

    uint32_t const cps[1] = { 0x2ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1fe5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_005)
{
    // 02EF  ; [*04CB.0020.0002] 
    // MODIFIER LETTER LOW DOWN ARROWHEAD

    uint32_t const cps[1] = { 0x2ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_006)
{
    // 02F0  ; [*04CC.0020.0002] 
    // MODIFIER LETTER LOW UP ARROWHEAD

    uint32_t const cps[1] = { 0x2f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_007)
{
    // 02F1  ; [*04CD.0020.0002] 
    // MODIFIER LETTER LOW LEFT ARROWHEAD

    uint32_t const cps[1] = { 0x2f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_008)
{
    // 02F2  ; [*04CE.0020.0002] 
    // MODIFIER LETTER LOW RIGHT ARROWHEAD

    uint32_t const cps[1] = { 0x2f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_009)
{
    // 02F3  ; [*04CF.0020.0002] 
    // MODIFIER LETTER LOW RING

    uint32_t const cps[1] = { 0x2f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_010)
{
    // 02F4  ; [*04D0.0020.0002] 
    // MODIFIER LETTER MIDDLE GRAVE ACCENT

    uint32_t const cps[1] = { 0x2f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_011)
{
    // 02F5  ; [*04D1.0020.0002] 
    // MODIFIER LETTER MIDDLE DOUBLE GRAVE ACCENT

    uint32_t const cps[1] = { 0x2f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_012)
{
    // 02F6  ; [*04D2.0020.0002] 
    // MODIFIER LETTER MIDDLE DOUBLE ACUTE ACCENT

    uint32_t const cps[1] = { 0x2f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_013)
{
    // 02F7  ; [*04D3.0020.0002] 
    // MODIFIER LETTER LOW TILDE

    uint32_t const cps[1] = { 0x2f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_014)
{
    // 02F8  ; [*04D4.0020.0002] 
    // MODIFIER LETTER RAISED COLON

    uint32_t const cps[1] = { 0x2f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_015)
{
    // 02F9  ; [*04D5.0020.0002] 
    // MODIFIER LETTER BEGIN HIGH TONE

    uint32_t const cps[1] = { 0x2f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_016)
{
    // 02FA  ; [*04D6.0020.0002] 
    // MODIFIER LETTER END HIGH TONE

    uint32_t const cps[1] = { 0x2fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_017)
{
    // 02FB  ; [*04D7.0020.0002] 
    // MODIFIER LETTER BEGIN LOW TONE

    uint32_t const cps[1] = { 0x2fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_018)
{
    // 02FC  ; [*04D8.0020.0002] 
    // MODIFIER LETTER END LOW TONE

    uint32_t const cps[1] = { 0x2fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_019)
{
    // 02FD  ; [*04D9.0020.0002] 
    // MODIFIER LETTER SHELF

    uint32_t const cps[1] = { 0x2fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_020)
{
    // 02FE  ; [*04DA.0020.0002] 
    // MODIFIER LETTER OPEN SHELF

    uint32_t const cps[1] = { 0x2fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_021)
{
    // 02FF  ; [*04DB.0020.0002] 
    // MODIFIER LETTER LOW LEFT ARROW

    uint32_t const cps[1] = { 0x2ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_022)
{
    // 0300  ; [.0000.0025.0002] 
    // COMBINING GRAVE ACCENT

    uint32_t const cps[1] = { 0x340 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_023)
{
    // 0301  ; [.0000.0024.0002] 
    // COMBINING ACUTE ACCENT

    uint32_t const cps[1] = { 0x341 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_024)
{
    // 0302  ; [.0000.0027.0002] 
    // COMBINING CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0x302 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_025)
{
    // 0303  ; [.0000.002D.0002] 
    // COMBINING TILDE

    uint32_t const cps[1] = { 0x303 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_026)
{
    // 0304  ; [.0000.0032.0002] 
    // COMBINING MACRON

    uint32_t const cps[1] = { 0x304 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x12), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_027)
{
    // 0305  ; [.0000.003A.0002] 
    // COMBINING OVERLINE

    uint32_t const cps[1] = { 0x305 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_028)
{
    // 0306  ; [.0000.0026.0002] 
    // COMBINING BREVE

    uint32_t const cps[1] = { 0x306 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_029)
{
    // 0307  ; [.0000.002E.0002] 
    // COMBINING DOT ABOVE

    uint32_t const cps[1] = { 0x307 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_030)
{
    // 0308  ; [.0000.002B.0002] 
    // COMBINING DIAERESIS

    uint32_t const cps[1] = { 0x308 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_031)
{
    // 0309  ; [.0000.003B.0002] 
    // COMBINING HOOK ABOVE

    uint32_t const cps[1] = { 0x309 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_032)
{
    // 030A  ; [.0000.0029.0002] 
    // COMBINING RING ABOVE

    uint32_t const cps[1] = { 0x30a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_033)
{
    // 030B  ; [.0000.002C.0002] 
    // COMBINING DOUBLE ACUTE ACCENT

    uint32_t const cps[1] = { 0x30b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_034)
{
    // 030C  ; [.0000.0028.0002] 
    // COMBINING CARON

    uint32_t const cps[1] = { 0x30c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_035)
{
    // 030D  ; [.0000.0033.0002] 
    // COMBINING VERTICAL LINE ABOVE

    uint32_t const cps[1] = { 0x30d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_036)
{
    // 030E  ; [.0000.0033.0002] 
    // COMBINING DOUBLE VERTICAL LINE ABOVE

    uint32_t const cps[1] = { 0x30e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_037)
{
    // 030F  ; [.0000.003C.0002] 
    // COMBINING DOUBLE GRAVE ACCENT

    uint32_t const cps[1] = { 0x30f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_038)
{
    // 0310  ; [.0000.003D.0002] 
    // COMBINING CANDRABINDU

    uint32_t const cps[1] = { 0x310 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_039)
{
    // 0311  ; [.0000.003E.0002] 
    // COMBINING INVERTED BREVE

    uint32_t const cps[1] = { 0x311 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_040)
{
    // 0312  ; [.0000.0033.0002] 
    // COMBINING TURNED COMMA ABOVE

    uint32_t const cps[1] = { 0x312 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_041)
{
    // 0313  ; [.0000.0022.0002] 
    // COMBINING COMMA ABOVE

    uint32_t const cps[1] = { 0x343 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_042)
{
    // 0314  ; [.0000.0023.0002] 
    // COMBINING REVERSED COMMA ABOVE

    uint32_t const cps[1] = { 0x314 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_043)
{
    // 0315  ; [.0000.0033.0002] 
    // COMBINING COMMA ABOVE RIGHT

    uint32_t const cps[1] = { 0x315 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_044)
{
    // 0316  ; [.0000.0034.0002] 
    // COMBINING GRAVE ACCENT BELOW

    uint32_t const cps[1] = { 0x316 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_045)
{
    // 0317  ; [.0000.0034.0002] 
    // COMBINING ACUTE ACCENT BELOW

    uint32_t const cps[1] = { 0x317 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_046)
{
    // 0318  ; [.0000.0034.0002] 
    // COMBINING LEFT TACK BELOW

    uint32_t const cps[1] = { 0x318 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_047)
{
    // 0319  ; [.0000.0034.0002] 
    // COMBINING RIGHT TACK BELOW

    uint32_t const cps[1] = { 0x319 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_048)
{
    // 031A  ; [.0000.0033.0002] 
    // COMBINING LEFT ANGLE ABOVE

    uint32_t const cps[1] = { 0x31a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_049)
{
    // 031B  ; [.0000.003F.0002] 
    // COMBINING HORN

    uint32_t const cps[1] = { 0x31b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_050)
{
    // 031C  ; [.0000.0034.0002] 
    // COMBINING LEFT HALF RING BELOW

    uint32_t const cps[1] = { 0x31c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_051)
{
    // 031D  ; [.0000.0034.0002] 
    // COMBINING UP TACK BELOW

    uint32_t const cps[1] = { 0x31d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_052)
{
    // 031E  ; [.0000.0034.0002] 
    // COMBINING DOWN TACK BELOW

    uint32_t const cps[1] = { 0x31e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_053)
{
    // 031F  ; [.0000.0034.0002] 
    // COMBINING PLUS SIGN BELOW

    uint32_t const cps[1] = { 0x31f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_054)
{
    // 0320  ; [.0000.0034.0002] 
    // COMBINING MINUS SIGN BELOW

    uint32_t const cps[1] = { 0x320 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_055)
{
    // 0321  ; [.0000.0040.0002] 
    // COMBINING PALATALIZED HOOK BELOW

    uint32_t const cps[1] = { 0x321 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x20), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_056)
{
    // 0322  ; [.0000.0041.0002] 
    // COMBINING RETROFLEX HOOK BELOW

    uint32_t const cps[1] = { 0x322 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x21), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_057)
{
    // 0323  ; [.0000.0042.0002] 
    // COMBINING DOT BELOW

    uint32_t const cps[1] = { 0x323 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_058)
{
    // 0324  ; [.0000.0043.0002] 
    // COMBINING DIAERESIS BELOW

    uint32_t const cps[1] = { 0x324 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x23), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_059)
{
    // 0325  ; [.0000.0044.0002] 
    // COMBINING RING BELOW

    uint32_t const cps[1] = { 0x325 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x24), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_060)
{
    // 0326  ; [.0000.0045.0002] 
    // COMBINING COMMA BELOW

    uint32_t const cps[1] = { 0x326 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x25), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_061)
{
    // 0327  ; [.0000.0030.0002] 
    // COMBINING CEDILLA

    uint32_t const cps[1] = { 0x327 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_062)
{
    // 0328  ; [.0000.0031.0002] 
    // COMBINING OGONEK

    uint32_t const cps[1] = { 0x328 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x11), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_063)
{
    // 0329  ; [.0000.0034.0002] 
    // COMBINING VERTICAL LINE BELOW

    uint32_t const cps[1] = { 0x329 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_064)
{
    // 032A  ; [.0000.0034.0002] 
    // COMBINING BRIDGE BELOW

    uint32_t const cps[1] = { 0x32a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_065)
{
    // 032B  ; [.0000.0034.0002] 
    // COMBINING INVERTED DOUBLE ARCH BELOW

    uint32_t const cps[1] = { 0x32b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_066)
{
    // 032C  ; [.0000.0034.0002] 
    // COMBINING CARON BELOW

    uint32_t const cps[1] = { 0x32c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_067)
{
    // 032D  ; [.0000.0046.0002] 
    // COMBINING CIRCUMFLEX ACCENT BELOW

    uint32_t const cps[1] = { 0x32d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x26), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_068)
{
    // 032E  ; [.0000.0047.0002] 
    // COMBINING BREVE BELOW

    uint32_t const cps[1] = { 0x32e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x27), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_069)
{
    // 032F  ; [.0000.0034.0002] 
    // COMBINING INVERTED BREVE BELOW

    uint32_t const cps[1] = { 0x32f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_070)
{
    // 0330  ; [.0000.0048.0002] 
    // COMBINING TILDE BELOW

    uint32_t const cps[1] = { 0x330 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x28), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_071)
{
    // 0331  ; [.0000.0049.0002] 
    // COMBINING MACRON BELOW

    uint32_t const cps[1] = { 0x331 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x29), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_072)
{
    // 0332  ; [.0000.0021.0002] 
    // COMBINING LOW LINE

    uint32_t const cps[1] = { 0x332 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_073)
{
    // 0333  ; [.0000.0034.0002] 
    // COMBINING DOUBLE LOW LINE

    uint32_t const cps[1] = { 0x333 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_074)
{
    // 0334  ; [.0000.004A.0002] 
    // COMBINING TILDE OVERLAY

    uint32_t const cps[1] = { 0x334 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_075)
{
    // 0335  ; [.0000.0039.0002] 
    // COMBINING SHORT STROKE OVERLAY

    uint32_t const cps[1] = { 0x335 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x19), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_076)
{
    // 0336  ; [.0000.0035.0002] 
    // COMBINING LONG STROKE OVERLAY

    uint32_t const cps[1] = { 0x336 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_077)
{
    // 0337  ; [.0000.0035.0002] 
    // COMBINING SHORT SOLIDUS OVERLAY

    uint32_t const cps[1] = { 0x337 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_078)
{
    // 0338  ; [.0000.002F.0002] 
    // COMBINING LONG SOLIDUS OVERLAY

    uint32_t const cps[1] = { 0x338 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_079)
{
    // 0339  ; [.0000.004B.0002] 
    // COMBINING RIGHT HALF RING BELOW

    uint32_t const cps[1] = { 0x339 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_080)
{
    // 033A  ; [.0000.0034.0002] 
    // COMBINING INVERTED BRIDGE BELOW

    uint32_t const cps[1] = { 0x33a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_081)
{
    // 033B  ; [.0000.0034.0002] 
    // COMBINING SQUARE BELOW

    uint32_t const cps[1] = { 0x33b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_082)
{
    // 033C  ; [.0000.0034.0002] 
    // COMBINING SEAGULL BELOW

    uint32_t const cps[1] = { 0x33c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_083)
{
    // 033D  ; [.0000.0033.0002] 
    // COMBINING X ABOVE

    uint32_t const cps[1] = { 0x33d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_084)
{
    // 033E  ; [.0000.0033.0002] 
    // COMBINING VERTICAL TILDE

    uint32_t const cps[1] = { 0x33e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_085)
{
    // 033F  ; [.0000.0033.0002] 
    // COMBINING DOUBLE OVERLINE

    uint32_t const cps[1] = { 0x33f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_086)
{
    // 0340  ; [.0000.0025.0002] 
    // COMBINING GRAVE TONE MARK

    uint32_t const cps[1] = { 0x340 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_087)
{
    // 0341  ; [.0000.0024.0002] 
    // COMBINING ACUTE TONE MARK

    uint32_t const cps[1] = { 0x341 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_088)
{
    // 0342  ; [.0000.002A.0002] 
    // COMBINING GREEK PERISPOMENI

    uint32_t const cps[1] = { 0x342 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_089)
{
    // 0343  ; [.0000.0022.0002] 
    // COMBINING GREEK KORONIS

    uint32_t const cps[1] = { 0x343 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_090)
{
    // 0344  ; [.0000.002B.0002][.0000.0024.0002] 
    // COMBINING GREEK DIALYTIKA TONOS

    uint32_t const cps[1] = { 0x344 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_005_091)
{
    // 0345  ; [.0000.004C.0002] 
    // COMBINING GREEK YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x345 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_092)
{
    // 0346  ; [.0000.0033.0002] 
    // COMBINING BRIDGE ABOVE

    uint32_t const cps[1] = { 0x346 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_093)
{
    // 0347  ; [.0000.0034.0002] 
    // COMBINING EQUALS SIGN BELOW

    uint32_t const cps[1] = { 0x347 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_094)
{
    // 0348  ; [.0000.0034.0002] 
    // COMBINING DOUBLE VERTICAL LINE BELOW

    uint32_t const cps[1] = { 0x348 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_095)
{
    // 0349  ; [.0000.0034.0002] 
    // COMBINING LEFT ANGLE BELOW

    uint32_t const cps[1] = { 0x349 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_096)
{
    // 034A  ; [.0000.0033.0002] 
    // COMBINING NOT TILDE ABOVE

    uint32_t const cps[1] = { 0x34a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_097)
{
    // 034B  ; [.0000.0033.0002] 
    // COMBINING HOMOTHETIC ABOVE

    uint32_t const cps[1] = { 0x34b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_098)
{
    // 034C  ; [.0000.0033.0002] 
    // COMBINING ALMOST EQUAL TO ABOVE

    uint32_t const cps[1] = { 0x34c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_099)
{
    // 034D  ; [.0000.0034.0002] 
    // COMBINING LEFT RIGHT ARROW BELOW

    uint32_t const cps[1] = { 0x34d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_100)
{
    // 034E  ; [.0000.0034.0002] 
    // COMBINING UPWARDS ARROW BELOW

    uint32_t const cps[1] = { 0x34e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_101)
{
    // 034F  ; [.0000.0000.0000] 
    // COMBINING GRAPHEME JOINER

    uint32_t const cps[1] = { 0x34f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_102)
{
    // 0350  ; [.0000.0033.0002] 
    // COMBINING RIGHT ARROWHEAD ABOVE

    uint32_t const cps[1] = { 0x350 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_103)
{
    // 0351  ; [.0000.0033.0002] 
    // COMBINING LEFT HALF RING ABOVE

    uint32_t const cps[1] = { 0x351 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_104)
{
    // 0352  ; [.0000.0033.0002] 
    // COMBINING FERMATA

    uint32_t const cps[1] = { 0x352 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_105)
{
    // 0353  ; [.0000.0034.0002] 
    // COMBINING X BELOW

    uint32_t const cps[1] = { 0x353 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_106)
{
    // 0354  ; [.0000.0034.0002] 
    // COMBINING LEFT ARROWHEAD BELOW

    uint32_t const cps[1] = { 0x354 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_107)
{
    // 0355  ; [.0000.0034.0002] 
    // COMBINING RIGHT ARROWHEAD BELOW

    uint32_t const cps[1] = { 0x355 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_108)
{
    // 0356  ; [.0000.0034.0002] 
    // COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW

    uint32_t const cps[1] = { 0x356 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_109)
{
    // 0357  ; [.0000.0033.0002] 
    // COMBINING RIGHT HALF RING ABOVE

    uint32_t const cps[1] = { 0x357 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_110)
{
    // 0358  ; [.0000.004D.0002] 
    // COMBINING DOT ABOVE RIGHT

    uint32_t const cps[1] = { 0x358 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_111)
{
    // 0359  ; [.0000.0034.0002] 
    // COMBINING ASTERISK BELOW

    uint32_t const cps[1] = { 0x359 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_112)
{
    // 035A  ; [.0000.0034.0002] 
    // COMBINING DOUBLE RING BELOW

    uint32_t const cps[1] = { 0x35a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_113)
{
    // 035B  ; [.0000.0033.0002] 
    // COMBINING ZIGZAG ABOVE

    uint32_t const cps[1] = { 0x35b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_114)
{
    // 035C  ; [.0000.0034.0002] 
    // COMBINING DOUBLE BREVE BELOW

    uint32_t const cps[1] = { 0x35c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_115)
{
    // 035D  ; [.0000.0033.0002] 
    // COMBINING DOUBLE BREVE

    uint32_t const cps[1] = { 0x35d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_116)
{
    // 035E  ; [.0000.0033.0002] 
    // COMBINING DOUBLE MACRON

    uint32_t const cps[1] = { 0x35e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_117)
{
    // 035F  ; [.0000.0034.0002] 
    // COMBINING DOUBLE MACRON BELOW

    uint32_t const cps[1] = { 0x35f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_118)
{
    // 0360  ; [.0000.004E.0002] 
    // COMBINING DOUBLE TILDE

    uint32_t const cps[1] = { 0x360 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_119)
{
    // 0361  ; [.0000.004F.0002] 
    // COMBINING DOUBLE INVERTED BREVE

    uint32_t const cps[1] = { 0x361 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_120)
{
    // 0362  ; [.0000.0034.0002] 
    // COMBINING DOUBLE RIGHTWARDS ARROW BELOW

    uint32_t const cps[1] = { 0x362 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_121)
{
    // 0363  ; [.1CAD.0020.0004] 
    // COMBINING LATIN SMALL LETTER A

    uint32_t const cps[1] = { 0x363 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_122)
{
    // 0364  ; [.1D10.0020.0004] 
    // COMBINING LATIN SMALL LETTER E

    uint32_t const cps[1] = { 0x364 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_123)
{
    // 0365  ; [.1D98.0020.0004] 
    // COMBINING LATIN SMALL LETTER I

    uint32_t const cps[1] = { 0x365 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_124)
{
    // 0366  ; [.1E43.0020.0004] 
    // COMBINING LATIN SMALL LETTER O

    uint32_t const cps[1] = { 0x366 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_125)
{
    // 0367  ; [.1F1B.0020.0004] 
    // COMBINING LATIN SMALL LETTER U

    uint32_t const cps[1] = { 0x367 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_126)
{
    // 0368  ; [.1CE0.0020.0004] 
    // COMBINING LATIN SMALL LETTER C

    uint32_t const cps[1] = { 0x368 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_127)
{
    // 0369  ; [.1CF5.0020.0004] 
    // COMBINING LATIN SMALL LETTER D

    uint32_t const cps[1] = { 0x369 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_128)
{
    // 036A  ; [.1D7E.0020.0004] 
    // COMBINING LATIN SMALL LETTER H

    uint32_t const cps[1] = { 0x36a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_129)
{
    // 036B  ; [.1E10.0020.0004] 
    // COMBINING LATIN SMALL LETTER M

    uint32_t const cps[1] = { 0x36b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_130)
{
    // 036C  ; [.1E99.0020.0004] 
    // COMBINING LATIN SMALL LETTER R

    uint32_t const cps[1] = { 0x36c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_131)
{
    // 036D  ; [.1EFB.0020.0004] 
    // COMBINING LATIN SMALL LETTER T

    uint32_t const cps[1] = { 0x36d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_132)
{
    // 036E  ; [.1F49.0020.0004] 
    // COMBINING LATIN SMALL LETTER V

    uint32_t const cps[1] = { 0x36e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_133)
{
    // 036F  ; [.1F65.0020.0004] 
    // COMBINING LATIN SMALL LETTER X

    uint32_t const cps[1] = { 0x36f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_134)
{
    // 0370  ; [.2029.0020.0008] 
    // GREEK CAPITAL LETTER HETA

    uint32_t const cps[1] = { 0x370 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2029), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_135)
{
    // 0371  ; [.2029.0020.0002] 
    // GREEK SMALL LETTER HETA

    uint32_t const cps[1] = { 0x371 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2029), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_136)
{
    // 0372  ; [.204A.0020.0008] 
    // GREEK CAPITAL LETTER ARCHAIC SAMPI

    uint32_t const cps[1] = { 0x372 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x204a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_137)
{
    // 0373  ; [.204A.0020.0002] 
    // GREEK SMALL LETTER ARCHAIC SAMPI

    uint32_t const cps[1] = { 0x373 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x204a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_138)
{
    // 0374  ; [*04A9.0020.0002] 
    // GREEK NUMERAL SIGN

    uint32_t const cps[1] = { 0x374 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_139)
{
    // 0375  ; [*04AA.0020.0002] 
    // GREEK LOWER NUMERAL SIGN

    uint32_t const cps[1] = { 0x375 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_140)
{
    // 0376  ; [.2026.0020.0008] 
    // GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA

    uint32_t const cps[1] = { 0x376 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2026), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_141)
{
    // 0377  ; [.2026.0020.0002] 
    // GREEK SMALL LETTER PAMPHYLIAN DIGAMMA

    uint32_t const cps[1] = { 0x377 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2026), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_142)
{
    // 037A  ; [.202C.0020.0004] 
    // GREEK YPOGEGRAMMENI

    uint32_t const cps[1] = { 0x37a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_143)
{
    // 037B  ; [.203F.0020.0002] 
    // GREEK SMALL REVERSED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x37b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x203f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_144)
{
    // 037C  ; [.203E.0020.0002] 
    // GREEK SMALL DOTTED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x37c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x203e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_145)
{
    // 037D  ; [.2040.0020.0002] 
    // GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x37d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2040), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_146)
{
    // 037E  ; [*0234.0020.0002] 
    // GREEK QUESTION MARK

    uint32_t const cps[1] = { 0x37e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x234), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_147)
{
    // 037F  ; [.202D.0020.0008] 
    // GREEK CAPITAL LETTER YOT

    uint32_t const cps[1] = { 0x37f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x202d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_148)
{
    // 0384  ; [*0499.0020.0002] 
    // GREEK TONOS

    uint32_t const cps[1] = { 0x384 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x499), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_005_149)
{
    // 0385  ; [*049F.0020.0002][.0000.0024.0002] 
    // GREEK DIALYTIKA TONOS

    uint32_t const cps[1] = { 0x385 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x49f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

