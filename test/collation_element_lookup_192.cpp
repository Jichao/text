// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_192_000)
{
    // 1F189 ; [.1F87.0020.001D] 
    // NEGATIVE SQUARED LATIN CAPITAL LETTER Z

    uint32_t const cps[1] = { 0x1f189 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_001)
{
    // 1F18A ; [.1E72.0020.001D] 
    // CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P

    uint32_t const cps[1] = { 0x1f18a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_002)
{
    // 1F18B ; [.1D98.0020.001D][.1CE0.0020.001D] 
    // NEGATIVE SQUARED IC

    uint32_t const cps[1] = { 0x1f18b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_003)
{
    // 1F18C ; [.1E72.0020.001D][.1CAD.0020.001D] 
    // NEGATIVE SQUARED PA

    uint32_t const cps[1] = { 0x1f18c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_004)
{
    // 1F18D ; [.1ED7.0020.001D][.1CAD.0020.001D] 
    // NEGATIVE SQUARED SA

    uint32_t const cps[1] = { 0x1f18d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_005)
{
    // 1F18E ; [.1CAD.0020.001D][.1CC6.0020.001D] 
    // NEGATIVE SQUARED AB

    uint32_t const cps[1] = { 0x1f18e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_006)
{
    // 1F18F ; [.1F5B.0020.001D][.1CE0.0020.001D] 
    // NEGATIVE SQUARED WC

    uint32_t const cps[1] = { 0x1f18f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_007)
{
    // 1F190 ; [.1CF5.0020.001D][.1DB2.0020.001D] 
    // SQUARE DJ

    uint32_t const cps[1] = { 0x1f190 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_008)
{
    // 1F191 ; [.1CE0.0020.001D][.1DDD.0020.001D] 
    // SQUARED CL

    uint32_t const cps[1] = { 0x1f191 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_009)
{
    // 1F192 ; [.1CE0.0020.001D][.1E43.0020.001D][.1E43.0020.001D][.1DDD.0020.001D] 
    // SQUARED COOL

    uint32_t const cps[1] = { 0x1f192 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_010)
{
    // 1F193 ; [.1D4B.0020.001D][.1E99.0020.001D][.1D10.0020.001D][.1D10.0020.001D] 
    // SQUARED FREE

    uint32_t const cps[1] = { 0x1f193 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_011)
{
    // 1F194 ; [.1D98.0020.001D][.1CF5.0020.001D] 
    // SQUARED ID

    uint32_t const cps[1] = { 0x1f194 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_012)
{
    // 1F195 ; [.1E1F.0020.001D][.1D10.0020.001D][.1F5B.0020.001D] 
    // SQUARED NEW

    uint32_t const cps[1] = { 0x1f195 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_013)
{
    // 1F196 ; [.1E1F.0020.001D][.1D5A.0020.001D] 
    // SQUARED NG

    uint32_t const cps[1] = { 0x1f196 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_014)
{
    // 1F197 ; [.1E43.0020.001D][.1DCB.0020.001D] 
    // SQUARED OK

    uint32_t const cps[1] = { 0x1f197 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_015)
{
    // 1F198 ; [.1ED7.0020.001D][.1E43.0020.001D][.1ED7.0020.001D] 
    // SQUARED SOS

    uint32_t const cps[1] = { 0x1f198 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_016)
{
    // 1F199 ; [.1F1B.0020.001D][.1E72.0020.001D][*0261.0020.001C] 
    // SQUARED UP WITH EXCLAMATION MARK

    uint32_t const cps[1] = { 0x1f199 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x261), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_017)
{
    // 1F19A ; [.1F49.0020.001D][.1ED7.0020.001D] 
    // SQUARED VS

    uint32_t const cps[1] = { 0x1f19a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_018)
{
    // 1F19B ; [.1CA6.0020.001C][.1CF5.0020.001D] 
    // SQUARED THREE D

    uint32_t const cps[1] = { 0x1f19b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_019)
{
    // 1F19C ; [.1CA5.0020.001C][.1E1F.0020.001C][.1CF5.0020.001C][*0209.0020.001C][.1ED7.0020.001D][.1CE0.0020.001C][.1E99.0020.001C] 
    // SQUARED SECOND SCREEN

    uint32_t const cps[1] = { 0x1f19c };
    // biased L2 weight
    boost::text::collation_element const ces[7] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 7));
}

TEST(collation, table_lookup_192_020)
{
    // 1F19D ; [.1CA5.0020.001C][.1DCB.0020.001D] 
    // SQUARED TWO K

    uint32_t const cps[1] = { 0x1f19d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_021)
{
    // 1F19E ; [.1CA7.0020.001C][.1DCB.0020.001D] 
    // SQUARED FOUR K

    uint32_t const cps[1] = { 0x1f19e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_022)
{
    // 1F19F ; [.1CAB.0020.001C][.1DCB.0020.001D] 
    // SQUARED EIGHT K

    uint32_t const cps[1] = { 0x1f19f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_023)
{
    // 1F1A0 ; [.1CA8.0020.001C][*0278.0020.001C][.1CA4.0020.001C] 
    // SQUARED FIVE POINT ONE

    uint32_t const cps[1] = { 0x1f1a0 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_024)
{
    // 1F1A1 ; [.1CAA.0020.001C][*0278.0020.001C][.1CA4.0020.001C] 
    // SQUARED SEVEN POINT ONE

    uint32_t const cps[1] = { 0x1f1a1 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_025)
{
    // 1F1A2 ; [.1CA5.0020.001C][.1CA5.0020.001C][*0278.0020.001C][.1CA5.0020.001C] 
    // SQUARED TWENTY-TWO POINT TWO

    uint32_t const cps[1] = { 0x1f1a2 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_026)
{
    // 1F1A3 ; [.1CA9.0020.001C][.1CA3.0020.001C][.1E72.0020.001D] 
    // SQUARED SIXTY P

    uint32_t const cps[1] = { 0x1f1a3 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_027)
{
    // 1F1A4 ; [.1CA4.0020.001C][.1CA5.0020.001C][.1CA3.0020.001C][.1E72.0020.001D] 
    // SQUARED ONE HUNDRED TWENTY P

    uint32_t const cps[1] = { 0x1f1a4 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_028)
{
    // 1F1A5 ; [.1CF5.0020.001C] 
    // SQUARED LATIN SMALL LETTER D

    uint32_t const cps[1] = { 0x1f1a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_029)
{
    // 1F1A6 ; [.1D7E.0020.001D][.1CE0.0020.001C] 
    // SQUARED HC

    uint32_t const cps[1] = { 0x1f1a6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_030)
{
    // 1F1A7 ; [.1D7E.0020.001D][.1CF5.0020.001C][.1E99.0020.001D] 
    // SQUARED HDR

    uint32_t const cps[1] = { 0x1f1a7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_031)
{
    // 1F1A8 ; [.1D7E.0020.001D][.1D98.0020.001C][*0209.0020.001C][.1E99.0020.001D][.1D10.0020.001C][.1ED7.0020.001C] 
    // SQUARED HI-RES

    uint32_t const cps[1] = { 0x1f1a8 };
    // biased L2 weight
    boost::text::collation_element const ces[6] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_192_032)
{
    // 1F1A9 ; [.1DDD.0020.001D][.1E43.0020.001C][.1ED7.0020.001C][.1ED7.0020.001C][.1DDD.0020.001C][.1D10.0020.001C][.1ED7.0020.001C][.1ED7.0020.001C] 
    // SQUARED LOSSLESS

    uint32_t const cps[1] = { 0x1f1a9 };
    // biased L2 weight
    boost::text::collation_element const ces[8] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 8));
}

TEST(collation, table_lookup_192_033)
{
    // 1F1AA ; [.1ED7.0020.001D][.1D7E.0020.001D][.1F49.0020.001D] 
    // SQUARED SHV

    uint32_t const cps[1] = { 0x1f1aa };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_034)
{
    // 1F1AB ; [.1F1B.0020.001D][.1D7E.0020.001D][.1CF5.0020.001D] 
    // SQUARED UHD

    uint32_t const cps[1] = { 0x1f1ab };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_035)
{
    // 1F1AC ; [.1F49.0020.001D][.1E43.0020.001D][.1CF5.0020.001D] 
    // SQUARED VOD

    uint32_t const cps[1] = { 0x1f1ac };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_192_036)
{
    // 1F1E6 ; [*0A1E.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER A

    uint32_t const cps[1] = { 0x1f1e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_037)
{
    // 1F1E7 ; [*0A1F.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER B

    uint32_t const cps[1] = { 0x1f1e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_038)
{
    // 1F1E8 ; [*0A20.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER C

    uint32_t const cps[1] = { 0x1f1e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_039)
{
    // 1F1E9 ; [*0A21.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER D

    uint32_t const cps[1] = { 0x1f1e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_040)
{
    // 1F1EA ; [*0A22.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER E

    uint32_t const cps[1] = { 0x1f1ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_041)
{
    // 1F1EB ; [*0A23.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER F

    uint32_t const cps[1] = { 0x1f1eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_042)
{
    // 1F1EC ; [*0A24.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER G

    uint32_t const cps[1] = { 0x1f1ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_043)
{
    // 1F1ED ; [*0A25.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER H

    uint32_t const cps[1] = { 0x1f1ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_044)
{
    // 1F1EE ; [*0A26.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER I

    uint32_t const cps[1] = { 0x1f1ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_045)
{
    // 1F1EF ; [*0A27.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER J

    uint32_t const cps[1] = { 0x1f1ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_046)
{
    // 1F1F0 ; [*0A28.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER K

    uint32_t const cps[1] = { 0x1f1f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_047)
{
    // 1F1F1 ; [*0A29.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER L

    uint32_t const cps[1] = { 0x1f1f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_048)
{
    // 1F1F2 ; [*0A2A.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER M

    uint32_t const cps[1] = { 0x1f1f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_049)
{
    // 1F1F3 ; [*0A2B.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER N

    uint32_t const cps[1] = { 0x1f1f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_050)
{
    // 1F1F4 ; [*0A2C.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER O

    uint32_t const cps[1] = { 0x1f1f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_051)
{
    // 1F1F5 ; [*0A2D.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER P

    uint32_t const cps[1] = { 0x1f1f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_052)
{
    // 1F1F6 ; [*0A2E.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER Q

    uint32_t const cps[1] = { 0x1f1f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_053)
{
    // 1F1F7 ; [*0A2F.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER R

    uint32_t const cps[1] = { 0x1f1f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_054)
{
    // 1F1F8 ; [*0A30.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER S

    uint32_t const cps[1] = { 0x1f1f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_055)
{
    // 1F1F9 ; [*0A31.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER T

    uint32_t const cps[1] = { 0x1f1f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_056)
{
    // 1F1FA ; [*0A32.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER U

    uint32_t const cps[1] = { 0x1f1fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_057)
{
    // 1F1FB ; [*0A33.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER V

    uint32_t const cps[1] = { 0x1f1fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_058)
{
    // 1F1FC ; [*0A34.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER W

    uint32_t const cps[1] = { 0x1f1fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_059)
{
    // 1F1FD ; [*0A35.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER X

    uint32_t const cps[1] = { 0x1f1fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_060)
{
    // 1F1FE ; [*0A36.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER Y

    uint32_t const cps[1] = { 0x1f1fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_061)
{
    // 1F1FF ; [*0A37.0020.0002] 
    // REGIONAL INDICATOR SYMBOL LETTER Z

    uint32_t const cps[1] = { 0x1f1ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xa37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_062)
{
    // 1F200 ; [.3E8F.0020.001C][.3E77.0020.001C] 
    // SQUARE HIRAGANA HOKA

    uint32_t const cps[1] = { 0x1f200 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3e8f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x3e77), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_063)
{
    // 1F201 ; [.3E7B.0020.001C][.3E7B.0020.001C] 
    // SQUARED KATAKANA KOKO

    uint32_t const cps[1] = { 0x1f201 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3e7b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x3e7b), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_064)
{
    // 1F202 ; [.3E7C.0020.001C] 
    // SQUARED KATAKANA SA

    uint32_t const cps[1] = { 0x1f202 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3e7c), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_065)
{
    // 1F210 ; [.FB40.0020.001C][.E24B.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-624B

    uint32_t const cps[1] = { 0x1f210 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe24b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_066)
{
    // 1F211 ; [.FB40.0020.001C][.DB57.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5B57

    uint32_t const cps[1] = { 0x1f211 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xdb57), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_067)
{
    // 1F212 ; [.FB40.0020.001C][.D3CC.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-53CC

    uint32_t const cps[1] = { 0x1f212 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd3cc), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_068)
{
    // 1F213 ; [.3E84.0020.001C][.0000.0037.001C] 
    // SQUARED KATAKANA DE

    uint32_t const cps[1] = { 0x1f213 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3e84), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x17), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_069)
{
    // 1F214 ; [.FB40.0020.001C][.CE8C.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-4E8C

    uint32_t const cps[1] = { 0x1f214 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xce8c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_070)
{
    // 1F215 ; [.FB40.0020.001C][.D91A.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-591A

    uint32_t const cps[1] = { 0x1f215 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd91a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_071)
{
    // 1F216 ; [.FB41.0020.001C][.89E3.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-89E3

    uint32_t const cps[1] = { 0x1f216 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x89e3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_072)
{
    // 1F217 ; [.FB40.0020.001C][.D929.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5929

    uint32_t const cps[1] = { 0x1f217 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd929), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_073)
{
    // 1F218 ; [.FB40.0020.001C][.CEA4.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-4EA4

    uint32_t const cps[1] = { 0x1f218 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xcea4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_074)
{
    // 1F219 ; [.FB40.0020.001C][.E620.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6620

    uint32_t const cps[1] = { 0x1f219 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe620), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_075)
{
    // 1F21A ; [.FB40.0020.001C][.F121.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-7121

    uint32_t const cps[1] = { 0x1f21a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xf121), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_076)
{
    // 1F21B ; [.FB40.0020.001C][.E599.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6599

    uint32_t const cps[1] = { 0x1f21b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe599), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_077)
{
    // 1F21C ; [.FB40.0020.001C][.D24D.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-524D

    uint32_t const cps[1] = { 0x1f21c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd24d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_078)
{
    // 1F21D ; [.FB40.0020.001C][.DF8C.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5F8C

    uint32_t const cps[1] = { 0x1f21d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xdf8c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_079)
{
    // 1F21E ; [.FB40.0020.001C][.D18D.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-518D

    uint32_t const cps[1] = { 0x1f21e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd18d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_080)
{
    // 1F21F ; [.FB40.0020.001C][.E5B0.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-65B0

    uint32_t const cps[1] = { 0x1f21f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe5b0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_081)
{
    // 1F220 ; [.FB40.0020.001C][.D21D.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-521D

    uint32_t const cps[1] = { 0x1f220 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd21d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_082)
{
    // 1F221 ; [.FB40.0020.001C][.FD42.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-7D42

    uint32_t const cps[1] = { 0x1f221 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xfd42), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_083)
{
    // 1F222 ; [.FB40.0020.001C][.F51F.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-751F

    uint32_t const cps[1] = { 0x1f222 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xf51f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_084)
{
    // 1F223 ; [.FB41.0020.001C][.8CA9.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-8CA9

    uint32_t const cps[1] = { 0x1f223 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x8ca9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_085)
{
    // 1F224 ; [.FB40.0020.001C][.D8F0.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-58F0

    uint32_t const cps[1] = { 0x1f224 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd8f0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_086)
{
    // 1F225 ; [.FB40.0020.001C][.D439.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5439

    uint32_t const cps[1] = { 0x1f225 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd439), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_087)
{
    // 1F226 ; [.FB40.0020.001C][.EF14.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6F14

    uint32_t const cps[1] = { 0x1f226 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xef14), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_088)
{
    // 1F227 ; [.FB40.0020.001C][.E295.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6295

    uint32_t const cps[1] = { 0x1f227 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe295), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_089)
{
    // 1F228 ; [.FB40.0020.001C][.E355.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6355

    uint32_t const cps[1] = { 0x1f228 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe355), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_090)
{
    // 1F229 ; [.FB40.0020.001C][.CE00.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-4E00

    uint32_t const cps[1] = { 0x1f229 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xce00), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_091)
{
    // 1F22A ; [.FB40.0020.001C][.CE09.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-4E09

    uint32_t const cps[1] = { 0x1f22a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xce09), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_092)
{
    // 1F22B ; [.FB41.0020.001C][.904A.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-904A

    uint32_t const cps[1] = { 0x1f22b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x904a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_093)
{
    // 1F22C ; [.FB40.0020.001C][.DDE6.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5DE6

    uint32_t const cps[1] = { 0x1f22c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xdde6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_094)
{
    // 1F22D ; [.FB40.0020.001C][.CE2D.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-4E2D

    uint32_t const cps[1] = { 0x1f22d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xce2d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_095)
{
    // 1F22E ; [.FB40.0020.001C][.D3F3.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-53F3

    uint32_t const cps[1] = { 0x1f22e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd3f3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_096)
{
    // 1F22F ; [.FB40.0020.001C][.E307.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6307

    uint32_t const cps[1] = { 0x1f22f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe307), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_097)
{
    // 1F230 ; [.FB41.0020.001C][.8D70.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-8D70

    uint32_t const cps[1] = { 0x1f230 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x8d70), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_098)
{
    // 1F231 ; [.FB40.0020.001C][.E253.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6253

    uint32_t const cps[1] = { 0x1f231 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe253), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_099)
{
    // 1F232 ; [.FB40.0020.001C][.F981.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-7981

    uint32_t const cps[1] = { 0x1f232 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xf981), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_100)
{
    // 1F233 ; [.FB40.0020.001C][.FA7A.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-7A7A

    uint32_t const cps[1] = { 0x1f233 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xfa7a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_101)
{
    // 1F234 ; [.FB40.0020.001C][.D408.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5408

    uint32_t const cps[1] = { 0x1f234 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd408), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_102)
{
    // 1F235 ; [.FB40.0020.001C][.EE80.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6E80

    uint32_t const cps[1] = { 0x1f235 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xee80), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_103)
{
    // 1F236 ; [.FB40.0020.001C][.E709.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6709

    uint32_t const cps[1] = { 0x1f236 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe709), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_104)
{
    // 1F237 ; [.FB40.0020.001C][.E708.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-6708

    uint32_t const cps[1] = { 0x1f237 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe708), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_105)
{
    // 1F238 ; [.FB40.0020.001C][.F533.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-7533

    uint32_t const cps[1] = { 0x1f238 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xf533), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_106)
{
    // 1F239 ; [.FB40.0020.001C][.D272.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-5272

    uint32_t const cps[1] = { 0x1f239 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd272), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_107)
{
    // 1F23A ; [.FB40.0020.001C][.D5B6.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-55B6

    uint32_t const cps[1] = { 0x1f23a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd5b6), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_108)
{
    // 1F23B ; [.FB41.0020.001C][.914D.0000.0000] 
    // SQUARED CJK UNIFIED IDEOGRAPH-914D

    uint32_t const cps[1] = { 0x1f23b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x914d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_109)
{
    // 1F240 ; [*037A.0020.0004][.FB40.0020.0004][.E72C.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C

    uint32_t const cps[1] = { 0x1f240 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe72c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_110)
{
    // 1F241 ; [*037A.0020.0004][.FB40.0020.0004][.CE09.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09

    uint32_t const cps[1] = { 0x1f241 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce09), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_111)
{
    // 1F242 ; [*037A.0020.0004][.FB40.0020.0004][.CE8C.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C

    uint32_t const cps[1] = { 0x1f242 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce8c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_112)
{
    // 1F243 ; [*037A.0020.0004][.FB40.0020.0004][.DB89.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89

    uint32_t const cps[1] = { 0x1f243 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xdb89), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_113)
{
    // 1F244 ; [*037A.0020.0004][.FB40.0020.0004][.F0B9.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9

    uint32_t const cps[1] = { 0x1f244 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_114)
{
    // 1F245 ; [*037A.0020.0004][.FB40.0020.0004][.E253.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253

    uint32_t const cps[1] = { 0x1f245 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe253), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_115)
{
    // 1F246 ; [*037A.0020.0004][.FB40.0020.0004][.F6D7.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7

    uint32_t const cps[1] = { 0x1f246 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf6d7), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_116)
{
    // 1F247 ; [*037A.0020.0004][.FB40.0020.0004][.D2DD.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD

    uint32_t const cps[1] = { 0x1f247 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd2dd), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_117)
{
    // 1F248 ; [*037A.0020.0004][.FB40.0020.0004][.E557.0000.0000][*037B.0020.0004] 
    // TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557

    uint32_t const cps[1] = { 0x1f248 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe557), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_192_118)
{
    // 1F250 ; [.FB40.0020.0006][.DF97.0000.0000] 
    // CIRCLED IDEOGRAPH ADVANTAGE

    uint32_t const cps[1] = { 0x1f250 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0xdf97), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_119)
{
    // 1F251 ; [.FB40.0020.0006][.D3EF.0000.0000] 
    // CIRCLED IDEOGRAPH ACCEPT

    uint32_t const cps[1] = { 0x1f251 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0xd3ef), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_192_120)
{
    // 1F260 ; [*12C1.0020.0002] 
    // ROUNDED SYMBOL FOR FU

    uint32_t const cps[1] = { 0x1f260 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_121)
{
    // 1F261 ; [*12C2.0020.0002] 
    // ROUNDED SYMBOL FOR LU

    uint32_t const cps[1] = { 0x1f261 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_122)
{
    // 1F262 ; [*12C3.0020.0002] 
    // ROUNDED SYMBOL FOR SHOU

    uint32_t const cps[1] = { 0x1f262 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_123)
{
    // 1F263 ; [*12C4.0020.0002] 
    // ROUNDED SYMBOL FOR XI

    uint32_t const cps[1] = { 0x1f263 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_124)
{
    // 1F264 ; [*12C5.0020.0002] 
    // ROUNDED SYMBOL FOR SHUANGXI

    uint32_t const cps[1] = { 0x1f264 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_125)
{
    // 1F265 ; [*12C6.0020.0002] 
    // ROUNDED SYMBOL FOR CAI

    uint32_t const cps[1] = { 0x1f265 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_126)
{
    // 1F300 ; [*12C7.0020.0002] 
    // CYCLONE

    uint32_t const cps[1] = { 0x1f300 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_127)
{
    // 1F301 ; [*12C8.0020.0002] 
    // FOGGY

    uint32_t const cps[1] = { 0x1f301 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_128)
{
    // 1F302 ; [*12C9.0020.0002] 
    // CLOSED UMBRELLA

    uint32_t const cps[1] = { 0x1f302 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_129)
{
    // 1F303 ; [*12CA.0020.0002] 
    // NIGHT WITH STARS

    uint32_t const cps[1] = { 0x1f303 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_130)
{
    // 1F304 ; [*12CB.0020.0002] 
    // SUNRISE OVER MOUNTAINS

    uint32_t const cps[1] = { 0x1f304 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_131)
{
    // 1F305 ; [*12CC.0020.0002] 
    // SUNRISE

    uint32_t const cps[1] = { 0x1f305 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_132)
{
    // 1F306 ; [*12CD.0020.0002] 
    // CITYSCAPE AT DUSK

    uint32_t const cps[1] = { 0x1f306 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_133)
{
    // 1F307 ; [*12CE.0020.0002] 
    // SUNSET OVER BUILDINGS

    uint32_t const cps[1] = { 0x1f307 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_134)
{
    // 1F308 ; [*12CF.0020.0002] 
    // RAINBOW

    uint32_t const cps[1] = { 0x1f308 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_135)
{
    // 1F309 ; [*12D0.0020.0002] 
    // BRIDGE AT NIGHT

    uint32_t const cps[1] = { 0x1f309 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_136)
{
    // 1F30A ; [*12D1.0020.0002] 
    // WATER WAVE

    uint32_t const cps[1] = { 0x1f30a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_137)
{
    // 1F30B ; [*12D2.0020.0002] 
    // VOLCANO

    uint32_t const cps[1] = { 0x1f30b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_138)
{
    // 1F30C ; [*12D3.0020.0002] 
    // MILKY WAY

    uint32_t const cps[1] = { 0x1f30c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_139)
{
    // 1F30D ; [*12D4.0020.0002] 
    // EARTH GLOBE EUROPE-AFRICA

    uint32_t const cps[1] = { 0x1f30d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_140)
{
    // 1F30E ; [*12D5.0020.0002] 
    // EARTH GLOBE AMERICAS

    uint32_t const cps[1] = { 0x1f30e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_141)
{
    // 1F30F ; [*12D6.0020.0002] 
    // EARTH GLOBE ASIA-AUSTRALIA

    uint32_t const cps[1] = { 0x1f30f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_142)
{
    // 1F310 ; [*12D7.0020.0002] 
    // GLOBE WITH MERIDIANS

    uint32_t const cps[1] = { 0x1f310 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_143)
{
    // 1F311 ; [*12D8.0020.0002] 
    // NEW MOON SYMBOL

    uint32_t const cps[1] = { 0x1f311 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_144)
{
    // 1F312 ; [*12D9.0020.0002] 
    // WAXING CRESCENT MOON SYMBOL

    uint32_t const cps[1] = { 0x1f312 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_145)
{
    // 1F313 ; [*12DA.0020.0002] 
    // FIRST QUARTER MOON SYMBOL

    uint32_t const cps[1] = { 0x1f313 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_146)
{
    // 1F314 ; [*12DB.0020.0002] 
    // WAXING GIBBOUS MOON SYMBOL

    uint32_t const cps[1] = { 0x1f314 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_147)
{
    // 1F315 ; [*12DC.0020.0002] 
    // FULL MOON SYMBOL

    uint32_t const cps[1] = { 0x1f315 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_148)
{
    // 1F316 ; [*12DD.0020.0002] 
    // WANING GIBBOUS MOON SYMBOL

    uint32_t const cps[1] = { 0x1f316 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_192_149)
{
    // 1F317 ; [*12DE.0020.0002] 
    // LAST QUARTER MOON SYMBOL

    uint32_t const cps[1] = { 0x1f317 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x12de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

