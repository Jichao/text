// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_379_000)
{
    // 4830 003F;	
    // (䠰) CJK UNIFIED IDEOGRAPH-4830	[FB80 C830 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4830, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC830, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_001)
{
    // 4830 0061;	
    // (䠰) CJK UNIFIED IDEOGRAPH-4830	[FB80 C830 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4830, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_002)
{
    // 4830 0041;	
    // (䠰) CJK UNIFIED IDEOGRAPH-4830	[FB80 C830 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4830, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_003)
{
    // 4830 0062;	
    // (䠰) CJK UNIFIED IDEOGRAPH-4830	[FB80 C830 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4830, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC830, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_004)
{
    // 4831 0021;	
    // (䠱) CJK UNIFIED IDEOGRAPH-4831	[FB80 C831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4831, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_005)
{
    // 4831 003F;	
    // (䠱) CJK UNIFIED IDEOGRAPH-4831	[FB80 C831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4831, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_006)
{
    // 4831 0061;	
    // (䠱) CJK UNIFIED IDEOGRAPH-4831	[FB80 C831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4831, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_007)
{
    // 4831 0041;	
    // (䠱) CJK UNIFIED IDEOGRAPH-4831	[FB80 C831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4831, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_008)
{
    // 4831 0062;	
    // (䠱) CJK UNIFIED IDEOGRAPH-4831	[FB80 C831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4831, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_009)
{
    // 4832 0021;	
    // (䠲) CJK UNIFIED IDEOGRAPH-4832	[FB80 C832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4832, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_010)
{
    // 4832 003F;	
    // (䠲) CJK UNIFIED IDEOGRAPH-4832	[FB80 C832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4832, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_011)
{
    // 4832 0061;	
    // (䠲) CJK UNIFIED IDEOGRAPH-4832	[FB80 C832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4832, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_012)
{
    // 4832 0041;	
    // (䠲) CJK UNIFIED IDEOGRAPH-4832	[FB80 C832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4832, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_013)
{
    // 4832 0062;	
    // (䠲) CJK UNIFIED IDEOGRAPH-4832	[FB80 C832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4832, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_014)
{
    // 4833 0021;	
    // (䠳) CJK UNIFIED IDEOGRAPH-4833	[FB80 C833 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4833, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC833, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_015)
{
    // 4833 003F;	
    // (䠳) CJK UNIFIED IDEOGRAPH-4833	[FB80 C833 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4833, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC833, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_016)
{
    // 4833 0061;	
    // (䠳) CJK UNIFIED IDEOGRAPH-4833	[FB80 C833 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4833, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_017)
{
    // 4833 0041;	
    // (䠳) CJK UNIFIED IDEOGRAPH-4833	[FB80 C833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4833, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_018)
{
    // 4833 0062;	
    // (䠳) CJK UNIFIED IDEOGRAPH-4833	[FB80 C833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4833, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_019)
{
    // 4834 0021;	
    // (䠴) CJK UNIFIED IDEOGRAPH-4834	[FB80 C834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4834, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_020)
{
    // 4834 003F;	
    // (䠴) CJK UNIFIED IDEOGRAPH-4834	[FB80 C834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4834, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_021)
{
    // 4834 0061;	
    // (䠴) CJK UNIFIED IDEOGRAPH-4834	[FB80 C834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4834, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_022)
{
    // 4834 0041;	
    // (䠴) CJK UNIFIED IDEOGRAPH-4834	[FB80 C834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4834, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_023)
{
    // 4834 0062;	
    // (䠴) CJK UNIFIED IDEOGRAPH-4834	[FB80 C834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4834, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_024)
{
    // 4835 0021;	
    // (䠵) CJK UNIFIED IDEOGRAPH-4835	[FB80 C835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4835, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_025)
{
    // 4835 003F;	
    // (䠵) CJK UNIFIED IDEOGRAPH-4835	[FB80 C835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4835, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_026)
{
    // 4835 0061;	
    // (䠵) CJK UNIFIED IDEOGRAPH-4835	[FB80 C835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4835, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_027)
{
    // 4835 0041;	
    // (䠵) CJK UNIFIED IDEOGRAPH-4835	[FB80 C835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4835, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_028)
{
    // 4835 0062;	
    // (䠵) CJK UNIFIED IDEOGRAPH-4835	[FB80 C835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4835, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_029)
{
    // 4836 0021;	
    // (䠶) CJK UNIFIED IDEOGRAPH-4836	[FB80 C836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4836, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_030)
{
    // 4836 003F;	
    // (䠶) CJK UNIFIED IDEOGRAPH-4836	[FB80 C836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4836, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_031)
{
    // 4836 0061;	
    // (䠶) CJK UNIFIED IDEOGRAPH-4836	[FB80 C836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4836, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_032)
{
    // 4836 0041;	
    // (䠶) CJK UNIFIED IDEOGRAPH-4836	[FB80 C836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4836, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_033)
{
    // 4836 0062;	
    // (䠶) CJK UNIFIED IDEOGRAPH-4836	[FB80 C836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4836, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_034)
{
    // 4837 0021;	
    // (䠷) CJK UNIFIED IDEOGRAPH-4837	[FB80 C837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4837, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_035)
{
    // 4837 003F;	
    // (䠷) CJK UNIFIED IDEOGRAPH-4837	[FB80 C837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4837, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_036)
{
    // 4837 0061;	
    // (䠷) CJK UNIFIED IDEOGRAPH-4837	[FB80 C837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4837, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_037)
{
    // 4837 0041;	
    // (䠷) CJK UNIFIED IDEOGRAPH-4837	[FB80 C837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4837, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_038)
{
    // 4837 0062;	
    // (䠷) CJK UNIFIED IDEOGRAPH-4837	[FB80 C837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4837, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_039)
{
    // 4838 0021;	
    // (䠸) CJK UNIFIED IDEOGRAPH-4838	[FB80 C838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4838, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_040)
{
    // 4838 003F;	
    // (䠸) CJK UNIFIED IDEOGRAPH-4838	[FB80 C838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4838, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_041)
{
    // 4838 0061;	
    // (䠸) CJK UNIFIED IDEOGRAPH-4838	[FB80 C838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4838, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_042)
{
    // 4838 0041;	
    // (䠸) CJK UNIFIED IDEOGRAPH-4838	[FB80 C838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4838, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_043)
{
    // 4838 0062;	
    // (䠸) CJK UNIFIED IDEOGRAPH-4838	[FB80 C838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4838, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_044)
{
    // 4839 0021;	
    // (䠹) CJK UNIFIED IDEOGRAPH-4839	[FB80 C839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4839, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_045)
{
    // 4839 003F;	
    // (䠹) CJK UNIFIED IDEOGRAPH-4839	[FB80 C839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4839, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_046)
{
    // 4839 0061;	
    // (䠹) CJK UNIFIED IDEOGRAPH-4839	[FB80 C839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4839, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_047)
{
    // 4839 0041;	
    // (䠹) CJK UNIFIED IDEOGRAPH-4839	[FB80 C839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4839, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_048)
{
    // 4839 0062;	
    // (䠹) CJK UNIFIED IDEOGRAPH-4839	[FB80 C839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4839, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_049)
{
    // 483A 0021;	
    // (䠺) CJK UNIFIED IDEOGRAPH-483A	[FB80 C83A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_050)
{
    // 483A 003F;	
    // (䠺) CJK UNIFIED IDEOGRAPH-483A	[FB80 C83A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_051)
{
    // 483A 0061;	
    // (䠺) CJK UNIFIED IDEOGRAPH-483A	[FB80 C83A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_052)
{
    // 483A 0041;	
    // (䠺) CJK UNIFIED IDEOGRAPH-483A	[FB80 C83A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_053)
{
    // 483A 0062;	
    // (䠺) CJK UNIFIED IDEOGRAPH-483A	[FB80 C83A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_054)
{
    // 483B 0021;	
    // (䠻) CJK UNIFIED IDEOGRAPH-483B	[FB80 C83B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_055)
{
    // 483B 003F;	
    // (䠻) CJK UNIFIED IDEOGRAPH-483B	[FB80 C83B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_056)
{
    // 483B 0061;	
    // (䠻) CJK UNIFIED IDEOGRAPH-483B	[FB80 C83B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_057)
{
    // 483B 0041;	
    // (䠻) CJK UNIFIED IDEOGRAPH-483B	[FB80 C83B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_058)
{
    // 483B 0062;	
    // (䠻) CJK UNIFIED IDEOGRAPH-483B	[FB80 C83B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_059)
{
    // 483C 0021;	
    // (䠼) CJK UNIFIED IDEOGRAPH-483C	[FB80 C83C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_060)
{
    // 483C 003F;	
    // (䠼) CJK UNIFIED IDEOGRAPH-483C	[FB80 C83C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_061)
{
    // 483C 0061;	
    // (䠼) CJK UNIFIED IDEOGRAPH-483C	[FB80 C83C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_062)
{
    // 483C 0041;	
    // (䠼) CJK UNIFIED IDEOGRAPH-483C	[FB80 C83C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_063)
{
    // 483C 0062;	
    // (䠼) CJK UNIFIED IDEOGRAPH-483C	[FB80 C83C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_064)
{
    // 483D 0021;	
    // (䠽) CJK UNIFIED IDEOGRAPH-483D	[FB80 C83D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_065)
{
    // 483D 003F;	
    // (䠽) CJK UNIFIED IDEOGRAPH-483D	[FB80 C83D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_066)
{
    // 483D 0061;	
    // (䠽) CJK UNIFIED IDEOGRAPH-483D	[FB80 C83D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_067)
{
    // 483D 0041;	
    // (䠽) CJK UNIFIED IDEOGRAPH-483D	[FB80 C83D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_068)
{
    // 483D 0062;	
    // (䠽) CJK UNIFIED IDEOGRAPH-483D	[FB80 C83D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_069)
{
    // 483E 0021;	
    // (䠾) CJK UNIFIED IDEOGRAPH-483E	[FB80 C83E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_070)
{
    // 483E 003F;	
    // (䠾) CJK UNIFIED IDEOGRAPH-483E	[FB80 C83E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_071)
{
    // 483E 0061;	
    // (䠾) CJK UNIFIED IDEOGRAPH-483E	[FB80 C83E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_072)
{
    // 483E 0041;	
    // (䠾) CJK UNIFIED IDEOGRAPH-483E	[FB80 C83E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_073)
{
    // 483E 0062;	
    // (䠾) CJK UNIFIED IDEOGRAPH-483E	[FB80 C83E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_074)
{
    // 483F 0021;	
    // (䠿) CJK UNIFIED IDEOGRAPH-483F	[FB80 C83F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC83F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_075)
{
    // 483F 003F;	
    // (䠿) CJK UNIFIED IDEOGRAPH-483F	[FB80 C83F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC83F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_076)
{
    // 483F 0061;	
    // (䠿) CJK UNIFIED IDEOGRAPH-483F	[FB80 C83F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC83F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_077)
{
    // 483F 0041;	
    // (䠿) CJK UNIFIED IDEOGRAPH-483F	[FB80 C83F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x483F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC83F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_078)
{
    // 483F 0062;	
    // (䠿) CJK UNIFIED IDEOGRAPH-483F	[FB80 C83F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x483F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC83F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_079)
{
    // 4840 0021;	
    // (䡀) CJK UNIFIED IDEOGRAPH-4840	[FB80 C840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4840, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_080)
{
    // 4840 003F;	
    // (䡀) CJK UNIFIED IDEOGRAPH-4840	[FB80 C840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4840, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_081)
{
    // 4840 0061;	
    // (䡀) CJK UNIFIED IDEOGRAPH-4840	[FB80 C840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4840, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_082)
{
    // 4840 0041;	
    // (䡀) CJK UNIFIED IDEOGRAPH-4840	[FB80 C840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4840, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_083)
{
    // 4840 0062;	
    // (䡀) CJK UNIFIED IDEOGRAPH-4840	[FB80 C840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4840, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_084)
{
    // 4841 0021;	
    // (䡁) CJK UNIFIED IDEOGRAPH-4841	[FB80 C841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4841, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_085)
{
    // 4841 003F;	
    // (䡁) CJK UNIFIED IDEOGRAPH-4841	[FB80 C841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4841, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_086)
{
    // 4841 0061;	
    // (䡁) CJK UNIFIED IDEOGRAPH-4841	[FB80 C841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4841, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_087)
{
    // 4841 0041;	
    // (䡁) CJK UNIFIED IDEOGRAPH-4841	[FB80 C841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4841, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_088)
{
    // 4841 0062;	
    // (䡁) CJK UNIFIED IDEOGRAPH-4841	[FB80 C841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4841, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_089)
{
    // 4842 0021;	
    // (䡂) CJK UNIFIED IDEOGRAPH-4842	[FB80 C842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4842, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_090)
{
    // 4842 003F;	
    // (䡂) CJK UNIFIED IDEOGRAPH-4842	[FB80 C842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4842, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_091)
{
    // 4842 0061;	
    // (䡂) CJK UNIFIED IDEOGRAPH-4842	[FB80 C842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4842, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_092)
{
    // 4842 0041;	
    // (䡂) CJK UNIFIED IDEOGRAPH-4842	[FB80 C842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4842, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_093)
{
    // 4842 0062;	
    // (䡂) CJK UNIFIED IDEOGRAPH-4842	[FB80 C842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4842, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_094)
{
    // 4843 0021;	
    // (䡃) CJK UNIFIED IDEOGRAPH-4843	[FB80 C843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4843, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_095)
{
    // 4843 003F;	
    // (䡃) CJK UNIFIED IDEOGRAPH-4843	[FB80 C843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4843, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_096)
{
    // 4843 0061;	
    // (䡃) CJK UNIFIED IDEOGRAPH-4843	[FB80 C843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4843, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_097)
{
    // 4843 0041;	
    // (䡃) CJK UNIFIED IDEOGRAPH-4843	[FB80 C843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4843, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_098)
{
    // 4843 0062;	
    // (䡃) CJK UNIFIED IDEOGRAPH-4843	[FB80 C843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4843, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_099)
{
    // 4844 0021;	
    // (䡄) CJK UNIFIED IDEOGRAPH-4844	[FB80 C844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4844, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_100)
{
    // 4844 003F;	
    // (䡄) CJK UNIFIED IDEOGRAPH-4844	[FB80 C844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4844, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_101)
{
    // 4844 0061;	
    // (䡄) CJK UNIFIED IDEOGRAPH-4844	[FB80 C844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4844, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_102)
{
    // 4844 0041;	
    // (䡄) CJK UNIFIED IDEOGRAPH-4844	[FB80 C844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4844, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_103)
{
    // 4844 0062;	
    // (䡄) CJK UNIFIED IDEOGRAPH-4844	[FB80 C844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4844, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_104)
{
    // 4845 0021;	
    // (䡅) CJK UNIFIED IDEOGRAPH-4845	[FB80 C845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4845, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_105)
{
    // 4845 003F;	
    // (䡅) CJK UNIFIED IDEOGRAPH-4845	[FB80 C845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4845, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_106)
{
    // 4845 0061;	
    // (䡅) CJK UNIFIED IDEOGRAPH-4845	[FB80 C845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4845, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_107)
{
    // 4845 0041;	
    // (䡅) CJK UNIFIED IDEOGRAPH-4845	[FB80 C845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4845, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_108)
{
    // 4845 0062;	
    // (䡅) CJK UNIFIED IDEOGRAPH-4845	[FB80 C845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4845, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_109)
{
    // 4846 0021;	
    // (䡆) CJK UNIFIED IDEOGRAPH-4846	[FB80 C846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4846, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_110)
{
    // 4846 003F;	
    // (䡆) CJK UNIFIED IDEOGRAPH-4846	[FB80 C846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4846, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_111)
{
    // 4846 0061;	
    // (䡆) CJK UNIFIED IDEOGRAPH-4846	[FB80 C846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4846, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_112)
{
    // 4846 0041;	
    // (䡆) CJK UNIFIED IDEOGRAPH-4846	[FB80 C846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4846, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_113)
{
    // 4846 0062;	
    // (䡆) CJK UNIFIED IDEOGRAPH-4846	[FB80 C846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4846, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_114)
{
    // 4847 0021;	
    // (䡇) CJK UNIFIED IDEOGRAPH-4847	[FB80 C847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4847, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_115)
{
    // 4847 003F;	
    // (䡇) CJK UNIFIED IDEOGRAPH-4847	[FB80 C847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4847, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_116)
{
    // 4847 0061;	
    // (䡇) CJK UNIFIED IDEOGRAPH-4847	[FB80 C847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4847, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_117)
{
    // 4847 0041;	
    // (䡇) CJK UNIFIED IDEOGRAPH-4847	[FB80 C847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4847, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_118)
{
    // 4847 0062;	
    // (䡇) CJK UNIFIED IDEOGRAPH-4847	[FB80 C847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4847, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_119)
{
    // 4848 0021;	
    // (䡈) CJK UNIFIED IDEOGRAPH-4848	[FB80 C848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4848, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_120)
{
    // 4848 003F;	
    // (䡈) CJK UNIFIED IDEOGRAPH-4848	[FB80 C848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4848, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_121)
{
    // 4848 0061;	
    // (䡈) CJK UNIFIED IDEOGRAPH-4848	[FB80 C848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4848, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_122)
{
    // 4848 0041;	
    // (䡈) CJK UNIFIED IDEOGRAPH-4848	[FB80 C848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4848, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_123)
{
    // 4848 0062;	
    // (䡈) CJK UNIFIED IDEOGRAPH-4848	[FB80 C848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4848, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_124)
{
    // 4849 0021;	
    // (䡉) CJK UNIFIED IDEOGRAPH-4849	[FB80 C849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4849, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_125)
{
    // 4849 003F;	
    // (䡉) CJK UNIFIED IDEOGRAPH-4849	[FB80 C849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4849, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_126)
{
    // 4849 0061;	
    // (䡉) CJK UNIFIED IDEOGRAPH-4849	[FB80 C849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4849, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_127)
{
    // 4849 0041;	
    // (䡉) CJK UNIFIED IDEOGRAPH-4849	[FB80 C849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4849, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_128)
{
    // 4849 0062;	
    // (䡉) CJK UNIFIED IDEOGRAPH-4849	[FB80 C849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4849, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_129)
{
    // 484A 0021;	
    // (䡊) CJK UNIFIED IDEOGRAPH-484A	[FB80 C84A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_130)
{
    // 484A 003F;	
    // (䡊) CJK UNIFIED IDEOGRAPH-484A	[FB80 C84A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_131)
{
    // 484A 0061;	
    // (䡊) CJK UNIFIED IDEOGRAPH-484A	[FB80 C84A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_132)
{
    // 484A 0041;	
    // (䡊) CJK UNIFIED IDEOGRAPH-484A	[FB80 C84A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_133)
{
    // 484A 0062;	
    // (䡊) CJK UNIFIED IDEOGRAPH-484A	[FB80 C84A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_134)
{
    // 484B 0021;	
    // (䡋) CJK UNIFIED IDEOGRAPH-484B	[FB80 C84B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_135)
{
    // 484B 003F;	
    // (䡋) CJK UNIFIED IDEOGRAPH-484B	[FB80 C84B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_136)
{
    // 484B 0061;	
    // (䡋) CJK UNIFIED IDEOGRAPH-484B	[FB80 C84B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_137)
{
    // 484B 0041;	
    // (䡋) CJK UNIFIED IDEOGRAPH-484B	[FB80 C84B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_138)
{
    // 484B 0062;	
    // (䡋) CJK UNIFIED IDEOGRAPH-484B	[FB80 C84B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_139)
{
    // 484C 0021;	
    // (䡌) CJK UNIFIED IDEOGRAPH-484C	[FB80 C84C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_140)
{
    // 484C 003F;	
    // (䡌) CJK UNIFIED IDEOGRAPH-484C	[FB80 C84C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_141)
{
    // 484C 0061;	
    // (䡌) CJK UNIFIED IDEOGRAPH-484C	[FB80 C84C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_142)
{
    // 484C 0041;	
    // (䡌) CJK UNIFIED IDEOGRAPH-484C	[FB80 C84C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_143)
{
    // 484C 0062;	
    // (䡌) CJK UNIFIED IDEOGRAPH-484C	[FB80 C84C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_144)
{
    // 484D 0021;	
    // (䡍) CJK UNIFIED IDEOGRAPH-484D	[FB80 C84D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_145)
{
    // 484D 003F;	
    // (䡍) CJK UNIFIED IDEOGRAPH-484D	[FB80 C84D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_146)
{
    // 484D 0061;	
    // (䡍) CJK UNIFIED IDEOGRAPH-484D	[FB80 C84D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_147)
{
    // 484D 0041;	
    // (䡍) CJK UNIFIED IDEOGRAPH-484D	[FB80 C84D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_148)
{
    // 484D 0062;	
    // (䡍) CJK UNIFIED IDEOGRAPH-484D	[FB80 C84D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_149)
{
    // 484E 0021;	
    // (䡎) CJK UNIFIED IDEOGRAPH-484E	[FB80 C84E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_150)
{
    // 484E 003F;	
    // (䡎) CJK UNIFIED IDEOGRAPH-484E	[FB80 C84E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_151)
{
    // 484E 0061;	
    // (䡎) CJK UNIFIED IDEOGRAPH-484E	[FB80 C84E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_152)
{
    // 484E 0041;	
    // (䡎) CJK UNIFIED IDEOGRAPH-484E	[FB80 C84E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_153)
{
    // 484E 0062;	
    // (䡎) CJK UNIFIED IDEOGRAPH-484E	[FB80 C84E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_154)
{
    // 484F 0021;	
    // (䡏) CJK UNIFIED IDEOGRAPH-484F	[FB80 C84F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC84F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_155)
{
    // 484F 003F;	
    // (䡏) CJK UNIFIED IDEOGRAPH-484F	[FB80 C84F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC84F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_156)
{
    // 484F 0061;	
    // (䡏) CJK UNIFIED IDEOGRAPH-484F	[FB80 C84F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC84F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_157)
{
    // 484F 0041;	
    // (䡏) CJK UNIFIED IDEOGRAPH-484F	[FB80 C84F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x484F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC84F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_158)
{
    // 484F 0062;	
    // (䡏) CJK UNIFIED IDEOGRAPH-484F	[FB80 C84F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x484F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC84F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_159)
{
    // 4850 0021;	
    // (䡐) CJK UNIFIED IDEOGRAPH-4850	[FB80 C850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4850, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_160)
{
    // 4850 003F;	
    // (䡐) CJK UNIFIED IDEOGRAPH-4850	[FB80 C850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4850, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_161)
{
    // 4850 0061;	
    // (䡐) CJK UNIFIED IDEOGRAPH-4850	[FB80 C850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4850, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_162)
{
    // 4850 0041;	
    // (䡐) CJK UNIFIED IDEOGRAPH-4850	[FB80 C850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4850, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_163)
{
    // 4850 0062;	
    // (䡐) CJK UNIFIED IDEOGRAPH-4850	[FB80 C850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4850, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_164)
{
    // 4851 0021;	
    // (䡑) CJK UNIFIED IDEOGRAPH-4851	[FB80 C851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4851, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_165)
{
    // 4851 003F;	
    // (䡑) CJK UNIFIED IDEOGRAPH-4851	[FB80 C851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4851, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_166)
{
    // 4851 0061;	
    // (䡑) CJK UNIFIED IDEOGRAPH-4851	[FB80 C851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4851, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_167)
{
    // 4851 0041;	
    // (䡑) CJK UNIFIED IDEOGRAPH-4851	[FB80 C851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4851, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_168)
{
    // 4851 0062;	
    // (䡑) CJK UNIFIED IDEOGRAPH-4851	[FB80 C851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4851, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_169)
{
    // 4852 0021;	
    // (䡒) CJK UNIFIED IDEOGRAPH-4852	[FB80 C852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4852, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_170)
{
    // 4852 003F;	
    // (䡒) CJK UNIFIED IDEOGRAPH-4852	[FB80 C852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4852, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_171)
{
    // 4852 0061;	
    // (䡒) CJK UNIFIED IDEOGRAPH-4852	[FB80 C852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4852, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_172)
{
    // 4852 0041;	
    // (䡒) CJK UNIFIED IDEOGRAPH-4852	[FB80 C852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4852, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_173)
{
    // 4852 0062;	
    // (䡒) CJK UNIFIED IDEOGRAPH-4852	[FB80 C852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4852, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_174)
{
    // 4853 0021;	
    // (䡓) CJK UNIFIED IDEOGRAPH-4853	[FB80 C853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4853, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_175)
{
    // 4853 003F;	
    // (䡓) CJK UNIFIED IDEOGRAPH-4853	[FB80 C853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4853, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_176)
{
    // 4853 0061;	
    // (䡓) CJK UNIFIED IDEOGRAPH-4853	[FB80 C853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4853, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_177)
{
    // 4853 0041;	
    // (䡓) CJK UNIFIED IDEOGRAPH-4853	[FB80 C853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4853, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_178)
{
    // 4853 0062;	
    // (䡓) CJK UNIFIED IDEOGRAPH-4853	[FB80 C853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4853, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_179)
{
    // 4854 0021;	
    // (䡔) CJK UNIFIED IDEOGRAPH-4854	[FB80 C854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4854, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_180)
{
    // 4854 003F;	
    // (䡔) CJK UNIFIED IDEOGRAPH-4854	[FB80 C854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4854, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_181)
{
    // 4854 0061;	
    // (䡔) CJK UNIFIED IDEOGRAPH-4854	[FB80 C854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4854, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_182)
{
    // 4854 0041;	
    // (䡔) CJK UNIFIED IDEOGRAPH-4854	[FB80 C854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4854, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_183)
{
    // 4854 0062;	
    // (䡔) CJK UNIFIED IDEOGRAPH-4854	[FB80 C854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4854, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_184)
{
    // 4855 0021;	
    // (䡕) CJK UNIFIED IDEOGRAPH-4855	[FB80 C855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4855, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_185)
{
    // 4855 003F;	
    // (䡕) CJK UNIFIED IDEOGRAPH-4855	[FB80 C855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4855, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_186)
{
    // 4855 0061;	
    // (䡕) CJK UNIFIED IDEOGRAPH-4855	[FB80 C855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4855, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_187)
{
    // 4855 0041;	
    // (䡕) CJK UNIFIED IDEOGRAPH-4855	[FB80 C855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4855, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_188)
{
    // 4855 0062;	
    // (䡕) CJK UNIFIED IDEOGRAPH-4855	[FB80 C855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4855, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_189)
{
    // 4856 0021;	
    // (䡖) CJK UNIFIED IDEOGRAPH-4856	[FB80 C856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4856, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_190)
{
    // 4856 003F;	
    // (䡖) CJK UNIFIED IDEOGRAPH-4856	[FB80 C856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4856, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_191)
{
    // 4856 0061;	
    // (䡖) CJK UNIFIED IDEOGRAPH-4856	[FB80 C856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4856, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_192)
{
    // 4856 0041;	
    // (䡖) CJK UNIFIED IDEOGRAPH-4856	[FB80 C856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4856, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_193)
{
    // 4856 0062;	
    // (䡖) CJK UNIFIED IDEOGRAPH-4856	[FB80 C856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4856, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_194)
{
    // 4857 0021;	
    // (䡗) CJK UNIFIED IDEOGRAPH-4857	[FB80 C857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4857, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_195)
{
    // 4857 003F;	
    // (䡗) CJK UNIFIED IDEOGRAPH-4857	[FB80 C857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4857, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_196)
{
    // 4857 0061;	
    // (䡗) CJK UNIFIED IDEOGRAPH-4857	[FB80 C857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4857, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_197)
{
    // 4857 0041;	
    // (䡗) CJK UNIFIED IDEOGRAPH-4857	[FB80 C857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4857, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_198)
{
    // 4857 0062;	
    // (䡗) CJK UNIFIED IDEOGRAPH-4857	[FB80 C857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4857, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_199)
{
    // 4858 0021;	
    // (䡘) CJK UNIFIED IDEOGRAPH-4858	[FB80 C858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4858, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_200)
{
    // 4858 003F;	
    // (䡘) CJK UNIFIED IDEOGRAPH-4858	[FB80 C858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4858, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_201)
{
    // 4858 0061;	
    // (䡘) CJK UNIFIED IDEOGRAPH-4858	[FB80 C858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4858, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_202)
{
    // 4858 0041;	
    // (䡘) CJK UNIFIED IDEOGRAPH-4858	[FB80 C858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4858, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_203)
{
    // 4858 0062;	
    // (䡘) CJK UNIFIED IDEOGRAPH-4858	[FB80 C858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4858, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_204)
{
    // 4859 0021;	
    // (䡙) CJK UNIFIED IDEOGRAPH-4859	[FB80 C859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4859, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_205)
{
    // 4859 003F;	
    // (䡙) CJK UNIFIED IDEOGRAPH-4859	[FB80 C859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4859, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_206)
{
    // 4859 0061;	
    // (䡙) CJK UNIFIED IDEOGRAPH-4859	[FB80 C859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4859, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_207)
{
    // 4859 0041;	
    // (䡙) CJK UNIFIED IDEOGRAPH-4859	[FB80 C859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4859, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_208)
{
    // 4859 0062;	
    // (䡙) CJK UNIFIED IDEOGRAPH-4859	[FB80 C859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4859, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_209)
{
    // 485A 0021;	
    // (䡚) CJK UNIFIED IDEOGRAPH-485A	[FB80 C85A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_210)
{
    // 485A 003F;	
    // (䡚) CJK UNIFIED IDEOGRAPH-485A	[FB80 C85A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_211)
{
    // 485A 0061;	
    // (䡚) CJK UNIFIED IDEOGRAPH-485A	[FB80 C85A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_212)
{
    // 485A 0041;	
    // (䡚) CJK UNIFIED IDEOGRAPH-485A	[FB80 C85A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_213)
{
    // 485A 0062;	
    // (䡚) CJK UNIFIED IDEOGRAPH-485A	[FB80 C85A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_214)
{
    // 485B 0021;	
    // (䡛) CJK UNIFIED IDEOGRAPH-485B	[FB80 C85B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_215)
{
    // 485B 003F;	
    // (䡛) CJK UNIFIED IDEOGRAPH-485B	[FB80 C85B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_216)
{
    // 485B 0061;	
    // (䡛) CJK UNIFIED IDEOGRAPH-485B	[FB80 C85B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_217)
{
    // 485B 0041;	
    // (䡛) CJK UNIFIED IDEOGRAPH-485B	[FB80 C85B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_218)
{
    // 485B 0062;	
    // (䡛) CJK UNIFIED IDEOGRAPH-485B	[FB80 C85B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_219)
{
    // 485C 0021;	
    // (䡜) CJK UNIFIED IDEOGRAPH-485C	[FB80 C85C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_220)
{
    // 485C 003F;	
    // (䡜) CJK UNIFIED IDEOGRAPH-485C	[FB80 C85C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_221)
{
    // 485C 0061;	
    // (䡜) CJK UNIFIED IDEOGRAPH-485C	[FB80 C85C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_222)
{
    // 485C 0041;	
    // (䡜) CJK UNIFIED IDEOGRAPH-485C	[FB80 C85C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_223)
{
    // 485C 0062;	
    // (䡜) CJK UNIFIED IDEOGRAPH-485C	[FB80 C85C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_224)
{
    // 485D 0021;	
    // (䡝) CJK UNIFIED IDEOGRAPH-485D	[FB80 C85D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_225)
{
    // 485D 003F;	
    // (䡝) CJK UNIFIED IDEOGRAPH-485D	[FB80 C85D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_226)
{
    // 485D 0061;	
    // (䡝) CJK UNIFIED IDEOGRAPH-485D	[FB80 C85D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_227)
{
    // 485D 0041;	
    // (䡝) CJK UNIFIED IDEOGRAPH-485D	[FB80 C85D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_228)
{
    // 485D 0062;	
    // (䡝) CJK UNIFIED IDEOGRAPH-485D	[FB80 C85D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_229)
{
    // 485E 0021;	
    // (䡞) CJK UNIFIED IDEOGRAPH-485E	[FB80 C85E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_230)
{
    // 485E 003F;	
    // (䡞) CJK UNIFIED IDEOGRAPH-485E	[FB80 C85E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_231)
{
    // 485E 0061;	
    // (䡞) CJK UNIFIED IDEOGRAPH-485E	[FB80 C85E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_232)
{
    // 485E 0041;	
    // (䡞) CJK UNIFIED IDEOGRAPH-485E	[FB80 C85E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_233)
{
    // 485E 0062;	
    // (䡞) CJK UNIFIED IDEOGRAPH-485E	[FB80 C85E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_234)
{
    // 485F 0021;	
    // (䡟) CJK UNIFIED IDEOGRAPH-485F	[FB80 C85F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC85F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_235)
{
    // 485F 003F;	
    // (䡟) CJK UNIFIED IDEOGRAPH-485F	[FB80 C85F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC85F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_236)
{
    // 485F 0061;	
    // (䡟) CJK UNIFIED IDEOGRAPH-485F	[FB80 C85F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC85F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_237)
{
    // 485F 0041;	
    // (䡟) CJK UNIFIED IDEOGRAPH-485F	[FB80 C85F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x485F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC85F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_238)
{
    // 485F 0062;	
    // (䡟) CJK UNIFIED IDEOGRAPH-485F	[FB80 C85F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x485F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC85F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_239)
{
    // 4860 0021;	
    // (䡠) CJK UNIFIED IDEOGRAPH-4860	[FB80 C860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4860, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_240)
{
    // 4860 003F;	
    // (䡠) CJK UNIFIED IDEOGRAPH-4860	[FB80 C860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4860, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_241)
{
    // 4860 0061;	
    // (䡠) CJK UNIFIED IDEOGRAPH-4860	[FB80 C860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4860, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_242)
{
    // 4860 0041;	
    // (䡠) CJK UNIFIED IDEOGRAPH-4860	[FB80 C860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4860, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_243)
{
    // 4860 0062;	
    // (䡠) CJK UNIFIED IDEOGRAPH-4860	[FB80 C860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4860, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_244)
{
    // 4861 0021;	
    // (䡡) CJK UNIFIED IDEOGRAPH-4861	[FB80 C861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4861, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_245)
{
    // 4861 003F;	
    // (䡡) CJK UNIFIED IDEOGRAPH-4861	[FB80 C861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4861, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_246)
{
    // 4861 0061;	
    // (䡡) CJK UNIFIED IDEOGRAPH-4861	[FB80 C861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4861, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_247)
{
    // 4861 0041;	
    // (䡡) CJK UNIFIED IDEOGRAPH-4861	[FB80 C861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4861, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_248)
{
    // 4861 0062;	
    // (䡡) CJK UNIFIED IDEOGRAPH-4861	[FB80 C861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4861, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_249)
{
    // 4862 0021;	
    // (䡢) CJK UNIFIED IDEOGRAPH-4862	[FB80 C862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4862, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_250)
{
    // 4862 003F;	
    // (䡢) CJK UNIFIED IDEOGRAPH-4862	[FB80 C862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4862, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_251)
{
    // 4862 0061;	
    // (䡢) CJK UNIFIED IDEOGRAPH-4862	[FB80 C862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4862, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_252)
{
    // 4862 0041;	
    // (䡢) CJK UNIFIED IDEOGRAPH-4862	[FB80 C862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4862, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_253)
{
    // 4862 0062;	
    // (䡢) CJK UNIFIED IDEOGRAPH-4862	[FB80 C862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4862, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_254)
{
    // 4863 0021;	
    // (䡣) CJK UNIFIED IDEOGRAPH-4863	[FB80 C863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4863, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_255)
{
    // 4863 003F;	
    // (䡣) CJK UNIFIED IDEOGRAPH-4863	[FB80 C863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4863, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_256)
{
    // 4863 0061;	
    // (䡣) CJK UNIFIED IDEOGRAPH-4863	[FB80 C863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4863, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_257)
{
    // 4863 0041;	
    // (䡣) CJK UNIFIED IDEOGRAPH-4863	[FB80 C863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4863, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_258)
{
    // 4863 0062;	
    // (䡣) CJK UNIFIED IDEOGRAPH-4863	[FB80 C863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4863, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_259)
{
    // 4864 0021;	
    // (䡤) CJK UNIFIED IDEOGRAPH-4864	[FB80 C864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4864, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_260)
{
    // 4864 003F;	
    // (䡤) CJK UNIFIED IDEOGRAPH-4864	[FB80 C864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4864, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_261)
{
    // 4864 0061;	
    // (䡤) CJK UNIFIED IDEOGRAPH-4864	[FB80 C864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4864, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_262)
{
    // 4864 0041;	
    // (䡤) CJK UNIFIED IDEOGRAPH-4864	[FB80 C864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4864, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_263)
{
    // 4864 0062;	
    // (䡤) CJK UNIFIED IDEOGRAPH-4864	[FB80 C864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4864, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_264)
{
    // 4865 0021;	
    // (䡥) CJK UNIFIED IDEOGRAPH-4865	[FB80 C865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4865, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_265)
{
    // 4865 003F;	
    // (䡥) CJK UNIFIED IDEOGRAPH-4865	[FB80 C865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4865, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_266)
{
    // 4865 0061;	
    // (䡥) CJK UNIFIED IDEOGRAPH-4865	[FB80 C865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4865, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_267)
{
    // 4865 0041;	
    // (䡥) CJK UNIFIED IDEOGRAPH-4865	[FB80 C865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4865, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_268)
{
    // 4865 0062;	
    // (䡥) CJK UNIFIED IDEOGRAPH-4865	[FB80 C865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4865, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_269)
{
    // 4866 0021;	
    // (䡦) CJK UNIFIED IDEOGRAPH-4866	[FB80 C866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4866, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_270)
{
    // 4866 003F;	
    // (䡦) CJK UNIFIED IDEOGRAPH-4866	[FB80 C866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4866, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_271)
{
    // 4866 0061;	
    // (䡦) CJK UNIFIED IDEOGRAPH-4866	[FB80 C866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4866, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_272)
{
    // 4866 0041;	
    // (䡦) CJK UNIFIED IDEOGRAPH-4866	[FB80 C866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4866, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_273)
{
    // 4866 0062;	
    // (䡦) CJK UNIFIED IDEOGRAPH-4866	[FB80 C866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4866, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_274)
{
    // 4867 0021;	
    // (䡧) CJK UNIFIED IDEOGRAPH-4867	[FB80 C867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4867, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_275)
{
    // 4867 003F;	
    // (䡧) CJK UNIFIED IDEOGRAPH-4867	[FB80 C867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4867, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_276)
{
    // 4867 0061;	
    // (䡧) CJK UNIFIED IDEOGRAPH-4867	[FB80 C867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4867, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_277)
{
    // 4867 0041;	
    // (䡧) CJK UNIFIED IDEOGRAPH-4867	[FB80 C867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4867, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_278)
{
    // 4867 0062;	
    // (䡧) CJK UNIFIED IDEOGRAPH-4867	[FB80 C867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4867, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_279)
{
    // 4868 0021;	
    // (䡨) CJK UNIFIED IDEOGRAPH-4868	[FB80 C868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4868, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_280)
{
    // 4868 003F;	
    // (䡨) CJK UNIFIED IDEOGRAPH-4868	[FB80 C868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4868, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_281)
{
    // 4868 0061;	
    // (䡨) CJK UNIFIED IDEOGRAPH-4868	[FB80 C868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4868, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_282)
{
    // 4868 0041;	
    // (䡨) CJK UNIFIED IDEOGRAPH-4868	[FB80 C868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4868, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_283)
{
    // 4868 0062;	
    // (䡨) CJK UNIFIED IDEOGRAPH-4868	[FB80 C868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4868, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_284)
{
    // 4869 0021;	
    // (䡩) CJK UNIFIED IDEOGRAPH-4869	[FB80 C869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4869, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_285)
{
    // 4869 003F;	
    // (䡩) CJK UNIFIED IDEOGRAPH-4869	[FB80 C869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4869, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_286)
{
    // 4869 0061;	
    // (䡩) CJK UNIFIED IDEOGRAPH-4869	[FB80 C869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4869, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_287)
{
    // 4869 0041;	
    // (䡩) CJK UNIFIED IDEOGRAPH-4869	[FB80 C869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4869, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_288)
{
    // 4869 0062;	
    // (䡩) CJK UNIFIED IDEOGRAPH-4869	[FB80 C869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4869, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_289)
{
    // 486A 0021;	
    // (䡪) CJK UNIFIED IDEOGRAPH-486A	[FB80 C86A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_290)
{
    // 486A 003F;	
    // (䡪) CJK UNIFIED IDEOGRAPH-486A	[FB80 C86A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_291)
{
    // 486A 0061;	
    // (䡪) CJK UNIFIED IDEOGRAPH-486A	[FB80 C86A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_292)
{
    // 486A 0041;	
    // (䡪) CJK UNIFIED IDEOGRAPH-486A	[FB80 C86A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_293)
{
    // 486A 0062;	
    // (䡪) CJK UNIFIED IDEOGRAPH-486A	[FB80 C86A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_294)
{
    // 486B 0021;	
    // (䡫) CJK UNIFIED IDEOGRAPH-486B	[FB80 C86B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_295)
{
    // 486B 003F;	
    // (䡫) CJK UNIFIED IDEOGRAPH-486B	[FB80 C86B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_296)
{
    // 486B 0061;	
    // (䡫) CJK UNIFIED IDEOGRAPH-486B	[FB80 C86B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_297)
{
    // 486B 0041;	
    // (䡫) CJK UNIFIED IDEOGRAPH-486B	[FB80 C86B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_298)
{
    // 486B 0062;	
    // (䡫) CJK UNIFIED IDEOGRAPH-486B	[FB80 C86B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_299)
{
    // 486C 0021;	
    // (䡬) CJK UNIFIED IDEOGRAPH-486C	[FB80 C86C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_300)
{
    // 486C 003F;	
    // (䡬) CJK UNIFIED IDEOGRAPH-486C	[FB80 C86C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_301)
{
    // 486C 0061;	
    // (䡬) CJK UNIFIED IDEOGRAPH-486C	[FB80 C86C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_302)
{
    // 486C 0041;	
    // (䡬) CJK UNIFIED IDEOGRAPH-486C	[FB80 C86C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_303)
{
    // 486C 0062;	
    // (䡬) CJK UNIFIED IDEOGRAPH-486C	[FB80 C86C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_304)
{
    // 486D 0021;	
    // (䡭) CJK UNIFIED IDEOGRAPH-486D	[FB80 C86D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_305)
{
    // 486D 003F;	
    // (䡭) CJK UNIFIED IDEOGRAPH-486D	[FB80 C86D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_306)
{
    // 486D 0061;	
    // (䡭) CJK UNIFIED IDEOGRAPH-486D	[FB80 C86D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_307)
{
    // 486D 0041;	
    // (䡭) CJK UNIFIED IDEOGRAPH-486D	[FB80 C86D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_308)
{
    // 486D 0062;	
    // (䡭) CJK UNIFIED IDEOGRAPH-486D	[FB80 C86D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_309)
{
    // 486E 0021;	
    // (䡮) CJK UNIFIED IDEOGRAPH-486E	[FB80 C86E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_310)
{
    // 486E 003F;	
    // (䡮) CJK UNIFIED IDEOGRAPH-486E	[FB80 C86E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_311)
{
    // 486E 0061;	
    // (䡮) CJK UNIFIED IDEOGRAPH-486E	[FB80 C86E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_312)
{
    // 486E 0041;	
    // (䡮) CJK UNIFIED IDEOGRAPH-486E	[FB80 C86E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_313)
{
    // 486E 0062;	
    // (䡮) CJK UNIFIED IDEOGRAPH-486E	[FB80 C86E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_314)
{
    // 486F 0021;	
    // (䡯) CJK UNIFIED IDEOGRAPH-486F	[FB80 C86F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC86F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_315)
{
    // 486F 003F;	
    // (䡯) CJK UNIFIED IDEOGRAPH-486F	[FB80 C86F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC86F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_316)
{
    // 486F 0061;	
    // (䡯) CJK UNIFIED IDEOGRAPH-486F	[FB80 C86F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC86F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_317)
{
    // 486F 0041;	
    // (䡯) CJK UNIFIED IDEOGRAPH-486F	[FB80 C86F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x486F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC86F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_318)
{
    // 486F 0062;	
    // (䡯) CJK UNIFIED IDEOGRAPH-486F	[FB80 C86F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x486F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC86F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_319)
{
    // 4870 0021;	
    // (䡰) CJK UNIFIED IDEOGRAPH-4870	[FB80 C870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4870, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_320)
{
    // 4870 003F;	
    // (䡰) CJK UNIFIED IDEOGRAPH-4870	[FB80 C870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4870, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_321)
{
    // 4870 0061;	
    // (䡰) CJK UNIFIED IDEOGRAPH-4870	[FB80 C870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4870, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_322)
{
    // 4870 0041;	
    // (䡰) CJK UNIFIED IDEOGRAPH-4870	[FB80 C870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4870, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_323)
{
    // 4870 0062;	
    // (䡰) CJK UNIFIED IDEOGRAPH-4870	[FB80 C870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4870, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_324)
{
    // 4871 0021;	
    // (䡱) CJK UNIFIED IDEOGRAPH-4871	[FB80 C871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4871, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_325)
{
    // 4871 003F;	
    // (䡱) CJK UNIFIED IDEOGRAPH-4871	[FB80 C871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4871, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_326)
{
    // 4871 0061;	
    // (䡱) CJK UNIFIED IDEOGRAPH-4871	[FB80 C871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4871, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_327)
{
    // 4871 0041;	
    // (䡱) CJK UNIFIED IDEOGRAPH-4871	[FB80 C871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4871, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_328)
{
    // 4871 0062;	
    // (䡱) CJK UNIFIED IDEOGRAPH-4871	[FB80 C871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4871, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_329)
{
    // 4872 0021;	
    // (䡲) CJK UNIFIED IDEOGRAPH-4872	[FB80 C872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4872, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_330)
{
    // 4872 003F;	
    // (䡲) CJK UNIFIED IDEOGRAPH-4872	[FB80 C872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4872, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_331)
{
    // 4872 0061;	
    // (䡲) CJK UNIFIED IDEOGRAPH-4872	[FB80 C872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4872, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_332)
{
    // 4872 0041;	
    // (䡲) CJK UNIFIED IDEOGRAPH-4872	[FB80 C872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4872, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_333)
{
    // 4872 0062;	
    // (䡲) CJK UNIFIED IDEOGRAPH-4872	[FB80 C872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4872, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_334)
{
    // 4873 0021;	
    // (䡳) CJK UNIFIED IDEOGRAPH-4873	[FB80 C873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4873, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_335)
{
    // 4873 003F;	
    // (䡳) CJK UNIFIED IDEOGRAPH-4873	[FB80 C873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4873, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_336)
{
    // 4873 0061;	
    // (䡳) CJK UNIFIED IDEOGRAPH-4873	[FB80 C873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4873, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_337)
{
    // 4873 0041;	
    // (䡳) CJK UNIFIED IDEOGRAPH-4873	[FB80 C873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4873, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_338)
{
    // 4873 0062;	
    // (䡳) CJK UNIFIED IDEOGRAPH-4873	[FB80 C873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4873, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_339)
{
    // 4874 0021;	
    // (䡴) CJK UNIFIED IDEOGRAPH-4874	[FB80 C874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4874, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_340)
{
    // 4874 003F;	
    // (䡴) CJK UNIFIED IDEOGRAPH-4874	[FB80 C874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4874, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_341)
{
    // 4874 0061;	
    // (䡴) CJK UNIFIED IDEOGRAPH-4874	[FB80 C874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4874, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_342)
{
    // 4874 0041;	
    // (䡴) CJK UNIFIED IDEOGRAPH-4874	[FB80 C874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4874, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_343)
{
    // 4874 0062;	
    // (䡴) CJK UNIFIED IDEOGRAPH-4874	[FB80 C874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4874, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_344)
{
    // 4875 0021;	
    // (䡵) CJK UNIFIED IDEOGRAPH-4875	[FB80 C875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4875, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_345)
{
    // 4875 003F;	
    // (䡵) CJK UNIFIED IDEOGRAPH-4875	[FB80 C875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4875, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_346)
{
    // 4875 0061;	
    // (䡵) CJK UNIFIED IDEOGRAPH-4875	[FB80 C875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4875, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_347)
{
    // 4875 0041;	
    // (䡵) CJK UNIFIED IDEOGRAPH-4875	[FB80 C875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4875, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_348)
{
    // 4875 0062;	
    // (䡵) CJK UNIFIED IDEOGRAPH-4875	[FB80 C875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4875, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_349)
{
    // 4876 0021;	
    // (䡶) CJK UNIFIED IDEOGRAPH-4876	[FB80 C876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4876, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_350)
{
    // 4876 003F;	
    // (䡶) CJK UNIFIED IDEOGRAPH-4876	[FB80 C876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4876, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_351)
{
    // 4876 0061;	
    // (䡶) CJK UNIFIED IDEOGRAPH-4876	[FB80 C876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4876, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_352)
{
    // 4876 0041;	
    // (䡶) CJK UNIFIED IDEOGRAPH-4876	[FB80 C876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4876, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_353)
{
    // 4876 0062;	
    // (䡶) CJK UNIFIED IDEOGRAPH-4876	[FB80 C876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4876, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_354)
{
    // 4877 0021;	
    // (䡷) CJK UNIFIED IDEOGRAPH-4877	[FB80 C877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4877, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_355)
{
    // 4877 003F;	
    // (䡷) CJK UNIFIED IDEOGRAPH-4877	[FB80 C877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4877, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_356)
{
    // 4877 0061;	
    // (䡷) CJK UNIFIED IDEOGRAPH-4877	[FB80 C877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4877, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_357)
{
    // 4877 0041;	
    // (䡷) CJK UNIFIED IDEOGRAPH-4877	[FB80 C877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4877, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_358)
{
    // 4877 0062;	
    // (䡷) CJK UNIFIED IDEOGRAPH-4877	[FB80 C877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4877, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_359)
{
    // 4878 0021;	
    // (䡸) CJK UNIFIED IDEOGRAPH-4878	[FB80 C878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4878, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_360)
{
    // 4878 003F;	
    // (䡸) CJK UNIFIED IDEOGRAPH-4878	[FB80 C878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4878, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_361)
{
    // 4878 0061;	
    // (䡸) CJK UNIFIED IDEOGRAPH-4878	[FB80 C878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4878, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_362)
{
    // 4878 0041;	
    // (䡸) CJK UNIFIED IDEOGRAPH-4878	[FB80 C878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4878, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_363)
{
    // 4878 0062;	
    // (䡸) CJK UNIFIED IDEOGRAPH-4878	[FB80 C878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4878, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_364)
{
    // 4879 0021;	
    // (䡹) CJK UNIFIED IDEOGRAPH-4879	[FB80 C879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4879, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_365)
{
    // 4879 003F;	
    // (䡹) CJK UNIFIED IDEOGRAPH-4879	[FB80 C879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4879, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_366)
{
    // 4879 0061;	
    // (䡹) CJK UNIFIED IDEOGRAPH-4879	[FB80 C879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4879, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_367)
{
    // 4879 0041;	
    // (䡹) CJK UNIFIED IDEOGRAPH-4879	[FB80 C879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4879, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_368)
{
    // 4879 0062;	
    // (䡹) CJK UNIFIED IDEOGRAPH-4879	[FB80 C879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4879, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_369)
{
    // 487A 0021;	
    // (䡺) CJK UNIFIED IDEOGRAPH-487A	[FB80 C87A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_370)
{
    // 487A 003F;	
    // (䡺) CJK UNIFIED IDEOGRAPH-487A	[FB80 C87A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_371)
{
    // 487A 0061;	
    // (䡺) CJK UNIFIED IDEOGRAPH-487A	[FB80 C87A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_372)
{
    // 487A 0041;	
    // (䡺) CJK UNIFIED IDEOGRAPH-487A	[FB80 C87A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_373)
{
    // 487A 0062;	
    // (䡺) CJK UNIFIED IDEOGRAPH-487A	[FB80 C87A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_374)
{
    // 487B 0021;	
    // (䡻) CJK UNIFIED IDEOGRAPH-487B	[FB80 C87B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_375)
{
    // 487B 003F;	
    // (䡻) CJK UNIFIED IDEOGRAPH-487B	[FB80 C87B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_376)
{
    // 487B 0061;	
    // (䡻) CJK UNIFIED IDEOGRAPH-487B	[FB80 C87B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_377)
{
    // 487B 0041;	
    // (䡻) CJK UNIFIED IDEOGRAPH-487B	[FB80 C87B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_378)
{
    // 487B 0062;	
    // (䡻) CJK UNIFIED IDEOGRAPH-487B	[FB80 C87B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_379)
{
    // 487C 0021;	
    // (䡼) CJK UNIFIED IDEOGRAPH-487C	[FB80 C87C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_380)
{
    // 487C 003F;	
    // (䡼) CJK UNIFIED IDEOGRAPH-487C	[FB80 C87C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_381)
{
    // 487C 0061;	
    // (䡼) CJK UNIFIED IDEOGRAPH-487C	[FB80 C87C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_382)
{
    // 487C 0041;	
    // (䡼) CJK UNIFIED IDEOGRAPH-487C	[FB80 C87C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_383)
{
    // 487C 0062;	
    // (䡼) CJK UNIFIED IDEOGRAPH-487C	[FB80 C87C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_384)
{
    // 487D 0021;	
    // (䡽) CJK UNIFIED IDEOGRAPH-487D	[FB80 C87D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_385)
{
    // 487D 003F;	
    // (䡽) CJK UNIFIED IDEOGRAPH-487D	[FB80 C87D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_386)
{
    // 487D 0061;	
    // (䡽) CJK UNIFIED IDEOGRAPH-487D	[FB80 C87D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_387)
{
    // 487D 0041;	
    // (䡽) CJK UNIFIED IDEOGRAPH-487D	[FB80 C87D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_388)
{
    // 487D 0062;	
    // (䡽) CJK UNIFIED IDEOGRAPH-487D	[FB80 C87D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_389)
{
    // 487E 0021;	
    // (䡾) CJK UNIFIED IDEOGRAPH-487E	[FB80 C87E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_390)
{
    // 487E 003F;	
    // (䡾) CJK UNIFIED IDEOGRAPH-487E	[FB80 C87E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_391)
{
    // 487E 0061;	
    // (䡾) CJK UNIFIED IDEOGRAPH-487E	[FB80 C87E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_392)
{
    // 487E 0041;	
    // (䡾) CJK UNIFIED IDEOGRAPH-487E	[FB80 C87E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_393)
{
    // 487E 0062;	
    // (䡾) CJK UNIFIED IDEOGRAPH-487E	[FB80 C87E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_394)
{
    // 487F 0021;	
    // (䡿) CJK UNIFIED IDEOGRAPH-487F	[FB80 C87F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC87F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_395)
{
    // 487F 003F;	
    // (䡿) CJK UNIFIED IDEOGRAPH-487F	[FB80 C87F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC87F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_396)
{
    // 487F 0061;	
    // (䡿) CJK UNIFIED IDEOGRAPH-487F	[FB80 C87F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC87F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_397)
{
    // 487F 0041;	
    // (䡿) CJK UNIFIED IDEOGRAPH-487F	[FB80 C87F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x487F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC87F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_398)
{
    // 487F 0062;	
    // (䡿) CJK UNIFIED IDEOGRAPH-487F	[FB80 C87F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x487F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC87F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_399)
{
    // 4880 0021;	
    // (䢀) CJK UNIFIED IDEOGRAPH-4880	[FB80 C880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4880, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_400)
{
    // 4880 003F;	
    // (䢀) CJK UNIFIED IDEOGRAPH-4880	[FB80 C880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4880, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_401)
{
    // 4880 0061;	
    // (䢀) CJK UNIFIED IDEOGRAPH-4880	[FB80 C880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4880, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_402)
{
    // 4880 0041;	
    // (䢀) CJK UNIFIED IDEOGRAPH-4880	[FB80 C880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4880, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_403)
{
    // 4880 0062;	
    // (䢀) CJK UNIFIED IDEOGRAPH-4880	[FB80 C880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4880, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_404)
{
    // 4881 0021;	
    // (䢁) CJK UNIFIED IDEOGRAPH-4881	[FB80 C881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4881, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_405)
{
    // 4881 003F;	
    // (䢁) CJK UNIFIED IDEOGRAPH-4881	[FB80 C881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4881, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_406)
{
    // 4881 0061;	
    // (䢁) CJK UNIFIED IDEOGRAPH-4881	[FB80 C881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4881, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_407)
{
    // 4881 0041;	
    // (䢁) CJK UNIFIED IDEOGRAPH-4881	[FB80 C881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4881, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_408)
{
    // 4881 0062;	
    // (䢁) CJK UNIFIED IDEOGRAPH-4881	[FB80 C881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4881, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_409)
{
    // 4882 0021;	
    // (䢂) CJK UNIFIED IDEOGRAPH-4882	[FB80 C882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4882, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_410)
{
    // 4882 003F;	
    // (䢂) CJK UNIFIED IDEOGRAPH-4882	[FB80 C882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4882, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_411)
{
    // 4882 0061;	
    // (䢂) CJK UNIFIED IDEOGRAPH-4882	[FB80 C882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4882, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_412)
{
    // 4882 0041;	
    // (䢂) CJK UNIFIED IDEOGRAPH-4882	[FB80 C882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4882, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_413)
{
    // 4882 0062;	
    // (䢂) CJK UNIFIED IDEOGRAPH-4882	[FB80 C882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4882, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_414)
{
    // 4883 0021;	
    // (䢃) CJK UNIFIED IDEOGRAPH-4883	[FB80 C883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4883, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_415)
{
    // 4883 003F;	
    // (䢃) CJK UNIFIED IDEOGRAPH-4883	[FB80 C883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4883, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_416)
{
    // 4883 0061;	
    // (䢃) CJK UNIFIED IDEOGRAPH-4883	[FB80 C883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4883, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_417)
{
    // 4883 0041;	
    // (䢃) CJK UNIFIED IDEOGRAPH-4883	[FB80 C883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4883, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_418)
{
    // 4883 0062;	
    // (䢃) CJK UNIFIED IDEOGRAPH-4883	[FB80 C883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4883, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_419)
{
    // 4884 0021;	
    // (䢄) CJK UNIFIED IDEOGRAPH-4884	[FB80 C884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4884, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_420)
{
    // 4884 003F;	
    // (䢄) CJK UNIFIED IDEOGRAPH-4884	[FB80 C884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4884, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_421)
{
    // 4884 0061;	
    // (䢄) CJK UNIFIED IDEOGRAPH-4884	[FB80 C884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4884, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_422)
{
    // 4884 0041;	
    // (䢄) CJK UNIFIED IDEOGRAPH-4884	[FB80 C884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4884, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_423)
{
    // 4884 0062;	
    // (䢄) CJK UNIFIED IDEOGRAPH-4884	[FB80 C884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4884, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_424)
{
    // 4885 0021;	
    // (䢅) CJK UNIFIED IDEOGRAPH-4885	[FB80 C885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4885, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_425)
{
    // 4885 003F;	
    // (䢅) CJK UNIFIED IDEOGRAPH-4885	[FB80 C885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4885, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_426)
{
    // 4885 0061;	
    // (䢅) CJK UNIFIED IDEOGRAPH-4885	[FB80 C885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4885, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_427)
{
    // 4885 0041;	
    // (䢅) CJK UNIFIED IDEOGRAPH-4885	[FB80 C885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4885, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_428)
{
    // 4885 0062;	
    // (䢅) CJK UNIFIED IDEOGRAPH-4885	[FB80 C885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4885, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_429)
{
    // 4886 0021;	
    // (䢆) CJK UNIFIED IDEOGRAPH-4886	[FB80 C886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4886, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_430)
{
    // 4886 003F;	
    // (䢆) CJK UNIFIED IDEOGRAPH-4886	[FB80 C886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4886, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_431)
{
    // 4886 0061;	
    // (䢆) CJK UNIFIED IDEOGRAPH-4886	[FB80 C886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4886, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_432)
{
    // 4886 0041;	
    // (䢆) CJK UNIFIED IDEOGRAPH-4886	[FB80 C886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4886, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_433)
{
    // 4886 0062;	
    // (䢆) CJK UNIFIED IDEOGRAPH-4886	[FB80 C886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4886, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_434)
{
    // 4887 0021;	
    // (䢇) CJK UNIFIED IDEOGRAPH-4887	[FB80 C887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4887, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_435)
{
    // 4887 003F;	
    // (䢇) CJK UNIFIED IDEOGRAPH-4887	[FB80 C887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4887, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_436)
{
    // 4887 0061;	
    // (䢇) CJK UNIFIED IDEOGRAPH-4887	[FB80 C887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4887, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_437)
{
    // 4887 0041;	
    // (䢇) CJK UNIFIED IDEOGRAPH-4887	[FB80 C887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4887, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_438)
{
    // 4887 0062;	
    // (䢇) CJK UNIFIED IDEOGRAPH-4887	[FB80 C887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4887, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_439)
{
    // 4888 0021;	
    // (䢈) CJK UNIFIED IDEOGRAPH-4888	[FB80 C888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4888, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_440)
{
    // 4888 003F;	
    // (䢈) CJK UNIFIED IDEOGRAPH-4888	[FB80 C888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4888, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_441)
{
    // 4888 0061;	
    // (䢈) CJK UNIFIED IDEOGRAPH-4888	[FB80 C888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4888, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_442)
{
    // 4888 0041;	
    // (䢈) CJK UNIFIED IDEOGRAPH-4888	[FB80 C888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4888, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_443)
{
    // 4888 0062;	
    // (䢈) CJK UNIFIED IDEOGRAPH-4888	[FB80 C888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4888, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_444)
{
    // 4889 0021;	
    // (䢉) CJK UNIFIED IDEOGRAPH-4889	[FB80 C889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4889, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_445)
{
    // 4889 003F;	
    // (䢉) CJK UNIFIED IDEOGRAPH-4889	[FB80 C889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4889, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_446)
{
    // 4889 0061;	
    // (䢉) CJK UNIFIED IDEOGRAPH-4889	[FB80 C889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4889, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_447)
{
    // 4889 0041;	
    // (䢉) CJK UNIFIED IDEOGRAPH-4889	[FB80 C889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4889, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_448)
{
    // 4889 0062;	
    // (䢉) CJK UNIFIED IDEOGRAPH-4889	[FB80 C889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4889, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_449)
{
    // 488A 0021;	
    // (䢊) CJK UNIFIED IDEOGRAPH-488A	[FB80 C88A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_450)
{
    // 488A 003F;	
    // (䢊) CJK UNIFIED IDEOGRAPH-488A	[FB80 C88A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_451)
{
    // 488A 0061;	
    // (䢊) CJK UNIFIED IDEOGRAPH-488A	[FB80 C88A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_452)
{
    // 488A 0041;	
    // (䢊) CJK UNIFIED IDEOGRAPH-488A	[FB80 C88A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_453)
{
    // 488A 0062;	
    // (䢊) CJK UNIFIED IDEOGRAPH-488A	[FB80 C88A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_454)
{
    // 488B 0021;	
    // (䢋) CJK UNIFIED IDEOGRAPH-488B	[FB80 C88B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_455)
{
    // 488B 003F;	
    // (䢋) CJK UNIFIED IDEOGRAPH-488B	[FB80 C88B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_456)
{
    // 488B 0061;	
    // (䢋) CJK UNIFIED IDEOGRAPH-488B	[FB80 C88B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_457)
{
    // 488B 0041;	
    // (䢋) CJK UNIFIED IDEOGRAPH-488B	[FB80 C88B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_458)
{
    // 488B 0062;	
    // (䢋) CJK UNIFIED IDEOGRAPH-488B	[FB80 C88B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_459)
{
    // 488C 0021;	
    // (䢌) CJK UNIFIED IDEOGRAPH-488C	[FB80 C88C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_460)
{
    // 488C 003F;	
    // (䢌) CJK UNIFIED IDEOGRAPH-488C	[FB80 C88C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_461)
{
    // 488C 0061;	
    // (䢌) CJK UNIFIED IDEOGRAPH-488C	[FB80 C88C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_462)
{
    // 488C 0041;	
    // (䢌) CJK UNIFIED IDEOGRAPH-488C	[FB80 C88C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_463)
{
    // 488C 0062;	
    // (䢌) CJK UNIFIED IDEOGRAPH-488C	[FB80 C88C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_464)
{
    // 488D 0021;	
    // (䢍) CJK UNIFIED IDEOGRAPH-488D	[FB80 C88D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_465)
{
    // 488D 003F;	
    // (䢍) CJK UNIFIED IDEOGRAPH-488D	[FB80 C88D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_466)
{
    // 488D 0061;	
    // (䢍) CJK UNIFIED IDEOGRAPH-488D	[FB80 C88D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_467)
{
    // 488D 0041;	
    // (䢍) CJK UNIFIED IDEOGRAPH-488D	[FB80 C88D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_468)
{
    // 488D 0062;	
    // (䢍) CJK UNIFIED IDEOGRAPH-488D	[FB80 C88D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_469)
{
    // 488E 0021;	
    // (䢎) CJK UNIFIED IDEOGRAPH-488E	[FB80 C88E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_470)
{
    // 488E 003F;	
    // (䢎) CJK UNIFIED IDEOGRAPH-488E	[FB80 C88E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_471)
{
    // 488E 0061;	
    // (䢎) CJK UNIFIED IDEOGRAPH-488E	[FB80 C88E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_472)
{
    // 488E 0041;	
    // (䢎) CJK UNIFIED IDEOGRAPH-488E	[FB80 C88E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_473)
{
    // 488E 0062;	
    // (䢎) CJK UNIFIED IDEOGRAPH-488E	[FB80 C88E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_474)
{
    // 488F 0021;	
    // (䢏) CJK UNIFIED IDEOGRAPH-488F	[FB80 C88F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC88F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_475)
{
    // 488F 003F;	
    // (䢏) CJK UNIFIED IDEOGRAPH-488F	[FB80 C88F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC88F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_476)
{
    // 488F 0061;	
    // (䢏) CJK UNIFIED IDEOGRAPH-488F	[FB80 C88F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC88F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_477)
{
    // 488F 0041;	
    // (䢏) CJK UNIFIED IDEOGRAPH-488F	[FB80 C88F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x488F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC88F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_478)
{
    // 488F 0062;	
    // (䢏) CJK UNIFIED IDEOGRAPH-488F	[FB80 C88F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x488F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC88F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_479)
{
    // 4890 0021;	
    // (䢐) CJK UNIFIED IDEOGRAPH-4890	[FB80 C890 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4890, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC890, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_480)
{
    // 4890 003F;	
    // (䢐) CJK UNIFIED IDEOGRAPH-4890	[FB80 C890 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4890, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC890, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_481)
{
    // 4890 0061;	
    // (䢐) CJK UNIFIED IDEOGRAPH-4890	[FB80 C890 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4890, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_482)
{
    // 4890 0041;	
    // (䢐) CJK UNIFIED IDEOGRAPH-4890	[FB80 C890 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4890, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_483)
{
    // 4890 0062;	
    // (䢐) CJK UNIFIED IDEOGRAPH-4890	[FB80 C890 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4890, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC890, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_484)
{
    // 4891 0021;	
    // (䢑) CJK UNIFIED IDEOGRAPH-4891	[FB80 C891 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4891, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC891, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_485)
{
    // 4891 003F;	
    // (䢑) CJK UNIFIED IDEOGRAPH-4891	[FB80 C891 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4891, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC891, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_486)
{
    // 4891 0061;	
    // (䢑) CJK UNIFIED IDEOGRAPH-4891	[FB80 C891 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4891, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_487)
{
    // 4891 0041;	
    // (䢑) CJK UNIFIED IDEOGRAPH-4891	[FB80 C891 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4891, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_488)
{
    // 4891 0062;	
    // (䢑) CJK UNIFIED IDEOGRAPH-4891	[FB80 C891 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4891, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC891, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_489)
{
    // 4892 0021;	
    // (䢒) CJK UNIFIED IDEOGRAPH-4892	[FB80 C892 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4892, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC892, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_490)
{
    // 4892 003F;	
    // (䢒) CJK UNIFIED IDEOGRAPH-4892	[FB80 C892 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4892, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC892, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_491)
{
    // 4892 0061;	
    // (䢒) CJK UNIFIED IDEOGRAPH-4892	[FB80 C892 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4892, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_492)
{
    // 4892 0041;	
    // (䢒) CJK UNIFIED IDEOGRAPH-4892	[FB80 C892 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4892, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_493)
{
    // 4892 0062;	
    // (䢒) CJK UNIFIED IDEOGRAPH-4892	[FB80 C892 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4892, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC892, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_494)
{
    // 4893 0021;	
    // (䢓) CJK UNIFIED IDEOGRAPH-4893	[FB80 C893 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4893, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC893, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_495)
{
    // 4893 003F;	
    // (䢓) CJK UNIFIED IDEOGRAPH-4893	[FB80 C893 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4893, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC893, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_496)
{
    // 4893 0061;	
    // (䢓) CJK UNIFIED IDEOGRAPH-4893	[FB80 C893 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4893, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_497)
{
    // 4893 0041;	
    // (䢓) CJK UNIFIED IDEOGRAPH-4893	[FB80 C893 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4893, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_498)
{
    // 4893 0062;	
    // (䢓) CJK UNIFIED IDEOGRAPH-4893	[FB80 C893 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4893, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC893, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_379_499)
{
    // 4894 0021;	
    // (䢔) CJK UNIFIED IDEOGRAPH-4894	[FB80 C894 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4894, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC894, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

