// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_137_000)
{
    // 114BE ; [.2C32.0020.0002] 
    // TIRHUTA VOWEL SIGN AU

    uint32_t const cps[1] = { 0x114be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_001)
{
    // 114BF ; [.0000.00C3.0002] 
    // TIRHUTA SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x114bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_002)
{
    // 114C0 ; [.0000.00C4.0002] 
    // TIRHUTA SIGN ANUSVARA

    uint32_t const cps[1] = { 0x114c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_003)
{
    // 114C1 ; [.0000.00C5.0002] 
    // TIRHUTA SIGN VISARGA

    uint32_t const cps[1] = { 0x114c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_004)
{
    // 114C2 ; [.2C33.0020.0002] 
    // TIRHUTA SIGN VIRAMA

    uint32_t const cps[1] = { 0x114c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_005)
{
    // 114C3 ; [.0000.00C2.0002] 
    // TIRHUTA SIGN NUKTA

    uint32_t const cps[1] = { 0x114c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_006)
{
    // 114C4 ; [.2C22.0020.0002] 
    // TIRHUTA SIGN AVAGRAHA

    uint32_t const cps[1] = { 0x114c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_007)
{
    // 114C5 ; [.2C23.0020.0002] 
    // TIRHUTA GVANG

    uint32_t const cps[1] = { 0x114c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_008)
{
    // 114C6 ; [*0476.0020.0002] 
    // TIRHUTA ABBREVIATION SIGN

    uint32_t const cps[1] = { 0x114c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x476), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_009)
{
    // 114C7 ; [.2BF1.0020.0002] 
    // TIRHUTA OM

    uint32_t const cps[1] = { 0x114c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2bf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_010)
{
    // 114D0 ; [.1CA3.0020.0002] 
    // TIRHUTA DIGIT ZERO

    uint32_t const cps[1] = { 0x114d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_011)
{
    // 114D1 ; [.1CA4.0020.0002] 
    // TIRHUTA DIGIT ONE

    uint32_t const cps[1] = { 0x114d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_012)
{
    // 114D2 ; [.1CA5.0020.0002] 
    // TIRHUTA DIGIT TWO

    uint32_t const cps[1] = { 0x114d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_013)
{
    // 114D3 ; [.1CA6.0020.0002] 
    // TIRHUTA DIGIT THREE

    uint32_t const cps[1] = { 0x114d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_014)
{
    // 114D4 ; [.1CA7.0020.0002] 
    // TIRHUTA DIGIT FOUR

    uint32_t const cps[1] = { 0x114d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_015)
{
    // 114D5 ; [.1CA8.0020.0002] 
    // TIRHUTA DIGIT FIVE

    uint32_t const cps[1] = { 0x114d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_016)
{
    // 114D6 ; [.1CA9.0020.0002] 
    // TIRHUTA DIGIT SIX

    uint32_t const cps[1] = { 0x114d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_017)
{
    // 114D7 ; [.1CAA.0020.0002] 
    // TIRHUTA DIGIT SEVEN

    uint32_t const cps[1] = { 0x114d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_018)
{
    // 114D8 ; [.1CAB.0020.0002] 
    // TIRHUTA DIGIT EIGHT

    uint32_t const cps[1] = { 0x114d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_019)
{
    // 114D9 ; [.1CAC.0020.0002] 
    // TIRHUTA DIGIT NINE

    uint32_t const cps[1] = { 0x114d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_020)
{
    // 11580 ; [.2C34.0020.0002] 
    // SIDDHAM LETTER A

    uint32_t const cps[1] = { 0x11580 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_021)
{
    // 11581 ; [.2C35.0020.0002] 
    // SIDDHAM LETTER AA

    uint32_t const cps[1] = { 0x11581 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_022)
{
    // 11582 ; [.2C36.0020.0002] 
    // SIDDHAM LETTER I

    uint32_t const cps[1] = { 0x11582 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_023)
{
    // 11583 ; [.2C37.0020.0002] 
    // SIDDHAM LETTER II

    uint32_t const cps[1] = { 0x11583 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_024)
{
    // 11584 ; [.2C38.0020.0002] 
    // SIDDHAM LETTER U

    uint32_t const cps[1] = { 0x11584 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_025)
{
    // 11585 ; [.2C39.0020.0002] 
    // SIDDHAM LETTER UU

    uint32_t const cps[1] = { 0x11585 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_026)
{
    // 11586 ; [.2C3A.0020.0002] 
    // SIDDHAM LETTER VOCALIC R

    uint32_t const cps[1] = { 0x11586 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_027)
{
    // 11587 ; [.2C3B.0020.0002] 
    // SIDDHAM LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x11587 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_028)
{
    // 11588 ; [.2C3C.0020.0002] 
    // SIDDHAM LETTER VOCALIC L

    uint32_t const cps[1] = { 0x11588 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_029)
{
    // 11589 ; [.2C3D.0020.0002] 
    // SIDDHAM LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x11589 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_030)
{
    // 1158A ; [.2C3E.0020.0002] 
    // SIDDHAM LETTER E

    uint32_t const cps[1] = { 0x1158a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_031)
{
    // 1158B ; [.2C3F.0020.0002] 
    // SIDDHAM LETTER AI

    uint32_t const cps[1] = { 0x1158b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_032)
{
    // 1158C ; [.2C40.0020.0002] 
    // SIDDHAM LETTER O

    uint32_t const cps[1] = { 0x1158c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_033)
{
    // 1158D ; [.2C41.0020.0002] 
    // SIDDHAM LETTER AU

    uint32_t const cps[1] = { 0x1158d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_034)
{
    // 1158E ; [.2C42.0020.0002] 
    // SIDDHAM LETTER KA

    uint32_t const cps[1] = { 0x1158e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_035)
{
    // 1158F ; [.2C43.0020.0002] 
    // SIDDHAM LETTER KHA

    uint32_t const cps[1] = { 0x1158f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_036)
{
    // 11590 ; [.2C44.0020.0002] 
    // SIDDHAM LETTER GA

    uint32_t const cps[1] = { 0x11590 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_037)
{
    // 11591 ; [.2C45.0020.0002] 
    // SIDDHAM LETTER GHA

    uint32_t const cps[1] = { 0x11591 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_038)
{
    // 11592 ; [.2C46.0020.0002] 
    // SIDDHAM LETTER NGA

    uint32_t const cps[1] = { 0x11592 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_039)
{
    // 11593 ; [.2C47.0020.0002] 
    // SIDDHAM LETTER CA

    uint32_t const cps[1] = { 0x11593 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_040)
{
    // 11594 ; [.2C48.0020.0002] 
    // SIDDHAM LETTER CHA

    uint32_t const cps[1] = { 0x11594 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_041)
{
    // 11595 ; [.2C49.0020.0002] 
    // SIDDHAM LETTER JA

    uint32_t const cps[1] = { 0x11595 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_042)
{
    // 11596 ; [.2C4A.0020.0002] 
    // SIDDHAM LETTER JHA

    uint32_t const cps[1] = { 0x11596 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_043)
{
    // 11597 ; [.2C4B.0020.0002] 
    // SIDDHAM LETTER NYA

    uint32_t const cps[1] = { 0x11597 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_044)
{
    // 11598 ; [.2C4C.0020.0002] 
    // SIDDHAM LETTER TTA

    uint32_t const cps[1] = { 0x11598 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_045)
{
    // 11599 ; [.2C4D.0020.0002] 
    // SIDDHAM LETTER TTHA

    uint32_t const cps[1] = { 0x11599 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_046)
{
    // 1159A ; [.2C4E.0020.0002] 
    // SIDDHAM LETTER DDA

    uint32_t const cps[1] = { 0x1159a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_047)
{
    // 1159B ; [.2C4F.0020.0002] 
    // SIDDHAM LETTER DDHA

    uint32_t const cps[1] = { 0x1159b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_048)
{
    // 1159C ; [.2C50.0020.0002] 
    // SIDDHAM LETTER NNA

    uint32_t const cps[1] = { 0x1159c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_049)
{
    // 1159D ; [.2C51.0020.0002] 
    // SIDDHAM LETTER TA

    uint32_t const cps[1] = { 0x1159d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_050)
{
    // 1159E ; [.2C52.0020.0002] 
    // SIDDHAM LETTER THA

    uint32_t const cps[1] = { 0x1159e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_051)
{
    // 1159F ; [.2C53.0020.0002] 
    // SIDDHAM LETTER DA

    uint32_t const cps[1] = { 0x1159f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_052)
{
    // 115A0 ; [.2C54.0020.0002] 
    // SIDDHAM LETTER DHA

    uint32_t const cps[1] = { 0x115a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_053)
{
    // 115A1 ; [.2C55.0020.0002] 
    // SIDDHAM LETTER NA

    uint32_t const cps[1] = { 0x115a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_054)
{
    // 115A2 ; [.2C56.0020.0002] 
    // SIDDHAM LETTER PA

    uint32_t const cps[1] = { 0x115a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_055)
{
    // 115A3 ; [.2C57.0020.0002] 
    // SIDDHAM LETTER PHA

    uint32_t const cps[1] = { 0x115a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_056)
{
    // 115A4 ; [.2C58.0020.0002] 
    // SIDDHAM LETTER BA

    uint32_t const cps[1] = { 0x115a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_057)
{
    // 115A5 ; [.2C59.0020.0002] 
    // SIDDHAM LETTER BHA

    uint32_t const cps[1] = { 0x115a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_058)
{
    // 115A6 ; [.2C5A.0020.0002] 
    // SIDDHAM LETTER MA

    uint32_t const cps[1] = { 0x115a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_059)
{
    // 115A7 ; [.2C5B.0020.0002] 
    // SIDDHAM LETTER YA

    uint32_t const cps[1] = { 0x115a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_060)
{
    // 115A8 ; [.2C5C.0020.0002] 
    // SIDDHAM LETTER RA

    uint32_t const cps[1] = { 0x115a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_061)
{
    // 115A9 ; [.2C5D.0020.0002] 
    // SIDDHAM LETTER LA

    uint32_t const cps[1] = { 0x115a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_062)
{
    // 115AA ; [.2C5E.0020.0002] 
    // SIDDHAM LETTER VA

    uint32_t const cps[1] = { 0x115aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_063)
{
    // 115AB ; [.2C5F.0020.0002] 
    // SIDDHAM LETTER SHA

    uint32_t const cps[1] = { 0x115ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_064)
{
    // 115AC ; [.2C60.0020.0002] 
    // SIDDHAM LETTER SSA

    uint32_t const cps[1] = { 0x115ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_065)
{
    // 115AD ; [.2C61.0020.0002] 
    // SIDDHAM LETTER SA

    uint32_t const cps[1] = { 0x115ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_066)
{
    // 115AE ; [.2C62.0020.0002] 
    // SIDDHAM LETTER HA

    uint32_t const cps[1] = { 0x115ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_067)
{
    // 115AF ; [.2C63.0020.0002] 
    // SIDDHAM VOWEL SIGN AA

    uint32_t const cps[1] = { 0x115af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_068)
{
    // 115B0 ; [.2C64.0020.0002] 
    // SIDDHAM VOWEL SIGN I

    uint32_t const cps[1] = { 0x115b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_069)
{
    // 115B1 ; [.2C65.0020.0002] 
    // SIDDHAM VOWEL SIGN II

    uint32_t const cps[1] = { 0x115b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_070)
{
    // 115B2 ; [.2C66.0020.0002] 
    // SIDDHAM VOWEL SIGN U

    uint32_t const cps[1] = { 0x115b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_071)
{
    // 115B3 ; [.2C67.0020.0002] 
    // SIDDHAM VOWEL SIGN UU

    uint32_t const cps[1] = { 0x115b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_072)
{
    // 115B4 ; [.2C68.0020.0002] 
    // SIDDHAM VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x115b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_073)
{
    // 115B5 ; [.2C69.0020.0002] 
    // SIDDHAM VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x115b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_074)
{
    // 115B8 ; [.2C6A.0020.0002] 
    // SIDDHAM VOWEL SIGN E

    uint32_t const cps[1] = { 0x115b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_075)
{
    // 115B8 115AF ; [.2C6C.0020.0002] 
    // SIDDHAM VOWEL SIGN O

    uint32_t const cps[1] = { 0x115ba }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_076)
{
    // 115B9 ; [.2C6B.0020.0002] 
    // SIDDHAM VOWEL SIGN AI

    uint32_t const cps[1] = { 0x115b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_077)
{
    // 115B9 115AF ; [.2C6D.0020.0002] 
    // SIDDHAM VOWEL SIGN AU

    uint32_t const cps[1] = { 0x115bb }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_078)
{
    // 115BA ; [.2C6C.0020.0002] 
    // SIDDHAM VOWEL SIGN O

    uint32_t const cps[1] = { 0x115ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_079)
{
    // 115BB ; [.2C6D.0020.0002] 
    // SIDDHAM VOWEL SIGN AU

    uint32_t const cps[1] = { 0x115bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_080)
{
    // 115BC ; [.0000.00C3.0002] 
    // SIDDHAM SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x115bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_081)
{
    // 115BD ; [.0000.00C4.0002] 
    // SIDDHAM SIGN ANUSVARA

    uint32_t const cps[1] = { 0x115bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_082)
{
    // 115BE ; [.0000.00C5.0002] 
    // SIDDHAM SIGN VISARGA

    uint32_t const cps[1] = { 0x115be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_083)
{
    // 115BF ; [.2C6E.0020.0002] 
    // SIDDHAM SIGN VIRAMA

    uint32_t const cps[1] = { 0x115bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_084)
{
    // 115C0 ; [.0000.00C2.0002] 
    // SIDDHAM SIGN NUKTA

    uint32_t const cps[1] = { 0x115c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_085)
{
    // 115C1 ; [*0477.0020.0002] 
    // SIDDHAM SIGN SIDDHAM

    uint32_t const cps[1] = { 0x115c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x477), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_086)
{
    // 115C2 ; [*02B9.0020.0002] 
    // SIDDHAM DANDA

    uint32_t const cps[1] = { 0x115c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_087)
{
    // 115C3 ; [*02BA.0020.0002] 
    // SIDDHAM DOUBLE DANDA

    uint32_t const cps[1] = { 0x115c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_088)
{
    // 115C4 ; [*0478.0020.0002] 
    // SIDDHAM SEPARATOR DOT

    uint32_t const cps[1] = { 0x115c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x478), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_089)
{
    // 115C5 ; [*0479.0020.0002] 
    // SIDDHAM SEPARATOR BAR

    uint32_t const cps[1] = { 0x115c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x479), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_090)
{
    // 115C6 ; [*047A.0020.0002] 
    // SIDDHAM REPETITION MARK-1

    uint32_t const cps[1] = { 0x115c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_091)
{
    // 115C7 ; [*047B.0020.0002] 
    // SIDDHAM REPETITION MARK-2

    uint32_t const cps[1] = { 0x115c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_092)
{
    // 115C8 ; [*047C.0020.0002] 
    // SIDDHAM REPETITION MARK-3

    uint32_t const cps[1] = { 0x115c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_093)
{
    // 115C9 ; [*047D.0020.0002] 
    // SIDDHAM END OF TEXT MARK

    uint32_t const cps[1] = { 0x115c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_094)
{
    // 115CA ; [*047E.0020.0002] 
    // SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS

    uint32_t const cps[1] = { 0x115ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_095)
{
    // 115CB ; [*047F.0020.0002] 
    // SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS

    uint32_t const cps[1] = { 0x115cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x47f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_096)
{
    // 115CC ; [*0480.0020.0002] 
    // SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS

    uint32_t const cps[1] = { 0x115cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x480), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_097)
{
    // 115CD ; [*0481.0020.0002] 
    // SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS

    uint32_t const cps[1] = { 0x115cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x481), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_098)
{
    // 115CE ; [*0482.0020.0002] 
    // SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS

    uint32_t const cps[1] = { 0x115ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x482), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_099)
{
    // 115CF ; [*0483.0020.0002] 
    // SIDDHAM SECTION MARK DOUBLE RING

    uint32_t const cps[1] = { 0x115cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x483), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_100)
{
    // 115D0 ; [*0484.0020.0002] 
    // SIDDHAM SECTION MARK DOUBLE RING WITH RAYS

    uint32_t const cps[1] = { 0x115d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x484), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_101)
{
    // 115D1 ; [*0485.0020.0002] 
    // SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS

    uint32_t const cps[1] = { 0x115d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x485), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_102)
{
    // 115D2 ; [*0486.0020.0002] 
    // SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS

    uint32_t const cps[1] = { 0x115d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x486), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_103)
{
    // 115D3 ; [*0487.0020.0002] 
    // SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS

    uint32_t const cps[1] = { 0x115d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x487), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_104)
{
    // 115D4 ; [*0488.0020.0002] 
    // SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS

    uint32_t const cps[1] = { 0x115d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x488), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_105)
{
    // 115D5 ; [*0489.0020.0002] 
    // SIDDHAM SECTION MARK WITH CIRCLES AND RAYS

    uint32_t const cps[1] = { 0x115d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_106)
{
    // 115D6 ; [*048A.0020.0002] 
    // SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES

    uint32_t const cps[1] = { 0x115d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_107)
{
    // 115D7 ; [*048B.0020.0002] 
    // SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES

    uint32_t const cps[1] = { 0x115d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_108)
{
    // 115D8 ; [.2C36.0020.0004][.0000.0111.0004] 
    // SIDDHAM LETTER THREE-CIRCLE ALTERNATE I

    uint32_t const cps[1] = { 0x115d8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c36), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_109)
{
    // 115D9 ; [.2C36.0020.0004][.0000.0112.0004] 
    // SIDDHAM LETTER TWO-CIRCLE ALTERNATE I

    uint32_t const cps[1] = { 0x115d9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c36), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_110)
{
    // 115DA ; [.2C37.0020.0004][.0000.0111.0004] 
    // SIDDHAM LETTER TWO-CIRCLE ALTERNATE II

    uint32_t const cps[1] = { 0x115da };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c37), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_111)
{
    // 115DB ; [.2C38.0020.0004][.0000.0111.0004] 
    // SIDDHAM LETTER ALTERNATE U

    uint32_t const cps[1] = { 0x115db };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c38), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_112)
{
    // 115DC ; [.2C66.0020.0004][.0000.0111.0004] 
    // SIDDHAM VOWEL SIGN ALTERNATE U

    uint32_t const cps[1] = { 0x115dc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c66), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_113)
{
    // 115DD ; [.2C67.0020.0004][.0000.0111.0004] 
    // SIDDHAM VOWEL SIGN ALTERNATE UU

    uint32_t const cps[1] = { 0x115dd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2c67), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_137_114)
{
    // 11600 ; [.2C6F.0020.0002] 
    // MODI LETTER A

    uint32_t const cps[1] = { 0x11600 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_115)
{
    // 11601 ; [.2C70.0020.0002] 
    // MODI LETTER AA

    uint32_t const cps[1] = { 0x11601 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_116)
{
    // 11602 ; [.2C71.0020.0002] 
    // MODI LETTER I

    uint32_t const cps[1] = { 0x11602 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_117)
{
    // 11603 ; [.2C72.0020.0002] 
    // MODI LETTER II

    uint32_t const cps[1] = { 0x11603 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_118)
{
    // 11604 ; [.2C73.0020.0002] 
    // MODI LETTER U

    uint32_t const cps[1] = { 0x11604 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_119)
{
    // 11605 ; [.2C74.0020.0002] 
    // MODI LETTER UU

    uint32_t const cps[1] = { 0x11605 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_120)
{
    // 11606 ; [.2C75.0020.0002] 
    // MODI LETTER VOCALIC R

    uint32_t const cps[1] = { 0x11606 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_121)
{
    // 11607 ; [.2C76.0020.0002] 
    // MODI LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x11607 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_122)
{
    // 11608 ; [.2C77.0020.0002] 
    // MODI LETTER VOCALIC L

    uint32_t const cps[1] = { 0x11608 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_123)
{
    // 11609 ; [.2C78.0020.0002] 
    // MODI LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x11609 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_124)
{
    // 1160A ; [.2C79.0020.0002] 
    // MODI LETTER E

    uint32_t const cps[1] = { 0x1160a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_125)
{
    // 1160B ; [.2C7A.0020.0002] 
    // MODI LETTER AI

    uint32_t const cps[1] = { 0x1160b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_126)
{
    // 1160C ; [.2C7B.0020.0002] 
    // MODI LETTER O

    uint32_t const cps[1] = { 0x1160c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_127)
{
    // 1160D ; [.2C7C.0020.0002] 
    // MODI LETTER AU

    uint32_t const cps[1] = { 0x1160d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_128)
{
    // 1160E ; [.2C7D.0020.0002] 
    // MODI LETTER KA

    uint32_t const cps[1] = { 0x1160e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_129)
{
    // 1160F ; [.2C7E.0020.0002] 
    // MODI LETTER KHA

    uint32_t const cps[1] = { 0x1160f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_130)
{
    // 11610 ; [.2C7F.0020.0002] 
    // MODI LETTER GA

    uint32_t const cps[1] = { 0x11610 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_131)
{
    // 11611 ; [.2C80.0020.0002] 
    // MODI LETTER GHA

    uint32_t const cps[1] = { 0x11611 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_132)
{
    // 11612 ; [.2C81.0020.0002] 
    // MODI LETTER NGA

    uint32_t const cps[1] = { 0x11612 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_133)
{
    // 11613 ; [.2C82.0020.0002] 
    // MODI LETTER CA

    uint32_t const cps[1] = { 0x11613 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_134)
{
    // 11614 ; [.2C83.0020.0002] 
    // MODI LETTER CHA

    uint32_t const cps[1] = { 0x11614 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_135)
{
    // 11615 ; [.2C84.0020.0002] 
    // MODI LETTER JA

    uint32_t const cps[1] = { 0x11615 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_136)
{
    // 11616 ; [.2C85.0020.0002] 
    // MODI LETTER JHA

    uint32_t const cps[1] = { 0x11616 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_137)
{
    // 11617 ; [.2C86.0020.0002] 
    // MODI LETTER NYA

    uint32_t const cps[1] = { 0x11617 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_138)
{
    // 11618 ; [.2C87.0020.0002] 
    // MODI LETTER TTA

    uint32_t const cps[1] = { 0x11618 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_139)
{
    // 11619 ; [.2C88.0020.0002] 
    // MODI LETTER TTHA

    uint32_t const cps[1] = { 0x11619 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_140)
{
    // 1161A ; [.2C89.0020.0002] 
    // MODI LETTER DDA

    uint32_t const cps[1] = { 0x1161a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_141)
{
    // 1161B ; [.2C8A.0020.0002] 
    // MODI LETTER DDHA

    uint32_t const cps[1] = { 0x1161b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_142)
{
    // 1161C ; [.2C8B.0020.0002] 
    // MODI LETTER NNA

    uint32_t const cps[1] = { 0x1161c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_143)
{
    // 1161D ; [.2C8C.0020.0002] 
    // MODI LETTER TA

    uint32_t const cps[1] = { 0x1161d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_144)
{
    // 1161E ; [.2C8D.0020.0002] 
    // MODI LETTER THA

    uint32_t const cps[1] = { 0x1161e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_145)
{
    // 1161F ; [.2C8E.0020.0002] 
    // MODI LETTER DA

    uint32_t const cps[1] = { 0x1161f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_146)
{
    // 11620 ; [.2C8F.0020.0002] 
    // MODI LETTER DHA

    uint32_t const cps[1] = { 0x11620 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_147)
{
    // 11621 ; [.2C90.0020.0002] 
    // MODI LETTER NA

    uint32_t const cps[1] = { 0x11621 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_148)
{
    // 11622 ; [.2C91.0020.0002] 
    // MODI LETTER PA

    uint32_t const cps[1] = { 0x11622 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_137_149)
{
    // 11623 ; [.2C92.0020.0002] 
    // MODI LETTER PHA

    uint32_t const cps[1] = { 0x11623 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

