// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_094_000)
{
    uint32_t const cps[2] = { 0x1B6D, 0x0041 };

    // 1B6D 0041;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6D 0041;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_001)
{
    uint32_t const cps[2] = { 0x1B6E, 0x0041 };

    // 1B6E 0041;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6E 0041;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_002)
{
    uint32_t const cps[2] = { 0x1B6F, 0x0041 };

    // 1B6F 0041;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6F 0041;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_003)
{
    uint32_t const cps[2] = { 0x1B70, 0x0041 };

    // 1B70 0041;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B70 0041;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_004)
{
    uint32_t const cps[2] = { 0x1B71, 0x0041 };

    // 1B71 0041;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B71 0041;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_005)
{
    uint32_t const cps[2] = { 0x1B72, 0x0041 };

    // 1B72 0041;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B72 0041;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_006)
{
    uint32_t const cps[2] = { 0x1B73, 0x0041 };

    // 1B73 0041;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B73 0041;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_007)
{
    uint32_t const cps[2] = { 0x1CD0, 0x0041 };

    // 1CD0 0041;	
    // (᳐) VEDIC TONE KARSHANA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD0 0041;	
    // (᳐) VEDIC TONE KARSHANA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_008)
{
    uint32_t const cps[2] = { 0x1CD1, 0x0041 };

    // 1CD1 0041;	
    // (᳑) VEDIC TONE SHARA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD1 0041;	
    // (᳑) VEDIC TONE SHARA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_009)
{
    uint32_t const cps[2] = { 0x1CD2, 0x0041 };

    // 1CD2 0041;	
    // (᳒) VEDIC TONE PRENKHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD2 0041;	
    // (᳒) VEDIC TONE PRENKHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_010)
{
    uint32_t const cps[2] = { 0x1CD3, 0x0041 };

    // 1CD3 0041;	
    // (᳓) VEDIC SIGN NIHSHVASA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD3 0041;	
    // (᳓) VEDIC SIGN NIHSHVASA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_011)
{
    uint32_t const cps[2] = { 0x1CD4, 0x0041 };

    // 1CD4 0041;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD4 0041;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_012)
{
    uint32_t const cps[2] = { 0x1CD5, 0x0041 };

    // 1CD5 0041;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD5 0041;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_013)
{
    uint32_t const cps[2] = { 0x1CD6, 0x0041 };

    // 1CD6 0041;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD6 0041;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_014)
{
    uint32_t const cps[2] = { 0x1CD7, 0x0041 };

    // 1CD7 0041;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD7 0041;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_015)
{
    uint32_t const cps[2] = { 0x1CD8, 0x0041 };

    // 1CD8 0041;	
    // (᳘) VEDIC TONE CANDRA BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD8 0041;	
    // (᳘) VEDIC TONE CANDRA BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_016)
{
    uint32_t const cps[2] = { 0x1CD9, 0x0041 };

    // 1CD9 0041;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD9 0041;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_017)
{
    uint32_t const cps[2] = { 0x1CDA, 0x0041 };

    // 1CDA 0041;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDA 0041;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_018)
{
    uint32_t const cps[2] = { 0x1CDB, 0x0041 };

    // 1CDB 0041;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDB 0041;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_019)
{
    uint32_t const cps[2] = { 0x1CDC, 0x0041 };

    // 1CDC 0041;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDC 0041;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_020)
{
    uint32_t const cps[2] = { 0x1CDD, 0x0041 };

    // 1CDD 0041;	
    // (᳝) VEDIC TONE DOT BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDD 0041;	
    // (᳝) VEDIC TONE DOT BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_021)
{
    uint32_t const cps[2] = { 0x1CDE, 0x0041 };

    // 1CDE 0041;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDE 0041;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_022)
{
    uint32_t const cps[2] = { 0x1CDF, 0x0041 };

    // 1CDF 0041;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDF 0041;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_023)
{
    uint32_t const cps[2] = { 0x1CE0, 0x0041 };

    // 1CE0 0041;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE0 0041;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_024)
{
    uint32_t const cps[2] = { 0x1CE1, 0x0041 };

    // 1CE1 0041;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE1 0041;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_025)
{
    uint32_t const cps[2] = { 0x1CE2, 0x0041 };

    // 1CE2 0041;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE2 0041;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_026)
{
    uint32_t const cps[2] = { 0x1CE3, 0x0041 };

    // 1CE3 0041;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE3 0041;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_027)
{
    uint32_t const cps[2] = { 0x1CE4, 0x0041 };

    // 1CE4 0041;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE4 0041;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_028)
{
    uint32_t const cps[2] = { 0x1CE5, 0x0041 };

    // 1CE5 0041;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE5 0041;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_029)
{
    uint32_t const cps[2] = { 0x1CE6, 0x0041 };

    // 1CE6 0041;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE6 0041;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_030)
{
    uint32_t const cps[2] = { 0x1CE7, 0x0041 };

    // 1CE7 0041;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE7 0041;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_031)
{
    uint32_t const cps[2] = { 0x1CE8, 0x0041 };

    // 1CE8 0041;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE8 0041;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_032)
{
    uint32_t const cps[2] = { 0x1CF4, 0x0041 };

    // 1CF4 0041;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF4 0041;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_033)
{
    uint32_t const cps[2] = { 0x1CF7, 0x0041 };

    // 1CF7 0041;	
    // (᳷) VEDIC SIGN ATIKRAMA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF7 0041;	
    // (᳷) VEDIC SIGN ATIKRAMA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_034)
{
    uint32_t const cps[2] = { 0x1CF8, 0x0041 };

    // 1CF8 0041;	
    // (᳸) VEDIC TONE RING ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF8 0041;	
    // (᳸) VEDIC TONE RING ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_035)
{
    uint32_t const cps[2] = { 0x1CF9, 0x0041 };

    // 1CF9 0041;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF9 0041;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_036)
{
    uint32_t const cps[2] = { 0x200B, 0x0041 };

    // 200B 0041;	
    // ('\u200B') ZERO WIDTH SPACE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200B 0041;	
    // ('\u200B') ZERO WIDTH SPACE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_037)
{
    uint32_t const cps[2] = { 0x200C, 0x0041 };

    // 200C 0041;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200C 0041;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_038)
{
    uint32_t const cps[2] = { 0x200D, 0x0041 };

    // 200D 0041;	
    // ('\u200D') ZERO WIDTH JOINER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200D 0041;	
    // ('\u200D') ZERO WIDTH JOINER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_039)
{
    uint32_t const cps[2] = { 0x200E, 0x0041 };

    // 200E 0041;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200E 0041;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_040)
{
    uint32_t const cps[2] = { 0x200F, 0x0041 };

    // 200F 0041;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200F 0041;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_041)
{
    uint32_t const cps[2] = { 0x202A, 0x0041 };

    // 202A 0041;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202A 0041;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_042)
{
    uint32_t const cps[2] = { 0x202B, 0x0041 };

    // 202B 0041;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202B 0041;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_043)
{
    uint32_t const cps[2] = { 0x202C, 0x0041 };

    // 202C 0041;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202C 0041;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_044)
{
    uint32_t const cps[2] = { 0x202D, 0x0041 };

    // 202D 0041;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202D 0041;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_045)
{
    uint32_t const cps[2] = { 0x202E, 0x0041 };

    // 202E 0041;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202E 0041;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_046)
{
    uint32_t const cps[2] = { 0x2060, 0x0041 };

    // 2060 0041;	
    // ('\u2060') WORD JOINER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2060 0041;	
    // ('\u2060') WORD JOINER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_047)
{
    uint32_t const cps[2] = { 0x2061, 0x0041 };

    // 2061 0041;	
    // ('\u2061') FUNCTION APPLICATION	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2061 0041;	
    // ('\u2061') FUNCTION APPLICATION	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_048)
{
    uint32_t const cps[2] = { 0x2062, 0x0041 };

    // 2062 0041;	
    // ('\u2062') INVISIBLE TIMES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2062 0041;	
    // ('\u2062') INVISIBLE TIMES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_049)
{
    uint32_t const cps[2] = { 0x2063, 0x0041 };

    // 2063 0041;	
    // ('\u2063') INVISIBLE SEPARATOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2063 0041;	
    // ('\u2063') INVISIBLE SEPARATOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_050)
{
    uint32_t const cps[2] = { 0x2064, 0x0041 };

    // 2064 0041;	
    // ('\u2064') INVISIBLE PLUS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2064 0041;	
    // ('\u2064') INVISIBLE PLUS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_051)
{
    uint32_t const cps[2] = { 0x2066, 0x0041 };

    // 2066 0041;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2066 0041;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_052)
{
    uint32_t const cps[2] = { 0x2067, 0x0041 };

    // 2067 0041;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2067 0041;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_053)
{
    uint32_t const cps[2] = { 0x2068, 0x0041 };

    // 2068 0041;	
    // ('\u2068') FIRST STRONG ISOLATE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2068 0041;	
    // ('\u2068') FIRST STRONG ISOLATE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_054)
{
    uint32_t const cps[2] = { 0x2069, 0x0041 };

    // 2069 0041;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2069 0041;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_055)
{
    uint32_t const cps[2] = { 0x206A, 0x0041 };

    // 206A 0041;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206A 0041;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_056)
{
    uint32_t const cps[2] = { 0x206B, 0x0041 };

    // 206B 0041;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206B 0041;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_057)
{
    uint32_t const cps[2] = { 0x206C, 0x0041 };

    // 206C 0041;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206C 0041;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_058)
{
    uint32_t const cps[2] = { 0x206D, 0x0041 };

    // 206D 0041;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206D 0041;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_059)
{
    uint32_t const cps[2] = { 0x206E, 0x0041 };

    // 206E 0041;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206E 0041;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_060)
{
    uint32_t const cps[2] = { 0x206F, 0x0041 };

    // 206F 0041;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206F 0041;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_061)
{
    uint32_t const cps[2] = { 0x2D7F, 0x0041 };

    // 2D7F 0041;	
    // (⵿) TIFINAGH CONSONANT JOINER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2D7F 0041;	
    // (⵿) TIFINAGH CONSONANT JOINER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_062)
{
    uint32_t const cps[2] = { 0xA670, 0x0041 };

    // A670 0041;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A670 0041;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_063)
{
    uint32_t const cps[2] = { 0xA671, 0x0041 };

    // A671 0041;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A671 0041;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_064)
{
    uint32_t const cps[2] = { 0xA672, 0x0041 };

    // A672 0041;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A672 0041;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_065)
{
    uint32_t const cps[2] = { 0xA8E0, 0x0041 };

    // A8E0 0041;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E0 0041;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_066)
{
    uint32_t const cps[2] = { 0xA8E1, 0x0041 };

    // A8E1 0041;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E1 0041;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_067)
{
    uint32_t const cps[2] = { 0xA8E2, 0x0041 };

    // A8E2 0041;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E2 0041;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_068)
{
    uint32_t const cps[2] = { 0xA8E3, 0x0041 };

    // A8E3 0041;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E3 0041;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_069)
{
    uint32_t const cps[2] = { 0xA8E4, 0x0041 };

    // A8E4 0041;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E4 0041;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_070)
{
    uint32_t const cps[2] = { 0xA8E5, 0x0041 };

    // A8E5 0041;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E5 0041;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_071)
{
    uint32_t const cps[2] = { 0xA8E6, 0x0041 };

    // A8E6 0041;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E6 0041;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_072)
{
    uint32_t const cps[2] = { 0xA8E7, 0x0041 };

    // A8E7 0041;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E7 0041;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_073)
{
    uint32_t const cps[2] = { 0xA8E8, 0x0041 };

    // A8E8 0041;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E8 0041;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_074)
{
    uint32_t const cps[2] = { 0xA8E9, 0x0041 };

    // A8E9 0041;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E9 0041;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_075)
{
    uint32_t const cps[2] = { 0xA8EA, 0x0041 };

    // A8EA 0041;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EA 0041;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_076)
{
    uint32_t const cps[2] = { 0xA8EB, 0x0041 };

    // A8EB 0041;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EB 0041;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_077)
{
    uint32_t const cps[2] = { 0xA8EC, 0x0041 };

    // A8EC 0041;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EC 0041;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_078)
{
    uint32_t const cps[2] = { 0xA8ED, 0x0041 };

    // A8ED 0041;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8ED 0041;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_079)
{
    uint32_t const cps[2] = { 0xA8EE, 0x0041 };

    // A8EE 0041;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EE 0041;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_080)
{
    uint32_t const cps[2] = { 0xA8EF, 0x0041 };

    // A8EF 0041;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EF 0041;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_081)
{
    uint32_t const cps[2] = { 0xA8F0, 0x0041 };

    // A8F0 0041;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F0 0041;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_082)
{
    uint32_t const cps[2] = { 0xA8F1, 0x0041 };

    // A8F1 0041;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F1 0041;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_083)
{
    uint32_t const cps[2] = { 0xFE00, 0x0041 };

    // FE00 0041;	
    // (︀) VARIATION SELECTOR-1	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE00 0041;	
    // (︀) VARIATION SELECTOR-1	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_084)
{
    uint32_t const cps[2] = { 0xFE01, 0x0041 };

    // FE01 0041;	
    // (︁) VARIATION SELECTOR-2	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE01 0041;	
    // (︁) VARIATION SELECTOR-2	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_085)
{
    uint32_t const cps[2] = { 0xFE02, 0x0041 };

    // FE02 0041;	
    // (︂) VARIATION SELECTOR-3	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE02 0041;	
    // (︂) VARIATION SELECTOR-3	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_086)
{
    uint32_t const cps[2] = { 0xFE03, 0x0041 };

    // FE03 0041;	
    // (︃) VARIATION SELECTOR-4	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE03 0041;	
    // (︃) VARIATION SELECTOR-4	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_087)
{
    uint32_t const cps[2] = { 0xFE04, 0x0041 };

    // FE04 0041;	
    // (︄) VARIATION SELECTOR-5	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE04 0041;	
    // (︄) VARIATION SELECTOR-5	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_088)
{
    uint32_t const cps[2] = { 0xFE05, 0x0041 };

    // FE05 0041;	
    // (︅) VARIATION SELECTOR-6	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE05 0041;	
    // (︅) VARIATION SELECTOR-6	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_089)
{
    uint32_t const cps[2] = { 0xFE06, 0x0041 };

    // FE06 0041;	
    // (︆) VARIATION SELECTOR-7	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE06 0041;	
    // (︆) VARIATION SELECTOR-7	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_090)
{
    uint32_t const cps[2] = { 0xFE07, 0x0041 };

    // FE07 0041;	
    // (︇) VARIATION SELECTOR-8	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE07 0041;	
    // (︇) VARIATION SELECTOR-8	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_091)
{
    uint32_t const cps[2] = { 0xFE08, 0x0041 };

    // FE08 0041;	
    // (︈) VARIATION SELECTOR-9	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE08 0041;	
    // (︈) VARIATION SELECTOR-9	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_092)
{
    uint32_t const cps[2] = { 0xFE09, 0x0041 };

    // FE09 0041;	
    // (︉) VARIATION SELECTOR-10	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE09 0041;	
    // (︉) VARIATION SELECTOR-10	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_093)
{
    uint32_t const cps[2] = { 0xFE0A, 0x0041 };

    // FE0A 0041;	
    // (︊) VARIATION SELECTOR-11	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0A 0041;	
    // (︊) VARIATION SELECTOR-11	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_094)
{
    uint32_t const cps[2] = { 0xFE0B, 0x0041 };

    // FE0B 0041;	
    // (︋) VARIATION SELECTOR-12	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0B 0041;	
    // (︋) VARIATION SELECTOR-12	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_095)
{
    uint32_t const cps[2] = { 0xFE0C, 0x0041 };

    // FE0C 0041;	
    // (︌) VARIATION SELECTOR-13	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0C 0041;	
    // (︌) VARIATION SELECTOR-13	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_096)
{
    uint32_t const cps[2] = { 0xFE0D, 0x0041 };

    // FE0D 0041;	
    // (︍) VARIATION SELECTOR-14	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0D 0041;	
    // (︍) VARIATION SELECTOR-14	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_097)
{
    uint32_t const cps[2] = { 0xFE0E, 0x0041 };

    // FE0E 0041;	
    // (︎) VARIATION SELECTOR-15	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0E 0041;	
    // (︎) VARIATION SELECTOR-15	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_098)
{
    uint32_t const cps[2] = { 0xFE0F, 0x0041 };

    // FE0F 0041;	
    // (️) VARIATION SELECTOR-16	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0F 0041;	
    // (️) VARIATION SELECTOR-16	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_099)
{
    uint32_t const cps[2] = { 0xFE21, 0x0041 };

    // FE21 0041;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE21 0041;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_100)
{
    uint32_t const cps[2] = { 0xFE23, 0x0041 };

    // FE23 0041;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE23 0041;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_101)
{
    uint32_t const cps[2] = { 0xFE24, 0x0041 };

    // FE24 0041;	
    // (︤) COMBINING MACRON LEFT HALF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE24 0041;	
    // (︤) COMBINING MACRON LEFT HALF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_102)
{
    uint32_t const cps[2] = { 0xFE25, 0x0041 };

    // FE25 0041;	
    // (︥) COMBINING MACRON RIGHT HALF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE25 0041;	
    // (︥) COMBINING MACRON RIGHT HALF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_103)
{
    uint32_t const cps[2] = { 0xFE26, 0x0041 };

    // FE26 0041;	
    // (︦) COMBINING CONJOINING MACRON	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE26 0041;	
    // (︦) COMBINING CONJOINING MACRON	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_104)
{
    uint32_t const cps[2] = { 0xFE28, 0x0041 };

    // FE28 0041;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE28 0041;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_105)
{
    uint32_t const cps[2] = { 0xFE2A, 0x0041 };

    // FE2A 0041;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2A 0041;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_106)
{
    uint32_t const cps[2] = { 0xFE2B, 0x0041 };

    // FE2B 0041;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2B 0041;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_107)
{
    uint32_t const cps[2] = { 0xFE2C, 0x0041 };

    // FE2C 0041;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2C 0041;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_108)
{
    uint32_t const cps[2] = { 0xFE2D, 0x0041 };

    // FE2D 0041;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2D 0041;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_109)
{
    uint32_t const cps[2] = { 0xFE2F, 0x0041 };

    // FE2F 0041;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2F 0041;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_110)
{
    uint32_t const cps[2] = { 0xFE73, 0x0041 };

    // FE73 0041;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE73 0041;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_111)
{
    uint32_t const cps[2] = { 0xFEFF, 0x0041 };

    // FEFF 0041;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEFF 0041;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_112)
{
    uint32_t const cps[2] = { 0xFFF9, 0x0041 };

    // FFF9 0041;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFF9 0041;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_113)
{
    uint32_t const cps[2] = { 0xFFFA, 0x0041 };

    // FFFA 0041;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFA 0041;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_114)
{
    uint32_t const cps[2] = { 0xFFFB, 0x0041 };

    // FFFB 0041;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFB 0041;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_115)
{
    uint32_t const cps[2] = { 0x102E0, 0x0041 };

    // 102E0 0041;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E0 0041;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_116)
{
    uint32_t const cps[2] = { 0x110BD, 0x0041 };

    // 110BD 0041;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110BD 0041;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_117)
{
    uint32_t const cps[2] = { 0x11366, 0x0041 };

    // 11366 0041;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11366 0041;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_118)
{
    uint32_t const cps[2] = { 0x11367, 0x0041 };

    // 11367 0041;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11367 0041;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_119)
{
    uint32_t const cps[2] = { 0x11368, 0x0041 };

    // 11368 0041;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11368 0041;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_120)
{
    uint32_t const cps[2] = { 0x11369, 0x0041 };

    // 11369 0041;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11369 0041;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_121)
{
    uint32_t const cps[2] = { 0x1136A, 0x0041 };

    // 1136A 0041;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136A 0041;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_122)
{
    uint32_t const cps[2] = { 0x1136B, 0x0041 };

    // 1136B 0041;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136B 0041;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_123)
{
    uint32_t const cps[2] = { 0x1136C, 0x0041 };

    // 1136C 0041;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136C 0041;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_124)
{
    uint32_t const cps[2] = { 0x11370, 0x0041 };

    // 11370 0041;	
    // (𑍰) COMBINING GRANTHA LETTER A	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11370 0041;	
    // (𑍰) COMBINING GRANTHA LETTER A	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_125)
{
    uint32_t const cps[2] = { 0x11371, 0x0041 };

    // 11371 0041;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11371 0041;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_126)
{
    uint32_t const cps[2] = { 0x11372, 0x0041 };

    // 11372 0041;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11372 0041;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_127)
{
    uint32_t const cps[2] = { 0x11373, 0x0041 };

    // 11373 0041;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11373 0041;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_128)
{
    uint32_t const cps[2] = { 0x11374, 0x0041 };

    // 11374 0041;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11374 0041;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_129)
{
    uint32_t const cps[2] = { 0x1BCA0, 0x0041 };

    // 1BCA0 0041;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA0 0041;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_130)
{
    uint32_t const cps[2] = { 0x1BCA1, 0x0041 };

    // 1BCA1 0041;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA1 0041;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_131)
{
    uint32_t const cps[2] = { 0x1BCA2, 0x0041 };

    // 1BCA2 0041;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA2 0041;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_132)
{
    uint32_t const cps[2] = { 0x1BCA3, 0x0041 };

    // 1BCA3 0041;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA3 0041;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_133)
{
    uint32_t const cps[2] = { 0x1D165, 0x0041 };

    // 1D165 0041;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D165 0041;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_134)
{
    uint32_t const cps[2] = { 0x1D166, 0x0041 };

    // 1D166 0041;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D166 0041;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_135)
{
    uint32_t const cps[2] = { 0x1D167, 0x0041 };

    // 1D167 0041;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D167 0041;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_136)
{
    uint32_t const cps[2] = { 0x1D168, 0x0041 };

    // 1D168 0041;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D168 0041;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_137)
{
    uint32_t const cps[2] = { 0x1D169, 0x0041 };

    // 1D169 0041;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D169 0041;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_138)
{
    uint32_t const cps[2] = { 0x1D16D, 0x0041 };

    // 1D16D 0041;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16D 0041;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_139)
{
    uint32_t const cps[2] = { 0x1D16E, 0x0041 };

    // 1D16E 0041;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16E 0041;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_140)
{
    uint32_t const cps[2] = { 0x1D16F, 0x0041 };

    // 1D16F 0041;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16F 0041;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_141)
{
    uint32_t const cps[2] = { 0x1D170, 0x0041 };

    // 1D170 0041;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D170 0041;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_142)
{
    uint32_t const cps[2] = { 0x1D171, 0x0041 };

    // 1D171 0041;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D171 0041;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_143)
{
    uint32_t const cps[2] = { 0x1D172, 0x0041 };

    // 1D172 0041;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D172 0041;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_144)
{
    uint32_t const cps[2] = { 0x1D173, 0x0041 };

    // 1D173 0041;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D173 0041;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_145)
{
    uint32_t const cps[2] = { 0x1D174, 0x0041 };

    // 1D174 0041;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D174 0041;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_146)
{
    uint32_t const cps[2] = { 0x1D175, 0x0041 };

    // 1D175 0041;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D175 0041;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_147)
{
    uint32_t const cps[2] = { 0x1D176, 0x0041 };

    // 1D176 0041;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D176 0041;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_148)
{
    uint32_t const cps[2] = { 0x1D177, 0x0041 };

    // 1D177 0041;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D177 0041;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_149)
{
    uint32_t const cps[2] = { 0x1D178, 0x0041 };

    // 1D178 0041;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D178 0041;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_150)
{
    uint32_t const cps[2] = { 0x1D179, 0x0041 };

    // 1D179 0041;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D179 0041;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_151)
{
    uint32_t const cps[2] = { 0x1D17A, 0x0041 };

    // 1D17A 0041;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17A 0041;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_152)
{
    uint32_t const cps[2] = { 0x1D17B, 0x0041 };

    // 1D17B 0041;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17B 0041;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_153)
{
    uint32_t const cps[2] = { 0x1D17C, 0x0041 };

    // 1D17C 0041;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17C 0041;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_154)
{
    uint32_t const cps[2] = { 0x1D17D, 0x0041 };

    // 1D17D 0041;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17D 0041;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_155)
{
    uint32_t const cps[2] = { 0x1D17E, 0x0041 };

    // 1D17E 0041;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17E 0041;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_156)
{
    uint32_t const cps[2] = { 0x1D17F, 0x0041 };

    // 1D17F 0041;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17F 0041;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_157)
{
    uint32_t const cps[2] = { 0x1D180, 0x0041 };

    // 1D180 0041;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D180 0041;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_158)
{
    uint32_t const cps[2] = { 0x1D181, 0x0041 };

    // 1D181 0041;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D181 0041;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_159)
{
    uint32_t const cps[2] = { 0x1D182, 0x0041 };

    // 1D182 0041;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D182 0041;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_160)
{
    uint32_t const cps[2] = { 0x1D185, 0x0041 };

    // 1D185 0041;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D185 0041;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_161)
{
    uint32_t const cps[2] = { 0x1D186, 0x0041 };

    // 1D186 0041;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D186 0041;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_162)
{
    uint32_t const cps[2] = { 0x1D187, 0x0041 };

    // 1D187 0041;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D187 0041;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_163)
{
    uint32_t const cps[2] = { 0x1D188, 0x0041 };

    // 1D188 0041;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D188 0041;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_164)
{
    uint32_t const cps[2] = { 0x1D189, 0x0041 };

    // 1D189 0041;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D189 0041;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_165)
{
    uint32_t const cps[2] = { 0x1D18A, 0x0041 };

    // 1D18A 0041;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18A 0041;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_166)
{
    uint32_t const cps[2] = { 0x1D18B, 0x0041 };

    // 1D18B 0041;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18B 0041;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_167)
{
    uint32_t const cps[2] = { 0x1D1AA, 0x0041 };

    // 1D1AA 0041;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AA 0041;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_168)
{
    uint32_t const cps[2] = { 0x1D1AB, 0x0041 };

    // 1D1AB 0041;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AB 0041;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_169)
{
    uint32_t const cps[2] = { 0x1D1AC, 0x0041 };

    // 1D1AC 0041;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AC 0041;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_170)
{
    uint32_t const cps[2] = { 0x1D1AD, 0x0041 };

    // 1D1AD 0041;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AD 0041;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_171)
{
    uint32_t const cps[2] = { 0x1D242, 0x0041 };

    // 1D242 0041;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D242 0041;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_172)
{
    uint32_t const cps[2] = { 0x1D243, 0x0041 };

    // 1D243 0041;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D243 0041;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_173)
{
    uint32_t const cps[2] = { 0x1D244, 0x0041 };

    // 1D244 0041;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D244 0041;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_174)
{
    uint32_t const cps[2] = { 0x1DA00, 0x0041 };

    // 1DA00 0041;	
    // (𝨀) SIGNWRITING HEAD RIM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA00 0041;	
    // (𝨀) SIGNWRITING HEAD RIM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_175)
{
    uint32_t const cps[2] = { 0x1DA01, 0x0041 };

    // 1DA01 0041;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA01 0041;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_176)
{
    uint32_t const cps[2] = { 0x1DA02, 0x0041 };

    // 1DA02 0041;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA02 0041;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_177)
{
    uint32_t const cps[2] = { 0x1DA03, 0x0041 };

    // 1DA03 0041;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA03 0041;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_178)
{
    uint32_t const cps[2] = { 0x1DA04, 0x0041 };

    // 1DA04 0041;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA04 0041;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_179)
{
    uint32_t const cps[2] = { 0x1DA05, 0x0041 };

    // 1DA05 0041;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA05 0041;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_180)
{
    uint32_t const cps[2] = { 0x1DA06, 0x0041 };

    // 1DA06 0041;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA06 0041;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_181)
{
    uint32_t const cps[2] = { 0x1DA07, 0x0041 };

    // 1DA07 0041;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA07 0041;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_182)
{
    uint32_t const cps[2] = { 0x1DA08, 0x0041 };

    // 1DA08 0041;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA08 0041;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_183)
{
    uint32_t const cps[2] = { 0x1DA09, 0x0041 };

    // 1DA09 0041;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA09 0041;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_184)
{
    uint32_t const cps[2] = { 0x1DA0A, 0x0041 };

    // 1DA0A 0041;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0A 0041;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_185)
{
    uint32_t const cps[2] = { 0x1DA0B, 0x0041 };

    // 1DA0B 0041;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0B 0041;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_186)
{
    uint32_t const cps[2] = { 0x1DA0C, 0x0041 };

    // 1DA0C 0041;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0C 0041;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_187)
{
    uint32_t const cps[2] = { 0x1DA0D, 0x0041 };

    // 1DA0D 0041;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0D 0041;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_188)
{
    uint32_t const cps[2] = { 0x1DA0E, 0x0041 };

    // 1DA0E 0041;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0E 0041;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_189)
{
    uint32_t const cps[2] = { 0x1DA0F, 0x0041 };

    // 1DA0F 0041;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0F 0041;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_190)
{
    uint32_t const cps[2] = { 0x1DA10, 0x0041 };

    // 1DA10 0041;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA10 0041;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_191)
{
    uint32_t const cps[2] = { 0x1DA11, 0x0041 };

    // 1DA11 0041;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA11 0041;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_192)
{
    uint32_t const cps[2] = { 0x1DA12, 0x0041 };

    // 1DA12 0041;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA12 0041;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_193)
{
    uint32_t const cps[2] = { 0x1DA13, 0x0041 };

    // 1DA13 0041;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA13 0041;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_194)
{
    uint32_t const cps[2] = { 0x1DA14, 0x0041 };

    // 1DA14 0041;	
    // (𝨔) SIGNWRITING EYES OPEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA14 0041;	
    // (𝨔) SIGNWRITING EYES OPEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_195)
{
    uint32_t const cps[2] = { 0x1DA15, 0x0041 };

    // 1DA15 0041;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA15 0041;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_196)
{
    uint32_t const cps[2] = { 0x1DA16, 0x0041 };

    // 1DA16 0041;	
    // (𝨖) SIGNWRITING EYES CLOSED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA16 0041;	
    // (𝨖) SIGNWRITING EYES CLOSED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_197)
{
    uint32_t const cps[2] = { 0x1DA17, 0x0041 };

    // 1DA17 0041;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA17 0041;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_198)
{
    uint32_t const cps[2] = { 0x1DA18, 0x0041 };

    // 1DA18 0041;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA18 0041;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_199)
{
    uint32_t const cps[2] = { 0x1DA19, 0x0041 };

    // 1DA19 0041;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA19 0041;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_200)
{
    uint32_t const cps[2] = { 0x1DA1A, 0x0041 };

    // 1DA1A 0041;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1A 0041;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_201)
{
    uint32_t const cps[2] = { 0x1DA1B, 0x0041 };

    // 1DA1B 0041;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1B 0041;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_202)
{
    uint32_t const cps[2] = { 0x1DA1C, 0x0041 };

    // 1DA1C 0041;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1C 0041;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_203)
{
    uint32_t const cps[2] = { 0x1DA1D, 0x0041 };

    // 1DA1D 0041;	
    // (𝨝) SIGNWRITING EYE WINK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1D 0041;	
    // (𝨝) SIGNWRITING EYE WINK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_204)
{
    uint32_t const cps[2] = { 0x1DA1E, 0x0041 };

    // 1DA1E 0041;	
    // (𝨞) SIGNWRITING EYELASHES UP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1E 0041;	
    // (𝨞) SIGNWRITING EYELASHES UP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_205)
{
    uint32_t const cps[2] = { 0x1DA1F, 0x0041 };

    // 1DA1F 0041;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1F 0041;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_206)
{
    uint32_t const cps[2] = { 0x1DA20, 0x0041 };

    // 1DA20 0041;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA20 0041;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_207)
{
    uint32_t const cps[2] = { 0x1DA21, 0x0041 };

    // 1DA21 0041;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA21 0041;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_208)
{
    uint32_t const cps[2] = { 0x1DA22, 0x0041 };

    // 1DA22 0041;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA22 0041;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_209)
{
    uint32_t const cps[2] = { 0x1DA23, 0x0041 };

    // 1DA23 0041;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA23 0041;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_210)
{
    uint32_t const cps[2] = { 0x1DA24, 0x0041 };

    // 1DA24 0041;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA24 0041;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_211)
{
    uint32_t const cps[2] = { 0x1DA25, 0x0041 };

    // 1DA25 0041;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA25 0041;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_212)
{
    uint32_t const cps[2] = { 0x1DA26, 0x0041 };

    // 1DA26 0041;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA26 0041;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_213)
{
    uint32_t const cps[2] = { 0x1DA27, 0x0041 };

    // 1DA27 0041;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA27 0041;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_214)
{
    uint32_t const cps[2] = { 0x1DA28, 0x0041 };

    // 1DA28 0041;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA28 0041;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_215)
{
    uint32_t const cps[2] = { 0x1DA29, 0x0041 };

    // 1DA29 0041;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA29 0041;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_216)
{
    uint32_t const cps[2] = { 0x1DA2A, 0x0041 };

    // 1DA2A 0041;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2A 0041;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_217)
{
    uint32_t const cps[2] = { 0x1DA2B, 0x0041 };

    // 1DA2B 0041;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2B 0041;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_218)
{
    uint32_t const cps[2] = { 0x1DA2C, 0x0041 };

    // 1DA2C 0041;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2C 0041;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_219)
{
    uint32_t const cps[2] = { 0x1DA2D, 0x0041 };

    // 1DA2D 0041;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2D 0041;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_220)
{
    uint32_t const cps[2] = { 0x1DA2E, 0x0041 };

    // 1DA2E 0041;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2E 0041;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_221)
{
    uint32_t const cps[2] = { 0x1DA2F, 0x0041 };

    // 1DA2F 0041;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2F 0041;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_222)
{
    uint32_t const cps[2] = { 0x1DA30, 0x0041 };

    // 1DA30 0041;	
    // (𝨰) SIGNWRITING EARS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA30 0041;	
    // (𝨰) SIGNWRITING EARS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_223)
{
    uint32_t const cps[2] = { 0x1DA31, 0x0041 };

    // 1DA31 0041;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA31 0041;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_224)
{
    uint32_t const cps[2] = { 0x1DA32, 0x0041 };

    // 1DA32 0041;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA32 0041;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_225)
{
    uint32_t const cps[2] = { 0x1DA33, 0x0041 };

    // 1DA33 0041;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA33 0041;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_226)
{
    uint32_t const cps[2] = { 0x1DA34, 0x0041 };

    // 1DA34 0041;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA34 0041;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_227)
{
    uint32_t const cps[2] = { 0x1DA35, 0x0041 };

    // 1DA35 0041;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA35 0041;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_228)
{
    uint32_t const cps[2] = { 0x1DA36, 0x0041 };

    // 1DA36 0041;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA36 0041;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_229)
{
    uint32_t const cps[2] = { 0x1DA3B, 0x0041 };

    // 1DA3B 0041;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3B 0041;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_230)
{
    uint32_t const cps[2] = { 0x1DA3C, 0x0041 };

    // 1DA3C 0041;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3C 0041;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_231)
{
    uint32_t const cps[2] = { 0x1DA3D, 0x0041 };

    // 1DA3D 0041;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3D 0041;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_232)
{
    uint32_t const cps[2] = { 0x1DA3E, 0x0041 };

    // 1DA3E 0041;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3E 0041;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_233)
{
    uint32_t const cps[2] = { 0x1DA3F, 0x0041 };

    // 1DA3F 0041;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3F 0041;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_234)
{
    uint32_t const cps[2] = { 0x1DA40, 0x0041 };

    // 1DA40 0041;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA40 0041;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_235)
{
    uint32_t const cps[2] = { 0x1DA41, 0x0041 };

    // 1DA41 0041;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA41 0041;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_236)
{
    uint32_t const cps[2] = { 0x1DA42, 0x0041 };

    // 1DA42 0041;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA42 0041;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_237)
{
    uint32_t const cps[2] = { 0x1DA43, 0x0041 };

    // 1DA43 0041;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA43 0041;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_238)
{
    uint32_t const cps[2] = { 0x1DA44, 0x0041 };

    // 1DA44 0041;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA44 0041;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_239)
{
    uint32_t const cps[2] = { 0x1DA45, 0x0041 };

    // 1DA45 0041;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA45 0041;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_240)
{
    uint32_t const cps[2] = { 0x1DA46, 0x0041 };

    // 1DA46 0041;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA46 0041;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_241)
{
    uint32_t const cps[2] = { 0x1DA47, 0x0041 };

    // 1DA47 0041;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA47 0041;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_242)
{
    uint32_t const cps[2] = { 0x1DA48, 0x0041 };

    // 1DA48 0041;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA48 0041;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_243)
{
    uint32_t const cps[2] = { 0x1DA49, 0x0041 };

    // 1DA49 0041;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA49 0041;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_244)
{
    uint32_t const cps[2] = { 0x1DA4A, 0x0041 };

    // 1DA4A 0041;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4A 0041;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_245)
{
    uint32_t const cps[2] = { 0x1DA4B, 0x0041 };

    // 1DA4B 0041;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4B 0041;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_246)
{
    uint32_t const cps[2] = { 0x1DA4C, 0x0041 };

    // 1DA4C 0041;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4C 0041;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_247)
{
    uint32_t const cps[2] = { 0x1DA4D, 0x0041 };

    // 1DA4D 0041;	
    // (𝩍) SIGNWRITING MOUTH KISS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4D 0041;	
    // (𝩍) SIGNWRITING MOUTH KISS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_248)
{
    uint32_t const cps[2] = { 0x1DA4E, 0x0041 };

    // 1DA4E 0041;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4E 0041;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_249)
{
    uint32_t const cps[2] = { 0x1DA4F, 0x0041 };

    // 1DA4F 0041;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4F 0041;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_250)
{
    uint32_t const cps[2] = { 0x1DA50, 0x0041 };

    // 1DA50 0041;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA50 0041;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_251)
{
    uint32_t const cps[2] = { 0x1DA51, 0x0041 };

    // 1DA51 0041;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA51 0041;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_252)
{
    uint32_t const cps[2] = { 0x1DA52, 0x0041 };

    // 1DA52 0041;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA52 0041;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_253)
{
    uint32_t const cps[2] = { 0x1DA53, 0x0041 };

    // 1DA53 0041;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA53 0041;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_254)
{
    uint32_t const cps[2] = { 0x1DA54, 0x0041 };

    // 1DA54 0041;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA54 0041;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_255)
{
    uint32_t const cps[2] = { 0x1DA55, 0x0041 };

    // 1DA55 0041;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA55 0041;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_256)
{
    uint32_t const cps[2] = { 0x1DA56, 0x0041 };

    // 1DA56 0041;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA56 0041;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_257)
{
    uint32_t const cps[2] = { 0x1DA57, 0x0041 };

    // 1DA57 0041;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA57 0041;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_258)
{
    uint32_t const cps[2] = { 0x1DA58, 0x0041 };

    // 1DA58 0041;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA58 0041;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_259)
{
    uint32_t const cps[2] = { 0x1DA59, 0x0041 };

    // 1DA59 0041;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA59 0041;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_260)
{
    uint32_t const cps[2] = { 0x1DA5A, 0x0041 };

    // 1DA5A 0041;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5A 0041;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_261)
{
    uint32_t const cps[2] = { 0x1DA5B, 0x0041 };

    // 1DA5B 0041;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5B 0041;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_262)
{
    uint32_t const cps[2] = { 0x1DA5C, 0x0041 };

    // 1DA5C 0041;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5C 0041;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_263)
{
    uint32_t const cps[2] = { 0x1DA5D, 0x0041 };

    // 1DA5D 0041;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5D 0041;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_264)
{
    uint32_t const cps[2] = { 0x1DA5E, 0x0041 };

    // 1DA5E 0041;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5E 0041;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_265)
{
    uint32_t const cps[2] = { 0x1DA5F, 0x0041 };

    // 1DA5F 0041;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5F 0041;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_266)
{
    uint32_t const cps[2] = { 0x1DA60, 0x0041 };

    // 1DA60 0041;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA60 0041;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_267)
{
    uint32_t const cps[2] = { 0x1DA61, 0x0041 };

    // 1DA61 0041;	
    // (𝩡) SIGNWRITING TEETH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA61 0041;	
    // (𝩡) SIGNWRITING TEETH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_268)
{
    uint32_t const cps[2] = { 0x1DA62, 0x0041 };

    // 1DA62 0041;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA62 0041;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_269)
{
    uint32_t const cps[2] = { 0x1DA63, 0x0041 };

    // 1DA63 0041;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA63 0041;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_270)
{
    uint32_t const cps[2] = { 0x1DA64, 0x0041 };

    // 1DA64 0041;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA64 0041;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_271)
{
    uint32_t const cps[2] = { 0x1DA65, 0x0041 };

    // 1DA65 0041;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA65 0041;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_272)
{
    uint32_t const cps[2] = { 0x1DA66, 0x0041 };

    // 1DA66 0041;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA66 0041;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_273)
{
    uint32_t const cps[2] = { 0x1DA67, 0x0041 };

    // 1DA67 0041;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA67 0041;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_274)
{
    uint32_t const cps[2] = { 0x1DA68, 0x0041 };

    // 1DA68 0041;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA68 0041;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_275)
{
    uint32_t const cps[2] = { 0x1DA69, 0x0041 };

    // 1DA69 0041;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA69 0041;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_276)
{
    uint32_t const cps[2] = { 0x1DA6A, 0x0041 };

    // 1DA6A 0041;	
    // (𝩪) SIGNWRITING NECK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6A 0041;	
    // (𝩪) SIGNWRITING NECK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_277)
{
    uint32_t const cps[2] = { 0x1DA6B, 0x0041 };

    // 1DA6B 0041;	
    // (𝩫) SIGNWRITING HAIR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6B 0041;	
    // (𝩫) SIGNWRITING HAIR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_278)
{
    uint32_t const cps[2] = { 0x1DA6C, 0x0041 };

    // 1DA6C 0041;	
    // (𝩬) SIGNWRITING EXCITEMENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6C 0041;	
    // (𝩬) SIGNWRITING EXCITEMENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_279)
{
    uint32_t const cps[2] = { 0x1DA75, 0x0041 };

    // 1DA75 0041;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA75 0041;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_280)
{
    uint32_t const cps[2] = { 0x1DA84, 0x0041 };

    // 1DA84 0041;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA84 0041;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_281)
{
    uint32_t const cps[2] = { 0x1DA9B, 0x0041 };

    // 1DA9B 0041;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9B 0041;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_282)
{
    uint32_t const cps[2] = { 0x1DA9C, 0x0041 };

    // 1DA9C 0041;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9C 0041;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_283)
{
    uint32_t const cps[2] = { 0x1DA9D, 0x0041 };

    // 1DA9D 0041;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9D 0041;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_284)
{
    uint32_t const cps[2] = { 0x1DA9E, 0x0041 };

    // 1DA9E 0041;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9E 0041;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_285)
{
    uint32_t const cps[2] = { 0x1DA9F, 0x0041 };

    // 1DA9F 0041;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9F 0041;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_286)
{
    uint32_t const cps[2] = { 0x1DAA1, 0x0041 };

    // 1DAA1 0041;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA1 0041;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_287)
{
    uint32_t const cps[2] = { 0x1DAA2, 0x0041 };

    // 1DAA2 0041;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA2 0041;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_288)
{
    uint32_t const cps[2] = { 0x1DAA3, 0x0041 };

    // 1DAA3 0041;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA3 0041;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_289)
{
    uint32_t const cps[2] = { 0x1DAA4, 0x0041 };

    // 1DAA4 0041;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA4 0041;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_290)
{
    uint32_t const cps[2] = { 0x1DAA5, 0x0041 };

    // 1DAA5 0041;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA5 0041;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_291)
{
    uint32_t const cps[2] = { 0x1DAA6, 0x0041 };

    // 1DAA6 0041;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA6 0041;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_292)
{
    uint32_t const cps[2] = { 0x1DAA7, 0x0041 };

    // 1DAA7 0041;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA7 0041;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_293)
{
    uint32_t const cps[2] = { 0x1DAA8, 0x0041 };

    // 1DAA8 0041;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA8 0041;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_294)
{
    uint32_t const cps[2] = { 0x1DAA9, 0x0041 };

    // 1DAA9 0041;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA9 0041;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_295)
{
    uint32_t const cps[2] = { 0x1DAAA, 0x0041 };

    // 1DAAA 0041;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAA 0041;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_296)
{
    uint32_t const cps[2] = { 0x1DAAB, 0x0041 };

    // 1DAAB 0041;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAB 0041;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_297)
{
    uint32_t const cps[2] = { 0x1DAAC, 0x0041 };

    // 1DAAC 0041;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAC 0041;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_298)
{
    uint32_t const cps[2] = { 0x1DAAD, 0x0041 };

    // 1DAAD 0041;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAD 0041;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_299)
{
    uint32_t const cps[2] = { 0x1DAAE, 0x0041 };

    // 1DAAE 0041;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAE 0041;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_300)
{
    uint32_t const cps[2] = { 0x1DAAF, 0x0041 };

    // 1DAAF 0041;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAF 0041;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_301)
{
    uint32_t const cps[2] = { 0x1E8D0, 0x0041 };

    // 1E8D0 0041;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D0 0041;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_302)
{
    uint32_t const cps[2] = { 0x1E8D1, 0x0041 };

    // 1E8D1 0041;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D1 0041;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_303)
{
    uint32_t const cps[2] = { 0x1E8D2, 0x0041 };

    // 1E8D2 0041;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D2 0041;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_304)
{
    uint32_t const cps[2] = { 0x1E8D3, 0x0041 };

    // 1E8D3 0041;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D3 0041;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_305)
{
    uint32_t const cps[2] = { 0x1E8D4, 0x0041 };

    // 1E8D4 0041;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D4 0041;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_306)
{
    uint32_t const cps[2] = { 0x1E8D5, 0x0041 };

    // 1E8D5 0041;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D5 0041;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_307)
{
    uint32_t const cps[2] = { 0x1E8D6, 0x0041 };

    // 1E8D6 0041;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D6 0041;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_308)
{
    uint32_t const cps[2] = { 0xE0001, 0x0041 };

    // E0001 0041;	
    // ('\U000E0001') LANGUAGE TAG	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0001 0041;	
    // ('\U000E0001') LANGUAGE TAG	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_309)
{
    uint32_t const cps[2] = { 0xE0020, 0x0041 };

    // E0020 0041;	
    // ('\U000E0020') TAG SPACE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0020 0041;	
    // ('\U000E0020') TAG SPACE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_310)
{
    uint32_t const cps[2] = { 0xE0021, 0x0041 };

    // E0021 0041;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0021 0041;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_311)
{
    uint32_t const cps[2] = { 0xE0022, 0x0041 };

    // E0022 0041;	
    // ('\U000E0022') TAG QUOTATION MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0022 0041;	
    // ('\U000E0022') TAG QUOTATION MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_312)
{
    uint32_t const cps[2] = { 0xE0023, 0x0041 };

    // E0023 0041;	
    // ('\U000E0023') TAG NUMBER SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0023 0041;	
    // ('\U000E0023') TAG NUMBER SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_313)
{
    uint32_t const cps[2] = { 0xE0024, 0x0041 };

    // E0024 0041;	
    // ('\U000E0024') TAG DOLLAR SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0024 0041;	
    // ('\U000E0024') TAG DOLLAR SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_314)
{
    uint32_t const cps[2] = { 0xE0025, 0x0041 };

    // E0025 0041;	
    // ('\U000E0025') TAG PERCENT SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0025 0041;	
    // ('\U000E0025') TAG PERCENT SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_315)
{
    uint32_t const cps[2] = { 0xE0026, 0x0041 };

    // E0026 0041;	
    // ('\U000E0026') TAG AMPERSAND	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0026 0041;	
    // ('\U000E0026') TAG AMPERSAND	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_316)
{
    uint32_t const cps[2] = { 0xE0027, 0x0041 };

    // E0027 0041;	
    // ('\U000E0027') TAG APOSTROPHE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0027 0041;	
    // ('\U000E0027') TAG APOSTROPHE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_317)
{
    uint32_t const cps[2] = { 0xE0028, 0x0041 };

    // E0028 0041;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0028 0041;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_318)
{
    uint32_t const cps[2] = { 0xE0029, 0x0041 };

    // E0029 0041;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0029 0041;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_319)
{
    uint32_t const cps[2] = { 0xE002A, 0x0041 };

    // E002A 0041;	
    // ('\U000E002A') TAG ASTERISK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002A 0041;	
    // ('\U000E002A') TAG ASTERISK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_320)
{
    uint32_t const cps[2] = { 0xE002B, 0x0041 };

    // E002B 0041;	
    // ('\U000E002B') TAG PLUS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002B 0041;	
    // ('\U000E002B') TAG PLUS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_321)
{
    uint32_t const cps[2] = { 0xE002C, 0x0041 };

    // E002C 0041;	
    // ('\U000E002C') TAG COMMA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002C 0041;	
    // ('\U000E002C') TAG COMMA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_322)
{
    uint32_t const cps[2] = { 0xE002D, 0x0041 };

    // E002D 0041;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002D 0041;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_323)
{
    uint32_t const cps[2] = { 0xE002E, 0x0041 };

    // E002E 0041;	
    // ('\U000E002E') TAG FULL STOP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002E 0041;	
    // ('\U000E002E') TAG FULL STOP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_324)
{
    uint32_t const cps[2] = { 0xE002F, 0x0041 };

    // E002F 0041;	
    // ('\U000E002F') TAG SOLIDUS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002F 0041;	
    // ('\U000E002F') TAG SOLIDUS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_325)
{
    uint32_t const cps[2] = { 0xE0030, 0x0041 };

    // E0030 0041;	
    // ('\U000E0030') TAG DIGIT ZERO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0030 0041;	
    // ('\U000E0030') TAG DIGIT ZERO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_326)
{
    uint32_t const cps[2] = { 0xE0031, 0x0041 };

    // E0031 0041;	
    // ('\U000E0031') TAG DIGIT ONE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0031 0041;	
    // ('\U000E0031') TAG DIGIT ONE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_327)
{
    uint32_t const cps[2] = { 0xE0032, 0x0041 };

    // E0032 0041;	
    // ('\U000E0032') TAG DIGIT TWO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0032 0041;	
    // ('\U000E0032') TAG DIGIT TWO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_328)
{
    uint32_t const cps[2] = { 0xE0033, 0x0041 };

    // E0033 0041;	
    // ('\U000E0033') TAG DIGIT THREE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0033 0041;	
    // ('\U000E0033') TAG DIGIT THREE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_329)
{
    uint32_t const cps[2] = { 0xE0034, 0x0041 };

    // E0034 0041;	
    // ('\U000E0034') TAG DIGIT FOUR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0034 0041;	
    // ('\U000E0034') TAG DIGIT FOUR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_330)
{
    uint32_t const cps[2] = { 0xE0035, 0x0041 };

    // E0035 0041;	
    // ('\U000E0035') TAG DIGIT FIVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0035 0041;	
    // ('\U000E0035') TAG DIGIT FIVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_331)
{
    uint32_t const cps[2] = { 0xE0036, 0x0041 };

    // E0036 0041;	
    // ('\U000E0036') TAG DIGIT SIX	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0036 0041;	
    // ('\U000E0036') TAG DIGIT SIX	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_332)
{
    uint32_t const cps[2] = { 0xE0037, 0x0041 };

    // E0037 0041;	
    // ('\U000E0037') TAG DIGIT SEVEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0037 0041;	
    // ('\U000E0037') TAG DIGIT SEVEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_333)
{
    uint32_t const cps[2] = { 0xE0038, 0x0041 };

    // E0038 0041;	
    // ('\U000E0038') TAG DIGIT EIGHT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0038 0041;	
    // ('\U000E0038') TAG DIGIT EIGHT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_334)
{
    uint32_t const cps[2] = { 0xE0039, 0x0041 };

    // E0039 0041;	
    // ('\U000E0039') TAG DIGIT NINE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0039 0041;	
    // ('\U000E0039') TAG DIGIT NINE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_335)
{
    uint32_t const cps[2] = { 0xE003A, 0x0041 };

    // E003A 0041;	
    // ('\U000E003A') TAG COLON	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003A 0041;	
    // ('\U000E003A') TAG COLON	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_336)
{
    uint32_t const cps[2] = { 0xE003B, 0x0041 };

    // E003B 0041;	
    // ('\U000E003B') TAG SEMICOLON	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003B 0041;	
    // ('\U000E003B') TAG SEMICOLON	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_337)
{
    uint32_t const cps[2] = { 0xE003C, 0x0041 };

    // E003C 0041;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003C 0041;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_338)
{
    uint32_t const cps[2] = { 0xE003D, 0x0041 };

    // E003D 0041;	
    // ('\U000E003D') TAG EQUALS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003D 0041;	
    // ('\U000E003D') TAG EQUALS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_339)
{
    uint32_t const cps[2] = { 0xE003E, 0x0041 };

    // E003E 0041;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003E 0041;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_340)
{
    uint32_t const cps[2] = { 0xE003F, 0x0041 };

    // E003F 0041;	
    // ('\U000E003F') TAG QUESTION MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003F 0041;	
    // ('\U000E003F') TAG QUESTION MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_341)
{
    uint32_t const cps[2] = { 0xE0040, 0x0041 };

    // E0040 0041;	
    // ('\U000E0040') TAG COMMERCIAL AT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0040 0041;	
    // ('\U000E0040') TAG COMMERCIAL AT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_342)
{
    uint32_t const cps[2] = { 0xE0041, 0x0041 };

    // E0041 0041;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0041 0041;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_343)
{
    uint32_t const cps[2] = { 0xE0042, 0x0041 };

    // E0042 0041;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0042 0041;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_344)
{
    uint32_t const cps[2] = { 0xE0043, 0x0041 };

    // E0043 0041;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0043 0041;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_345)
{
    uint32_t const cps[2] = { 0xE0044, 0x0041 };

    // E0044 0041;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0044 0041;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_346)
{
    uint32_t const cps[2] = { 0xE0045, 0x0041 };

    // E0045 0041;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0045 0041;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_347)
{
    uint32_t const cps[2] = { 0xE0046, 0x0041 };

    // E0046 0041;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0046 0041;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_348)
{
    uint32_t const cps[2] = { 0xE0047, 0x0041 };

    // E0047 0041;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0047 0041;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_349)
{
    uint32_t const cps[2] = { 0xE0048, 0x0041 };

    // E0048 0041;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0048 0041;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_350)
{
    uint32_t const cps[2] = { 0xE0049, 0x0041 };

    // E0049 0041;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0049 0041;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_351)
{
    uint32_t const cps[2] = { 0xE004A, 0x0041 };

    // E004A 0041;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004A 0041;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_352)
{
    uint32_t const cps[2] = { 0xE004B, 0x0041 };

    // E004B 0041;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004B 0041;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_353)
{
    uint32_t const cps[2] = { 0xE004C, 0x0041 };

    // E004C 0041;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004C 0041;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_354)
{
    uint32_t const cps[2] = { 0xE004D, 0x0041 };

    // E004D 0041;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004D 0041;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_355)
{
    uint32_t const cps[2] = { 0xE004E, 0x0041 };

    // E004E 0041;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004E 0041;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_356)
{
    uint32_t const cps[2] = { 0xE004F, 0x0041 };

    // E004F 0041;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004F 0041;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_357)
{
    uint32_t const cps[2] = { 0xE0050, 0x0041 };

    // E0050 0041;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0050 0041;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_358)
{
    uint32_t const cps[2] = { 0xE0051, 0x0041 };

    // E0051 0041;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0051 0041;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_359)
{
    uint32_t const cps[2] = { 0xE0052, 0x0041 };

    // E0052 0041;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0052 0041;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_360)
{
    uint32_t const cps[2] = { 0xE0053, 0x0041 };

    // E0053 0041;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0053 0041;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_361)
{
    uint32_t const cps[2] = { 0xE0054, 0x0041 };

    // E0054 0041;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0054 0041;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_362)
{
    uint32_t const cps[2] = { 0xE0055, 0x0041 };

    // E0055 0041;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0055 0041;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_363)
{
    uint32_t const cps[2] = { 0xE0056, 0x0041 };

    // E0056 0041;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0056 0041;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_364)
{
    uint32_t const cps[2] = { 0xE0057, 0x0041 };

    // E0057 0041;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0057 0041;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_365)
{
    uint32_t const cps[2] = { 0xE0058, 0x0041 };

    // E0058 0041;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0058 0041;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_366)
{
    uint32_t const cps[2] = { 0xE0059, 0x0041 };

    // E0059 0041;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0059 0041;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_367)
{
    uint32_t const cps[2] = { 0xE005A, 0x0041 };

    // E005A 0041;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005A 0041;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_368)
{
    uint32_t const cps[2] = { 0xE005B, 0x0041 };

    // E005B 0041;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005B 0041;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_369)
{
    uint32_t const cps[2] = { 0xE005C, 0x0041 };

    // E005C 0041;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005C 0041;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_370)
{
    uint32_t const cps[2] = { 0xE005D, 0x0041 };

    // E005D 0041;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005D 0041;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_371)
{
    uint32_t const cps[2] = { 0xE005E, 0x0041 };

    // E005E 0041;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005E 0041;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_372)
{
    uint32_t const cps[2] = { 0xE005F, 0x0041 };

    // E005F 0041;	
    // ('\U000E005F') TAG LOW LINE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005F 0041;	
    // ('\U000E005F') TAG LOW LINE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_373)
{
    uint32_t const cps[2] = { 0xE0060, 0x0041 };

    // E0060 0041;	
    // ('\U000E0060') TAG GRAVE ACCENT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0060 0041;	
    // ('\U000E0060') TAG GRAVE ACCENT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_374)
{
    uint32_t const cps[2] = { 0xE0061, 0x0041 };

    // E0061 0041;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0061 0041;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_375)
{
    uint32_t const cps[2] = { 0xE0062, 0x0041 };

    // E0062 0041;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0062 0041;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_376)
{
    uint32_t const cps[2] = { 0xE0063, 0x0041 };

    // E0063 0041;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0063 0041;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_377)
{
    uint32_t const cps[2] = { 0xE0064, 0x0041 };

    // E0064 0041;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0064 0041;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_378)
{
    uint32_t const cps[2] = { 0xE0065, 0x0041 };

    // E0065 0041;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0065 0041;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_379)
{
    uint32_t const cps[2] = { 0xE0066, 0x0041 };

    // E0066 0041;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0066 0041;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_380)
{
    uint32_t const cps[2] = { 0xE0067, 0x0041 };

    // E0067 0041;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0067 0041;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_381)
{
    uint32_t const cps[2] = { 0xE0068, 0x0041 };

    // E0068 0041;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0068 0041;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_382)
{
    uint32_t const cps[2] = { 0xE0069, 0x0041 };

    // E0069 0041;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0069 0041;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_383)
{
    uint32_t const cps[2] = { 0xE006A, 0x0041 };

    // E006A 0041;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006A 0041;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_384)
{
    uint32_t const cps[2] = { 0xE006B, 0x0041 };

    // E006B 0041;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006B 0041;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_385)
{
    uint32_t const cps[2] = { 0xE006C, 0x0041 };

    // E006C 0041;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006C 0041;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_386)
{
    uint32_t const cps[2] = { 0xE006D, 0x0041 };

    // E006D 0041;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006D 0041;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_387)
{
    uint32_t const cps[2] = { 0xE006E, 0x0041 };

    // E006E 0041;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006E 0041;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_388)
{
    uint32_t const cps[2] = { 0xE006F, 0x0041 };

    // E006F 0041;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006F 0041;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_389)
{
    uint32_t const cps[2] = { 0xE0070, 0x0041 };

    // E0070 0041;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0070 0041;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_390)
{
    uint32_t const cps[2] = { 0xE0071, 0x0041 };

    // E0071 0041;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0071 0041;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_391)
{
    uint32_t const cps[2] = { 0xE0072, 0x0041 };

    // E0072 0041;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0072 0041;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_392)
{
    uint32_t const cps[2] = { 0xE0073, 0x0041 };

    // E0073 0041;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0073 0041;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_393)
{
    uint32_t const cps[2] = { 0xE0074, 0x0041 };

    // E0074 0041;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0074 0041;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_394)
{
    uint32_t const cps[2] = { 0xE0075, 0x0041 };

    // E0075 0041;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0075 0041;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_395)
{
    uint32_t const cps[2] = { 0xE0076, 0x0041 };

    // E0076 0041;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0076 0041;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_396)
{
    uint32_t const cps[2] = { 0xE0077, 0x0041 };

    // E0077 0041;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0077 0041;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_397)
{
    uint32_t const cps[2] = { 0xE0078, 0x0041 };

    // E0078 0041;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0078 0041;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_398)
{
    uint32_t const cps[2] = { 0xE0079, 0x0041 };

    // E0079 0041;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0079 0041;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_399)
{
    uint32_t const cps[2] = { 0xE007A, 0x0041 };

    // E007A 0041;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007A 0041;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_400)
{
    uint32_t const cps[2] = { 0xE007B, 0x0041 };

    // E007B 0041;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007B 0041;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_401)
{
    uint32_t const cps[2] = { 0xE007C, 0x0041 };

    // E007C 0041;	
    // ('\U000E007C') TAG VERTICAL LINE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007C 0041;	
    // ('\U000E007C') TAG VERTICAL LINE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_402)
{
    uint32_t const cps[2] = { 0xE007D, 0x0041 };

    // E007D 0041;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007D 0041;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_403)
{
    uint32_t const cps[2] = { 0xE007E, 0x0041 };

    // E007E 0041;	
    // ('\U000E007E') TAG TILDE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007E 0041;	
    // ('\U000E007E') TAG TILDE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_404)
{
    uint32_t const cps[2] = { 0xE007F, 0x0041 };

    // E007F 0041;	
    // ('\U000E007F') CANCEL TAG	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007F 0041;	
    // ('\U000E007F') CANCEL TAG	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_405)
{
    uint32_t const cps[2] = { 0xE0100, 0x0041 };

    // E0100 0041;	
    // (󠄀) VARIATION SELECTOR-17	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0100 0041;	
    // (󠄀) VARIATION SELECTOR-17	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_406)
{
    uint32_t const cps[2] = { 0xE0101, 0x0041 };

    // E0101 0041;	
    // (󠄁) VARIATION SELECTOR-18	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0101 0041;	
    // (󠄁) VARIATION SELECTOR-18	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_407)
{
    uint32_t const cps[2] = { 0xE0102, 0x0041 };

    // E0102 0041;	
    // (󠄂) VARIATION SELECTOR-19	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0102 0041;	
    // (󠄂) VARIATION SELECTOR-19	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_408)
{
    uint32_t const cps[2] = { 0xE0103, 0x0041 };

    // E0103 0041;	
    // (󠄃) VARIATION SELECTOR-20	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0103 0041;	
    // (󠄃) VARIATION SELECTOR-20	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_409)
{
    uint32_t const cps[2] = { 0xE0104, 0x0041 };

    // E0104 0041;	
    // (󠄄) VARIATION SELECTOR-21	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0104 0041;	
    // (󠄄) VARIATION SELECTOR-21	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_410)
{
    uint32_t const cps[2] = { 0xE0105, 0x0041 };

    // E0105 0041;	
    // (󠄅) VARIATION SELECTOR-22	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0105 0041;	
    // (󠄅) VARIATION SELECTOR-22	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_411)
{
    uint32_t const cps[2] = { 0xE0106, 0x0041 };

    // E0106 0041;	
    // (󠄆) VARIATION SELECTOR-23	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0106 0041;	
    // (󠄆) VARIATION SELECTOR-23	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_412)
{
    uint32_t const cps[2] = { 0xE0107, 0x0041 };

    // E0107 0041;	
    // (󠄇) VARIATION SELECTOR-24	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0107 0041;	
    // (󠄇) VARIATION SELECTOR-24	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_413)
{
    uint32_t const cps[2] = { 0xE0108, 0x0041 };

    // E0108 0041;	
    // (󠄈) VARIATION SELECTOR-25	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0108 0041;	
    // (󠄈) VARIATION SELECTOR-25	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_414)
{
    uint32_t const cps[2] = { 0xE0109, 0x0041 };

    // E0109 0041;	
    // (󠄉) VARIATION SELECTOR-26	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0109 0041;	
    // (󠄉) VARIATION SELECTOR-26	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_415)
{
    uint32_t const cps[2] = { 0xE010A, 0x0041 };

    // E010A 0041;	
    // (󠄊) VARIATION SELECTOR-27	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010A 0041;	
    // (󠄊) VARIATION SELECTOR-27	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_416)
{
    uint32_t const cps[2] = { 0xE010B, 0x0041 };

    // E010B 0041;	
    // (󠄋) VARIATION SELECTOR-28	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010B 0041;	
    // (󠄋) VARIATION SELECTOR-28	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_417)
{
    uint32_t const cps[2] = { 0xE010C, 0x0041 };

    // E010C 0041;	
    // (󠄌) VARIATION SELECTOR-29	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010C 0041;	
    // (󠄌) VARIATION SELECTOR-29	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_418)
{
    uint32_t const cps[2] = { 0xE010D, 0x0041 };

    // E010D 0041;	
    // (󠄍) VARIATION SELECTOR-30	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010D 0041;	
    // (󠄍) VARIATION SELECTOR-30	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_419)
{
    uint32_t const cps[2] = { 0xE010E, 0x0041 };

    // E010E 0041;	
    // (󠄎) VARIATION SELECTOR-31	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010E 0041;	
    // (󠄎) VARIATION SELECTOR-31	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_420)
{
    uint32_t const cps[2] = { 0xE010F, 0x0041 };

    // E010F 0041;	
    // (󠄏) VARIATION SELECTOR-32	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010F 0041;	
    // (󠄏) VARIATION SELECTOR-32	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_421)
{
    uint32_t const cps[2] = { 0xE0110, 0x0041 };

    // E0110 0041;	
    // (󠄐) VARIATION SELECTOR-33	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0110 0041;	
    // (󠄐) VARIATION SELECTOR-33	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_422)
{
    uint32_t const cps[2] = { 0xE0111, 0x0041 };

    // E0111 0041;	
    // (󠄑) VARIATION SELECTOR-34	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0111 0041;	
    // (󠄑) VARIATION SELECTOR-34	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_423)
{
    uint32_t const cps[2] = { 0xE0112, 0x0041 };

    // E0112 0041;	
    // (󠄒) VARIATION SELECTOR-35	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0112 0041;	
    // (󠄒) VARIATION SELECTOR-35	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_424)
{
    uint32_t const cps[2] = { 0xE0113, 0x0041 };

    // E0113 0041;	
    // (󠄓) VARIATION SELECTOR-36	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0113 0041;	
    // (󠄓) VARIATION SELECTOR-36	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_425)
{
    uint32_t const cps[2] = { 0xE0114, 0x0041 };

    // E0114 0041;	
    // (󠄔) VARIATION SELECTOR-37	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0114 0041;	
    // (󠄔) VARIATION SELECTOR-37	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_426)
{
    uint32_t const cps[2] = { 0xE0115, 0x0041 };

    // E0115 0041;	
    // (󠄕) VARIATION SELECTOR-38	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0115 0041;	
    // (󠄕) VARIATION SELECTOR-38	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_427)
{
    uint32_t const cps[2] = { 0xE0116, 0x0041 };

    // E0116 0041;	
    // (󠄖) VARIATION SELECTOR-39	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0116 0041;	
    // (󠄖) VARIATION SELECTOR-39	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_428)
{
    uint32_t const cps[2] = { 0xE0117, 0x0041 };

    // E0117 0041;	
    // (󠄗) VARIATION SELECTOR-40	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0117 0041;	
    // (󠄗) VARIATION SELECTOR-40	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_429)
{
    uint32_t const cps[2] = { 0xE0118, 0x0041 };

    // E0118 0041;	
    // (󠄘) VARIATION SELECTOR-41	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0118 0041;	
    // (󠄘) VARIATION SELECTOR-41	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_430)
{
    uint32_t const cps[2] = { 0xE0119, 0x0041 };

    // E0119 0041;	
    // (󠄙) VARIATION SELECTOR-42	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0119 0041;	
    // (󠄙) VARIATION SELECTOR-42	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_431)
{
    uint32_t const cps[2] = { 0xE011A, 0x0041 };

    // E011A 0041;	
    // (󠄚) VARIATION SELECTOR-43	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011A 0041;	
    // (󠄚) VARIATION SELECTOR-43	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_432)
{
    uint32_t const cps[2] = { 0xE011B, 0x0041 };

    // E011B 0041;	
    // (󠄛) VARIATION SELECTOR-44	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011B 0041;	
    // (󠄛) VARIATION SELECTOR-44	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_433)
{
    uint32_t const cps[2] = { 0xE011C, 0x0041 };

    // E011C 0041;	
    // (󠄜) VARIATION SELECTOR-45	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011C 0041;	
    // (󠄜) VARIATION SELECTOR-45	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_434)
{
    uint32_t const cps[2] = { 0xE011D, 0x0041 };

    // E011D 0041;	
    // (󠄝) VARIATION SELECTOR-46	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011D 0041;	
    // (󠄝) VARIATION SELECTOR-46	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_435)
{
    uint32_t const cps[2] = { 0xE011E, 0x0041 };

    // E011E 0041;	
    // (󠄞) VARIATION SELECTOR-47	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011E 0041;	
    // (󠄞) VARIATION SELECTOR-47	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_436)
{
    uint32_t const cps[2] = { 0xE011F, 0x0041 };

    // E011F 0041;	
    // (󠄟) VARIATION SELECTOR-48	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011F 0041;	
    // (󠄟) VARIATION SELECTOR-48	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_437)
{
    uint32_t const cps[2] = { 0xE0120, 0x0041 };

    // E0120 0041;	
    // (󠄠) VARIATION SELECTOR-49	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0120 0041;	
    // (󠄠) VARIATION SELECTOR-49	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_438)
{
    uint32_t const cps[2] = { 0xE0121, 0x0041 };

    // E0121 0041;	
    // (󠄡) VARIATION SELECTOR-50	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0121 0041;	
    // (󠄡) VARIATION SELECTOR-50	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_439)
{
    uint32_t const cps[2] = { 0xE0122, 0x0041 };

    // E0122 0041;	
    // (󠄢) VARIATION SELECTOR-51	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0122 0041;	
    // (󠄢) VARIATION SELECTOR-51	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_440)
{
    uint32_t const cps[2] = { 0xE0123, 0x0041 };

    // E0123 0041;	
    // (󠄣) VARIATION SELECTOR-52	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0123 0041;	
    // (󠄣) VARIATION SELECTOR-52	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_441)
{
    uint32_t const cps[2] = { 0xE0124, 0x0041 };

    // E0124 0041;	
    // (󠄤) VARIATION SELECTOR-53	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0124 0041;	
    // (󠄤) VARIATION SELECTOR-53	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_442)
{
    uint32_t const cps[2] = { 0xE0125, 0x0041 };

    // E0125 0041;	
    // (󠄥) VARIATION SELECTOR-54	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0125 0041;	
    // (󠄥) VARIATION SELECTOR-54	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_443)
{
    uint32_t const cps[2] = { 0xE0126, 0x0041 };

    // E0126 0041;	
    // (󠄦) VARIATION SELECTOR-55	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0126 0041;	
    // (󠄦) VARIATION SELECTOR-55	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_444)
{
    uint32_t const cps[2] = { 0xE0127, 0x0041 };

    // E0127 0041;	
    // (󠄧) VARIATION SELECTOR-56	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0127 0041;	
    // (󠄧) VARIATION SELECTOR-56	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_445)
{
    uint32_t const cps[2] = { 0xE0128, 0x0041 };

    // E0128 0041;	
    // (󠄨) VARIATION SELECTOR-57	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0128 0041;	
    // (󠄨) VARIATION SELECTOR-57	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_446)
{
    uint32_t const cps[2] = { 0xE0129, 0x0041 };

    // E0129 0041;	
    // (󠄩) VARIATION SELECTOR-58	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0129 0041;	
    // (󠄩) VARIATION SELECTOR-58	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_447)
{
    uint32_t const cps[2] = { 0xE012A, 0x0041 };

    // E012A 0041;	
    // (󠄪) VARIATION SELECTOR-59	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012A 0041;	
    // (󠄪) VARIATION SELECTOR-59	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_448)
{
    uint32_t const cps[2] = { 0xE012B, 0x0041 };

    // E012B 0041;	
    // (󠄫) VARIATION SELECTOR-60	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012B 0041;	
    // (󠄫) VARIATION SELECTOR-60	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_449)
{
    uint32_t const cps[2] = { 0xE012C, 0x0041 };

    // E012C 0041;	
    // (󠄬) VARIATION SELECTOR-61	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012C 0041;	
    // (󠄬) VARIATION SELECTOR-61	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_450)
{
    uint32_t const cps[2] = { 0xE012D, 0x0041 };

    // E012D 0041;	
    // (󠄭) VARIATION SELECTOR-62	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012D 0041;	
    // (󠄭) VARIATION SELECTOR-62	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_451)
{
    uint32_t const cps[2] = { 0xE012E, 0x0041 };

    // E012E 0041;	
    // (󠄮) VARIATION SELECTOR-63	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012E 0041;	
    // (󠄮) VARIATION SELECTOR-63	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_452)
{
    uint32_t const cps[2] = { 0xE012F, 0x0041 };

    // E012F 0041;	
    // (󠄯) VARIATION SELECTOR-64	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012F 0041;	
    // (󠄯) VARIATION SELECTOR-64	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_453)
{
    uint32_t const cps[2] = { 0xE0130, 0x0041 };

    // E0130 0041;	
    // (󠄰) VARIATION SELECTOR-65	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0130 0041;	
    // (󠄰) VARIATION SELECTOR-65	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_454)
{
    uint32_t const cps[2] = { 0xE0131, 0x0041 };

    // E0131 0041;	
    // (󠄱) VARIATION SELECTOR-66	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0131 0041;	
    // (󠄱) VARIATION SELECTOR-66	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_455)
{
    uint32_t const cps[2] = { 0xE0132, 0x0041 };

    // E0132 0041;	
    // (󠄲) VARIATION SELECTOR-67	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0132 0041;	
    // (󠄲) VARIATION SELECTOR-67	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_456)
{
    uint32_t const cps[2] = { 0xE0133, 0x0041 };

    // E0133 0041;	
    // (󠄳) VARIATION SELECTOR-68	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0133 0041;	
    // (󠄳) VARIATION SELECTOR-68	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_457)
{
    uint32_t const cps[2] = { 0xE0134, 0x0041 };

    // E0134 0041;	
    // (󠄴) VARIATION SELECTOR-69	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0134 0041;	
    // (󠄴) VARIATION SELECTOR-69	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_458)
{
    uint32_t const cps[2] = { 0xE0135, 0x0041 };

    // E0135 0041;	
    // (󠄵) VARIATION SELECTOR-70	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0135 0041;	
    // (󠄵) VARIATION SELECTOR-70	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_459)
{
    uint32_t const cps[2] = { 0xE0136, 0x0041 };

    // E0136 0041;	
    // (󠄶) VARIATION SELECTOR-71	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0136 0041;	
    // (󠄶) VARIATION SELECTOR-71	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_460)
{
    uint32_t const cps[2] = { 0xE0137, 0x0041 };

    // E0137 0041;	
    // (󠄷) VARIATION SELECTOR-72	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0137 0041;	
    // (󠄷) VARIATION SELECTOR-72	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_461)
{
    uint32_t const cps[2] = { 0xE0138, 0x0041 };

    // E0138 0041;	
    // (󠄸) VARIATION SELECTOR-73	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0138 0041;	
    // (󠄸) VARIATION SELECTOR-73	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_462)
{
    uint32_t const cps[2] = { 0xE0139, 0x0041 };

    // E0139 0041;	
    // (󠄹) VARIATION SELECTOR-74	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0139 0041;	
    // (󠄹) VARIATION SELECTOR-74	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_463)
{
    uint32_t const cps[2] = { 0xE013A, 0x0041 };

    // E013A 0041;	
    // (󠄺) VARIATION SELECTOR-75	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013A 0041;	
    // (󠄺) VARIATION SELECTOR-75	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_464)
{
    uint32_t const cps[2] = { 0xE013B, 0x0041 };

    // E013B 0041;	
    // (󠄻) VARIATION SELECTOR-76	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013B 0041;	
    // (󠄻) VARIATION SELECTOR-76	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_465)
{
    uint32_t const cps[2] = { 0xE013C, 0x0041 };

    // E013C 0041;	
    // (󠄼) VARIATION SELECTOR-77	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013C 0041;	
    // (󠄼) VARIATION SELECTOR-77	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_466)
{
    uint32_t const cps[2] = { 0xE013D, 0x0041 };

    // E013D 0041;	
    // (󠄽) VARIATION SELECTOR-78	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013D 0041;	
    // (󠄽) VARIATION SELECTOR-78	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_467)
{
    uint32_t const cps[2] = { 0xE013E, 0x0041 };

    // E013E 0041;	
    // (󠄾) VARIATION SELECTOR-79	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013E 0041;	
    // (󠄾) VARIATION SELECTOR-79	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_468)
{
    uint32_t const cps[2] = { 0xE013F, 0x0041 };

    // E013F 0041;	
    // (󠄿) VARIATION SELECTOR-80	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013F 0041;	
    // (󠄿) VARIATION SELECTOR-80	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_469)
{
    uint32_t const cps[2] = { 0xE0140, 0x0041 };

    // E0140 0041;	
    // (󠅀) VARIATION SELECTOR-81	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0140 0041;	
    // (󠅀) VARIATION SELECTOR-81	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_470)
{
    uint32_t const cps[2] = { 0xE0141, 0x0041 };

    // E0141 0041;	
    // (󠅁) VARIATION SELECTOR-82	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0141 0041;	
    // (󠅁) VARIATION SELECTOR-82	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_471)
{
    uint32_t const cps[2] = { 0xE0142, 0x0041 };

    // E0142 0041;	
    // (󠅂) VARIATION SELECTOR-83	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0142 0041;	
    // (󠅂) VARIATION SELECTOR-83	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_472)
{
    uint32_t const cps[2] = { 0xE0143, 0x0041 };

    // E0143 0041;	
    // (󠅃) VARIATION SELECTOR-84	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0143 0041;	
    // (󠅃) VARIATION SELECTOR-84	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_473)
{
    uint32_t const cps[2] = { 0xE0144, 0x0041 };

    // E0144 0041;	
    // (󠅄) VARIATION SELECTOR-85	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0144 0041;	
    // (󠅄) VARIATION SELECTOR-85	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_474)
{
    uint32_t const cps[2] = { 0xE0145, 0x0041 };

    // E0145 0041;	
    // (󠅅) VARIATION SELECTOR-86	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0145 0041;	
    // (󠅅) VARIATION SELECTOR-86	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_475)
{
    uint32_t const cps[2] = { 0xE0146, 0x0041 };

    // E0146 0041;	
    // (󠅆) VARIATION SELECTOR-87	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0146 0041;	
    // (󠅆) VARIATION SELECTOR-87	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_476)
{
    uint32_t const cps[2] = { 0xE0147, 0x0041 };

    // E0147 0041;	
    // (󠅇) VARIATION SELECTOR-88	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0147 0041;	
    // (󠅇) VARIATION SELECTOR-88	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_477)
{
    uint32_t const cps[2] = { 0xE0148, 0x0041 };

    // E0148 0041;	
    // (󠅈) VARIATION SELECTOR-89	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0148 0041;	
    // (󠅈) VARIATION SELECTOR-89	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_478)
{
    uint32_t const cps[2] = { 0xE0149, 0x0041 };

    // E0149 0041;	
    // (󠅉) VARIATION SELECTOR-90	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0149 0041;	
    // (󠅉) VARIATION SELECTOR-90	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_479)
{
    uint32_t const cps[2] = { 0xE014A, 0x0041 };

    // E014A 0041;	
    // (󠅊) VARIATION SELECTOR-91	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014A 0041;	
    // (󠅊) VARIATION SELECTOR-91	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_480)
{
    uint32_t const cps[2] = { 0xE014B, 0x0041 };

    // E014B 0041;	
    // (󠅋) VARIATION SELECTOR-92	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014B 0041;	
    // (󠅋) VARIATION SELECTOR-92	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_481)
{
    uint32_t const cps[2] = { 0xE014C, 0x0041 };

    // E014C 0041;	
    // (󠅌) VARIATION SELECTOR-93	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014C 0041;	
    // (󠅌) VARIATION SELECTOR-93	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_482)
{
    uint32_t const cps[2] = { 0xE014D, 0x0041 };

    // E014D 0041;	
    // (󠅍) VARIATION SELECTOR-94	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014D 0041;	
    // (󠅍) VARIATION SELECTOR-94	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_483)
{
    uint32_t const cps[2] = { 0xE014E, 0x0041 };

    // E014E 0041;	
    // (󠅎) VARIATION SELECTOR-95	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014E 0041;	
    // (󠅎) VARIATION SELECTOR-95	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_484)
{
    uint32_t const cps[2] = { 0xE014F, 0x0041 };

    // E014F 0041;	
    // (󠅏) VARIATION SELECTOR-96	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014F 0041;	
    // (󠅏) VARIATION SELECTOR-96	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_485)
{
    uint32_t const cps[2] = { 0xE0150, 0x0041 };

    // E0150 0041;	
    // (󠅐) VARIATION SELECTOR-97	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0150 0041;	
    // (󠅐) VARIATION SELECTOR-97	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_486)
{
    uint32_t const cps[2] = { 0xE0151, 0x0041 };

    // E0151 0041;	
    // (󠅑) VARIATION SELECTOR-98	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0151 0041;	
    // (󠅑) VARIATION SELECTOR-98	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_487)
{
    uint32_t const cps[2] = { 0xE0152, 0x0041 };

    // E0152 0041;	
    // (󠅒) VARIATION SELECTOR-99	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0152 0041;	
    // (󠅒) VARIATION SELECTOR-99	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_488)
{
    uint32_t const cps[2] = { 0xE0153, 0x0041 };

    // E0153 0041;	
    // (󠅓) VARIATION SELECTOR-100	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0153 0041;	
    // (󠅓) VARIATION SELECTOR-100	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_489)
{
    uint32_t const cps[2] = { 0xE0154, 0x0041 };

    // E0154 0041;	
    // (󠅔) VARIATION SELECTOR-101	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0154 0041;	
    // (󠅔) VARIATION SELECTOR-101	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_490)
{
    uint32_t const cps[2] = { 0xE0155, 0x0041 };

    // E0155 0041;	
    // (󠅕) VARIATION SELECTOR-102	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0155 0041;	
    // (󠅕) VARIATION SELECTOR-102	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_491)
{
    uint32_t const cps[2] = { 0xE0156, 0x0041 };

    // E0156 0041;	
    // (󠅖) VARIATION SELECTOR-103	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0156 0041;	
    // (󠅖) VARIATION SELECTOR-103	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_492)
{
    uint32_t const cps[2] = { 0xE0157, 0x0041 };

    // E0157 0041;	
    // (󠅗) VARIATION SELECTOR-104	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0157 0041;	
    // (󠅗) VARIATION SELECTOR-104	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_493)
{
    uint32_t const cps[2] = { 0xE0158, 0x0041 };

    // E0158 0041;	
    // (󠅘) VARIATION SELECTOR-105	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0158 0041;	
    // (󠅘) VARIATION SELECTOR-105	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_494)
{
    uint32_t const cps[2] = { 0xE0159, 0x0041 };

    // E0159 0041;	
    // (󠅙) VARIATION SELECTOR-106	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0159 0041;	
    // (󠅙) VARIATION SELECTOR-106	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_495)
{
    uint32_t const cps[2] = { 0xE015A, 0x0041 };

    // E015A 0041;	
    // (󠅚) VARIATION SELECTOR-107	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015A 0041;	
    // (󠅚) VARIATION SELECTOR-107	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_496)
{
    uint32_t const cps[2] = { 0xE015B, 0x0041 };

    // E015B 0041;	
    // (󠅛) VARIATION SELECTOR-108	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015B 0041;	
    // (󠅛) VARIATION SELECTOR-108	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_497)
{
    uint32_t const cps[2] = { 0xE015C, 0x0041 };

    // E015C 0041;	
    // (󠅜) VARIATION SELECTOR-109	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015C 0041;	
    // (󠅜) VARIATION SELECTOR-109	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_498)
{
    uint32_t const cps[2] = { 0xE015D, 0x0041 };

    // E015D 0041;	
    // (󠅝) VARIATION SELECTOR-110	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015D 0041;	
    // (󠅝) VARIATION SELECTOR-110	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_094_499)
{
    uint32_t const cps[2] = { 0xE015E, 0x0041 };

    // E015E 0041;	
    // (󠅞) VARIATION SELECTOR-111	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015E 0041;	
    // (󠅞) VARIATION SELECTOR-111	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

