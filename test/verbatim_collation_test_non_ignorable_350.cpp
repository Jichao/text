// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_350_000)
{
    // 3CFE 003F;	
    // (㳾) CJK UNIFIED IDEOGRAPH-3CFE	[FB80 BCFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_001)
{
    // 3CFE 0061;	
    // (㳾) CJK UNIFIED IDEOGRAPH-3CFE	[FB80 BCFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_002)
{
    // 3CFE 0041;	
    // (㳾) CJK UNIFIED IDEOGRAPH-3CFE	[FB80 BCFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_003)
{
    // 3CFE 0062;	
    // (㳾) CJK UNIFIED IDEOGRAPH-3CFE	[FB80 BCFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_004)
{
    // 3CFF 0021;	
    // (㳿) CJK UNIFIED IDEOGRAPH-3CFF	[FB80 BCFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_005)
{
    // 3CFF 003F;	
    // (㳿) CJK UNIFIED IDEOGRAPH-3CFF	[FB80 BCFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBCFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_006)
{
    // 3CFF 0061;	
    // (㳿) CJK UNIFIED IDEOGRAPH-3CFF	[FB80 BCFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_007)
{
    // 3CFF 0041;	
    // (㳿) CJK UNIFIED IDEOGRAPH-3CFF	[FB80 BCFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3CFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_008)
{
    // 3CFF 0062;	
    // (㳿) CJK UNIFIED IDEOGRAPH-3CFF	[FB80 BCFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3CFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBCFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_009)
{
    // 3D00 0021;	
    // (㴀) CJK UNIFIED IDEOGRAPH-3D00	[FB80 BD00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_010)
{
    // 3D00 003F;	
    // (㴀) CJK UNIFIED IDEOGRAPH-3D00	[FB80 BD00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_011)
{
    // 3D00 0061;	
    // (㴀) CJK UNIFIED IDEOGRAPH-3D00	[FB80 BD00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_012)
{
    // 3D00 0041;	
    // (㴀) CJK UNIFIED IDEOGRAPH-3D00	[FB80 BD00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_013)
{
    // 3D00 0062;	
    // (㴀) CJK UNIFIED IDEOGRAPH-3D00	[FB80 BD00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_014)
{
    // 3D01 0021;	
    // (㴁) CJK UNIFIED IDEOGRAPH-3D01	[FB80 BD01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_015)
{
    // 3D01 003F;	
    // (㴁) CJK UNIFIED IDEOGRAPH-3D01	[FB80 BD01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_016)
{
    // 3D01 0061;	
    // (㴁) CJK UNIFIED IDEOGRAPH-3D01	[FB80 BD01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_017)
{
    // 3D01 0041;	
    // (㴁) CJK UNIFIED IDEOGRAPH-3D01	[FB80 BD01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_018)
{
    // 3D01 0062;	
    // (㴁) CJK UNIFIED IDEOGRAPH-3D01	[FB80 BD01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_019)
{
    // 3D02 0021;	
    // (㴂) CJK UNIFIED IDEOGRAPH-3D02	[FB80 BD02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_020)
{
    // 3D02 003F;	
    // (㴂) CJK UNIFIED IDEOGRAPH-3D02	[FB80 BD02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_021)
{
    // 3D02 0061;	
    // (㴂) CJK UNIFIED IDEOGRAPH-3D02	[FB80 BD02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_022)
{
    // 3D02 0041;	
    // (㴂) CJK UNIFIED IDEOGRAPH-3D02	[FB80 BD02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_023)
{
    // 3D02 0062;	
    // (㴂) CJK UNIFIED IDEOGRAPH-3D02	[FB80 BD02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_024)
{
    // 3D03 0021;	
    // (㴃) CJK UNIFIED IDEOGRAPH-3D03	[FB80 BD03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_025)
{
    // 3D03 003F;	
    // (㴃) CJK UNIFIED IDEOGRAPH-3D03	[FB80 BD03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_026)
{
    // 3D03 0061;	
    // (㴃) CJK UNIFIED IDEOGRAPH-3D03	[FB80 BD03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_027)
{
    // 3D03 0041;	
    // (㴃) CJK UNIFIED IDEOGRAPH-3D03	[FB80 BD03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_028)
{
    // 3D03 0062;	
    // (㴃) CJK UNIFIED IDEOGRAPH-3D03	[FB80 BD03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_029)
{
    // 3D04 0021;	
    // (㴄) CJK UNIFIED IDEOGRAPH-3D04	[FB80 BD04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_030)
{
    // 3D04 003F;	
    // (㴄) CJK UNIFIED IDEOGRAPH-3D04	[FB80 BD04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_031)
{
    // 3D04 0061;	
    // (㴄) CJK UNIFIED IDEOGRAPH-3D04	[FB80 BD04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_032)
{
    // 3D04 0041;	
    // (㴄) CJK UNIFIED IDEOGRAPH-3D04	[FB80 BD04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_033)
{
    // 3D04 0062;	
    // (㴄) CJK UNIFIED IDEOGRAPH-3D04	[FB80 BD04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_034)
{
    // 3D05 0021;	
    // (㴅) CJK UNIFIED IDEOGRAPH-3D05	[FB80 BD05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_035)
{
    // 3D05 003F;	
    // (㴅) CJK UNIFIED IDEOGRAPH-3D05	[FB80 BD05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_036)
{
    // 3D05 0061;	
    // (㴅) CJK UNIFIED IDEOGRAPH-3D05	[FB80 BD05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_037)
{
    // 3D05 0041;	
    // (㴅) CJK UNIFIED IDEOGRAPH-3D05	[FB80 BD05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_038)
{
    // 3D05 0062;	
    // (㴅) CJK UNIFIED IDEOGRAPH-3D05	[FB80 BD05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_039)
{
    // 3D06 0021;	
    // (㴆) CJK UNIFIED IDEOGRAPH-3D06	[FB80 BD06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_040)
{
    // 3D06 003F;	
    // (㴆) CJK UNIFIED IDEOGRAPH-3D06	[FB80 BD06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_041)
{
    // 3D06 0061;	
    // (㴆) CJK UNIFIED IDEOGRAPH-3D06	[FB80 BD06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_042)
{
    // 3D06 0041;	
    // (㴆) CJK UNIFIED IDEOGRAPH-3D06	[FB80 BD06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_043)
{
    // 3D06 0062;	
    // (㴆) CJK UNIFIED IDEOGRAPH-3D06	[FB80 BD06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_044)
{
    // 3D07 0021;	
    // (㴇) CJK UNIFIED IDEOGRAPH-3D07	[FB80 BD07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_045)
{
    // 3D07 003F;	
    // (㴇) CJK UNIFIED IDEOGRAPH-3D07	[FB80 BD07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_046)
{
    // 3D07 0061;	
    // (㴇) CJK UNIFIED IDEOGRAPH-3D07	[FB80 BD07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_047)
{
    // 3D07 0041;	
    // (㴇) CJK UNIFIED IDEOGRAPH-3D07	[FB80 BD07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_048)
{
    // 3D07 0062;	
    // (㴇) CJK UNIFIED IDEOGRAPH-3D07	[FB80 BD07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_049)
{
    // 3D08 0021;	
    // (㴈) CJK UNIFIED IDEOGRAPH-3D08	[FB80 BD08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_050)
{
    // 3D08 003F;	
    // (㴈) CJK UNIFIED IDEOGRAPH-3D08	[FB80 BD08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_051)
{
    // 3D08 0061;	
    // (㴈) CJK UNIFIED IDEOGRAPH-3D08	[FB80 BD08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_052)
{
    // 3D08 0041;	
    // (㴈) CJK UNIFIED IDEOGRAPH-3D08	[FB80 BD08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_053)
{
    // 3D08 0062;	
    // (㴈) CJK UNIFIED IDEOGRAPH-3D08	[FB80 BD08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_054)
{
    // 3D09 0021;	
    // (㴉) CJK UNIFIED IDEOGRAPH-3D09	[FB80 BD09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_055)
{
    // 3D09 003F;	
    // (㴉) CJK UNIFIED IDEOGRAPH-3D09	[FB80 BD09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_056)
{
    // 3D09 0061;	
    // (㴉) CJK UNIFIED IDEOGRAPH-3D09	[FB80 BD09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_057)
{
    // 3D09 0041;	
    // (㴉) CJK UNIFIED IDEOGRAPH-3D09	[FB80 BD09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_058)
{
    // 3D09 0062;	
    // (㴉) CJK UNIFIED IDEOGRAPH-3D09	[FB80 BD09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_059)
{
    // 3D0A 0021;	
    // (㴊) CJK UNIFIED IDEOGRAPH-3D0A	[FB80 BD0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_060)
{
    // 3D0A 003F;	
    // (㴊) CJK UNIFIED IDEOGRAPH-3D0A	[FB80 BD0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_061)
{
    // 3D0A 0061;	
    // (㴊) CJK UNIFIED IDEOGRAPH-3D0A	[FB80 BD0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_062)
{
    // 3D0A 0041;	
    // (㴊) CJK UNIFIED IDEOGRAPH-3D0A	[FB80 BD0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_063)
{
    // 3D0A 0062;	
    // (㴊) CJK UNIFIED IDEOGRAPH-3D0A	[FB80 BD0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_064)
{
    // 3D0B 0021;	
    // (㴋) CJK UNIFIED IDEOGRAPH-3D0B	[FB80 BD0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_065)
{
    // 3D0B 003F;	
    // (㴋) CJK UNIFIED IDEOGRAPH-3D0B	[FB80 BD0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_066)
{
    // 3D0B 0061;	
    // (㴋) CJK UNIFIED IDEOGRAPH-3D0B	[FB80 BD0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_067)
{
    // 3D0B 0041;	
    // (㴋) CJK UNIFIED IDEOGRAPH-3D0B	[FB80 BD0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_068)
{
    // 3D0B 0062;	
    // (㴋) CJK UNIFIED IDEOGRAPH-3D0B	[FB80 BD0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_069)
{
    // 3D0C 0021;	
    // (㴌) CJK UNIFIED IDEOGRAPH-3D0C	[FB80 BD0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_070)
{
    // 3D0C 003F;	
    // (㴌) CJK UNIFIED IDEOGRAPH-3D0C	[FB80 BD0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_071)
{
    // 3D0C 0061;	
    // (㴌) CJK UNIFIED IDEOGRAPH-3D0C	[FB80 BD0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_072)
{
    // 3D0C 0041;	
    // (㴌) CJK UNIFIED IDEOGRAPH-3D0C	[FB80 BD0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_073)
{
    // 3D0C 0062;	
    // (㴌) CJK UNIFIED IDEOGRAPH-3D0C	[FB80 BD0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_074)
{
    // 3D0D 0021;	
    // (㴍) CJK UNIFIED IDEOGRAPH-3D0D	[FB80 BD0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_075)
{
    // 3D0D 003F;	
    // (㴍) CJK UNIFIED IDEOGRAPH-3D0D	[FB80 BD0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_076)
{
    // 3D0D 0061;	
    // (㴍) CJK UNIFIED IDEOGRAPH-3D0D	[FB80 BD0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_077)
{
    // 3D0D 0041;	
    // (㴍) CJK UNIFIED IDEOGRAPH-3D0D	[FB80 BD0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_078)
{
    // 3D0D 0062;	
    // (㴍) CJK UNIFIED IDEOGRAPH-3D0D	[FB80 BD0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_079)
{
    // 3D0E 0021;	
    // (㴎) CJK UNIFIED IDEOGRAPH-3D0E	[FB80 BD0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_080)
{
    // 3D0E 003F;	
    // (㴎) CJK UNIFIED IDEOGRAPH-3D0E	[FB80 BD0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_081)
{
    // 3D0E 0061;	
    // (㴎) CJK UNIFIED IDEOGRAPH-3D0E	[FB80 BD0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_082)
{
    // 3D0E 0041;	
    // (㴎) CJK UNIFIED IDEOGRAPH-3D0E	[FB80 BD0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_083)
{
    // 3D0E 0062;	
    // (㴎) CJK UNIFIED IDEOGRAPH-3D0E	[FB80 BD0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_084)
{
    // 3D0F 0021;	
    // (㴏) CJK UNIFIED IDEOGRAPH-3D0F	[FB80 BD0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_085)
{
    // 3D0F 003F;	
    // (㴏) CJK UNIFIED IDEOGRAPH-3D0F	[FB80 BD0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_086)
{
    // 3D0F 0061;	
    // (㴏) CJK UNIFIED IDEOGRAPH-3D0F	[FB80 BD0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_087)
{
    // 3D0F 0041;	
    // (㴏) CJK UNIFIED IDEOGRAPH-3D0F	[FB80 BD0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_088)
{
    // 3D0F 0062;	
    // (㴏) CJK UNIFIED IDEOGRAPH-3D0F	[FB80 BD0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_089)
{
    // 3D10 0021;	
    // (㴐) CJK UNIFIED IDEOGRAPH-3D10	[FB80 BD10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_090)
{
    // 3D10 003F;	
    // (㴐) CJK UNIFIED IDEOGRAPH-3D10	[FB80 BD10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_091)
{
    // 3D10 0061;	
    // (㴐) CJK UNIFIED IDEOGRAPH-3D10	[FB80 BD10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_092)
{
    // 3D10 0041;	
    // (㴐) CJK UNIFIED IDEOGRAPH-3D10	[FB80 BD10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_093)
{
    // 3D10 0062;	
    // (㴐) CJK UNIFIED IDEOGRAPH-3D10	[FB80 BD10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_094)
{
    // 3D11 0021;	
    // (㴑) CJK UNIFIED IDEOGRAPH-3D11	[FB80 BD11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_095)
{
    // 3D11 003F;	
    // (㴑) CJK UNIFIED IDEOGRAPH-3D11	[FB80 BD11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_096)
{
    // 3D11 0061;	
    // (㴑) CJK UNIFIED IDEOGRAPH-3D11	[FB80 BD11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_097)
{
    // 3D11 0041;	
    // (㴑) CJK UNIFIED IDEOGRAPH-3D11	[FB80 BD11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_098)
{
    // 3D11 0062;	
    // (㴑) CJK UNIFIED IDEOGRAPH-3D11	[FB80 BD11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_099)
{
    // 3D12 0021;	
    // (㴒) CJK UNIFIED IDEOGRAPH-3D12	[FB80 BD12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_100)
{
    // 3D12 003F;	
    // (㴒) CJK UNIFIED IDEOGRAPH-3D12	[FB80 BD12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_101)
{
    // 3D12 0061;	
    // (㴒) CJK UNIFIED IDEOGRAPH-3D12	[FB80 BD12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_102)
{
    // 3D12 0041;	
    // (㴒) CJK UNIFIED IDEOGRAPH-3D12	[FB80 BD12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_103)
{
    // 3D12 0062;	
    // (㴒) CJK UNIFIED IDEOGRAPH-3D12	[FB80 BD12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_104)
{
    // 3D13 0021;	
    // (㴓) CJK UNIFIED IDEOGRAPH-3D13	[FB80 BD13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_105)
{
    // 3D13 003F;	
    // (㴓) CJK UNIFIED IDEOGRAPH-3D13	[FB80 BD13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_106)
{
    // 3D13 0061;	
    // (㴓) CJK UNIFIED IDEOGRAPH-3D13	[FB80 BD13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_107)
{
    // 3D13 0041;	
    // (㴓) CJK UNIFIED IDEOGRAPH-3D13	[FB80 BD13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_108)
{
    // 3D13 0062;	
    // (㴓) CJK UNIFIED IDEOGRAPH-3D13	[FB80 BD13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_109)
{
    // 3D14 0021;	
    // (㴔) CJK UNIFIED IDEOGRAPH-3D14	[FB80 BD14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_110)
{
    // 3D14 003F;	
    // (㴔) CJK UNIFIED IDEOGRAPH-3D14	[FB80 BD14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_111)
{
    // 3D14 0061;	
    // (㴔) CJK UNIFIED IDEOGRAPH-3D14	[FB80 BD14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_112)
{
    // 3D14 0041;	
    // (㴔) CJK UNIFIED IDEOGRAPH-3D14	[FB80 BD14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_113)
{
    // 3D14 0062;	
    // (㴔) CJK UNIFIED IDEOGRAPH-3D14	[FB80 BD14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_114)
{
    // 3D15 0021;	
    // (㴕) CJK UNIFIED IDEOGRAPH-3D15	[FB80 BD15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_115)
{
    // 3D15 003F;	
    // (㴕) CJK UNIFIED IDEOGRAPH-3D15	[FB80 BD15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_116)
{
    // 3D15 0061;	
    // (㴕) CJK UNIFIED IDEOGRAPH-3D15	[FB80 BD15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_117)
{
    // 3D15 0041;	
    // (㴕) CJK UNIFIED IDEOGRAPH-3D15	[FB80 BD15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_118)
{
    // 3D15 0062;	
    // (㴕) CJK UNIFIED IDEOGRAPH-3D15	[FB80 BD15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_119)
{
    // 3D16 0021;	
    // (㴖) CJK UNIFIED IDEOGRAPH-3D16	[FB80 BD16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_120)
{
    // 3D16 003F;	
    // (㴖) CJK UNIFIED IDEOGRAPH-3D16	[FB80 BD16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_121)
{
    // 3D16 0061;	
    // (㴖) CJK UNIFIED IDEOGRAPH-3D16	[FB80 BD16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_122)
{
    // 3D16 0041;	
    // (㴖) CJK UNIFIED IDEOGRAPH-3D16	[FB80 BD16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_123)
{
    // 3D16 0062;	
    // (㴖) CJK UNIFIED IDEOGRAPH-3D16	[FB80 BD16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_124)
{
    // 3D17 0021;	
    // (㴗) CJK UNIFIED IDEOGRAPH-3D17	[FB80 BD17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_125)
{
    // 3D17 003F;	
    // (㴗) CJK UNIFIED IDEOGRAPH-3D17	[FB80 BD17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_126)
{
    // 3D17 0061;	
    // (㴗) CJK UNIFIED IDEOGRAPH-3D17	[FB80 BD17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_127)
{
    // 3D17 0041;	
    // (㴗) CJK UNIFIED IDEOGRAPH-3D17	[FB80 BD17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_128)
{
    // 3D17 0062;	
    // (㴗) CJK UNIFIED IDEOGRAPH-3D17	[FB80 BD17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_129)
{
    // 3D18 0021;	
    // (㴘) CJK UNIFIED IDEOGRAPH-3D18	[FB80 BD18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_130)
{
    // 3D18 003F;	
    // (㴘) CJK UNIFIED IDEOGRAPH-3D18	[FB80 BD18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_131)
{
    // 3D18 0061;	
    // (㴘) CJK UNIFIED IDEOGRAPH-3D18	[FB80 BD18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_132)
{
    // 3D18 0041;	
    // (㴘) CJK UNIFIED IDEOGRAPH-3D18	[FB80 BD18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_133)
{
    // 3D18 0062;	
    // (㴘) CJK UNIFIED IDEOGRAPH-3D18	[FB80 BD18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_134)
{
    // 3D19 0021;	
    // (㴙) CJK UNIFIED IDEOGRAPH-3D19	[FB80 BD19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_135)
{
    // 3D19 003F;	
    // (㴙) CJK UNIFIED IDEOGRAPH-3D19	[FB80 BD19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_136)
{
    // 3D19 0061;	
    // (㴙) CJK UNIFIED IDEOGRAPH-3D19	[FB80 BD19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_137)
{
    // 3D19 0041;	
    // (㴙) CJK UNIFIED IDEOGRAPH-3D19	[FB80 BD19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_138)
{
    // 3D19 0062;	
    // (㴙) CJK UNIFIED IDEOGRAPH-3D19	[FB80 BD19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_139)
{
    // 3D1A 0021;	
    // (㴚) CJK UNIFIED IDEOGRAPH-3D1A	[FB80 BD1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_140)
{
    // 3D1A 003F;	
    // (㴚) CJK UNIFIED IDEOGRAPH-3D1A	[FB80 BD1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_141)
{
    // 3D1A 0061;	
    // (㴚) CJK UNIFIED IDEOGRAPH-3D1A	[FB80 BD1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_142)
{
    // 3D1A 0041;	
    // (㴚) CJK UNIFIED IDEOGRAPH-3D1A	[FB80 BD1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_143)
{
    // 3D1A 0062;	
    // (㴚) CJK UNIFIED IDEOGRAPH-3D1A	[FB80 BD1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_144)
{
    // 3D1B 0021;	
    // (㴛) CJK UNIFIED IDEOGRAPH-3D1B	[FB80 BD1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_145)
{
    // 3D1B 003F;	
    // (㴛) CJK UNIFIED IDEOGRAPH-3D1B	[FB80 BD1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_146)
{
    // 3D1B 0061;	
    // (㴛) CJK UNIFIED IDEOGRAPH-3D1B	[FB80 BD1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_147)
{
    // 3D1B 0041;	
    // (㴛) CJK UNIFIED IDEOGRAPH-3D1B	[FB80 BD1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_148)
{
    // 3D1B 0062;	
    // (㴛) CJK UNIFIED IDEOGRAPH-3D1B	[FB80 BD1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_149)
{
    // 3D1C 0021;	
    // (㴜) CJK UNIFIED IDEOGRAPH-3D1C	[FB80 BD1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_150)
{
    // 3D1C 003F;	
    // (㴜) CJK UNIFIED IDEOGRAPH-3D1C	[FB80 BD1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_151)
{
    // 3D1C 0061;	
    // (㴜) CJK UNIFIED IDEOGRAPH-3D1C	[FB80 BD1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_152)
{
    // 3D1C 0041;	
    // (㴜) CJK UNIFIED IDEOGRAPH-3D1C	[FB80 BD1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_153)
{
    // 3D1C 0062;	
    // (㴜) CJK UNIFIED IDEOGRAPH-3D1C	[FB80 BD1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_154)
{
    // 3D1D 0021;	
    // (㴝) CJK UNIFIED IDEOGRAPH-3D1D	[FB80 BD1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_155)
{
    // 3D1D 003F;	
    // (㴝) CJK UNIFIED IDEOGRAPH-3D1D	[FB80 BD1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_156)
{
    // 3D1D 0061;	
    // (㴝) CJK UNIFIED IDEOGRAPH-3D1D	[FB80 BD1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_157)
{
    // 3D1D 0041;	
    // (㴝) CJK UNIFIED IDEOGRAPH-3D1D	[FB80 BD1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_158)
{
    // 3D1D 0062;	
    // (㴝) CJK UNIFIED IDEOGRAPH-3D1D	[FB80 BD1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_159)
{
    // 3D1E 0021;	
    // (㴞) CJK UNIFIED IDEOGRAPH-3D1E	[FB80 BD1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_160)
{
    // 3D1E 003F;	
    // (㴞) CJK UNIFIED IDEOGRAPH-3D1E	[FB80 BD1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_161)
{
    // 3D1E 0061;	
    // (㴞) CJK UNIFIED IDEOGRAPH-3D1E	[FB80 BD1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_162)
{
    // 3D1E 0041;	
    // (㴞) CJK UNIFIED IDEOGRAPH-3D1E	[FB80 BD1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_163)
{
    // 3D1E 0062;	
    // (㴞) CJK UNIFIED IDEOGRAPH-3D1E	[FB80 BD1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_164)
{
    // 3D1F 0021;	
    // (㴟) CJK UNIFIED IDEOGRAPH-3D1F	[FB80 BD1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_165)
{
    // 3D1F 003F;	
    // (㴟) CJK UNIFIED IDEOGRAPH-3D1F	[FB80 BD1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_166)
{
    // 3D1F 0061;	
    // (㴟) CJK UNIFIED IDEOGRAPH-3D1F	[FB80 BD1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_167)
{
    // 3D1F 0041;	
    // (㴟) CJK UNIFIED IDEOGRAPH-3D1F	[FB80 BD1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_168)
{
    // 3D1F 0062;	
    // (㴟) CJK UNIFIED IDEOGRAPH-3D1F	[FB80 BD1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_169)
{
    // 3D20 0021;	
    // (㴠) CJK UNIFIED IDEOGRAPH-3D20	[FB80 BD20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_170)
{
    // 3D20 003F;	
    // (㴠) CJK UNIFIED IDEOGRAPH-3D20	[FB80 BD20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_171)
{
    // 3D20 0061;	
    // (㴠) CJK UNIFIED IDEOGRAPH-3D20	[FB80 BD20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_172)
{
    // 3D20 0041;	
    // (㴠) CJK UNIFIED IDEOGRAPH-3D20	[FB80 BD20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_173)
{
    // 3D20 0062;	
    // (㴠) CJK UNIFIED IDEOGRAPH-3D20	[FB80 BD20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_174)
{
    // 3D21 0021;	
    // (㴡) CJK UNIFIED IDEOGRAPH-3D21	[FB80 BD21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_175)
{
    // 3D21 003F;	
    // (㴡) CJK UNIFIED IDEOGRAPH-3D21	[FB80 BD21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_176)
{
    // 3D21 0061;	
    // (㴡) CJK UNIFIED IDEOGRAPH-3D21	[FB80 BD21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_177)
{
    // 3D21 0041;	
    // (㴡) CJK UNIFIED IDEOGRAPH-3D21	[FB80 BD21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_178)
{
    // 3D21 0062;	
    // (㴡) CJK UNIFIED IDEOGRAPH-3D21	[FB80 BD21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_179)
{
    // 3D22 0021;	
    // (㴢) CJK UNIFIED IDEOGRAPH-3D22	[FB80 BD22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_180)
{
    // 3D22 003F;	
    // (㴢) CJK UNIFIED IDEOGRAPH-3D22	[FB80 BD22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_181)
{
    // 3D22 0061;	
    // (㴢) CJK UNIFIED IDEOGRAPH-3D22	[FB80 BD22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_182)
{
    // 3D22 0041;	
    // (㴢) CJK UNIFIED IDEOGRAPH-3D22	[FB80 BD22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_183)
{
    // 3D22 0062;	
    // (㴢) CJK UNIFIED IDEOGRAPH-3D22	[FB80 BD22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_184)
{
    // 3D23 0021;	
    // (㴣) CJK UNIFIED IDEOGRAPH-3D23	[FB80 BD23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_185)
{
    // 3D23 003F;	
    // (㴣) CJK UNIFIED IDEOGRAPH-3D23	[FB80 BD23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_186)
{
    // 3D23 0061;	
    // (㴣) CJK UNIFIED IDEOGRAPH-3D23	[FB80 BD23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_187)
{
    // 3D23 0041;	
    // (㴣) CJK UNIFIED IDEOGRAPH-3D23	[FB80 BD23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_188)
{
    // 3D23 0062;	
    // (㴣) CJK UNIFIED IDEOGRAPH-3D23	[FB80 BD23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_189)
{
    // 3D24 0021;	
    // (㴤) CJK UNIFIED IDEOGRAPH-3D24	[FB80 BD24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_190)
{
    // 3D24 003F;	
    // (㴤) CJK UNIFIED IDEOGRAPH-3D24	[FB80 BD24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_191)
{
    // 3D24 0061;	
    // (㴤) CJK UNIFIED IDEOGRAPH-3D24	[FB80 BD24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_192)
{
    // 3D24 0041;	
    // (㴤) CJK UNIFIED IDEOGRAPH-3D24	[FB80 BD24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_193)
{
    // 3D24 0062;	
    // (㴤) CJK UNIFIED IDEOGRAPH-3D24	[FB80 BD24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_194)
{
    // 3D25 0021;	
    // (㴥) CJK UNIFIED IDEOGRAPH-3D25	[FB80 BD25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_195)
{
    // 3D25 003F;	
    // (㴥) CJK UNIFIED IDEOGRAPH-3D25	[FB80 BD25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_196)
{
    // 3D25 0061;	
    // (㴥) CJK UNIFIED IDEOGRAPH-3D25	[FB80 BD25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_197)
{
    // 3D25 0041;	
    // (㴥) CJK UNIFIED IDEOGRAPH-3D25	[FB80 BD25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_198)
{
    // 3D25 0062;	
    // (㴥) CJK UNIFIED IDEOGRAPH-3D25	[FB80 BD25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_199)
{
    // 3D26 0021;	
    // (㴦) CJK UNIFIED IDEOGRAPH-3D26	[FB80 BD26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_200)
{
    // 3D26 003F;	
    // (㴦) CJK UNIFIED IDEOGRAPH-3D26	[FB80 BD26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_201)
{
    // 3D26 0061;	
    // (㴦) CJK UNIFIED IDEOGRAPH-3D26	[FB80 BD26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_202)
{
    // 3D26 0041;	
    // (㴦) CJK UNIFIED IDEOGRAPH-3D26	[FB80 BD26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_203)
{
    // 3D26 0062;	
    // (㴦) CJK UNIFIED IDEOGRAPH-3D26	[FB80 BD26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_204)
{
    // 3D27 0021;	
    // (㴧) CJK UNIFIED IDEOGRAPH-3D27	[FB80 BD27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_205)
{
    // 3D27 003F;	
    // (㴧) CJK UNIFIED IDEOGRAPH-3D27	[FB80 BD27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_206)
{
    // 3D27 0061;	
    // (㴧) CJK UNIFIED IDEOGRAPH-3D27	[FB80 BD27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_207)
{
    // 3D27 0041;	
    // (㴧) CJK UNIFIED IDEOGRAPH-3D27	[FB80 BD27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_208)
{
    // 3D27 0062;	
    // (㴧) CJK UNIFIED IDEOGRAPH-3D27	[FB80 BD27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_209)
{
    // 3D28 0021;	
    // (㴨) CJK UNIFIED IDEOGRAPH-3D28	[FB80 BD28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_210)
{
    // 3D28 003F;	
    // (㴨) CJK UNIFIED IDEOGRAPH-3D28	[FB80 BD28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_211)
{
    // 3D28 0061;	
    // (㴨) CJK UNIFIED IDEOGRAPH-3D28	[FB80 BD28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_212)
{
    // 3D28 0041;	
    // (㴨) CJK UNIFIED IDEOGRAPH-3D28	[FB80 BD28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_213)
{
    // 3D28 0062;	
    // (㴨) CJK UNIFIED IDEOGRAPH-3D28	[FB80 BD28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_214)
{
    // 3D29 0021;	
    // (㴩) CJK UNIFIED IDEOGRAPH-3D29	[FB80 BD29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_215)
{
    // 3D29 003F;	
    // (㴩) CJK UNIFIED IDEOGRAPH-3D29	[FB80 BD29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_216)
{
    // 3D29 0061;	
    // (㴩) CJK UNIFIED IDEOGRAPH-3D29	[FB80 BD29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_217)
{
    // 3D29 0041;	
    // (㴩) CJK UNIFIED IDEOGRAPH-3D29	[FB80 BD29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_218)
{
    // 3D29 0062;	
    // (㴩) CJK UNIFIED IDEOGRAPH-3D29	[FB80 BD29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_219)
{
    // 3D2A 0021;	
    // (㴪) CJK UNIFIED IDEOGRAPH-3D2A	[FB80 BD2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_220)
{
    // 3D2A 003F;	
    // (㴪) CJK UNIFIED IDEOGRAPH-3D2A	[FB80 BD2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_221)
{
    // 3D2A 0061;	
    // (㴪) CJK UNIFIED IDEOGRAPH-3D2A	[FB80 BD2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_222)
{
    // 3D2A 0041;	
    // (㴪) CJK UNIFIED IDEOGRAPH-3D2A	[FB80 BD2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_223)
{
    // 3D2A 0062;	
    // (㴪) CJK UNIFIED IDEOGRAPH-3D2A	[FB80 BD2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_224)
{
    // 3D2B 0021;	
    // (㴫) CJK UNIFIED IDEOGRAPH-3D2B	[FB80 BD2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_225)
{
    // 3D2B 003F;	
    // (㴫) CJK UNIFIED IDEOGRAPH-3D2B	[FB80 BD2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_226)
{
    // 3D2B 0061;	
    // (㴫) CJK UNIFIED IDEOGRAPH-3D2B	[FB80 BD2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_227)
{
    // 3D2B 0041;	
    // (㴫) CJK UNIFIED IDEOGRAPH-3D2B	[FB80 BD2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_228)
{
    // 3D2B 0062;	
    // (㴫) CJK UNIFIED IDEOGRAPH-3D2B	[FB80 BD2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_229)
{
    // 3D2C 0021;	
    // (㴬) CJK UNIFIED IDEOGRAPH-3D2C	[FB80 BD2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_230)
{
    // 3D2C 003F;	
    // (㴬) CJK UNIFIED IDEOGRAPH-3D2C	[FB80 BD2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_231)
{
    // 3D2C 0061;	
    // (㴬) CJK UNIFIED IDEOGRAPH-3D2C	[FB80 BD2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_232)
{
    // 3D2C 0041;	
    // (㴬) CJK UNIFIED IDEOGRAPH-3D2C	[FB80 BD2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_233)
{
    // 3D2C 0062;	
    // (㴬) CJK UNIFIED IDEOGRAPH-3D2C	[FB80 BD2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_234)
{
    // 3D2D 0021;	
    // (㴭) CJK UNIFIED IDEOGRAPH-3D2D	[FB80 BD2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_235)
{
    // 3D2D 003F;	
    // (㴭) CJK UNIFIED IDEOGRAPH-3D2D	[FB80 BD2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_236)
{
    // 3D2D 0061;	
    // (㴭) CJK UNIFIED IDEOGRAPH-3D2D	[FB80 BD2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_237)
{
    // 3D2D 0041;	
    // (㴭) CJK UNIFIED IDEOGRAPH-3D2D	[FB80 BD2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_238)
{
    // 3D2D 0062;	
    // (㴭) CJK UNIFIED IDEOGRAPH-3D2D	[FB80 BD2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_239)
{
    // 3D2E 0021;	
    // (㴮) CJK UNIFIED IDEOGRAPH-3D2E	[FB80 BD2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_240)
{
    // 3D2E 003F;	
    // (㴮) CJK UNIFIED IDEOGRAPH-3D2E	[FB80 BD2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_241)
{
    // 3D2E 0061;	
    // (㴮) CJK UNIFIED IDEOGRAPH-3D2E	[FB80 BD2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_242)
{
    // 3D2E 0041;	
    // (㴮) CJK UNIFIED IDEOGRAPH-3D2E	[FB80 BD2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_243)
{
    // 3D2E 0062;	
    // (㴮) CJK UNIFIED IDEOGRAPH-3D2E	[FB80 BD2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_244)
{
    // 3D2F 0021;	
    // (㴯) CJK UNIFIED IDEOGRAPH-3D2F	[FB80 BD2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_245)
{
    // 3D2F 003F;	
    // (㴯) CJK UNIFIED IDEOGRAPH-3D2F	[FB80 BD2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_246)
{
    // 3D2F 0061;	
    // (㴯) CJK UNIFIED IDEOGRAPH-3D2F	[FB80 BD2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_247)
{
    // 3D2F 0041;	
    // (㴯) CJK UNIFIED IDEOGRAPH-3D2F	[FB80 BD2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_248)
{
    // 3D2F 0062;	
    // (㴯) CJK UNIFIED IDEOGRAPH-3D2F	[FB80 BD2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_249)
{
    // 3D30 0021;	
    // (㴰) CJK UNIFIED IDEOGRAPH-3D30	[FB80 BD30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_250)
{
    // 3D30 003F;	
    // (㴰) CJK UNIFIED IDEOGRAPH-3D30	[FB80 BD30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_251)
{
    // 3D30 0061;	
    // (㴰) CJK UNIFIED IDEOGRAPH-3D30	[FB80 BD30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_252)
{
    // 3D30 0041;	
    // (㴰) CJK UNIFIED IDEOGRAPH-3D30	[FB80 BD30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_253)
{
    // 3D30 0062;	
    // (㴰) CJK UNIFIED IDEOGRAPH-3D30	[FB80 BD30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_254)
{
    // 3D31 0021;	
    // (㴱) CJK UNIFIED IDEOGRAPH-3D31	[FB80 BD31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_255)
{
    // 3D31 003F;	
    // (㴱) CJK UNIFIED IDEOGRAPH-3D31	[FB80 BD31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_256)
{
    // 3D31 0061;	
    // (㴱) CJK UNIFIED IDEOGRAPH-3D31	[FB80 BD31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_257)
{
    // 3D31 0041;	
    // (㴱) CJK UNIFIED IDEOGRAPH-3D31	[FB80 BD31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_258)
{
    // 3D31 0062;	
    // (㴱) CJK UNIFIED IDEOGRAPH-3D31	[FB80 BD31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_259)
{
    // 3D32 0021;	
    // (㴲) CJK UNIFIED IDEOGRAPH-3D32	[FB80 BD32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_260)
{
    // 3D32 003F;	
    // (㴲) CJK UNIFIED IDEOGRAPH-3D32	[FB80 BD32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_261)
{
    // 3D32 0061;	
    // (㴲) CJK UNIFIED IDEOGRAPH-3D32	[FB80 BD32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_262)
{
    // 3D32 0041;	
    // (㴲) CJK UNIFIED IDEOGRAPH-3D32	[FB80 BD32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_263)
{
    // 3D32 0062;	
    // (㴲) CJK UNIFIED IDEOGRAPH-3D32	[FB80 BD32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_264)
{
    // 3D33 0021;	
    // (㴳) CJK UNIFIED IDEOGRAPH-3D33	[FB80 BD33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_265)
{
    // 2F90A 0021;	
    // (㴳) CJK COMPATIBILITY IDEOGRAPH-2F90A	[FB80 BD33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_266)
{
    // 3D33 003F;	
    // (㴳) CJK UNIFIED IDEOGRAPH-3D33	[FB80 BD33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_267)
{
    // 2F90A 003F;	
    // (㴳) CJK COMPATIBILITY IDEOGRAPH-2F90A	[FB80 BD33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_268)
{
    // 3D33 0061;	
    // (㴳) CJK UNIFIED IDEOGRAPH-3D33	[FB80 BD33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_269)
{
    // 2F90A 0061;	
    // (㴳) CJK COMPATIBILITY IDEOGRAPH-2F90A	[FB80 BD33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_270)
{
    // 3D33 0041;	
    // (㴳) CJK UNIFIED IDEOGRAPH-3D33	[FB80 BD33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_271)
{
    // 2F90A 0041;	
    // (㴳) CJK COMPATIBILITY IDEOGRAPH-2F90A	[FB80 BD33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_272)
{
    // 3D33 0062;	
    // (㴳) CJK UNIFIED IDEOGRAPH-3D33	[FB80 BD33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_273)
{
    // 2F90A 0062;	
    // (㴳) CJK COMPATIBILITY IDEOGRAPH-2F90A	[FB80 BD33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_274)
{
    // 3D34 0021;	
    // (㴴) CJK UNIFIED IDEOGRAPH-3D34	[FB80 BD34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_275)
{
    // 3D34 003F;	
    // (㴴) CJK UNIFIED IDEOGRAPH-3D34	[FB80 BD34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_276)
{
    // 3D34 0061;	
    // (㴴) CJK UNIFIED IDEOGRAPH-3D34	[FB80 BD34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_277)
{
    // 3D34 0041;	
    // (㴴) CJK UNIFIED IDEOGRAPH-3D34	[FB80 BD34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_278)
{
    // 3D34 0062;	
    // (㴴) CJK UNIFIED IDEOGRAPH-3D34	[FB80 BD34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_279)
{
    // 3D35 0021;	
    // (㴵) CJK UNIFIED IDEOGRAPH-3D35	[FB80 BD35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_280)
{
    // 3D35 003F;	
    // (㴵) CJK UNIFIED IDEOGRAPH-3D35	[FB80 BD35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_281)
{
    // 3D35 0061;	
    // (㴵) CJK UNIFIED IDEOGRAPH-3D35	[FB80 BD35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_282)
{
    // 3D35 0041;	
    // (㴵) CJK UNIFIED IDEOGRAPH-3D35	[FB80 BD35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_283)
{
    // 3D35 0062;	
    // (㴵) CJK UNIFIED IDEOGRAPH-3D35	[FB80 BD35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_284)
{
    // 3D36 0021;	
    // (㴶) CJK UNIFIED IDEOGRAPH-3D36	[FB80 BD36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_285)
{
    // 3D36 003F;	
    // (㴶) CJK UNIFIED IDEOGRAPH-3D36	[FB80 BD36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_286)
{
    // 3D36 0061;	
    // (㴶) CJK UNIFIED IDEOGRAPH-3D36	[FB80 BD36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_287)
{
    // 3D36 0041;	
    // (㴶) CJK UNIFIED IDEOGRAPH-3D36	[FB80 BD36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_288)
{
    // 3D36 0062;	
    // (㴶) CJK UNIFIED IDEOGRAPH-3D36	[FB80 BD36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_289)
{
    // 3D37 0021;	
    // (㴷) CJK UNIFIED IDEOGRAPH-3D37	[FB80 BD37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_290)
{
    // 3D37 003F;	
    // (㴷) CJK UNIFIED IDEOGRAPH-3D37	[FB80 BD37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_291)
{
    // 3D37 0061;	
    // (㴷) CJK UNIFIED IDEOGRAPH-3D37	[FB80 BD37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_292)
{
    // 3D37 0041;	
    // (㴷) CJK UNIFIED IDEOGRAPH-3D37	[FB80 BD37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_293)
{
    // 3D37 0062;	
    // (㴷) CJK UNIFIED IDEOGRAPH-3D37	[FB80 BD37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_294)
{
    // 3D38 0021;	
    // (㴸) CJK UNIFIED IDEOGRAPH-3D38	[FB80 BD38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_295)
{
    // 3D38 003F;	
    // (㴸) CJK UNIFIED IDEOGRAPH-3D38	[FB80 BD38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_296)
{
    // 3D38 0061;	
    // (㴸) CJK UNIFIED IDEOGRAPH-3D38	[FB80 BD38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_297)
{
    // 3D38 0041;	
    // (㴸) CJK UNIFIED IDEOGRAPH-3D38	[FB80 BD38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_298)
{
    // 3D38 0062;	
    // (㴸) CJK UNIFIED IDEOGRAPH-3D38	[FB80 BD38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_299)
{
    // 3D39 0021;	
    // (㴹) CJK UNIFIED IDEOGRAPH-3D39	[FB80 BD39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_300)
{
    // 3D39 003F;	
    // (㴹) CJK UNIFIED IDEOGRAPH-3D39	[FB80 BD39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_301)
{
    // 3D39 0061;	
    // (㴹) CJK UNIFIED IDEOGRAPH-3D39	[FB80 BD39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_302)
{
    // 3D39 0041;	
    // (㴹) CJK UNIFIED IDEOGRAPH-3D39	[FB80 BD39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_303)
{
    // 3D39 0062;	
    // (㴹) CJK UNIFIED IDEOGRAPH-3D39	[FB80 BD39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_304)
{
    // 3D3A 0021;	
    // (㴺) CJK UNIFIED IDEOGRAPH-3D3A	[FB80 BD3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_305)
{
    // 3D3A 003F;	
    // (㴺) CJK UNIFIED IDEOGRAPH-3D3A	[FB80 BD3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_306)
{
    // 3D3A 0061;	
    // (㴺) CJK UNIFIED IDEOGRAPH-3D3A	[FB80 BD3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_307)
{
    // 3D3A 0041;	
    // (㴺) CJK UNIFIED IDEOGRAPH-3D3A	[FB80 BD3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_308)
{
    // 3D3A 0062;	
    // (㴺) CJK UNIFIED IDEOGRAPH-3D3A	[FB80 BD3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_309)
{
    // 3D3B 0021;	
    // (㴻) CJK UNIFIED IDEOGRAPH-3D3B	[FB80 BD3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_310)
{
    // 3D3B 003F;	
    // (㴻) CJK UNIFIED IDEOGRAPH-3D3B	[FB80 BD3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_311)
{
    // 3D3B 0061;	
    // (㴻) CJK UNIFIED IDEOGRAPH-3D3B	[FB80 BD3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_312)
{
    // 3D3B 0041;	
    // (㴻) CJK UNIFIED IDEOGRAPH-3D3B	[FB80 BD3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_313)
{
    // 3D3B 0062;	
    // (㴻) CJK UNIFIED IDEOGRAPH-3D3B	[FB80 BD3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_314)
{
    // 3D3C 0021;	
    // (㴼) CJK UNIFIED IDEOGRAPH-3D3C	[FB80 BD3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_315)
{
    // 3D3C 003F;	
    // (㴼) CJK UNIFIED IDEOGRAPH-3D3C	[FB80 BD3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_316)
{
    // 3D3C 0061;	
    // (㴼) CJK UNIFIED IDEOGRAPH-3D3C	[FB80 BD3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_317)
{
    // 3D3C 0041;	
    // (㴼) CJK UNIFIED IDEOGRAPH-3D3C	[FB80 BD3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_318)
{
    // 3D3C 0062;	
    // (㴼) CJK UNIFIED IDEOGRAPH-3D3C	[FB80 BD3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_319)
{
    // 3D3D 0021;	
    // (㴽) CJK UNIFIED IDEOGRAPH-3D3D	[FB80 BD3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_320)
{
    // 3D3D 003F;	
    // (㴽) CJK UNIFIED IDEOGRAPH-3D3D	[FB80 BD3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_321)
{
    // 3D3D 0061;	
    // (㴽) CJK UNIFIED IDEOGRAPH-3D3D	[FB80 BD3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_322)
{
    // 3D3D 0041;	
    // (㴽) CJK UNIFIED IDEOGRAPH-3D3D	[FB80 BD3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_323)
{
    // 3D3D 0062;	
    // (㴽) CJK UNIFIED IDEOGRAPH-3D3D	[FB80 BD3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_324)
{
    // 3D3E 0021;	
    // (㴾) CJK UNIFIED IDEOGRAPH-3D3E	[FB80 BD3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_325)
{
    // 3D3E 003F;	
    // (㴾) CJK UNIFIED IDEOGRAPH-3D3E	[FB80 BD3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_326)
{
    // 3D3E 0061;	
    // (㴾) CJK UNIFIED IDEOGRAPH-3D3E	[FB80 BD3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_327)
{
    // 3D3E 0041;	
    // (㴾) CJK UNIFIED IDEOGRAPH-3D3E	[FB80 BD3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_328)
{
    // 3D3E 0062;	
    // (㴾) CJK UNIFIED IDEOGRAPH-3D3E	[FB80 BD3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_329)
{
    // 3D3F 0021;	
    // (㴿) CJK UNIFIED IDEOGRAPH-3D3F	[FB80 BD3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_330)
{
    // 3D3F 003F;	
    // (㴿) CJK UNIFIED IDEOGRAPH-3D3F	[FB80 BD3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_331)
{
    // 3D3F 0061;	
    // (㴿) CJK UNIFIED IDEOGRAPH-3D3F	[FB80 BD3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_332)
{
    // 3D3F 0041;	
    // (㴿) CJK UNIFIED IDEOGRAPH-3D3F	[FB80 BD3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_333)
{
    // 3D3F 0062;	
    // (㴿) CJK UNIFIED IDEOGRAPH-3D3F	[FB80 BD3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_334)
{
    // 3D40 0021;	
    // (㵀) CJK UNIFIED IDEOGRAPH-3D40	[FB80 BD40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_335)
{
    // 3D40 003F;	
    // (㵀) CJK UNIFIED IDEOGRAPH-3D40	[FB80 BD40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_336)
{
    // 3D40 0061;	
    // (㵀) CJK UNIFIED IDEOGRAPH-3D40	[FB80 BD40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_337)
{
    // 3D40 0041;	
    // (㵀) CJK UNIFIED IDEOGRAPH-3D40	[FB80 BD40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_338)
{
    // 3D40 0062;	
    // (㵀) CJK UNIFIED IDEOGRAPH-3D40	[FB80 BD40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_339)
{
    // 3D41 0021;	
    // (㵁) CJK UNIFIED IDEOGRAPH-3D41	[FB80 BD41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_340)
{
    // 3D41 003F;	
    // (㵁) CJK UNIFIED IDEOGRAPH-3D41	[FB80 BD41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_341)
{
    // 3D41 0061;	
    // (㵁) CJK UNIFIED IDEOGRAPH-3D41	[FB80 BD41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_342)
{
    // 3D41 0041;	
    // (㵁) CJK UNIFIED IDEOGRAPH-3D41	[FB80 BD41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_343)
{
    // 3D41 0062;	
    // (㵁) CJK UNIFIED IDEOGRAPH-3D41	[FB80 BD41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_344)
{
    // 3D42 0021;	
    // (㵂) CJK UNIFIED IDEOGRAPH-3D42	[FB80 BD42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_345)
{
    // 3D42 003F;	
    // (㵂) CJK UNIFIED IDEOGRAPH-3D42	[FB80 BD42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_346)
{
    // 3D42 0061;	
    // (㵂) CJK UNIFIED IDEOGRAPH-3D42	[FB80 BD42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_347)
{
    // 3D42 0041;	
    // (㵂) CJK UNIFIED IDEOGRAPH-3D42	[FB80 BD42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_348)
{
    // 3D42 0062;	
    // (㵂) CJK UNIFIED IDEOGRAPH-3D42	[FB80 BD42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_349)
{
    // 3D43 0021;	
    // (㵃) CJK UNIFIED IDEOGRAPH-3D43	[FB80 BD43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_350)
{
    // 3D43 003F;	
    // (㵃) CJK UNIFIED IDEOGRAPH-3D43	[FB80 BD43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_351)
{
    // 3D43 0061;	
    // (㵃) CJK UNIFIED IDEOGRAPH-3D43	[FB80 BD43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_352)
{
    // 3D43 0041;	
    // (㵃) CJK UNIFIED IDEOGRAPH-3D43	[FB80 BD43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_353)
{
    // 3D43 0062;	
    // (㵃) CJK UNIFIED IDEOGRAPH-3D43	[FB80 BD43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_354)
{
    // 3D44 0021;	
    // (㵄) CJK UNIFIED IDEOGRAPH-3D44	[FB80 BD44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_355)
{
    // 3D44 003F;	
    // (㵄) CJK UNIFIED IDEOGRAPH-3D44	[FB80 BD44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_356)
{
    // 3D44 0061;	
    // (㵄) CJK UNIFIED IDEOGRAPH-3D44	[FB80 BD44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_357)
{
    // 3D44 0041;	
    // (㵄) CJK UNIFIED IDEOGRAPH-3D44	[FB80 BD44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_358)
{
    // 3D44 0062;	
    // (㵄) CJK UNIFIED IDEOGRAPH-3D44	[FB80 BD44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_359)
{
    // 3D45 0021;	
    // (㵅) CJK UNIFIED IDEOGRAPH-3D45	[FB80 BD45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_360)
{
    // 3D45 003F;	
    // (㵅) CJK UNIFIED IDEOGRAPH-3D45	[FB80 BD45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_361)
{
    // 3D45 0061;	
    // (㵅) CJK UNIFIED IDEOGRAPH-3D45	[FB80 BD45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_362)
{
    // 3D45 0041;	
    // (㵅) CJK UNIFIED IDEOGRAPH-3D45	[FB80 BD45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_363)
{
    // 3D45 0062;	
    // (㵅) CJK UNIFIED IDEOGRAPH-3D45	[FB80 BD45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_364)
{
    // 3D46 0021;	
    // (㵆) CJK UNIFIED IDEOGRAPH-3D46	[FB80 BD46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_365)
{
    // 3D46 003F;	
    // (㵆) CJK UNIFIED IDEOGRAPH-3D46	[FB80 BD46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_366)
{
    // 3D46 0061;	
    // (㵆) CJK UNIFIED IDEOGRAPH-3D46	[FB80 BD46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_367)
{
    // 3D46 0041;	
    // (㵆) CJK UNIFIED IDEOGRAPH-3D46	[FB80 BD46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_368)
{
    // 3D46 0062;	
    // (㵆) CJK UNIFIED IDEOGRAPH-3D46	[FB80 BD46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_369)
{
    // 3D47 0021;	
    // (㵇) CJK UNIFIED IDEOGRAPH-3D47	[FB80 BD47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_370)
{
    // 3D47 003F;	
    // (㵇) CJK UNIFIED IDEOGRAPH-3D47	[FB80 BD47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_371)
{
    // 3D47 0061;	
    // (㵇) CJK UNIFIED IDEOGRAPH-3D47	[FB80 BD47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_372)
{
    // 3D47 0041;	
    // (㵇) CJK UNIFIED IDEOGRAPH-3D47	[FB80 BD47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_373)
{
    // 3D47 0062;	
    // (㵇) CJK UNIFIED IDEOGRAPH-3D47	[FB80 BD47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_374)
{
    // 3D48 0021;	
    // (㵈) CJK UNIFIED IDEOGRAPH-3D48	[FB80 BD48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_375)
{
    // 3D48 003F;	
    // (㵈) CJK UNIFIED IDEOGRAPH-3D48	[FB80 BD48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_376)
{
    // 3D48 0061;	
    // (㵈) CJK UNIFIED IDEOGRAPH-3D48	[FB80 BD48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_377)
{
    // 3D48 0041;	
    // (㵈) CJK UNIFIED IDEOGRAPH-3D48	[FB80 BD48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_378)
{
    // 3D48 0062;	
    // (㵈) CJK UNIFIED IDEOGRAPH-3D48	[FB80 BD48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_379)
{
    // 3D49 0021;	
    // (㵉) CJK UNIFIED IDEOGRAPH-3D49	[FB80 BD49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_380)
{
    // 3D49 003F;	
    // (㵉) CJK UNIFIED IDEOGRAPH-3D49	[FB80 BD49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_381)
{
    // 3D49 0061;	
    // (㵉) CJK UNIFIED IDEOGRAPH-3D49	[FB80 BD49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_382)
{
    // 3D49 0041;	
    // (㵉) CJK UNIFIED IDEOGRAPH-3D49	[FB80 BD49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_383)
{
    // 3D49 0062;	
    // (㵉) CJK UNIFIED IDEOGRAPH-3D49	[FB80 BD49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_384)
{
    // 3D4A 0021;	
    // (㵊) CJK UNIFIED IDEOGRAPH-3D4A	[FB80 BD4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_385)
{
    // 3D4A 003F;	
    // (㵊) CJK UNIFIED IDEOGRAPH-3D4A	[FB80 BD4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_386)
{
    // 3D4A 0061;	
    // (㵊) CJK UNIFIED IDEOGRAPH-3D4A	[FB80 BD4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_387)
{
    // 3D4A 0041;	
    // (㵊) CJK UNIFIED IDEOGRAPH-3D4A	[FB80 BD4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_388)
{
    // 3D4A 0062;	
    // (㵊) CJK UNIFIED IDEOGRAPH-3D4A	[FB80 BD4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_389)
{
    // 3D4B 0021;	
    // (㵋) CJK UNIFIED IDEOGRAPH-3D4B	[FB80 BD4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_390)
{
    // 3D4B 003F;	
    // (㵋) CJK UNIFIED IDEOGRAPH-3D4B	[FB80 BD4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_391)
{
    // 3D4B 0061;	
    // (㵋) CJK UNIFIED IDEOGRAPH-3D4B	[FB80 BD4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_392)
{
    // 3D4B 0041;	
    // (㵋) CJK UNIFIED IDEOGRAPH-3D4B	[FB80 BD4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_393)
{
    // 3D4B 0062;	
    // (㵋) CJK UNIFIED IDEOGRAPH-3D4B	[FB80 BD4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_394)
{
    // 3D4C 0021;	
    // (㵌) CJK UNIFIED IDEOGRAPH-3D4C	[FB80 BD4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_395)
{
    // 3D4C 003F;	
    // (㵌) CJK UNIFIED IDEOGRAPH-3D4C	[FB80 BD4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_396)
{
    // 3D4C 0061;	
    // (㵌) CJK UNIFIED IDEOGRAPH-3D4C	[FB80 BD4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_397)
{
    // 3D4C 0041;	
    // (㵌) CJK UNIFIED IDEOGRAPH-3D4C	[FB80 BD4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_398)
{
    // 3D4C 0062;	
    // (㵌) CJK UNIFIED IDEOGRAPH-3D4C	[FB80 BD4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_399)
{
    // 3D4D 0021;	
    // (㵍) CJK UNIFIED IDEOGRAPH-3D4D	[FB80 BD4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_400)
{
    // 3D4D 003F;	
    // (㵍) CJK UNIFIED IDEOGRAPH-3D4D	[FB80 BD4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_401)
{
    // 3D4D 0061;	
    // (㵍) CJK UNIFIED IDEOGRAPH-3D4D	[FB80 BD4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_402)
{
    // 3D4D 0041;	
    // (㵍) CJK UNIFIED IDEOGRAPH-3D4D	[FB80 BD4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_403)
{
    // 3D4D 0062;	
    // (㵍) CJK UNIFIED IDEOGRAPH-3D4D	[FB80 BD4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_404)
{
    // 3D4E 0021;	
    // (㵎) CJK UNIFIED IDEOGRAPH-3D4E	[FB80 BD4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_405)
{
    // 3D4E 003F;	
    // (㵎) CJK UNIFIED IDEOGRAPH-3D4E	[FB80 BD4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_406)
{
    // 3D4E 0061;	
    // (㵎) CJK UNIFIED IDEOGRAPH-3D4E	[FB80 BD4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_407)
{
    // 3D4E 0041;	
    // (㵎) CJK UNIFIED IDEOGRAPH-3D4E	[FB80 BD4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_408)
{
    // 3D4E 0062;	
    // (㵎) CJK UNIFIED IDEOGRAPH-3D4E	[FB80 BD4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_409)
{
    // 3D4F 0021;	
    // (㵏) CJK UNIFIED IDEOGRAPH-3D4F	[FB80 BD4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_410)
{
    // 3D4F 003F;	
    // (㵏) CJK UNIFIED IDEOGRAPH-3D4F	[FB80 BD4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_411)
{
    // 3D4F 0061;	
    // (㵏) CJK UNIFIED IDEOGRAPH-3D4F	[FB80 BD4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_412)
{
    // 3D4F 0041;	
    // (㵏) CJK UNIFIED IDEOGRAPH-3D4F	[FB80 BD4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_413)
{
    // 3D4F 0062;	
    // (㵏) CJK UNIFIED IDEOGRAPH-3D4F	[FB80 BD4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_414)
{
    // 3D50 0021;	
    // (㵐) CJK UNIFIED IDEOGRAPH-3D50	[FB80 BD50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_415)
{
    // 3D50 003F;	
    // (㵐) CJK UNIFIED IDEOGRAPH-3D50	[FB80 BD50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_416)
{
    // 3D50 0061;	
    // (㵐) CJK UNIFIED IDEOGRAPH-3D50	[FB80 BD50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_417)
{
    // 3D50 0041;	
    // (㵐) CJK UNIFIED IDEOGRAPH-3D50	[FB80 BD50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_418)
{
    // 3D50 0062;	
    // (㵐) CJK UNIFIED IDEOGRAPH-3D50	[FB80 BD50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_419)
{
    // 3D51 0021;	
    // (㵑) CJK UNIFIED IDEOGRAPH-3D51	[FB80 BD51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_420)
{
    // 3D51 003F;	
    // (㵑) CJK UNIFIED IDEOGRAPH-3D51	[FB80 BD51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_421)
{
    // 3D51 0061;	
    // (㵑) CJK UNIFIED IDEOGRAPH-3D51	[FB80 BD51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_422)
{
    // 3D51 0041;	
    // (㵑) CJK UNIFIED IDEOGRAPH-3D51	[FB80 BD51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_423)
{
    // 3D51 0062;	
    // (㵑) CJK UNIFIED IDEOGRAPH-3D51	[FB80 BD51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_424)
{
    // 3D52 0021;	
    // (㵒) CJK UNIFIED IDEOGRAPH-3D52	[FB80 BD52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_425)
{
    // 3D52 003F;	
    // (㵒) CJK UNIFIED IDEOGRAPH-3D52	[FB80 BD52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_426)
{
    // 3D52 0061;	
    // (㵒) CJK UNIFIED IDEOGRAPH-3D52	[FB80 BD52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_427)
{
    // 3D52 0041;	
    // (㵒) CJK UNIFIED IDEOGRAPH-3D52	[FB80 BD52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_428)
{
    // 3D52 0062;	
    // (㵒) CJK UNIFIED IDEOGRAPH-3D52	[FB80 BD52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_429)
{
    // 3D53 0021;	
    // (㵓) CJK UNIFIED IDEOGRAPH-3D53	[FB80 BD53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_430)
{
    // 3D53 003F;	
    // (㵓) CJK UNIFIED IDEOGRAPH-3D53	[FB80 BD53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_431)
{
    // 3D53 0061;	
    // (㵓) CJK UNIFIED IDEOGRAPH-3D53	[FB80 BD53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_432)
{
    // 3D53 0041;	
    // (㵓) CJK UNIFIED IDEOGRAPH-3D53	[FB80 BD53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_433)
{
    // 3D53 0062;	
    // (㵓) CJK UNIFIED IDEOGRAPH-3D53	[FB80 BD53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_434)
{
    // 3D54 0021;	
    // (㵔) CJK UNIFIED IDEOGRAPH-3D54	[FB80 BD54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_435)
{
    // 3D54 003F;	
    // (㵔) CJK UNIFIED IDEOGRAPH-3D54	[FB80 BD54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_436)
{
    // 3D54 0061;	
    // (㵔) CJK UNIFIED IDEOGRAPH-3D54	[FB80 BD54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_437)
{
    // 3D54 0041;	
    // (㵔) CJK UNIFIED IDEOGRAPH-3D54	[FB80 BD54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_438)
{
    // 3D54 0062;	
    // (㵔) CJK UNIFIED IDEOGRAPH-3D54	[FB80 BD54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_439)
{
    // 3D55 0021;	
    // (㵕) CJK UNIFIED IDEOGRAPH-3D55	[FB80 BD55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_440)
{
    // 3D55 003F;	
    // (㵕) CJK UNIFIED IDEOGRAPH-3D55	[FB80 BD55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_441)
{
    // 3D55 0061;	
    // (㵕) CJK UNIFIED IDEOGRAPH-3D55	[FB80 BD55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_442)
{
    // 3D55 0041;	
    // (㵕) CJK UNIFIED IDEOGRAPH-3D55	[FB80 BD55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_443)
{
    // 3D55 0062;	
    // (㵕) CJK UNIFIED IDEOGRAPH-3D55	[FB80 BD55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_444)
{
    // 3D56 0021;	
    // (㵖) CJK UNIFIED IDEOGRAPH-3D56	[FB80 BD56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_445)
{
    // 3D56 003F;	
    // (㵖) CJK UNIFIED IDEOGRAPH-3D56	[FB80 BD56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_446)
{
    // 3D56 0061;	
    // (㵖) CJK UNIFIED IDEOGRAPH-3D56	[FB80 BD56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_447)
{
    // 3D56 0041;	
    // (㵖) CJK UNIFIED IDEOGRAPH-3D56	[FB80 BD56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_448)
{
    // 3D56 0062;	
    // (㵖) CJK UNIFIED IDEOGRAPH-3D56	[FB80 BD56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_449)
{
    // 3D57 0021;	
    // (㵗) CJK UNIFIED IDEOGRAPH-3D57	[FB80 BD57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_450)
{
    // 3D57 003F;	
    // (㵗) CJK UNIFIED IDEOGRAPH-3D57	[FB80 BD57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_451)
{
    // 3D57 0061;	
    // (㵗) CJK UNIFIED IDEOGRAPH-3D57	[FB80 BD57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_452)
{
    // 3D57 0041;	
    // (㵗) CJK UNIFIED IDEOGRAPH-3D57	[FB80 BD57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_453)
{
    // 3D57 0062;	
    // (㵗) CJK UNIFIED IDEOGRAPH-3D57	[FB80 BD57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_454)
{
    // 3D58 0021;	
    // (㵘) CJK UNIFIED IDEOGRAPH-3D58	[FB80 BD58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_455)
{
    // 3D58 003F;	
    // (㵘) CJK UNIFIED IDEOGRAPH-3D58	[FB80 BD58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_456)
{
    // 3D58 0061;	
    // (㵘) CJK UNIFIED IDEOGRAPH-3D58	[FB80 BD58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_457)
{
    // 3D58 0041;	
    // (㵘) CJK UNIFIED IDEOGRAPH-3D58	[FB80 BD58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_458)
{
    // 3D58 0062;	
    // (㵘) CJK UNIFIED IDEOGRAPH-3D58	[FB80 BD58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_459)
{
    // 3D59 0021;	
    // (㵙) CJK UNIFIED IDEOGRAPH-3D59	[FB80 BD59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_460)
{
    // 3D59 003F;	
    // (㵙) CJK UNIFIED IDEOGRAPH-3D59	[FB80 BD59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_461)
{
    // 3D59 0061;	
    // (㵙) CJK UNIFIED IDEOGRAPH-3D59	[FB80 BD59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_462)
{
    // 3D59 0041;	
    // (㵙) CJK UNIFIED IDEOGRAPH-3D59	[FB80 BD59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_463)
{
    // 3D59 0062;	
    // (㵙) CJK UNIFIED IDEOGRAPH-3D59	[FB80 BD59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_464)
{
    // 3D5A 0021;	
    // (㵚) CJK UNIFIED IDEOGRAPH-3D5A	[FB80 BD5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_465)
{
    // 3D5A 003F;	
    // (㵚) CJK UNIFIED IDEOGRAPH-3D5A	[FB80 BD5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_466)
{
    // 3D5A 0061;	
    // (㵚) CJK UNIFIED IDEOGRAPH-3D5A	[FB80 BD5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_467)
{
    // 3D5A 0041;	
    // (㵚) CJK UNIFIED IDEOGRAPH-3D5A	[FB80 BD5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_468)
{
    // 3D5A 0062;	
    // (㵚) CJK UNIFIED IDEOGRAPH-3D5A	[FB80 BD5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_469)
{
    // 3D5B 0021;	
    // (㵛) CJK UNIFIED IDEOGRAPH-3D5B	[FB80 BD5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_470)
{
    // 3D5B 003F;	
    // (㵛) CJK UNIFIED IDEOGRAPH-3D5B	[FB80 BD5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_471)
{
    // 3D5B 0061;	
    // (㵛) CJK UNIFIED IDEOGRAPH-3D5B	[FB80 BD5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_472)
{
    // 3D5B 0041;	
    // (㵛) CJK UNIFIED IDEOGRAPH-3D5B	[FB80 BD5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_473)
{
    // 3D5B 0062;	
    // (㵛) CJK UNIFIED IDEOGRAPH-3D5B	[FB80 BD5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_474)
{
    // 3D5C 0021;	
    // (㵜) CJK UNIFIED IDEOGRAPH-3D5C	[FB80 BD5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_475)
{
    // 3D5C 003F;	
    // (㵜) CJK UNIFIED IDEOGRAPH-3D5C	[FB80 BD5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_476)
{
    // 3D5C 0061;	
    // (㵜) CJK UNIFIED IDEOGRAPH-3D5C	[FB80 BD5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_477)
{
    // 3D5C 0041;	
    // (㵜) CJK UNIFIED IDEOGRAPH-3D5C	[FB80 BD5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_478)
{
    // 3D5C 0062;	
    // (㵜) CJK UNIFIED IDEOGRAPH-3D5C	[FB80 BD5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_479)
{
    // 3D5D 0021;	
    // (㵝) CJK UNIFIED IDEOGRAPH-3D5D	[FB80 BD5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_480)
{
    // 3D5D 003F;	
    // (㵝) CJK UNIFIED IDEOGRAPH-3D5D	[FB80 BD5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_481)
{
    // 3D5D 0061;	
    // (㵝) CJK UNIFIED IDEOGRAPH-3D5D	[FB80 BD5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_482)
{
    // 3D5D 0041;	
    // (㵝) CJK UNIFIED IDEOGRAPH-3D5D	[FB80 BD5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_483)
{
    // 3D5D 0062;	
    // (㵝) CJK UNIFIED IDEOGRAPH-3D5D	[FB80 BD5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_484)
{
    // 3D5E 0021;	
    // (㵞) CJK UNIFIED IDEOGRAPH-3D5E	[FB80 BD5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_485)
{
    // 3D5E 003F;	
    // (㵞) CJK UNIFIED IDEOGRAPH-3D5E	[FB80 BD5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_486)
{
    // 3D5E 0061;	
    // (㵞) CJK UNIFIED IDEOGRAPH-3D5E	[FB80 BD5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_487)
{
    // 3D5E 0041;	
    // (㵞) CJK UNIFIED IDEOGRAPH-3D5E	[FB80 BD5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_488)
{
    // 3D5E 0062;	
    // (㵞) CJK UNIFIED IDEOGRAPH-3D5E	[FB80 BD5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_489)
{
    // 3D5F 0021;	
    // (㵟) CJK UNIFIED IDEOGRAPH-3D5F	[FB80 BD5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_490)
{
    // 3D5F 003F;	
    // (㵟) CJK UNIFIED IDEOGRAPH-3D5F	[FB80 BD5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_491)
{
    // 3D5F 0061;	
    // (㵟) CJK UNIFIED IDEOGRAPH-3D5F	[FB80 BD5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_492)
{
    // 3D5F 0041;	
    // (㵟) CJK UNIFIED IDEOGRAPH-3D5F	[FB80 BD5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_493)
{
    // 3D5F 0062;	
    // (㵟) CJK UNIFIED IDEOGRAPH-3D5F	[FB80 BD5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_494)
{
    // 3D60 0021;	
    // (㵠) CJK UNIFIED IDEOGRAPH-3D60	[FB80 BD60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_495)
{
    // 3D60 003F;	
    // (㵠) CJK UNIFIED IDEOGRAPH-3D60	[FB80 BD60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_496)
{
    // 3D60 0061;	
    // (㵠) CJK UNIFIED IDEOGRAPH-3D60	[FB80 BD60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_497)
{
    // 3D60 0041;	
    // (㵠) CJK UNIFIED IDEOGRAPH-3D60	[FB80 BD60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_498)
{
    // 3D60 0062;	
    // (㵠) CJK UNIFIED IDEOGRAPH-3D60	[FB80 BD60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_350_499)
{
    // 3D61 0021;	
    // (㵡) CJK UNIFIED IDEOGRAPH-3D61	[FB80 BD61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

