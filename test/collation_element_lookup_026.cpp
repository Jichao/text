// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_026_000)
{
    // 1000  ; [.314C.0020.0002] 
    // MYANMAR LETTER KA

    uint32_t const cps[1] = { 0x1000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x314c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_001)
{
    // 1001  ; [.314E.0020.0002] 
    // MYANMAR LETTER KHA

    uint32_t const cps[1] = { 0x1001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x314e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_002)
{
    // 1002  ; [.3150.0020.0002] 
    // MYANMAR LETTER GA

    uint32_t const cps[1] = { 0x1002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3150), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_003)
{
    // 1003  ; [.3154.0020.0002] 
    // MYANMAR LETTER GHA

    uint32_t const cps[1] = { 0x1003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3154), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_004)
{
    // 1004  ; [.3157.0020.0002] 
    // MYANMAR LETTER NGA

    uint32_t const cps[1] = { 0x1004 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3157), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_005)
{
    // 1005  ; [.3159.0020.0002] 
    // MYANMAR LETTER CA

    uint32_t const cps[1] = { 0x1005 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3159), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_006)
{
    // 1006  ; [.315C.0020.0002] 
    // MYANMAR LETTER CHA

    uint32_t const cps[1] = { 0x1006 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x315c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_007)
{
    // 1007  ; [.3160.0020.0002] 
    // MYANMAR LETTER JA

    uint32_t const cps[1] = { 0x1007 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3160), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_008)
{
    // 1008  ; [.3165.0020.0002] 
    // MYANMAR LETTER JHA

    uint32_t const cps[1] = { 0x1008 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3165), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_009)
{
    // 1009  ; [.316C.0020.0002] 
    // MYANMAR LETTER NYA

    uint32_t const cps[1] = { 0x1009 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x316c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_010)
{
    // 100A  ; [.3170.0020.0002] 
    // MYANMAR LETTER NNYA

    uint32_t const cps[1] = { 0x100a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3170), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_011)
{
    // 100B  ; [.3171.0020.0002] 
    // MYANMAR LETTER TTA

    uint32_t const cps[1] = { 0x100b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3171), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_012)
{
    // 100C  ; [.3173.0020.0002] 
    // MYANMAR LETTER TTHA

    uint32_t const cps[1] = { 0x100c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3173), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_013)
{
    // 100D  ; [.3175.0020.0002] 
    // MYANMAR LETTER DDA

    uint32_t const cps[1] = { 0x100d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3175), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_014)
{
    // 100E  ; [.3178.0020.0002] 
    // MYANMAR LETTER DDHA

    uint32_t const cps[1] = { 0x100e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3178), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_015)
{
    // 100F  ; [.317B.0020.0002] 
    // MYANMAR LETTER NNA

    uint32_t const cps[1] = { 0x100f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x317b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_016)
{
    // 1010  ; [.317F.0020.0002] 
    // MYANMAR LETTER TA

    uint32_t const cps[1] = { 0x1010 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x317f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_017)
{
    // 1011  ; [.3180.0020.0002] 
    // MYANMAR LETTER THA

    uint32_t const cps[1] = { 0x1011 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3180), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_018)
{
    // 1012  ; [.3181.0020.0002] 
    // MYANMAR LETTER DA

    uint32_t const cps[1] = { 0x1012 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3181), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_019)
{
    // 1013  ; [.3184.0020.0002] 
    // MYANMAR LETTER DHA

    uint32_t const cps[1] = { 0x1013 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3184), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_020)
{
    // 1014  ; [.3187.0020.0002] 
    // MYANMAR LETTER NA

    uint32_t const cps[1] = { 0x1014 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3187), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_021)
{
    // 1015  ; [.318B.0020.0002] 
    // MYANMAR LETTER PA

    uint32_t const cps[1] = { 0x1015 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_022)
{
    // 1016  ; [.318C.0020.0002] 
    // MYANMAR LETTER PHA

    uint32_t const cps[1] = { 0x1016 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_023)
{
    // 1017  ; [.3192.0020.0002] 
    // MYANMAR LETTER BA

    uint32_t const cps[1] = { 0x1017 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3192), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_024)
{
    // 1018  ; [.3195.0020.0002] 
    // MYANMAR LETTER BHA

    uint32_t const cps[1] = { 0x1018 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3195), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_025)
{
    // 1019  ; [.3198.0020.0002] 
    // MYANMAR LETTER MA

    uint32_t const cps[1] = { 0x1019 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3198), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_026)
{
    // 101A  ; [.319A.0020.0002] 
    // MYANMAR LETTER YA

    uint32_t const cps[1] = { 0x101a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_027)
{
    // 101B  ; [.319C.0020.0002] 
    // MYANMAR LETTER RA

    uint32_t const cps[1] = { 0x101b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_028)
{
    // 101C  ; [.31A0.0020.0002] 
    // MYANMAR LETTER LA

    uint32_t const cps[1] = { 0x101c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_029)
{
    // 101D  ; [.31A2.0020.0002] 
    // MYANMAR LETTER WA

    uint32_t const cps[1] = { 0x101d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_030)
{
    // 101E  ; [.31A9.0020.0002] 
    // MYANMAR LETTER SA

    uint32_t const cps[1] = { 0x101e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_031)
{
    // 101F  ; [.31AB.0020.0002] 
    // MYANMAR LETTER HA

    uint32_t const cps[1] = { 0x101f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_032)
{
    // 1020  ; [.31B1.0020.0002] 
    // MYANMAR LETTER LLA

    uint32_t const cps[1] = { 0x1020 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_033)
{
    // 1021  ; [.31B8.0020.0002] 
    // MYANMAR LETTER A

    uint32_t const cps[1] = { 0x1021 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_034)
{
    // 1022  ; [.31B9.0020.0002] 
    // MYANMAR LETTER SHAN A

    uint32_t const cps[1] = { 0x1022 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_035)
{
    // 1023  ; [.31BA.0020.0002] 
    // MYANMAR LETTER I

    uint32_t const cps[1] = { 0x1023 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_036)
{
    // 1024  ; [.31BB.0020.0002] 
    // MYANMAR LETTER II

    uint32_t const cps[1] = { 0x1024 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_037)
{
    // 1025  ; [.31BC.0020.0002] 
    // MYANMAR LETTER U

    uint32_t const cps[1] = { 0x1025 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_038)
{
    // 1025 102E ; [.31BD.0020.0002] 
    // MYANMAR LETTER UU

    uint32_t const cps[2] = { 0x1025, 0x102e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_039)
{
    // 1026  ; [.31BD.0020.0002] 
    // MYANMAR LETTER UU

    uint32_t const cps[1] = { 0x1026 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_040)
{
    // 1027  ; [.31C2.0020.0002] 
    // MYANMAR LETTER E

    uint32_t const cps[1] = { 0x1027 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_041)
{
    // 1028  ; [.31C3.0020.0002] 
    // MYANMAR LETTER MON E

    uint32_t const cps[1] = { 0x1028 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_042)
{
    // 1029  ; [.31C4.0020.0002] 
    // MYANMAR LETTER O

    uint32_t const cps[1] = { 0x1029 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_043)
{
    // 102A  ; [.31C5.0020.0002] 
    // MYANMAR LETTER AU

    uint32_t const cps[1] = { 0x102a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_044)
{
    // 102B  ; [.31C6.0020.0004] 
    // MYANMAR VOWEL SIGN TALL AA

    uint32_t const cps[1] = { 0x102b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c6), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_045)
{
    // 102C  ; [.31C6.0020.0002] 
    // MYANMAR VOWEL SIGN AA

    uint32_t const cps[1] = { 0x102c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_046)
{
    // 102D  ; [.31CA.0020.0002] 
    // MYANMAR VOWEL SIGN I

    uint32_t const cps[1] = { 0x102d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_047)
{
    // 102E  ; [.31CC.0020.0002] 
    // MYANMAR VOWEL SIGN II

    uint32_t const cps[1] = { 0x102e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_048)
{
    // 102F  ; [.31CE.0020.0002] 
    // MYANMAR VOWEL SIGN U

    uint32_t const cps[1] = { 0x102f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_049)
{
    // 1030  ; [.31D1.0020.0002] 
    // MYANMAR VOWEL SIGN UU

    uint32_t const cps[1] = { 0x1030 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_050)
{
    // 1031  ; [.31D6.0020.0002] 
    // MYANMAR VOWEL SIGN E

    uint32_t const cps[1] = { 0x1031 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_051)
{
    // 1032  ; [.31DA.0020.0002] 
    // MYANMAR VOWEL SIGN AI

    uint32_t const cps[1] = { 0x1032 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_052)
{
    // 1033  ; [.31CD.0020.0002] 
    // MYANMAR VOWEL SIGN MON II

    uint32_t const cps[1] = { 0x1033 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_053)
{
    // 1034  ; [.31DC.0020.0002] 
    // MYANMAR VOWEL SIGN MON O

    uint32_t const cps[1] = { 0x1034 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_054)
{
    // 1035  ; [.31D8.0020.0002] 
    // MYANMAR VOWEL SIGN E ABOVE

    uint32_t const cps[1] = { 0x1035 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_055)
{
    // 1036  ; [.0000.00C4.0002] 
    // MYANMAR SIGN ANUSVARA

    uint32_t const cps[1] = { 0x1036 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_056)
{
    // 1037  ; [.0000.00E6.0002] 
    // MYANMAR SIGN DOT BELOW

    uint32_t const cps[1] = { 0x1037 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xc6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_057)
{
    // 1038  ; [.0000.00C5.0002] 
    // MYANMAR SIGN VISARGA

    uint32_t const cps[1] = { 0x1038 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_058)
{
    // 1039  ; [.31E2.0020.0002] 
    // MYANMAR SIGN VIRAMA

    uint32_t const cps[1] = { 0x1039 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_059)
{
    // 103A  ; [.31E3.0020.0002] 
    // MYANMAR SIGN ASAT

    uint32_t const cps[1] = { 0x103a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_060)
{
    // 103B  ; [.319B.0020.0002] 
    // MYANMAR CONSONANT SIGN MEDIAL YA

    uint32_t const cps[1] = { 0x103b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_061)
{
    // 103C  ; [.319F.0020.0002] 
    // MYANMAR CONSONANT SIGN MEDIAL RA

    uint32_t const cps[1] = { 0x103c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_062)
{
    // 103D  ; [.31A3.0020.0002] 
    // MYANMAR CONSONANT SIGN MEDIAL WA

    uint32_t const cps[1] = { 0x103d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_063)
{
    // 103E  ; [.31AE.0020.0002] 
    // MYANMAR CONSONANT SIGN MEDIAL HA

    uint32_t const cps[1] = { 0x103e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_064)
{
    // 103F  ; [.31A9.0020.0004][.31E2.0020.0004][.31A9.0020.0004] 
    // MYANMAR LETTER GREAT SA

    uint32_t const cps[1] = { 0x103f };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x31a9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x31e2), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x31a9), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_026_065)
{
    // 1040  ; [.1CA3.0020.0002] 
    // MYANMAR DIGIT ZERO

    uint32_t const cps[1] = { 0x1040 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_066)
{
    // 1041  ; [.1CA4.0020.0002] 
    // MYANMAR DIGIT ONE

    uint32_t const cps[1] = { 0x1041 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_067)
{
    // 1042  ; [.1CA5.0020.0002] 
    // MYANMAR DIGIT TWO

    uint32_t const cps[1] = { 0x1042 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_068)
{
    // 1043  ; [.1CA6.0020.0002] 
    // MYANMAR DIGIT THREE

    uint32_t const cps[1] = { 0x1043 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_069)
{
    // 1044  ; [.1CA7.0020.0002] 
    // MYANMAR DIGIT FOUR

    uint32_t const cps[1] = { 0x1044 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_070)
{
    // 1045  ; [.1CA8.0020.0002] 
    // MYANMAR DIGIT FIVE

    uint32_t const cps[1] = { 0x1045 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_071)
{
    // 1046  ; [.1CA9.0020.0002] 
    // MYANMAR DIGIT SIX

    uint32_t const cps[1] = { 0x1046 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_072)
{
    // 1047  ; [.1CAA.0020.0002] 
    // MYANMAR DIGIT SEVEN

    uint32_t const cps[1] = { 0x1047 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_073)
{
    // 1048  ; [.1CAB.0020.0002] 
    // MYANMAR DIGIT EIGHT

    uint32_t const cps[1] = { 0x1048 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_074)
{
    // 1049  ; [.1CAC.0020.0002] 
    // MYANMAR DIGIT NINE

    uint32_t const cps[1] = { 0x1049 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_075)
{
    // 104A  ; [*029A.0020.0002] 
    // MYANMAR SIGN LITTLE SECTION

    uint32_t const cps[1] = { 0x104a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_076)
{
    // 104B  ; [*029B.0020.0002] 
    // MYANMAR SIGN SECTION

    uint32_t const cps[1] = { 0x104b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_077)
{
    // 104C  ; [*0424.0020.0002] 
    // MYANMAR SYMBOL LOCATIVE

    uint32_t const cps[1] = { 0x104c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x424), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_078)
{
    // 104D  ; [*0425.0020.0002] 
    // MYANMAR SYMBOL COMPLETED

    uint32_t const cps[1] = { 0x104d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x425), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_079)
{
    // 104E  ; [*0426.0020.0002] 
    // MYANMAR SYMBOL AFOREMENTIONED

    uint32_t const cps[1] = { 0x104e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x426), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_080)
{
    // 104F  ; [*0427.0020.0002] 
    // MYANMAR SYMBOL GENITIVE

    uint32_t const cps[1] = { 0x104f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x427), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_081)
{
    // 1050  ; [.31A6.0020.0002] 
    // MYANMAR LETTER SHA

    uint32_t const cps[1] = { 0x1050 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_082)
{
    // 1051  ; [.31A7.0020.0002] 
    // MYANMAR LETTER SSA

    uint32_t const cps[1] = { 0x1051 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_083)
{
    // 1052  ; [.31BE.0020.0002] 
    // MYANMAR LETTER VOCALIC R

    uint32_t const cps[1] = { 0x1052 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_084)
{
    // 1053  ; [.31BF.0020.0002] 
    // MYANMAR LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x1053 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_085)
{
    // 1054  ; [.31C0.0020.0002] 
    // MYANMAR LETTER VOCALIC L

    uint32_t const cps[1] = { 0x1054 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_086)
{
    // 1055  ; [.31C1.0020.0002] 
    // MYANMAR LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x1055 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_087)
{
    // 1056  ; [.31D2.0020.0002] 
    // MYANMAR VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x1056 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_088)
{
    // 1057  ; [.31D3.0020.0002] 
    // MYANMAR VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x1057 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_089)
{
    // 1058  ; [.31D4.0020.0002] 
    // MYANMAR VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x1058 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_090)
{
    // 1059  ; [.31D5.0020.0002] 
    // MYANMAR VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x1059 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_091)
{
    // 105A  ; [.3158.0020.0002] 
    // MYANMAR LETTER MON NGA

    uint32_t const cps[1] = { 0x105a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3158), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_092)
{
    // 105B  ; [.3166.0020.0002] 
    // MYANMAR LETTER MON JHA

    uint32_t const cps[1] = { 0x105b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3166), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_093)
{
    // 105C  ; [.31B3.0020.0002] 
    // MYANMAR LETTER MON BBA

    uint32_t const cps[1] = { 0x105c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_094)
{
    // 105D  ; [.31B4.0020.0002] 
    // MYANMAR LETTER MON BBE

    uint32_t const cps[1] = { 0x105d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_095)
{
    // 105E  ; [.318A.0020.0002] 
    // MYANMAR CONSONANT SIGN MON MEDIAL NA

    uint32_t const cps[1] = { 0x105e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_096)
{
    // 105F  ; [.3199.0020.0002] 
    // MYANMAR CONSONANT SIGN MON MEDIAL MA

    uint32_t const cps[1] = { 0x105f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3199), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_097)
{
    // 1060  ; [.31A1.0020.0002] 
    // MYANMAR CONSONANT SIGN MON MEDIAL LA

    uint32_t const cps[1] = { 0x1060 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_098)
{
    // 1061  ; [.316A.0020.0002] 
    // MYANMAR LETTER SGAW KAREN SHA

    uint32_t const cps[1] = { 0x1061 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x316a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_099)
{
    // 1062  ; [.31DD.0020.0002] 
    // MYANMAR VOWEL SIGN SGAW KAREN EU

    uint32_t const cps[1] = { 0x1062 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_100)
{
    // 1063  ; [.31E4.0020.0002] 
    // MYANMAR TONE MARK SGAW KAREN HATHI

    uint32_t const cps[1] = { 0x1063 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_101)
{
    // 1064  ; [.31E5.0020.0002] 
    // MYANMAR TONE MARK SGAW KAREN KE PHO

    uint32_t const cps[1] = { 0x1064 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_102)
{
    // 1065  ; [.31A8.0020.0002] 
    // MYANMAR LETTER WESTERN PWO KAREN THA

    uint32_t const cps[1] = { 0x1065 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_103)
{
    // 1066  ; [.31B7.0020.0002] 
    // MYANMAR LETTER WESTERN PWO KAREN PWA

    uint32_t const cps[1] = { 0x1066 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_104)
{
    // 1067  ; [.31DE.0020.0002] 
    // MYANMAR VOWEL SIGN WESTERN PWO KAREN EU

    uint32_t const cps[1] = { 0x1067 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_105)
{
    // 1068  ; [.31DF.0020.0002] 
    // MYANMAR VOWEL SIGN WESTERN PWO KAREN UE

    uint32_t const cps[1] = { 0x1068 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_106)
{
    // 1069  ; [.31E6.0020.0002] 
    // MYANMAR SIGN WESTERN PWO KAREN TONE-1

    uint32_t const cps[1] = { 0x1069 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_107)
{
    // 106A  ; [.31E7.0020.0002] 
    // MYANMAR SIGN WESTERN PWO KAREN TONE-2

    uint32_t const cps[1] = { 0x106a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_108)
{
    // 106B  ; [.31E8.0020.0002] 
    // MYANMAR SIGN WESTERN PWO KAREN TONE-3

    uint32_t const cps[1] = { 0x106b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_109)
{
    // 106C  ; [.31E9.0020.0002] 
    // MYANMAR SIGN WESTERN PWO KAREN TONE-4

    uint32_t const cps[1] = { 0x106c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_110)
{
    // 106D  ; [.31EA.0020.0002] 
    // MYANMAR SIGN WESTERN PWO KAREN TONE-5

    uint32_t const cps[1] = { 0x106d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_111)
{
    // 106E  ; [.317C.0020.0002] 
    // MYANMAR LETTER EASTERN PWO KAREN NNA

    uint32_t const cps[1] = { 0x106e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x317c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_112)
{
    // 106F  ; [.31B5.0020.0002] 
    // MYANMAR LETTER EASTERN PWO KAREN YWA

    uint32_t const cps[1] = { 0x106f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_113)
{
    // 1070  ; [.31B6.0020.0002] 
    // MYANMAR LETTER EASTERN PWO KAREN GHWA

    uint32_t const cps[1] = { 0x1070 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_114)
{
    // 1071  ; [.31CB.0020.0002] 
    // MYANMAR VOWEL SIGN GEBA KAREN I

    uint32_t const cps[1] = { 0x1071 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_115)
{
    // 1072  ; [.31C8.0020.0002] 
    // MYANMAR VOWEL SIGN KAYAH OE

    uint32_t const cps[1] = { 0x1072 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_116)
{
    // 1073  ; [.31CF.0020.0002] 
    // MYANMAR VOWEL SIGN KAYAH U

    uint32_t const cps[1] = { 0x1073 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_117)
{
    // 1074  ; [.31D0.0020.0002] 
    // MYANMAR VOWEL SIGN KAYAH EE

    uint32_t const cps[1] = { 0x1074 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_118)
{
    // 1075  ; [.314D.0020.0002] 
    // MYANMAR LETTER SHAN KA

    uint32_t const cps[1] = { 0x1075 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x314d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_119)
{
    // 1076  ; [.314F.0020.0002] 
    // MYANMAR LETTER SHAN KHA

    uint32_t const cps[1] = { 0x1076 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x314f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_120)
{
    // 1077  ; [.3151.0020.0002] 
    // MYANMAR LETTER SHAN GA

    uint32_t const cps[1] = { 0x1077 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3151), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_121)
{
    // 1078  ; [.315A.0020.0002] 
    // MYANMAR LETTER SHAN CA

    uint32_t const cps[1] = { 0x1078 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x315a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_122)
{
    // 1079  ; [.3163.0020.0002] 
    // MYANMAR LETTER SHAN ZA

    uint32_t const cps[1] = { 0x1079 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3163), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_123)
{
    // 107A  ; [.316D.0020.0002] 
    // MYANMAR LETTER SHAN NYA

    uint32_t const cps[1] = { 0x107a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x316d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_124)
{
    // 107B  ; [.3182.0020.0002] 
    // MYANMAR LETTER SHAN DA

    uint32_t const cps[1] = { 0x107b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3182), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_125)
{
    // 107C  ; [.3188.0020.0002] 
    // MYANMAR LETTER SHAN NA

    uint32_t const cps[1] = { 0x107c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3188), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_126)
{
    // 107D  ; [.318D.0020.0002] 
    // MYANMAR LETTER SHAN PHA

    uint32_t const cps[1] = { 0x107d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_127)
{
    // 107E  ; [.318E.0020.0002] 
    // MYANMAR LETTER SHAN FA

    uint32_t const cps[1] = { 0x107e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_128)
{
    // 107F  ; [.3193.0020.0002] 
    // MYANMAR LETTER SHAN BA

    uint32_t const cps[1] = { 0x107f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3193), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_129)
{
    // 1080  ; [.31A5.0020.0002] 
    // MYANMAR LETTER SHAN THA

    uint32_t const cps[1] = { 0x1080 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_130)
{
    // 1081  ; [.31AC.0020.0002] 
    // MYANMAR LETTER SHAN HA

    uint32_t const cps[1] = { 0x1081 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_131)
{
    // 1082  ; [.31A4.0020.0002] 
    // MYANMAR CONSONANT SIGN SHAN MEDIAL WA

    uint32_t const cps[1] = { 0x1082 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_132)
{
    // 1083  ; [.31C7.0020.0002] 
    // MYANMAR VOWEL SIGN SHAN AA

    uint32_t const cps[1] = { 0x1083 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_133)
{
    // 1084  ; [.31D7.0020.0002] 
    // MYANMAR VOWEL SIGN SHAN E

    uint32_t const cps[1] = { 0x1084 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_134)
{
    // 1085  ; [.31D9.0020.0002] 
    // MYANMAR VOWEL SIGN SHAN E ABOVE

    uint32_t const cps[1] = { 0x1085 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_135)
{
    // 1086  ; [.31E1.0020.0002] 
    // MYANMAR VOWEL SIGN SHAN FINAL Y

    uint32_t const cps[1] = { 0x1086 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_136)
{
    // 1087  ; [.31EB.0020.0002] 
    // MYANMAR SIGN SHAN TONE-2

    uint32_t const cps[1] = { 0x1087 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_137)
{
    // 1088  ; [.31ED.0020.0002] 
    // MYANMAR SIGN SHAN TONE-3

    uint32_t const cps[1] = { 0x1088 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_138)
{
    // 1089  ; [.31F0.0020.0002] 
    // MYANMAR SIGN SHAN TONE-5

    uint32_t const cps[1] = { 0x1089 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_139)
{
    // 108A  ; [.31F1.0020.0002] 
    // MYANMAR SIGN SHAN TONE-6

    uint32_t const cps[1] = { 0x108a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_140)
{
    // 108B  ; [.31EC.0020.0002] 
    // MYANMAR SIGN SHAN COUNCIL TONE-2

    uint32_t const cps[1] = { 0x108b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_141)
{
    // 108C  ; [.31EE.0020.0002] 
    // MYANMAR SIGN SHAN COUNCIL TONE-3

    uint32_t const cps[1] = { 0x108c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_142)
{
    // 108D  ; [.31EF.0020.0002] 
    // MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE

    uint32_t const cps[1] = { 0x108d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_143)
{
    // 108E  ; [.3190.0020.0002] 
    // MYANMAR LETTER RUMAI PALAUNG FA

    uint32_t const cps[1] = { 0x108e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3190), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_144)
{
    // 108F  ; [.31F2.0020.0002] 
    // MYANMAR SIGN RUMAI PALAUNG TONE-5

    uint32_t const cps[1] = { 0x108f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_145)
{
    // 1090  ; [.1CA3.0020.0002] 
    // MYANMAR SHAN DIGIT ZERO

    uint32_t const cps[1] = { 0x1090 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_146)
{
    // 1091  ; [.1CA4.0020.0002] 
    // MYANMAR SHAN DIGIT ONE

    uint32_t const cps[1] = { 0x1091 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_147)
{
    // 1092  ; [.1CA5.0020.0002] 
    // MYANMAR SHAN DIGIT TWO

    uint32_t const cps[1] = { 0x1092 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_148)
{
    // 1093  ; [.1CA6.0020.0002] 
    // MYANMAR SHAN DIGIT THREE

    uint32_t const cps[1] = { 0x1093 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_026_149)
{
    // 1094  ; [.1CA7.0020.0002] 
    // MYANMAR SHAN DIGIT FOUR

    uint32_t const cps[1] = { 0x1094 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

