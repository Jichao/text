// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_279_000)
{
    // 1068A 003F;	
    // (êöä) LINEAR A SIGN A350	[497B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068A, 0x003F };
    uint32_t const ces[9] = { 0x497B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_001)
{
    // 1068A 0061;	
    // (êöä) LINEAR A SIGN A350	[497B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068A, 0x0061 };
    uint32_t const ces[9] = { 0x497B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_002)
{
    // 1068A 0041;	
    // (êöä) LINEAR A SIGN A350	[497B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068A, 0x0041 };
    uint32_t const ces[9] = { 0x497B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_003)
{
    // 1068A 0062;	
    // (êöä) LINEAR A SIGN A350	[497B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068A, 0x0062 };
    uint32_t const ces[9] = { 0x497B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_004)
{
    // 1068B 0021;	
    // (êöã) LINEAR A SIGN A351	[497C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068B, 0x0021 };
    uint32_t const ces[9] = { 0x497C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_005)
{
    // 1068B 003F;	
    // (êöã) LINEAR A SIGN A351	[497C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068B, 0x003F };
    uint32_t const ces[9] = { 0x497C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_006)
{
    // 1068B 0061;	
    // (êöã) LINEAR A SIGN A351	[497C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068B, 0x0061 };
    uint32_t const ces[9] = { 0x497C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_007)
{
    // 1068B 0041;	
    // (êöã) LINEAR A SIGN A351	[497C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068B, 0x0041 };
    uint32_t const ces[9] = { 0x497C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_008)
{
    // 1068B 0062;	
    // (êöã) LINEAR A SIGN A351	[497C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068B, 0x0062 };
    uint32_t const ces[9] = { 0x497C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_009)
{
    // 1068C 0021;	
    // (êöå) LINEAR A SIGN A352	[497D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068C, 0x0021 };
    uint32_t const ces[9] = { 0x497D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_010)
{
    // 1068C 003F;	
    // (êöå) LINEAR A SIGN A352	[497D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068C, 0x003F };
    uint32_t const ces[9] = { 0x497D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_011)
{
    // 1068C 0061;	
    // (êöå) LINEAR A SIGN A352	[497D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068C, 0x0061 };
    uint32_t const ces[9] = { 0x497D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_012)
{
    // 1068C 0041;	
    // (êöå) LINEAR A SIGN A352	[497D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068C, 0x0041 };
    uint32_t const ces[9] = { 0x497D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_013)
{
    // 1068C 0062;	
    // (êöå) LINEAR A SIGN A352	[497D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068C, 0x0062 };
    uint32_t const ces[9] = { 0x497D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_014)
{
    // 1068D 0021;	
    // (êöç) LINEAR A SIGN A353	[497E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068D, 0x0021 };
    uint32_t const ces[9] = { 0x497E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_015)
{
    // 1068D 003F;	
    // (êöç) LINEAR A SIGN A353	[497E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068D, 0x003F };
    uint32_t const ces[9] = { 0x497E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_016)
{
    // 1068D 0061;	
    // (êöç) LINEAR A SIGN A353	[497E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068D, 0x0061 };
    uint32_t const ces[9] = { 0x497E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_017)
{
    // 1068D 0041;	
    // (êöç) LINEAR A SIGN A353	[497E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068D, 0x0041 };
    uint32_t const ces[9] = { 0x497E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_018)
{
    // 1068D 0062;	
    // (êöç) LINEAR A SIGN A353	[497E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068D, 0x0062 };
    uint32_t const ces[9] = { 0x497E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_019)
{
    // 1068E 0021;	
    // (êöé) LINEAR A SIGN A354	[497F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068E, 0x0021 };
    uint32_t const ces[9] = { 0x497F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_020)
{
    // 1068E 003F;	
    // (êöé) LINEAR A SIGN A354	[497F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068E, 0x003F };
    uint32_t const ces[9] = { 0x497F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_021)
{
    // 1068E 0061;	
    // (êöé) LINEAR A SIGN A354	[497F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068E, 0x0061 };
    uint32_t const ces[9] = { 0x497F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_022)
{
    // 1068E 0041;	
    // (êöé) LINEAR A SIGN A354	[497F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068E, 0x0041 };
    uint32_t const ces[9] = { 0x497F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_023)
{
    // 1068E 0062;	
    // (êöé) LINEAR A SIGN A354	[497F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068E, 0x0062 };
    uint32_t const ces[9] = { 0x497F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_024)
{
    // 1068F 0021;	
    // (êöè) LINEAR A SIGN A355	[4980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068F, 0x0021 };
    uint32_t const ces[9] = { 0x4980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_025)
{
    // 1068F 003F;	
    // (êöè) LINEAR A SIGN A355	[4980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068F, 0x003F };
    uint32_t const ces[9] = { 0x4980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_026)
{
    // 1068F 0061;	
    // (êöè) LINEAR A SIGN A355	[4980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068F, 0x0061 };
    uint32_t const ces[9] = { 0x4980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_027)
{
    // 1068F 0041;	
    // (êöè) LINEAR A SIGN A355	[4980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068F, 0x0041 };
    uint32_t const ces[9] = { 0x4980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_028)
{
    // 1068F 0062;	
    // (êöè) LINEAR A SIGN A355	[4980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068F, 0x0062 };
    uint32_t const ces[9] = { 0x4980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_029)
{
    // 10690 0021;	
    // (êöê) LINEAR A SIGN A356	[4981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10690, 0x0021 };
    uint32_t const ces[9] = { 0x4981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_030)
{
    // 10690 003F;	
    // (êöê) LINEAR A SIGN A356	[4981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10690, 0x003F };
    uint32_t const ces[9] = { 0x4981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_031)
{
    // 10690 0061;	
    // (êöê) LINEAR A SIGN A356	[4981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10690, 0x0061 };
    uint32_t const ces[9] = { 0x4981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_032)
{
    // 10690 0041;	
    // (êöê) LINEAR A SIGN A356	[4981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10690, 0x0041 };
    uint32_t const ces[9] = { 0x4981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_033)
{
    // 10690 0062;	
    // (êöê) LINEAR A SIGN A356	[4981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10690, 0x0062 };
    uint32_t const ces[9] = { 0x4981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_034)
{
    // 10691 0021;	
    // (êöë) LINEAR A SIGN A357	[4982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10691, 0x0021 };
    uint32_t const ces[9] = { 0x4982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_035)
{
    // 10691 003F;	
    // (êöë) LINEAR A SIGN A357	[4982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10691, 0x003F };
    uint32_t const ces[9] = { 0x4982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_036)
{
    // 10691 0061;	
    // (êöë) LINEAR A SIGN A357	[4982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10691, 0x0061 };
    uint32_t const ces[9] = { 0x4982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_037)
{
    // 10691 0041;	
    // (êöë) LINEAR A SIGN A357	[4982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10691, 0x0041 };
    uint32_t const ces[9] = { 0x4982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_038)
{
    // 10691 0062;	
    // (êöë) LINEAR A SIGN A357	[4982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10691, 0x0062 };
    uint32_t const ces[9] = { 0x4982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_039)
{
    // 10692 0021;	
    // (êöí) LINEAR A SIGN A358	[4983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10692, 0x0021 };
    uint32_t const ces[9] = { 0x4983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_040)
{
    // 10692 003F;	
    // (êöí) LINEAR A SIGN A358	[4983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10692, 0x003F };
    uint32_t const ces[9] = { 0x4983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_041)
{
    // 10692 0061;	
    // (êöí) LINEAR A SIGN A358	[4983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10692, 0x0061 };
    uint32_t const ces[9] = { 0x4983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_042)
{
    // 10692 0041;	
    // (êöí) LINEAR A SIGN A358	[4983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10692, 0x0041 };
    uint32_t const ces[9] = { 0x4983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_043)
{
    // 10692 0062;	
    // (êöí) LINEAR A SIGN A358	[4983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10692, 0x0062 };
    uint32_t const ces[9] = { 0x4983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_044)
{
    // 10693 0021;	
    // (êöì) LINEAR A SIGN A359	[4984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10693, 0x0021 };
    uint32_t const ces[9] = { 0x4984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_045)
{
    // 10693 003F;	
    // (êöì) LINEAR A SIGN A359	[4984 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10693, 0x003F };
    uint32_t const ces[9] = { 0x4984, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_046)
{
    // 10693 0061;	
    // (êöì) LINEAR A SIGN A359	[4984 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10693, 0x0061 };
    uint32_t const ces[9] = { 0x4984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_047)
{
    // 10693 0041;	
    // (êöì) LINEAR A SIGN A359	[4984 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10693, 0x0041 };
    uint32_t const ces[9] = { 0x4984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_048)
{
    // 10693 0062;	
    // (êöì) LINEAR A SIGN A359	[4984 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10693, 0x0062 };
    uint32_t const ces[9] = { 0x4984, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_049)
{
    // 10694 0021;	
    // (êöî) LINEAR A SIGN A360	[4985 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10694, 0x0021 };
    uint32_t const ces[9] = { 0x4985, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_050)
{
    // 10694 003F;	
    // (êöî) LINEAR A SIGN A360	[4985 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10694, 0x003F };
    uint32_t const ces[9] = { 0x4985, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_051)
{
    // 10694 0061;	
    // (êöî) LINEAR A SIGN A360	[4985 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10694, 0x0061 };
    uint32_t const ces[9] = { 0x4985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_052)
{
    // 10694 0041;	
    // (êöî) LINEAR A SIGN A360	[4985 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10694, 0x0041 };
    uint32_t const ces[9] = { 0x4985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_053)
{
    // 10694 0062;	
    // (êöî) LINEAR A SIGN A360	[4985 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10694, 0x0062 };
    uint32_t const ces[9] = { 0x4985, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_054)
{
    // 10695 0021;	
    // (êöï) LINEAR A SIGN A361	[4986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10695, 0x0021 };
    uint32_t const ces[9] = { 0x4986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_055)
{
    // 10695 003F;	
    // (êöï) LINEAR A SIGN A361	[4986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10695, 0x003F };
    uint32_t const ces[9] = { 0x4986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_056)
{
    // 10695 0061;	
    // (êöï) LINEAR A SIGN A361	[4986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10695, 0x0061 };
    uint32_t const ces[9] = { 0x4986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_057)
{
    // 10695 0041;	
    // (êöï) LINEAR A SIGN A361	[4986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10695, 0x0041 };
    uint32_t const ces[9] = { 0x4986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_058)
{
    // 10695 0062;	
    // (êöï) LINEAR A SIGN A361	[4986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10695, 0x0062 };
    uint32_t const ces[9] = { 0x4986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_059)
{
    // 10696 0021;	
    // (êöñ) LINEAR A SIGN A362	[4987 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10696, 0x0021 };
    uint32_t const ces[9] = { 0x4987, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_060)
{
    // 10696 003F;	
    // (êöñ) LINEAR A SIGN A362	[4987 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10696, 0x003F };
    uint32_t const ces[9] = { 0x4987, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_061)
{
    // 10696 0061;	
    // (êöñ) LINEAR A SIGN A362	[4987 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10696, 0x0061 };
    uint32_t const ces[9] = { 0x4987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_062)
{
    // 10696 0041;	
    // (êöñ) LINEAR A SIGN A362	[4987 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10696, 0x0041 };
    uint32_t const ces[9] = { 0x4987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_063)
{
    // 10696 0062;	
    // (êöñ) LINEAR A SIGN A362	[4987 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10696, 0x0062 };
    uint32_t const ces[9] = { 0x4987, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_064)
{
    // 10697 0021;	
    // (êöó) LINEAR A SIGN A363	[4988 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10697, 0x0021 };
    uint32_t const ces[9] = { 0x4988, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_065)
{
    // 10697 003F;	
    // (êöó) LINEAR A SIGN A363	[4988 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10697, 0x003F };
    uint32_t const ces[9] = { 0x4988, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_066)
{
    // 10697 0061;	
    // (êöó) LINEAR A SIGN A363	[4988 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10697, 0x0061 };
    uint32_t const ces[9] = { 0x4988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_067)
{
    // 10697 0041;	
    // (êöó) LINEAR A SIGN A363	[4988 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10697, 0x0041 };
    uint32_t const ces[9] = { 0x4988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_068)
{
    // 10697 0062;	
    // (êöó) LINEAR A SIGN A363	[4988 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10697, 0x0062 };
    uint32_t const ces[9] = { 0x4988, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_069)
{
    // 10698 0021;	
    // (êöò) LINEAR A SIGN A364	[4989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10698, 0x0021 };
    uint32_t const ces[9] = { 0x4989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_070)
{
    // 10698 003F;	
    // (êöò) LINEAR A SIGN A364	[4989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10698, 0x003F };
    uint32_t const ces[9] = { 0x4989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_071)
{
    // 10698 0061;	
    // (êöò) LINEAR A SIGN A364	[4989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10698, 0x0061 };
    uint32_t const ces[9] = { 0x4989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_072)
{
    // 10698 0041;	
    // (êöò) LINEAR A SIGN A364	[4989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10698, 0x0041 };
    uint32_t const ces[9] = { 0x4989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_073)
{
    // 10698 0062;	
    // (êöò) LINEAR A SIGN A364	[4989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10698, 0x0062 };
    uint32_t const ces[9] = { 0x4989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_074)
{
    // 10699 0021;	
    // (êöô) LINEAR A SIGN A365	[498A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10699, 0x0021 };
    uint32_t const ces[9] = { 0x498A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_075)
{
    // 10699 003F;	
    // (êöô) LINEAR A SIGN A365	[498A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10699, 0x003F };
    uint32_t const ces[9] = { 0x498A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_076)
{
    // 10699 0061;	
    // (êöô) LINEAR A SIGN A365	[498A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10699, 0x0061 };
    uint32_t const ces[9] = { 0x498A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_077)
{
    // 10699 0041;	
    // (êöô) LINEAR A SIGN A365	[498A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10699, 0x0041 };
    uint32_t const ces[9] = { 0x498A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_078)
{
    // 10699 0062;	
    // (êöô) LINEAR A SIGN A365	[498A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10699, 0x0062 };
    uint32_t const ces[9] = { 0x498A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_079)
{
    // 1069A 0021;	
    // (êöö) LINEAR A SIGN A366	[498B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069A, 0x0021 };
    uint32_t const ces[9] = { 0x498B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_080)
{
    // 1069A 003F;	
    // (êöö) LINEAR A SIGN A366	[498B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069A, 0x003F };
    uint32_t const ces[9] = { 0x498B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_081)
{
    // 1069A 0061;	
    // (êöö) LINEAR A SIGN A366	[498B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069A, 0x0061 };
    uint32_t const ces[9] = { 0x498B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_082)
{
    // 1069A 0041;	
    // (êöö) LINEAR A SIGN A366	[498B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069A, 0x0041 };
    uint32_t const ces[9] = { 0x498B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_083)
{
    // 1069A 0062;	
    // (êöö) LINEAR A SIGN A366	[498B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069A, 0x0062 };
    uint32_t const ces[9] = { 0x498B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_084)
{
    // 1069B 0021;	
    // (êöõ) LINEAR A SIGN A367	[498C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069B, 0x0021 };
    uint32_t const ces[9] = { 0x498C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_085)
{
    // 1069B 003F;	
    // (êöõ) LINEAR A SIGN A367	[498C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069B, 0x003F };
    uint32_t const ces[9] = { 0x498C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_086)
{
    // 1069B 0061;	
    // (êöõ) LINEAR A SIGN A367	[498C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069B, 0x0061 };
    uint32_t const ces[9] = { 0x498C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_087)
{
    // 1069B 0041;	
    // (êöõ) LINEAR A SIGN A367	[498C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069B, 0x0041 };
    uint32_t const ces[9] = { 0x498C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_088)
{
    // 1069B 0062;	
    // (êöõ) LINEAR A SIGN A367	[498C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069B, 0x0062 };
    uint32_t const ces[9] = { 0x498C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_089)
{
    // 1069C 0021;	
    // (êöú) LINEAR A SIGN A368	[498D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069C, 0x0021 };
    uint32_t const ces[9] = { 0x498D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_090)
{
    // 1069C 003F;	
    // (êöú) LINEAR A SIGN A368	[498D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069C, 0x003F };
    uint32_t const ces[9] = { 0x498D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_091)
{
    // 1069C 0061;	
    // (êöú) LINEAR A SIGN A368	[498D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069C, 0x0061 };
    uint32_t const ces[9] = { 0x498D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_092)
{
    // 1069C 0041;	
    // (êöú) LINEAR A SIGN A368	[498D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069C, 0x0041 };
    uint32_t const ces[9] = { 0x498D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_093)
{
    // 1069C 0062;	
    // (êöú) LINEAR A SIGN A368	[498D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069C, 0x0062 };
    uint32_t const ces[9] = { 0x498D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_094)
{
    // 1069D 0021;	
    // (êöù) LINEAR A SIGN A369	[498E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069D, 0x0021 };
    uint32_t const ces[9] = { 0x498E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_095)
{
    // 1069D 003F;	
    // (êöù) LINEAR A SIGN A369	[498E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069D, 0x003F };
    uint32_t const ces[9] = { 0x498E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_096)
{
    // 1069D 0061;	
    // (êöù) LINEAR A SIGN A369	[498E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069D, 0x0061 };
    uint32_t const ces[9] = { 0x498E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_097)
{
    // 1069D 0041;	
    // (êöù) LINEAR A SIGN A369	[498E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069D, 0x0041 };
    uint32_t const ces[9] = { 0x498E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_098)
{
    // 1069D 0062;	
    // (êöù) LINEAR A SIGN A369	[498E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069D, 0x0062 };
    uint32_t const ces[9] = { 0x498E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_099)
{
    // 1069E 0021;	
    // (êöû) LINEAR A SIGN A370	[498F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069E, 0x0021 };
    uint32_t const ces[9] = { 0x498F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_100)
{
    // 1069E 003F;	
    // (êöû) LINEAR A SIGN A370	[498F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069E, 0x003F };
    uint32_t const ces[9] = { 0x498F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_101)
{
    // 1069E 0061;	
    // (êöû) LINEAR A SIGN A370	[498F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069E, 0x0061 };
    uint32_t const ces[9] = { 0x498F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_102)
{
    // 1069E 0041;	
    // (êöû) LINEAR A SIGN A370	[498F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069E, 0x0041 };
    uint32_t const ces[9] = { 0x498F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_103)
{
    // 1069E 0062;	
    // (êöû) LINEAR A SIGN A370	[498F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069E, 0x0062 };
    uint32_t const ces[9] = { 0x498F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_104)
{
    // 1069F 0021;	
    // (êöü) LINEAR A SIGN A371	[4990 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069F, 0x0021 };
    uint32_t const ces[9] = { 0x4990, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_105)
{
    // 1069F 003F;	
    // (êöü) LINEAR A SIGN A371	[4990 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069F, 0x003F };
    uint32_t const ces[9] = { 0x4990, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_106)
{
    // 1069F 0061;	
    // (êöü) LINEAR A SIGN A371	[4990 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069F, 0x0061 };
    uint32_t const ces[9] = { 0x4990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_107)
{
    // 1069F 0041;	
    // (êöü) LINEAR A SIGN A371	[4990 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069F, 0x0041 };
    uint32_t const ces[9] = { 0x4990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_108)
{
    // 1069F 0062;	
    // (êöü) LINEAR A SIGN A371	[4990 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069F, 0x0062 };
    uint32_t const ces[9] = { 0x4990, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_109)
{
    // 106A0 0021;	
    // (êö†) LINEAR A SIGN A400-VAS	[4991 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A0, 0x0021 };
    uint32_t const ces[9] = { 0x4991, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_110)
{
    // 106A0 003F;	
    // (êö†) LINEAR A SIGN A400-VAS	[4991 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A0, 0x003F };
    uint32_t const ces[9] = { 0x4991, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_111)
{
    // 106A0 0061;	
    // (êö†) LINEAR A SIGN A400-VAS	[4991 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A0, 0x0061 };
    uint32_t const ces[9] = { 0x4991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_112)
{
    // 106A0 0041;	
    // (êö†) LINEAR A SIGN A400-VAS	[4991 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A0, 0x0041 };
    uint32_t const ces[9] = { 0x4991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_113)
{
    // 106A0 0062;	
    // (êö†) LINEAR A SIGN A400-VAS	[4991 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A0, 0x0062 };
    uint32_t const ces[9] = { 0x4991, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_114)
{
    // 106A1 0021;	
    // (êö°) LINEAR A SIGN A401-VAS	[4992 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A1, 0x0021 };
    uint32_t const ces[9] = { 0x4992, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_115)
{
    // 106A1 003F;	
    // (êö°) LINEAR A SIGN A401-VAS	[4992 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A1, 0x003F };
    uint32_t const ces[9] = { 0x4992, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_116)
{
    // 106A1 0061;	
    // (êö°) LINEAR A SIGN A401-VAS	[4992 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A1, 0x0061 };
    uint32_t const ces[9] = { 0x4992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_117)
{
    // 106A1 0041;	
    // (êö°) LINEAR A SIGN A401-VAS	[4992 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A1, 0x0041 };
    uint32_t const ces[9] = { 0x4992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_118)
{
    // 106A1 0062;	
    // (êö°) LINEAR A SIGN A401-VAS	[4992 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A1, 0x0062 };
    uint32_t const ces[9] = { 0x4992, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_119)
{
    // 106A2 0021;	
    // (êö¢) LINEAR A SIGN A402-VAS	[4993 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A2, 0x0021 };
    uint32_t const ces[9] = { 0x4993, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_120)
{
    // 106A2 003F;	
    // (êö¢) LINEAR A SIGN A402-VAS	[4993 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A2, 0x003F };
    uint32_t const ces[9] = { 0x4993, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_121)
{
    // 106A2 0061;	
    // (êö¢) LINEAR A SIGN A402-VAS	[4993 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A2, 0x0061 };
    uint32_t const ces[9] = { 0x4993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_122)
{
    // 106A2 0041;	
    // (êö¢) LINEAR A SIGN A402-VAS	[4993 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A2, 0x0041 };
    uint32_t const ces[9] = { 0x4993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_123)
{
    // 106A2 0062;	
    // (êö¢) LINEAR A SIGN A402-VAS	[4993 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A2, 0x0062 };
    uint32_t const ces[9] = { 0x4993, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_124)
{
    // 106A3 0021;	
    // (êö£) LINEAR A SIGN A403-VAS	[4994 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A3, 0x0021 };
    uint32_t const ces[9] = { 0x4994, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_125)
{
    // 106A3 003F;	
    // (êö£) LINEAR A SIGN A403-VAS	[4994 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A3, 0x003F };
    uint32_t const ces[9] = { 0x4994, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_126)
{
    // 106A3 0061;	
    // (êö£) LINEAR A SIGN A403-VAS	[4994 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A3, 0x0061 };
    uint32_t const ces[9] = { 0x4994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_127)
{
    // 106A3 0041;	
    // (êö£) LINEAR A SIGN A403-VAS	[4994 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A3, 0x0041 };
    uint32_t const ces[9] = { 0x4994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_128)
{
    // 106A3 0062;	
    // (êö£) LINEAR A SIGN A403-VAS	[4994 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A3, 0x0062 };
    uint32_t const ces[9] = { 0x4994, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_129)
{
    // 106A4 0021;	
    // (êö§) LINEAR A SIGN A404-VAS	[4995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A4, 0x0021 };
    uint32_t const ces[9] = { 0x4995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_130)
{
    // 106A4 003F;	
    // (êö§) LINEAR A SIGN A404-VAS	[4995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A4, 0x003F };
    uint32_t const ces[9] = { 0x4995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_131)
{
    // 106A4 0061;	
    // (êö§) LINEAR A SIGN A404-VAS	[4995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A4, 0x0061 };
    uint32_t const ces[9] = { 0x4995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_132)
{
    // 106A4 0041;	
    // (êö§) LINEAR A SIGN A404-VAS	[4995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A4, 0x0041 };
    uint32_t const ces[9] = { 0x4995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_133)
{
    // 106A4 0062;	
    // (êö§) LINEAR A SIGN A404-VAS	[4995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A4, 0x0062 };
    uint32_t const ces[9] = { 0x4995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_134)
{
    // 106A5 0021;	
    // (êö•) LINEAR A SIGN A405-VAS	[4996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A5, 0x0021 };
    uint32_t const ces[9] = { 0x4996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_135)
{
    // 106A5 003F;	
    // (êö•) LINEAR A SIGN A405-VAS	[4996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A5, 0x003F };
    uint32_t const ces[9] = { 0x4996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_136)
{
    // 106A5 0061;	
    // (êö•) LINEAR A SIGN A405-VAS	[4996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A5, 0x0061 };
    uint32_t const ces[9] = { 0x4996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_137)
{
    // 106A5 0041;	
    // (êö•) LINEAR A SIGN A405-VAS	[4996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A5, 0x0041 };
    uint32_t const ces[9] = { 0x4996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_138)
{
    // 106A5 0062;	
    // (êö•) LINEAR A SIGN A405-VAS	[4996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A5, 0x0062 };
    uint32_t const ces[9] = { 0x4996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_139)
{
    // 106A6 0021;	
    // (êö¶) LINEAR A SIGN A406-VAS	[4997 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A6, 0x0021 };
    uint32_t const ces[9] = { 0x4997, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_140)
{
    // 106A6 003F;	
    // (êö¶) LINEAR A SIGN A406-VAS	[4997 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A6, 0x003F };
    uint32_t const ces[9] = { 0x4997, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_141)
{
    // 106A6 0061;	
    // (êö¶) LINEAR A SIGN A406-VAS	[4997 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A6, 0x0061 };
    uint32_t const ces[9] = { 0x4997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_142)
{
    // 106A6 0041;	
    // (êö¶) LINEAR A SIGN A406-VAS	[4997 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A6, 0x0041 };
    uint32_t const ces[9] = { 0x4997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_143)
{
    // 106A6 0062;	
    // (êö¶) LINEAR A SIGN A406-VAS	[4997 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A6, 0x0062 };
    uint32_t const ces[9] = { 0x4997, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_144)
{
    // 106A7 0021;	
    // (êöß) LINEAR A SIGN A407-VAS	[4998 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A7, 0x0021 };
    uint32_t const ces[9] = { 0x4998, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_145)
{
    // 106A7 003F;	
    // (êöß) LINEAR A SIGN A407-VAS	[4998 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A7, 0x003F };
    uint32_t const ces[9] = { 0x4998, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_146)
{
    // 106A7 0061;	
    // (êöß) LINEAR A SIGN A407-VAS	[4998 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A7, 0x0061 };
    uint32_t const ces[9] = { 0x4998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_147)
{
    // 106A7 0041;	
    // (êöß) LINEAR A SIGN A407-VAS	[4998 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A7, 0x0041 };
    uint32_t const ces[9] = { 0x4998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_148)
{
    // 106A7 0062;	
    // (êöß) LINEAR A SIGN A407-VAS	[4998 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A7, 0x0062 };
    uint32_t const ces[9] = { 0x4998, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_149)
{
    // 106A8 0021;	
    // (êö®) LINEAR A SIGN A408-VAS	[4999 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A8, 0x0021 };
    uint32_t const ces[9] = { 0x4999, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_150)
{
    // 106A8 003F;	
    // (êö®) LINEAR A SIGN A408-VAS	[4999 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A8, 0x003F };
    uint32_t const ces[9] = { 0x4999, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_151)
{
    // 106A8 0061;	
    // (êö®) LINEAR A SIGN A408-VAS	[4999 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A8, 0x0061 };
    uint32_t const ces[9] = { 0x4999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_152)
{
    // 106A8 0041;	
    // (êö®) LINEAR A SIGN A408-VAS	[4999 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A8, 0x0041 };
    uint32_t const ces[9] = { 0x4999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_153)
{
    // 106A8 0062;	
    // (êö®) LINEAR A SIGN A408-VAS	[4999 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A8, 0x0062 };
    uint32_t const ces[9] = { 0x4999, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_154)
{
    // 106A9 0021;	
    // (êö©) LINEAR A SIGN A409-VAS	[499A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A9, 0x0021 };
    uint32_t const ces[9] = { 0x499A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_155)
{
    // 106A9 003F;	
    // (êö©) LINEAR A SIGN A409-VAS	[499A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A9, 0x003F };
    uint32_t const ces[9] = { 0x499A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_156)
{
    // 106A9 0061;	
    // (êö©) LINEAR A SIGN A409-VAS	[499A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A9, 0x0061 };
    uint32_t const ces[9] = { 0x499A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_157)
{
    // 106A9 0041;	
    // (êö©) LINEAR A SIGN A409-VAS	[499A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A9, 0x0041 };
    uint32_t const ces[9] = { 0x499A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_158)
{
    // 106A9 0062;	
    // (êö©) LINEAR A SIGN A409-VAS	[499A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A9, 0x0062 };
    uint32_t const ces[9] = { 0x499A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_159)
{
    // 106AA 0021;	
    // (êö™) LINEAR A SIGN A410-VAS	[499B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AA, 0x0021 };
    uint32_t const ces[9] = { 0x499B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_160)
{
    // 106AA 003F;	
    // (êö™) LINEAR A SIGN A410-VAS	[499B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AA, 0x003F };
    uint32_t const ces[9] = { 0x499B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_161)
{
    // 106AA 0061;	
    // (êö™) LINEAR A SIGN A410-VAS	[499B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AA, 0x0061 };
    uint32_t const ces[9] = { 0x499B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_162)
{
    // 106AA 0041;	
    // (êö™) LINEAR A SIGN A410-VAS	[499B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AA, 0x0041 };
    uint32_t const ces[9] = { 0x499B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_163)
{
    // 106AA 0062;	
    // (êö™) LINEAR A SIGN A410-VAS	[499B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AA, 0x0062 };
    uint32_t const ces[9] = { 0x499B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_164)
{
    // 106AB 0021;	
    // (êö´) LINEAR A SIGN A411-VAS	[499C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AB, 0x0021 };
    uint32_t const ces[9] = { 0x499C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_165)
{
    // 106AB 003F;	
    // (êö´) LINEAR A SIGN A411-VAS	[499C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AB, 0x003F };
    uint32_t const ces[9] = { 0x499C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_166)
{
    // 106AB 0061;	
    // (êö´) LINEAR A SIGN A411-VAS	[499C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AB, 0x0061 };
    uint32_t const ces[9] = { 0x499C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_167)
{
    // 106AB 0041;	
    // (êö´) LINEAR A SIGN A411-VAS	[499C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AB, 0x0041 };
    uint32_t const ces[9] = { 0x499C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_168)
{
    // 106AB 0062;	
    // (êö´) LINEAR A SIGN A411-VAS	[499C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AB, 0x0062 };
    uint32_t const ces[9] = { 0x499C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_169)
{
    // 106AC 0021;	
    // (êö¨) LINEAR A SIGN A412-VAS	[499D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AC, 0x0021 };
    uint32_t const ces[9] = { 0x499D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_170)
{
    // 106AC 003F;	
    // (êö¨) LINEAR A SIGN A412-VAS	[499D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AC, 0x003F };
    uint32_t const ces[9] = { 0x499D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_171)
{
    // 106AC 0061;	
    // (êö¨) LINEAR A SIGN A412-VAS	[499D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AC, 0x0061 };
    uint32_t const ces[9] = { 0x499D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_172)
{
    // 106AC 0041;	
    // (êö¨) LINEAR A SIGN A412-VAS	[499D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AC, 0x0041 };
    uint32_t const ces[9] = { 0x499D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_173)
{
    // 106AC 0062;	
    // (êö¨) LINEAR A SIGN A412-VAS	[499D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AC, 0x0062 };
    uint32_t const ces[9] = { 0x499D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_174)
{
    // 106AD 0021;	
    // (êö≠) LINEAR A SIGN A413-VAS	[499E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AD, 0x0021 };
    uint32_t const ces[9] = { 0x499E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_175)
{
    // 106AD 003F;	
    // (êö≠) LINEAR A SIGN A413-VAS	[499E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AD, 0x003F };
    uint32_t const ces[9] = { 0x499E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_176)
{
    // 106AD 0061;	
    // (êö≠) LINEAR A SIGN A413-VAS	[499E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AD, 0x0061 };
    uint32_t const ces[9] = { 0x499E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_177)
{
    // 106AD 0041;	
    // (êö≠) LINEAR A SIGN A413-VAS	[499E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AD, 0x0041 };
    uint32_t const ces[9] = { 0x499E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_178)
{
    // 106AD 0062;	
    // (êö≠) LINEAR A SIGN A413-VAS	[499E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AD, 0x0062 };
    uint32_t const ces[9] = { 0x499E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_179)
{
    // 106AE 0021;	
    // (êöÆ) LINEAR A SIGN A414-VAS	[499F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AE, 0x0021 };
    uint32_t const ces[9] = { 0x499F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_180)
{
    // 106AE 003F;	
    // (êöÆ) LINEAR A SIGN A414-VAS	[499F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AE, 0x003F };
    uint32_t const ces[9] = { 0x499F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_181)
{
    // 106AE 0061;	
    // (êöÆ) LINEAR A SIGN A414-VAS	[499F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AE, 0x0061 };
    uint32_t const ces[9] = { 0x499F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_182)
{
    // 106AE 0041;	
    // (êöÆ) LINEAR A SIGN A414-VAS	[499F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AE, 0x0041 };
    uint32_t const ces[9] = { 0x499F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_183)
{
    // 106AE 0062;	
    // (êöÆ) LINEAR A SIGN A414-VAS	[499F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AE, 0x0062 };
    uint32_t const ces[9] = { 0x499F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_184)
{
    // 106AF 0021;	
    // (êöØ) LINEAR A SIGN A415-VAS	[49A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AF, 0x0021 };
    uint32_t const ces[9] = { 0x49A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_185)
{
    // 106AF 003F;	
    // (êöØ) LINEAR A SIGN A415-VAS	[49A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AF, 0x003F };
    uint32_t const ces[9] = { 0x49A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_186)
{
    // 106AF 0061;	
    // (êöØ) LINEAR A SIGN A415-VAS	[49A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AF, 0x0061 };
    uint32_t const ces[9] = { 0x49A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_187)
{
    // 106AF 0041;	
    // (êöØ) LINEAR A SIGN A415-VAS	[49A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106AF, 0x0041 };
    uint32_t const ces[9] = { 0x49A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_188)
{
    // 106AF 0062;	
    // (êöØ) LINEAR A SIGN A415-VAS	[49A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106AF, 0x0062 };
    uint32_t const ces[9] = { 0x49A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_189)
{
    // 106B0 0021;	
    // (êö∞) LINEAR A SIGN A416-VAS	[49A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B0, 0x0021 };
    uint32_t const ces[9] = { 0x49A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_190)
{
    // 106B0 003F;	
    // (êö∞) LINEAR A SIGN A416-VAS	[49A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B0, 0x003F };
    uint32_t const ces[9] = { 0x49A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_191)
{
    // 106B0 0061;	
    // (êö∞) LINEAR A SIGN A416-VAS	[49A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B0, 0x0061 };
    uint32_t const ces[9] = { 0x49A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_192)
{
    // 106B0 0041;	
    // (êö∞) LINEAR A SIGN A416-VAS	[49A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B0, 0x0041 };
    uint32_t const ces[9] = { 0x49A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_193)
{
    // 106B0 0062;	
    // (êö∞) LINEAR A SIGN A416-VAS	[49A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B0, 0x0062 };
    uint32_t const ces[9] = { 0x49A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_194)
{
    // 106B1 0021;	
    // (êö±) LINEAR A SIGN A417-VAS	[49A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B1, 0x0021 };
    uint32_t const ces[9] = { 0x49A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_195)
{
    // 106B1 003F;	
    // (êö±) LINEAR A SIGN A417-VAS	[49A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B1, 0x003F };
    uint32_t const ces[9] = { 0x49A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_196)
{
    // 106B1 0061;	
    // (êö±) LINEAR A SIGN A417-VAS	[49A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B1, 0x0061 };
    uint32_t const ces[9] = { 0x49A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_197)
{
    // 106B1 0041;	
    // (êö±) LINEAR A SIGN A417-VAS	[49A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B1, 0x0041 };
    uint32_t const ces[9] = { 0x49A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_198)
{
    // 106B1 0062;	
    // (êö±) LINEAR A SIGN A417-VAS	[49A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B1, 0x0062 };
    uint32_t const ces[9] = { 0x49A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_199)
{
    // 106B2 0021;	
    // (êö≤) LINEAR A SIGN A418-VAS	[49A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B2, 0x0021 };
    uint32_t const ces[9] = { 0x49A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_200)
{
    // 106B2 003F;	
    // (êö≤) LINEAR A SIGN A418-VAS	[49A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B2, 0x003F };
    uint32_t const ces[9] = { 0x49A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_201)
{
    // 106B2 0061;	
    // (êö≤) LINEAR A SIGN A418-VAS	[49A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B2, 0x0061 };
    uint32_t const ces[9] = { 0x49A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_202)
{
    // 106B2 0041;	
    // (êö≤) LINEAR A SIGN A418-VAS	[49A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B2, 0x0041 };
    uint32_t const ces[9] = { 0x49A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_203)
{
    // 106B2 0062;	
    // (êö≤) LINEAR A SIGN A418-VAS	[49A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B2, 0x0062 };
    uint32_t const ces[9] = { 0x49A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_204)
{
    // 106B3 0021;	
    // (êö≥) LINEAR A SIGN A501	[49A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B3, 0x0021 };
    uint32_t const ces[9] = { 0x49A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_205)
{
    // 106B3 003F;	
    // (êö≥) LINEAR A SIGN A501	[49A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B3, 0x003F };
    uint32_t const ces[9] = { 0x49A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_206)
{
    // 106B3 0061;	
    // (êö≥) LINEAR A SIGN A501	[49A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B3, 0x0061 };
    uint32_t const ces[9] = { 0x49A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_207)
{
    // 106B3 0041;	
    // (êö≥) LINEAR A SIGN A501	[49A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B3, 0x0041 };
    uint32_t const ces[9] = { 0x49A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_208)
{
    // 106B3 0062;	
    // (êö≥) LINEAR A SIGN A501	[49A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B3, 0x0062 };
    uint32_t const ces[9] = { 0x49A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_209)
{
    // 106B4 0021;	
    // (êö¥) LINEAR A SIGN A502	[49A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B4, 0x0021 };
    uint32_t const ces[9] = { 0x49A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_210)
{
    // 106B4 003F;	
    // (êö¥) LINEAR A SIGN A502	[49A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B4, 0x003F };
    uint32_t const ces[9] = { 0x49A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_211)
{
    // 106B4 0061;	
    // (êö¥) LINEAR A SIGN A502	[49A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B4, 0x0061 };
    uint32_t const ces[9] = { 0x49A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_212)
{
    // 106B4 0041;	
    // (êö¥) LINEAR A SIGN A502	[49A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B4, 0x0041 };
    uint32_t const ces[9] = { 0x49A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_213)
{
    // 106B4 0062;	
    // (êö¥) LINEAR A SIGN A502	[49A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B4, 0x0062 };
    uint32_t const ces[9] = { 0x49A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_214)
{
    // 106B5 0021;	
    // (êöµ) LINEAR A SIGN A503	[49A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B5, 0x0021 };
    uint32_t const ces[9] = { 0x49A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_215)
{
    // 106B5 003F;	
    // (êöµ) LINEAR A SIGN A503	[49A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B5, 0x003F };
    uint32_t const ces[9] = { 0x49A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_216)
{
    // 106B5 0061;	
    // (êöµ) LINEAR A SIGN A503	[49A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B5, 0x0061 };
    uint32_t const ces[9] = { 0x49A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_217)
{
    // 106B5 0041;	
    // (êöµ) LINEAR A SIGN A503	[49A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B5, 0x0041 };
    uint32_t const ces[9] = { 0x49A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_218)
{
    // 106B5 0062;	
    // (êöµ) LINEAR A SIGN A503	[49A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B5, 0x0062 };
    uint32_t const ces[9] = { 0x49A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_219)
{
    // 106B6 0021;	
    // (êö∂) LINEAR A SIGN A504	[49A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B6, 0x0021 };
    uint32_t const ces[9] = { 0x49A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_220)
{
    // 106B6 003F;	
    // (êö∂) LINEAR A SIGN A504	[49A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B6, 0x003F };
    uint32_t const ces[9] = { 0x49A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_221)
{
    // 106B6 0061;	
    // (êö∂) LINEAR A SIGN A504	[49A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B6, 0x0061 };
    uint32_t const ces[9] = { 0x49A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_222)
{
    // 106B6 0041;	
    // (êö∂) LINEAR A SIGN A504	[49A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B6, 0x0041 };
    uint32_t const ces[9] = { 0x49A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_223)
{
    // 106B6 0062;	
    // (êö∂) LINEAR A SIGN A504	[49A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B6, 0x0062 };
    uint32_t const ces[9] = { 0x49A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_224)
{
    // 106B7 0021;	
    // (êö∑) LINEAR A SIGN A505	[49A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B7, 0x0021 };
    uint32_t const ces[9] = { 0x49A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_225)
{
    // 106B7 003F;	
    // (êö∑) LINEAR A SIGN A505	[49A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B7, 0x003F };
    uint32_t const ces[9] = { 0x49A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_226)
{
    // 106B7 0061;	
    // (êö∑) LINEAR A SIGN A505	[49A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B7, 0x0061 };
    uint32_t const ces[9] = { 0x49A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_227)
{
    // 106B7 0041;	
    // (êö∑) LINEAR A SIGN A505	[49A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B7, 0x0041 };
    uint32_t const ces[9] = { 0x49A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_228)
{
    // 106B7 0062;	
    // (êö∑) LINEAR A SIGN A505	[49A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B7, 0x0062 };
    uint32_t const ces[9] = { 0x49A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_229)
{
    // 106B8 0021;	
    // (êö∏) LINEAR A SIGN A506	[49A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B8, 0x0021 };
    uint32_t const ces[9] = { 0x49A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_230)
{
    // 106B8 003F;	
    // (êö∏) LINEAR A SIGN A506	[49A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B8, 0x003F };
    uint32_t const ces[9] = { 0x49A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_231)
{
    // 106B8 0061;	
    // (êö∏) LINEAR A SIGN A506	[49A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B8, 0x0061 };
    uint32_t const ces[9] = { 0x49A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_232)
{
    // 106B8 0041;	
    // (êö∏) LINEAR A SIGN A506	[49A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B8, 0x0041 };
    uint32_t const ces[9] = { 0x49A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_233)
{
    // 106B8 0062;	
    // (êö∏) LINEAR A SIGN A506	[49A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B8, 0x0062 };
    uint32_t const ces[9] = { 0x49A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_234)
{
    // 106B9 0021;	
    // (êöπ) LINEAR A SIGN A508	[49AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B9, 0x0021 };
    uint32_t const ces[9] = { 0x49AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_235)
{
    // 106B9 003F;	
    // (êöπ) LINEAR A SIGN A508	[49AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B9, 0x003F };
    uint32_t const ces[9] = { 0x49AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_236)
{
    // 106B9 0061;	
    // (êöπ) LINEAR A SIGN A508	[49AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B9, 0x0061 };
    uint32_t const ces[9] = { 0x49AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_237)
{
    // 106B9 0041;	
    // (êöπ) LINEAR A SIGN A508	[49AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B9, 0x0041 };
    uint32_t const ces[9] = { 0x49AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_238)
{
    // 106B9 0062;	
    // (êöπ) LINEAR A SIGN A508	[49AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B9, 0x0062 };
    uint32_t const ces[9] = { 0x49AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_239)
{
    // 106BA 0021;	
    // (êö∫) LINEAR A SIGN A509	[49AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BA, 0x0021 };
    uint32_t const ces[9] = { 0x49AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_240)
{
    // 106BA 003F;	
    // (êö∫) LINEAR A SIGN A509	[49AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BA, 0x003F };
    uint32_t const ces[9] = { 0x49AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_241)
{
    // 106BA 0061;	
    // (êö∫) LINEAR A SIGN A509	[49AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BA, 0x0061 };
    uint32_t const ces[9] = { 0x49AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_242)
{
    // 106BA 0041;	
    // (êö∫) LINEAR A SIGN A509	[49AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BA, 0x0041 };
    uint32_t const ces[9] = { 0x49AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_243)
{
    // 106BA 0062;	
    // (êö∫) LINEAR A SIGN A509	[49AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BA, 0x0062 };
    uint32_t const ces[9] = { 0x49AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_244)
{
    // 106BB 0021;	
    // (êöª) LINEAR A SIGN A510	[49AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BB, 0x0021 };
    uint32_t const ces[9] = { 0x49AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_245)
{
    // 106BB 003F;	
    // (êöª) LINEAR A SIGN A510	[49AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BB, 0x003F };
    uint32_t const ces[9] = { 0x49AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_246)
{
    // 106BB 0061;	
    // (êöª) LINEAR A SIGN A510	[49AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BB, 0x0061 };
    uint32_t const ces[9] = { 0x49AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_247)
{
    // 106BB 0041;	
    // (êöª) LINEAR A SIGN A510	[49AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BB, 0x0041 };
    uint32_t const ces[9] = { 0x49AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_248)
{
    // 106BB 0062;	
    // (êöª) LINEAR A SIGN A510	[49AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BB, 0x0062 };
    uint32_t const ces[9] = { 0x49AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_249)
{
    // 106BC 0021;	
    // (êöº) LINEAR A SIGN A511	[49AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BC, 0x0021 };
    uint32_t const ces[9] = { 0x49AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_250)
{
    // 106BC 003F;	
    // (êöº) LINEAR A SIGN A511	[49AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BC, 0x003F };
    uint32_t const ces[9] = { 0x49AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_251)
{
    // 106BC 0061;	
    // (êöº) LINEAR A SIGN A511	[49AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BC, 0x0061 };
    uint32_t const ces[9] = { 0x49AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_252)
{
    // 106BC 0041;	
    // (êöº) LINEAR A SIGN A511	[49AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BC, 0x0041 };
    uint32_t const ces[9] = { 0x49AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_253)
{
    // 106BC 0062;	
    // (êöº) LINEAR A SIGN A511	[49AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BC, 0x0062 };
    uint32_t const ces[9] = { 0x49AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_254)
{
    // 106BD 0021;	
    // (êöΩ) LINEAR A SIGN A512	[49AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BD, 0x0021 };
    uint32_t const ces[9] = { 0x49AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_255)
{
    // 106BD 003F;	
    // (êöΩ) LINEAR A SIGN A512	[49AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BD, 0x003F };
    uint32_t const ces[9] = { 0x49AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_256)
{
    // 106BD 0061;	
    // (êöΩ) LINEAR A SIGN A512	[49AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BD, 0x0061 };
    uint32_t const ces[9] = { 0x49AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_257)
{
    // 106BD 0041;	
    // (êöΩ) LINEAR A SIGN A512	[49AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BD, 0x0041 };
    uint32_t const ces[9] = { 0x49AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_258)
{
    // 106BD 0062;	
    // (êöΩ) LINEAR A SIGN A512	[49AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BD, 0x0062 };
    uint32_t const ces[9] = { 0x49AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_259)
{
    // 106BE 0021;	
    // (êöæ) LINEAR A SIGN A513	[49AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BE, 0x0021 };
    uint32_t const ces[9] = { 0x49AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_260)
{
    // 106BE 003F;	
    // (êöæ) LINEAR A SIGN A513	[49AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BE, 0x003F };
    uint32_t const ces[9] = { 0x49AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_261)
{
    // 106BE 0061;	
    // (êöæ) LINEAR A SIGN A513	[49AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BE, 0x0061 };
    uint32_t const ces[9] = { 0x49AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_262)
{
    // 106BE 0041;	
    // (êöæ) LINEAR A SIGN A513	[49AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BE, 0x0041 };
    uint32_t const ces[9] = { 0x49AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_263)
{
    // 106BE 0062;	
    // (êöæ) LINEAR A SIGN A513	[49AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BE, 0x0062 };
    uint32_t const ces[9] = { 0x49AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_264)
{
    // 106BF 0021;	
    // (êöø) LINEAR A SIGN A515	[49B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BF, 0x0021 };
    uint32_t const ces[9] = { 0x49B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_265)
{
    // 106BF 003F;	
    // (êöø) LINEAR A SIGN A515	[49B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BF, 0x003F };
    uint32_t const ces[9] = { 0x49B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_266)
{
    // 106BF 0061;	
    // (êöø) LINEAR A SIGN A515	[49B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BF, 0x0061 };
    uint32_t const ces[9] = { 0x49B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_267)
{
    // 106BF 0041;	
    // (êöø) LINEAR A SIGN A515	[49B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106BF, 0x0041 };
    uint32_t const ces[9] = { 0x49B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_268)
{
    // 106BF 0062;	
    // (êöø) LINEAR A SIGN A515	[49B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106BF, 0x0062 };
    uint32_t const ces[9] = { 0x49B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_269)
{
    // 106C0 0021;	
    // (êõÄ) LINEAR A SIGN A516	[49B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C0, 0x0021 };
    uint32_t const ces[9] = { 0x49B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_270)
{
    // 106C0 003F;	
    // (êõÄ) LINEAR A SIGN A516	[49B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C0, 0x003F };
    uint32_t const ces[9] = { 0x49B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_271)
{
    // 106C0 0061;	
    // (êõÄ) LINEAR A SIGN A516	[49B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C0, 0x0061 };
    uint32_t const ces[9] = { 0x49B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_272)
{
    // 106C0 0041;	
    // (êõÄ) LINEAR A SIGN A516	[49B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C0, 0x0041 };
    uint32_t const ces[9] = { 0x49B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_273)
{
    // 106C0 0062;	
    // (êõÄ) LINEAR A SIGN A516	[49B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C0, 0x0062 };
    uint32_t const ces[9] = { 0x49B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_274)
{
    // 106C1 0021;	
    // (êõÅ) LINEAR A SIGN A520	[49B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C1, 0x0021 };
    uint32_t const ces[9] = { 0x49B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_275)
{
    // 106C1 003F;	
    // (êõÅ) LINEAR A SIGN A520	[49B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C1, 0x003F };
    uint32_t const ces[9] = { 0x49B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_276)
{
    // 106C1 0061;	
    // (êõÅ) LINEAR A SIGN A520	[49B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C1, 0x0061 };
    uint32_t const ces[9] = { 0x49B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_277)
{
    // 106C1 0041;	
    // (êõÅ) LINEAR A SIGN A520	[49B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C1, 0x0041 };
    uint32_t const ces[9] = { 0x49B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_278)
{
    // 106C1 0062;	
    // (êõÅ) LINEAR A SIGN A520	[49B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C1, 0x0062 };
    uint32_t const ces[9] = { 0x49B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_279)
{
    // 106C2 0021;	
    // (êõÇ) LINEAR A SIGN A521	[49B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C2, 0x0021 };
    uint32_t const ces[9] = { 0x49B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_280)
{
    // 106C2 003F;	
    // (êõÇ) LINEAR A SIGN A521	[49B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C2, 0x003F };
    uint32_t const ces[9] = { 0x49B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_281)
{
    // 106C2 0061;	
    // (êõÇ) LINEAR A SIGN A521	[49B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C2, 0x0061 };
    uint32_t const ces[9] = { 0x49B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_282)
{
    // 106C2 0041;	
    // (êõÇ) LINEAR A SIGN A521	[49B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C2, 0x0041 };
    uint32_t const ces[9] = { 0x49B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_283)
{
    // 106C2 0062;	
    // (êõÇ) LINEAR A SIGN A521	[49B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C2, 0x0062 };
    uint32_t const ces[9] = { 0x49B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_284)
{
    // 106C3 0021;	
    // (êõÉ) LINEAR A SIGN A523	[49B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C3, 0x0021 };
    uint32_t const ces[9] = { 0x49B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_285)
{
    // 106C3 003F;	
    // (êõÉ) LINEAR A SIGN A523	[49B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C3, 0x003F };
    uint32_t const ces[9] = { 0x49B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_286)
{
    // 106C3 0061;	
    // (êõÉ) LINEAR A SIGN A523	[49B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C3, 0x0061 };
    uint32_t const ces[9] = { 0x49B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_287)
{
    // 106C3 0041;	
    // (êõÉ) LINEAR A SIGN A523	[49B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C3, 0x0041 };
    uint32_t const ces[9] = { 0x49B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_288)
{
    // 106C3 0062;	
    // (êõÉ) LINEAR A SIGN A523	[49B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C3, 0x0062 };
    uint32_t const ces[9] = { 0x49B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_289)
{
    // 106C4 0021;	
    // (êõÑ) LINEAR A SIGN A524	[49B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C4, 0x0021 };
    uint32_t const ces[9] = { 0x49B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_290)
{
    // 106C4 003F;	
    // (êõÑ) LINEAR A SIGN A524	[49B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C4, 0x003F };
    uint32_t const ces[9] = { 0x49B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_291)
{
    // 106C4 0061;	
    // (êõÑ) LINEAR A SIGN A524	[49B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C4, 0x0061 };
    uint32_t const ces[9] = { 0x49B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_292)
{
    // 106C4 0041;	
    // (êõÑ) LINEAR A SIGN A524	[49B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C4, 0x0041 };
    uint32_t const ces[9] = { 0x49B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_293)
{
    // 106C4 0062;	
    // (êõÑ) LINEAR A SIGN A524	[49B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C4, 0x0062 };
    uint32_t const ces[9] = { 0x49B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_294)
{
    // 106C5 0021;	
    // (êõÖ) LINEAR A SIGN A525	[49B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C5, 0x0021 };
    uint32_t const ces[9] = { 0x49B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_295)
{
    // 106C5 003F;	
    // (êõÖ) LINEAR A SIGN A525	[49B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C5, 0x003F };
    uint32_t const ces[9] = { 0x49B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_296)
{
    // 106C5 0061;	
    // (êõÖ) LINEAR A SIGN A525	[49B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C5, 0x0061 };
    uint32_t const ces[9] = { 0x49B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_297)
{
    // 106C5 0041;	
    // (êõÖ) LINEAR A SIGN A525	[49B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C5, 0x0041 };
    uint32_t const ces[9] = { 0x49B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_298)
{
    // 106C5 0062;	
    // (êõÖ) LINEAR A SIGN A525	[49B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C5, 0x0062 };
    uint32_t const ces[9] = { 0x49B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_299)
{
    // 106C6 0021;	
    // (êõÜ) LINEAR A SIGN A526	[49B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C6, 0x0021 };
    uint32_t const ces[9] = { 0x49B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_300)
{
    // 106C6 003F;	
    // (êõÜ) LINEAR A SIGN A526	[49B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C6, 0x003F };
    uint32_t const ces[9] = { 0x49B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_301)
{
    // 106C6 0061;	
    // (êõÜ) LINEAR A SIGN A526	[49B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C6, 0x0061 };
    uint32_t const ces[9] = { 0x49B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_302)
{
    // 106C6 0041;	
    // (êõÜ) LINEAR A SIGN A526	[49B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C6, 0x0041 };
    uint32_t const ces[9] = { 0x49B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_303)
{
    // 106C6 0062;	
    // (êõÜ) LINEAR A SIGN A526	[49B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C6, 0x0062 };
    uint32_t const ces[9] = { 0x49B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_304)
{
    // 106C7 0021;	
    // (êõá) LINEAR A SIGN A527	[49B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C7, 0x0021 };
    uint32_t const ces[9] = { 0x49B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_305)
{
    // 106C7 003F;	
    // (êõá) LINEAR A SIGN A527	[49B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C7, 0x003F };
    uint32_t const ces[9] = { 0x49B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_306)
{
    // 106C7 0061;	
    // (êõá) LINEAR A SIGN A527	[49B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C7, 0x0061 };
    uint32_t const ces[9] = { 0x49B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_307)
{
    // 106C7 0041;	
    // (êõá) LINEAR A SIGN A527	[49B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C7, 0x0041 };
    uint32_t const ces[9] = { 0x49B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_308)
{
    // 106C7 0062;	
    // (êõá) LINEAR A SIGN A527	[49B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C7, 0x0062 };
    uint32_t const ces[9] = { 0x49B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_309)
{
    // 106C8 0021;	
    // (êõà) LINEAR A SIGN A528	[49B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C8, 0x0021 };
    uint32_t const ces[9] = { 0x49B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_310)
{
    // 106C8 003F;	
    // (êõà) LINEAR A SIGN A528	[49B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C8, 0x003F };
    uint32_t const ces[9] = { 0x49B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_311)
{
    // 106C8 0061;	
    // (êõà) LINEAR A SIGN A528	[49B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C8, 0x0061 };
    uint32_t const ces[9] = { 0x49B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_312)
{
    // 106C8 0041;	
    // (êõà) LINEAR A SIGN A528	[49B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C8, 0x0041 };
    uint32_t const ces[9] = { 0x49B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_313)
{
    // 106C8 0062;	
    // (êõà) LINEAR A SIGN A528	[49B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C8, 0x0062 };
    uint32_t const ces[9] = { 0x49B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_314)
{
    // 106C9 0021;	
    // (êõâ) LINEAR A SIGN A529	[49BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C9, 0x0021 };
    uint32_t const ces[9] = { 0x49BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_315)
{
    // 106C9 003F;	
    // (êõâ) LINEAR A SIGN A529	[49BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C9, 0x003F };
    uint32_t const ces[9] = { 0x49BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_316)
{
    // 106C9 0061;	
    // (êõâ) LINEAR A SIGN A529	[49BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C9, 0x0061 };
    uint32_t const ces[9] = { 0x49BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_317)
{
    // 106C9 0041;	
    // (êõâ) LINEAR A SIGN A529	[49BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C9, 0x0041 };
    uint32_t const ces[9] = { 0x49BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_318)
{
    // 106C9 0062;	
    // (êõâ) LINEAR A SIGN A529	[49BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C9, 0x0062 };
    uint32_t const ces[9] = { 0x49BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_319)
{
    // 106CA 0021;	
    // (êõä) LINEAR A SIGN A530	[49BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CA, 0x0021 };
    uint32_t const ces[9] = { 0x49BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_320)
{
    // 106CA 003F;	
    // (êõä) LINEAR A SIGN A530	[49BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CA, 0x003F };
    uint32_t const ces[9] = { 0x49BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_321)
{
    // 106CA 0061;	
    // (êõä) LINEAR A SIGN A530	[49BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CA, 0x0061 };
    uint32_t const ces[9] = { 0x49BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_322)
{
    // 106CA 0041;	
    // (êõä) LINEAR A SIGN A530	[49BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CA, 0x0041 };
    uint32_t const ces[9] = { 0x49BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_323)
{
    // 106CA 0062;	
    // (êõä) LINEAR A SIGN A530	[49BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CA, 0x0062 };
    uint32_t const ces[9] = { 0x49BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_324)
{
    // 106CB 0021;	
    // (êõã) LINEAR A SIGN A531	[49BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CB, 0x0021 };
    uint32_t const ces[9] = { 0x49BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_325)
{
    // 106CB 003F;	
    // (êõã) LINEAR A SIGN A531	[49BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CB, 0x003F };
    uint32_t const ces[9] = { 0x49BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_326)
{
    // 106CB 0061;	
    // (êõã) LINEAR A SIGN A531	[49BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CB, 0x0061 };
    uint32_t const ces[9] = { 0x49BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_327)
{
    // 106CB 0041;	
    // (êõã) LINEAR A SIGN A531	[49BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CB, 0x0041 };
    uint32_t const ces[9] = { 0x49BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_328)
{
    // 106CB 0062;	
    // (êõã) LINEAR A SIGN A531	[49BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CB, 0x0062 };
    uint32_t const ces[9] = { 0x49BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_329)
{
    // 106CC 0021;	
    // (êõå) LINEAR A SIGN A532	[49BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CC, 0x0021 };
    uint32_t const ces[9] = { 0x49BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_330)
{
    // 106CC 003F;	
    // (êõå) LINEAR A SIGN A532	[49BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CC, 0x003F };
    uint32_t const ces[9] = { 0x49BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_331)
{
    // 106CC 0061;	
    // (êõå) LINEAR A SIGN A532	[49BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CC, 0x0061 };
    uint32_t const ces[9] = { 0x49BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_332)
{
    // 106CC 0041;	
    // (êõå) LINEAR A SIGN A532	[49BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CC, 0x0041 };
    uint32_t const ces[9] = { 0x49BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_333)
{
    // 106CC 0062;	
    // (êõå) LINEAR A SIGN A532	[49BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CC, 0x0062 };
    uint32_t const ces[9] = { 0x49BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_334)
{
    // 106CD 0021;	
    // (êõç) LINEAR A SIGN A534	[49BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CD, 0x0021 };
    uint32_t const ces[9] = { 0x49BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_335)
{
    // 106CD 003F;	
    // (êõç) LINEAR A SIGN A534	[49BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CD, 0x003F };
    uint32_t const ces[9] = { 0x49BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_336)
{
    // 106CD 0061;	
    // (êõç) LINEAR A SIGN A534	[49BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CD, 0x0061 };
    uint32_t const ces[9] = { 0x49BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_337)
{
    // 106CD 0041;	
    // (êõç) LINEAR A SIGN A534	[49BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CD, 0x0041 };
    uint32_t const ces[9] = { 0x49BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_338)
{
    // 106CD 0062;	
    // (êõç) LINEAR A SIGN A534	[49BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CD, 0x0062 };
    uint32_t const ces[9] = { 0x49BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_339)
{
    // 106CE 0021;	
    // (êõé) LINEAR A SIGN A535	[49BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CE, 0x0021 };
    uint32_t const ces[9] = { 0x49BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_340)
{
    // 106CE 003F;	
    // (êõé) LINEAR A SIGN A535	[49BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CE, 0x003F };
    uint32_t const ces[9] = { 0x49BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_341)
{
    // 106CE 0061;	
    // (êõé) LINEAR A SIGN A535	[49BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CE, 0x0061 };
    uint32_t const ces[9] = { 0x49BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_342)
{
    // 106CE 0041;	
    // (êõé) LINEAR A SIGN A535	[49BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CE, 0x0041 };
    uint32_t const ces[9] = { 0x49BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_343)
{
    // 106CE 0062;	
    // (êõé) LINEAR A SIGN A535	[49BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CE, 0x0062 };
    uint32_t const ces[9] = { 0x49BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_344)
{
    // 106CF 0021;	
    // (êõè) LINEAR A SIGN A536	[49C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CF, 0x0021 };
    uint32_t const ces[9] = { 0x49C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_345)
{
    // 106CF 003F;	
    // (êõè) LINEAR A SIGN A536	[49C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CF, 0x003F };
    uint32_t const ces[9] = { 0x49C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_346)
{
    // 106CF 0061;	
    // (êõè) LINEAR A SIGN A536	[49C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CF, 0x0061 };
    uint32_t const ces[9] = { 0x49C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_347)
{
    // 106CF 0041;	
    // (êõè) LINEAR A SIGN A536	[49C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106CF, 0x0041 };
    uint32_t const ces[9] = { 0x49C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_348)
{
    // 106CF 0062;	
    // (êõè) LINEAR A SIGN A536	[49C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106CF, 0x0062 };
    uint32_t const ces[9] = { 0x49C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_349)
{
    // 106D0 0021;	
    // (êõê) LINEAR A SIGN A537	[49C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D0, 0x0021 };
    uint32_t const ces[9] = { 0x49C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_350)
{
    // 106D0 003F;	
    // (êõê) LINEAR A SIGN A537	[49C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D0, 0x003F };
    uint32_t const ces[9] = { 0x49C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_351)
{
    // 106D0 0061;	
    // (êõê) LINEAR A SIGN A537	[49C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D0, 0x0061 };
    uint32_t const ces[9] = { 0x49C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_352)
{
    // 106D0 0041;	
    // (êõê) LINEAR A SIGN A537	[49C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D0, 0x0041 };
    uint32_t const ces[9] = { 0x49C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_353)
{
    // 106D0 0062;	
    // (êõê) LINEAR A SIGN A537	[49C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D0, 0x0062 };
    uint32_t const ces[9] = { 0x49C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_354)
{
    // 106D1 0021;	
    // (êõë) LINEAR A SIGN A538	[49C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D1, 0x0021 };
    uint32_t const ces[9] = { 0x49C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_355)
{
    // 106D1 003F;	
    // (êõë) LINEAR A SIGN A538	[49C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D1, 0x003F };
    uint32_t const ces[9] = { 0x49C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_356)
{
    // 106D1 0061;	
    // (êõë) LINEAR A SIGN A538	[49C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D1, 0x0061 };
    uint32_t const ces[9] = { 0x49C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_357)
{
    // 106D1 0041;	
    // (êõë) LINEAR A SIGN A538	[49C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D1, 0x0041 };
    uint32_t const ces[9] = { 0x49C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_358)
{
    // 106D1 0062;	
    // (êõë) LINEAR A SIGN A538	[49C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D1, 0x0062 };
    uint32_t const ces[9] = { 0x49C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_359)
{
    // 106D2 0021;	
    // (êõí) LINEAR A SIGN A539	[49C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D2, 0x0021 };
    uint32_t const ces[9] = { 0x49C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_360)
{
    // 106D2 003F;	
    // (êõí) LINEAR A SIGN A539	[49C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D2, 0x003F };
    uint32_t const ces[9] = { 0x49C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_361)
{
    // 106D2 0061;	
    // (êõí) LINEAR A SIGN A539	[49C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D2, 0x0061 };
    uint32_t const ces[9] = { 0x49C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_362)
{
    // 106D2 0041;	
    // (êõí) LINEAR A SIGN A539	[49C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D2, 0x0041 };
    uint32_t const ces[9] = { 0x49C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_363)
{
    // 106D2 0062;	
    // (êõí) LINEAR A SIGN A539	[49C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D2, 0x0062 };
    uint32_t const ces[9] = { 0x49C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_364)
{
    // 106D3 0021;	
    // (êõì) LINEAR A SIGN A540	[49C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D3, 0x0021 };
    uint32_t const ces[9] = { 0x49C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_365)
{
    // 106D3 003F;	
    // (êõì) LINEAR A SIGN A540	[49C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D3, 0x003F };
    uint32_t const ces[9] = { 0x49C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_366)
{
    // 106D3 0061;	
    // (êõì) LINEAR A SIGN A540	[49C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D3, 0x0061 };
    uint32_t const ces[9] = { 0x49C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_367)
{
    // 106D3 0041;	
    // (êõì) LINEAR A SIGN A540	[49C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D3, 0x0041 };
    uint32_t const ces[9] = { 0x49C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_368)
{
    // 106D3 0062;	
    // (êõì) LINEAR A SIGN A540	[49C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D3, 0x0062 };
    uint32_t const ces[9] = { 0x49C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_369)
{
    // 106D4 0021;	
    // (êõî) LINEAR A SIGN A541	[49C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D4, 0x0021 };
    uint32_t const ces[9] = { 0x49C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_370)
{
    // 106D4 003F;	
    // (êõî) LINEAR A SIGN A541	[49C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D4, 0x003F };
    uint32_t const ces[9] = { 0x49C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_371)
{
    // 106D4 0061;	
    // (êõî) LINEAR A SIGN A541	[49C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D4, 0x0061 };
    uint32_t const ces[9] = { 0x49C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_372)
{
    // 106D4 0041;	
    // (êõî) LINEAR A SIGN A541	[49C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D4, 0x0041 };
    uint32_t const ces[9] = { 0x49C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_373)
{
    // 106D4 0062;	
    // (êõî) LINEAR A SIGN A541	[49C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D4, 0x0062 };
    uint32_t const ces[9] = { 0x49C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_374)
{
    // 106D5 0021;	
    // (êõï) LINEAR A SIGN A542	[49C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D5, 0x0021 };
    uint32_t const ces[9] = { 0x49C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_375)
{
    // 106D5 003F;	
    // (êõï) LINEAR A SIGN A542	[49C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D5, 0x003F };
    uint32_t const ces[9] = { 0x49C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_376)
{
    // 106D5 0061;	
    // (êõï) LINEAR A SIGN A542	[49C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D5, 0x0061 };
    uint32_t const ces[9] = { 0x49C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_377)
{
    // 106D5 0041;	
    // (êõï) LINEAR A SIGN A542	[49C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D5, 0x0041 };
    uint32_t const ces[9] = { 0x49C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_378)
{
    // 106D5 0062;	
    // (êõï) LINEAR A SIGN A542	[49C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D5, 0x0062 };
    uint32_t const ces[9] = { 0x49C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_379)
{
    // 106D6 0021;	
    // (êõñ) LINEAR A SIGN A545	[49C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D6, 0x0021 };
    uint32_t const ces[9] = { 0x49C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_380)
{
    // 106D6 003F;	
    // (êõñ) LINEAR A SIGN A545	[49C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D6, 0x003F };
    uint32_t const ces[9] = { 0x49C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_381)
{
    // 106D6 0061;	
    // (êõñ) LINEAR A SIGN A545	[49C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D6, 0x0061 };
    uint32_t const ces[9] = { 0x49C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_382)
{
    // 106D6 0041;	
    // (êõñ) LINEAR A SIGN A545	[49C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D6, 0x0041 };
    uint32_t const ces[9] = { 0x49C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_383)
{
    // 106D6 0062;	
    // (êõñ) LINEAR A SIGN A545	[49C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D6, 0x0062 };
    uint32_t const ces[9] = { 0x49C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_384)
{
    // 106D7 0021;	
    // (êõó) LINEAR A SIGN A547	[49C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D7, 0x0021 };
    uint32_t const ces[9] = { 0x49C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_385)
{
    // 106D7 003F;	
    // (êõó) LINEAR A SIGN A547	[49C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D7, 0x003F };
    uint32_t const ces[9] = { 0x49C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_386)
{
    // 106D7 0061;	
    // (êõó) LINEAR A SIGN A547	[49C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D7, 0x0061 };
    uint32_t const ces[9] = { 0x49C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_387)
{
    // 106D7 0041;	
    // (êõó) LINEAR A SIGN A547	[49C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D7, 0x0041 };
    uint32_t const ces[9] = { 0x49C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_388)
{
    // 106D7 0062;	
    // (êõó) LINEAR A SIGN A547	[49C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D7, 0x0062 };
    uint32_t const ces[9] = { 0x49C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_389)
{
    // 106D8 0021;	
    // (êõò) LINEAR A SIGN A548	[49C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D8, 0x0021 };
    uint32_t const ces[9] = { 0x49C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_390)
{
    // 106D8 003F;	
    // (êõò) LINEAR A SIGN A548	[49C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D8, 0x003F };
    uint32_t const ces[9] = { 0x49C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_391)
{
    // 106D8 0061;	
    // (êõò) LINEAR A SIGN A548	[49C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D8, 0x0061 };
    uint32_t const ces[9] = { 0x49C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_392)
{
    // 106D8 0041;	
    // (êõò) LINEAR A SIGN A548	[49C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D8, 0x0041 };
    uint32_t const ces[9] = { 0x49C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_393)
{
    // 106D8 0062;	
    // (êõò) LINEAR A SIGN A548	[49C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D8, 0x0062 };
    uint32_t const ces[9] = { 0x49C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_394)
{
    // 106D9 0021;	
    // (êõô) LINEAR A SIGN A549	[49CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D9, 0x0021 };
    uint32_t const ces[9] = { 0x49CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_395)
{
    // 106D9 003F;	
    // (êõô) LINEAR A SIGN A549	[49CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D9, 0x003F };
    uint32_t const ces[9] = { 0x49CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_396)
{
    // 106D9 0061;	
    // (êõô) LINEAR A SIGN A549	[49CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D9, 0x0061 };
    uint32_t const ces[9] = { 0x49CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_397)
{
    // 106D9 0041;	
    // (êõô) LINEAR A SIGN A549	[49CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D9, 0x0041 };
    uint32_t const ces[9] = { 0x49CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_398)
{
    // 106D9 0062;	
    // (êõô) LINEAR A SIGN A549	[49CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D9, 0x0062 };
    uint32_t const ces[9] = { 0x49CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_399)
{
    // 106DA 0021;	
    // (êõö) LINEAR A SIGN A550	[49CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DA, 0x0021 };
    uint32_t const ces[9] = { 0x49CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_400)
{
    // 106DA 003F;	
    // (êõö) LINEAR A SIGN A550	[49CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DA, 0x003F };
    uint32_t const ces[9] = { 0x49CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_401)
{
    // 106DA 0061;	
    // (êõö) LINEAR A SIGN A550	[49CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DA, 0x0061 };
    uint32_t const ces[9] = { 0x49CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_402)
{
    // 106DA 0041;	
    // (êõö) LINEAR A SIGN A550	[49CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DA, 0x0041 };
    uint32_t const ces[9] = { 0x49CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_403)
{
    // 106DA 0062;	
    // (êõö) LINEAR A SIGN A550	[49CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DA, 0x0062 };
    uint32_t const ces[9] = { 0x49CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_404)
{
    // 106DB 0021;	
    // (êõõ) LINEAR A SIGN A551	[49CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DB, 0x0021 };
    uint32_t const ces[9] = { 0x49CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_405)
{
    // 106DB 003F;	
    // (êõõ) LINEAR A SIGN A551	[49CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DB, 0x003F };
    uint32_t const ces[9] = { 0x49CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_406)
{
    // 106DB 0061;	
    // (êõõ) LINEAR A SIGN A551	[49CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DB, 0x0061 };
    uint32_t const ces[9] = { 0x49CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_407)
{
    // 106DB 0041;	
    // (êõõ) LINEAR A SIGN A551	[49CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DB, 0x0041 };
    uint32_t const ces[9] = { 0x49CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_408)
{
    // 106DB 0062;	
    // (êõõ) LINEAR A SIGN A551	[49CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DB, 0x0062 };
    uint32_t const ces[9] = { 0x49CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_409)
{
    // 106DC 0021;	
    // (êõú) LINEAR A SIGN A552	[49CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DC, 0x0021 };
    uint32_t const ces[9] = { 0x49CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_410)
{
    // 106DC 003F;	
    // (êõú) LINEAR A SIGN A552	[49CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DC, 0x003F };
    uint32_t const ces[9] = { 0x49CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_411)
{
    // 106DC 0061;	
    // (êõú) LINEAR A SIGN A552	[49CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DC, 0x0061 };
    uint32_t const ces[9] = { 0x49CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_412)
{
    // 106DC 0041;	
    // (êõú) LINEAR A SIGN A552	[49CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DC, 0x0041 };
    uint32_t const ces[9] = { 0x49CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_413)
{
    // 106DC 0062;	
    // (êõú) LINEAR A SIGN A552	[49CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DC, 0x0062 };
    uint32_t const ces[9] = { 0x49CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_414)
{
    // 106DD 0021;	
    // (êõù) LINEAR A SIGN A553	[49CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DD, 0x0021 };
    uint32_t const ces[9] = { 0x49CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_415)
{
    // 106DD 003F;	
    // (êõù) LINEAR A SIGN A553	[49CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DD, 0x003F };
    uint32_t const ces[9] = { 0x49CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_416)
{
    // 106DD 0061;	
    // (êõù) LINEAR A SIGN A553	[49CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DD, 0x0061 };
    uint32_t const ces[9] = { 0x49CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_417)
{
    // 106DD 0041;	
    // (êõù) LINEAR A SIGN A553	[49CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DD, 0x0041 };
    uint32_t const ces[9] = { 0x49CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_418)
{
    // 106DD 0062;	
    // (êõù) LINEAR A SIGN A553	[49CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DD, 0x0062 };
    uint32_t const ces[9] = { 0x49CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_419)
{
    // 106DE 0021;	
    // (êõû) LINEAR A SIGN A554	[49CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DE, 0x0021 };
    uint32_t const ces[9] = { 0x49CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_420)
{
    // 106DE 003F;	
    // (êõû) LINEAR A SIGN A554	[49CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DE, 0x003F };
    uint32_t const ces[9] = { 0x49CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_421)
{
    // 106DE 0061;	
    // (êõû) LINEAR A SIGN A554	[49CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DE, 0x0061 };
    uint32_t const ces[9] = { 0x49CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_422)
{
    // 106DE 0041;	
    // (êõû) LINEAR A SIGN A554	[49CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DE, 0x0041 };
    uint32_t const ces[9] = { 0x49CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_423)
{
    // 106DE 0062;	
    // (êõû) LINEAR A SIGN A554	[49CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DE, 0x0062 };
    uint32_t const ces[9] = { 0x49CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_424)
{
    // 106DF 0021;	
    // (êõü) LINEAR A SIGN A555	[49D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DF, 0x0021 };
    uint32_t const ces[9] = { 0x49D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_425)
{
    // 106DF 003F;	
    // (êõü) LINEAR A SIGN A555	[49D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DF, 0x003F };
    uint32_t const ces[9] = { 0x49D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_426)
{
    // 106DF 0061;	
    // (êõü) LINEAR A SIGN A555	[49D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DF, 0x0061 };
    uint32_t const ces[9] = { 0x49D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_427)
{
    // 106DF 0041;	
    // (êõü) LINEAR A SIGN A555	[49D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106DF, 0x0041 };
    uint32_t const ces[9] = { 0x49D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_428)
{
    // 106DF 0062;	
    // (êõü) LINEAR A SIGN A555	[49D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106DF, 0x0062 };
    uint32_t const ces[9] = { 0x49D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_429)
{
    // 106E0 0021;	
    // (êõ†) LINEAR A SIGN A556	[49D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E0, 0x0021 };
    uint32_t const ces[9] = { 0x49D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_430)
{
    // 106E0 003F;	
    // (êõ†) LINEAR A SIGN A556	[49D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E0, 0x003F };
    uint32_t const ces[9] = { 0x49D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_431)
{
    // 106E0 0061;	
    // (êõ†) LINEAR A SIGN A556	[49D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E0, 0x0061 };
    uint32_t const ces[9] = { 0x49D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_432)
{
    // 106E0 0041;	
    // (êõ†) LINEAR A SIGN A556	[49D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E0, 0x0041 };
    uint32_t const ces[9] = { 0x49D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_433)
{
    // 106E0 0062;	
    // (êõ†) LINEAR A SIGN A556	[49D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E0, 0x0062 };
    uint32_t const ces[9] = { 0x49D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_434)
{
    // 106E1 0021;	
    // (êõ°) LINEAR A SIGN A557	[49D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E1, 0x0021 };
    uint32_t const ces[9] = { 0x49D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_435)
{
    // 106E1 003F;	
    // (êõ°) LINEAR A SIGN A557	[49D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E1, 0x003F };
    uint32_t const ces[9] = { 0x49D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_436)
{
    // 106E1 0061;	
    // (êõ°) LINEAR A SIGN A557	[49D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E1, 0x0061 };
    uint32_t const ces[9] = { 0x49D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_437)
{
    // 106E1 0041;	
    // (êõ°) LINEAR A SIGN A557	[49D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E1, 0x0041 };
    uint32_t const ces[9] = { 0x49D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_438)
{
    // 106E1 0062;	
    // (êõ°) LINEAR A SIGN A557	[49D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E1, 0x0062 };
    uint32_t const ces[9] = { 0x49D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_439)
{
    // 106E2 0021;	
    // (êõ¢) LINEAR A SIGN A559	[49D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E2, 0x0021 };
    uint32_t const ces[9] = { 0x49D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_440)
{
    // 106E2 003F;	
    // (êõ¢) LINEAR A SIGN A559	[49D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E2, 0x003F };
    uint32_t const ces[9] = { 0x49D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_441)
{
    // 106E2 0061;	
    // (êõ¢) LINEAR A SIGN A559	[49D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E2, 0x0061 };
    uint32_t const ces[9] = { 0x49D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_442)
{
    // 106E2 0041;	
    // (êõ¢) LINEAR A SIGN A559	[49D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E2, 0x0041 };
    uint32_t const ces[9] = { 0x49D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_443)
{
    // 106E2 0062;	
    // (êõ¢) LINEAR A SIGN A559	[49D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E2, 0x0062 };
    uint32_t const ces[9] = { 0x49D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_444)
{
    // 106E3 0021;	
    // (êõ£) LINEAR A SIGN A563	[49D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E3, 0x0021 };
    uint32_t const ces[9] = { 0x49D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_445)
{
    // 106E3 003F;	
    // (êõ£) LINEAR A SIGN A563	[49D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E3, 0x003F };
    uint32_t const ces[9] = { 0x49D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_446)
{
    // 106E3 0061;	
    // (êõ£) LINEAR A SIGN A563	[49D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E3, 0x0061 };
    uint32_t const ces[9] = { 0x49D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_447)
{
    // 106E3 0041;	
    // (êõ£) LINEAR A SIGN A563	[49D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E3, 0x0041 };
    uint32_t const ces[9] = { 0x49D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_448)
{
    // 106E3 0062;	
    // (êõ£) LINEAR A SIGN A563	[49D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E3, 0x0062 };
    uint32_t const ces[9] = { 0x49D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_449)
{
    // 106E4 0021;	
    // (êõ§) LINEAR A SIGN A564	[49D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E4, 0x0021 };
    uint32_t const ces[9] = { 0x49D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_450)
{
    // 106E4 003F;	
    // (êõ§) LINEAR A SIGN A564	[49D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E4, 0x003F };
    uint32_t const ces[9] = { 0x49D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_451)
{
    // 106E4 0061;	
    // (êõ§) LINEAR A SIGN A564	[49D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E4, 0x0061 };
    uint32_t const ces[9] = { 0x49D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_452)
{
    // 106E4 0041;	
    // (êõ§) LINEAR A SIGN A564	[49D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E4, 0x0041 };
    uint32_t const ces[9] = { 0x49D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_453)
{
    // 106E4 0062;	
    // (êõ§) LINEAR A SIGN A564	[49D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E4, 0x0062 };
    uint32_t const ces[9] = { 0x49D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_454)
{
    // 106E5 0021;	
    // (êõ•) LINEAR A SIGN A565	[49D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E5, 0x0021 };
    uint32_t const ces[9] = { 0x49D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_455)
{
    // 106E5 003F;	
    // (êõ•) LINEAR A SIGN A565	[49D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E5, 0x003F };
    uint32_t const ces[9] = { 0x49D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_456)
{
    // 106E5 0061;	
    // (êõ•) LINEAR A SIGN A565	[49D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E5, 0x0061 };
    uint32_t const ces[9] = { 0x49D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_457)
{
    // 106E5 0041;	
    // (êõ•) LINEAR A SIGN A565	[49D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E5, 0x0041 };
    uint32_t const ces[9] = { 0x49D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_458)
{
    // 106E5 0062;	
    // (êõ•) LINEAR A SIGN A565	[49D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E5, 0x0062 };
    uint32_t const ces[9] = { 0x49D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_459)
{
    // 106E6 0021;	
    // (êõ¶) LINEAR A SIGN A566	[49D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E6, 0x0021 };
    uint32_t const ces[9] = { 0x49D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_460)
{
    // 106E6 003F;	
    // (êõ¶) LINEAR A SIGN A566	[49D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E6, 0x003F };
    uint32_t const ces[9] = { 0x49D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_461)
{
    // 106E6 0061;	
    // (êõ¶) LINEAR A SIGN A566	[49D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E6, 0x0061 };
    uint32_t const ces[9] = { 0x49D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_462)
{
    // 106E6 0041;	
    // (êõ¶) LINEAR A SIGN A566	[49D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E6, 0x0041 };
    uint32_t const ces[9] = { 0x49D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_463)
{
    // 106E6 0062;	
    // (êõ¶) LINEAR A SIGN A566	[49D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E6, 0x0062 };
    uint32_t const ces[9] = { 0x49D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_464)
{
    // 106E7 0021;	
    // (êõß) LINEAR A SIGN A568	[49D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E7, 0x0021 };
    uint32_t const ces[9] = { 0x49D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_465)
{
    // 106E7 003F;	
    // (êõß) LINEAR A SIGN A568	[49D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E7, 0x003F };
    uint32_t const ces[9] = { 0x49D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_466)
{
    // 106E7 0061;	
    // (êõß) LINEAR A SIGN A568	[49D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E7, 0x0061 };
    uint32_t const ces[9] = { 0x49D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_467)
{
    // 106E7 0041;	
    // (êõß) LINEAR A SIGN A568	[49D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E7, 0x0041 };
    uint32_t const ces[9] = { 0x49D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_468)
{
    // 106E7 0062;	
    // (êõß) LINEAR A SIGN A568	[49D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E7, 0x0062 };
    uint32_t const ces[9] = { 0x49D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_469)
{
    // 106E8 0021;	
    // (êõ®) LINEAR A SIGN A569	[49D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E8, 0x0021 };
    uint32_t const ces[9] = { 0x49D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_470)
{
    // 106E8 003F;	
    // (êõ®) LINEAR A SIGN A569	[49D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E8, 0x003F };
    uint32_t const ces[9] = { 0x49D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_471)
{
    // 106E8 0061;	
    // (êõ®) LINEAR A SIGN A569	[49D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E8, 0x0061 };
    uint32_t const ces[9] = { 0x49D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_472)
{
    // 106E8 0041;	
    // (êõ®) LINEAR A SIGN A569	[49D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E8, 0x0041 };
    uint32_t const ces[9] = { 0x49D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_473)
{
    // 106E8 0062;	
    // (êõ®) LINEAR A SIGN A569	[49D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E8, 0x0062 };
    uint32_t const ces[9] = { 0x49D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_474)
{
    // 106E9 0021;	
    // (êõ©) LINEAR A SIGN A570	[49DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E9, 0x0021 };
    uint32_t const ces[9] = { 0x49DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_475)
{
    // 106E9 003F;	
    // (êõ©) LINEAR A SIGN A570	[49DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E9, 0x003F };
    uint32_t const ces[9] = { 0x49DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_476)
{
    // 106E9 0061;	
    // (êõ©) LINEAR A SIGN A570	[49DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E9, 0x0061 };
    uint32_t const ces[9] = { 0x49DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_477)
{
    // 106E9 0041;	
    // (êõ©) LINEAR A SIGN A570	[49DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106E9, 0x0041 };
    uint32_t const ces[9] = { 0x49DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_478)
{
    // 106E9 0062;	
    // (êõ©) LINEAR A SIGN A570	[49DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106E9, 0x0062 };
    uint32_t const ces[9] = { 0x49DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_479)
{
    // 106EA 0021;	
    // (êõ™) LINEAR A SIGN A571	[49DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EA, 0x0021 };
    uint32_t const ces[9] = { 0x49DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_480)
{
    // 106EA 003F;	
    // (êõ™) LINEAR A SIGN A571	[49DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EA, 0x003F };
    uint32_t const ces[9] = { 0x49DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_481)
{
    // 106EA 0061;	
    // (êõ™) LINEAR A SIGN A571	[49DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EA, 0x0061 };
    uint32_t const ces[9] = { 0x49DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_482)
{
    // 106EA 0041;	
    // (êõ™) LINEAR A SIGN A571	[49DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106EA, 0x0041 };
    uint32_t const ces[9] = { 0x49DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_483)
{
    // 106EA 0062;	
    // (êõ™) LINEAR A SIGN A571	[49DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EA, 0x0062 };
    uint32_t const ces[9] = { 0x49DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_484)
{
    // 106EB 0021;	
    // (êõ´) LINEAR A SIGN A572	[49DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EB, 0x0021 };
    uint32_t const ces[9] = { 0x49DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_485)
{
    // 106EB 003F;	
    // (êõ´) LINEAR A SIGN A572	[49DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EB, 0x003F };
    uint32_t const ces[9] = { 0x49DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_486)
{
    // 106EB 0061;	
    // (êõ´) LINEAR A SIGN A572	[49DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EB, 0x0061 };
    uint32_t const ces[9] = { 0x49DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_487)
{
    // 106EB 0041;	
    // (êõ´) LINEAR A SIGN A572	[49DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106EB, 0x0041 };
    uint32_t const ces[9] = { 0x49DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_488)
{
    // 106EB 0062;	
    // (êõ´) LINEAR A SIGN A572	[49DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EB, 0x0062 };
    uint32_t const ces[9] = { 0x49DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_489)
{
    // 106EC 0021;	
    // (êõ¨) LINEAR A SIGN A573	[49DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EC, 0x0021 };
    uint32_t const ces[9] = { 0x49DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_490)
{
    // 106EC 003F;	
    // (êõ¨) LINEAR A SIGN A573	[49DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EC, 0x003F };
    uint32_t const ces[9] = { 0x49DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_491)
{
    // 106EC 0061;	
    // (êõ¨) LINEAR A SIGN A573	[49DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EC, 0x0061 };
    uint32_t const ces[9] = { 0x49DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_492)
{
    // 106EC 0041;	
    // (êõ¨) LINEAR A SIGN A573	[49DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106EC, 0x0041 };
    uint32_t const ces[9] = { 0x49DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_493)
{
    // 106EC 0062;	
    // (êõ¨) LINEAR A SIGN A573	[49DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EC, 0x0062 };
    uint32_t const ces[9] = { 0x49DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_494)
{
    // 106ED 0021;	
    // (êõ≠) LINEAR A SIGN A574	[49DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106ED, 0x0021 };
    uint32_t const ces[9] = { 0x49DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_495)
{
    // 106ED 003F;	
    // (êõ≠) LINEAR A SIGN A574	[49DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106ED, 0x003F };
    uint32_t const ces[9] = { 0x49DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_496)
{
    // 106ED 0061;	
    // (êõ≠) LINEAR A SIGN A574	[49DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106ED, 0x0061 };
    uint32_t const ces[9] = { 0x49DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_497)
{
    // 106ED 0041;	
    // (êõ≠) LINEAR A SIGN A574	[49DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106ED, 0x0041 };
    uint32_t const ces[9] = { 0x49DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_498)
{
    // 106ED 0062;	
    // (êõ≠) LINEAR A SIGN A574	[49DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106ED, 0x0062 };
    uint32_t const ces[9] = { 0x49DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_279_499)
{
    // 106EE 0021;	
    // (êõÆ) LINEAR A SIGN A575	[49DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EE, 0x0021 };
    uint32_t const ces[9] = { 0x49DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

