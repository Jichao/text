// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_278_000)
{
    // 10626 003F;	
    // (êò¶) LINEAR A SIGN AB045	[4917 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10626, 0x003F };
    uint32_t const ces[9] = { 0x4917, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_001)
{
    // 10626 0061;	
    // (êò¶) LINEAR A SIGN AB045	[4917 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10626, 0x0061 };
    uint32_t const ces[9] = { 0x4917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_002)
{
    // 10626 0041;	
    // (êò¶) LINEAR A SIGN AB045	[4917 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10626, 0x0041 };
    uint32_t const ces[9] = { 0x4917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_003)
{
    // 10626 0062;	
    // (êò¶) LINEAR A SIGN AB045	[4917 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10626, 0x0062 };
    uint32_t const ces[9] = { 0x4917, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_004)
{
    // 10627 0021;	
    // (êòß) LINEAR A SIGN AB046	[4918 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10627, 0x0021 };
    uint32_t const ces[9] = { 0x4918, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_005)
{
    // 10627 003F;	
    // (êòß) LINEAR A SIGN AB046	[4918 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10627, 0x003F };
    uint32_t const ces[9] = { 0x4918, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_006)
{
    // 10627 0061;	
    // (êòß) LINEAR A SIGN AB046	[4918 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10627, 0x0061 };
    uint32_t const ces[9] = { 0x4918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_007)
{
    // 10627 0041;	
    // (êòß) LINEAR A SIGN AB046	[4918 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10627, 0x0041 };
    uint32_t const ces[9] = { 0x4918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_008)
{
    // 10627 0062;	
    // (êòß) LINEAR A SIGN AB046	[4918 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10627, 0x0062 };
    uint32_t const ces[9] = { 0x4918, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_009)
{
    // 10628 0021;	
    // (êò®) LINEAR A SIGN AB047	[4919 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10628, 0x0021 };
    uint32_t const ces[9] = { 0x4919, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_010)
{
    // 10628 003F;	
    // (êò®) LINEAR A SIGN AB047	[4919 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10628, 0x003F };
    uint32_t const ces[9] = { 0x4919, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_011)
{
    // 10628 0061;	
    // (êò®) LINEAR A SIGN AB047	[4919 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10628, 0x0061 };
    uint32_t const ces[9] = { 0x4919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_012)
{
    // 10628 0041;	
    // (êò®) LINEAR A SIGN AB047	[4919 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10628, 0x0041 };
    uint32_t const ces[9] = { 0x4919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_013)
{
    // 10628 0062;	
    // (êò®) LINEAR A SIGN AB047	[4919 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10628, 0x0062 };
    uint32_t const ces[9] = { 0x4919, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_014)
{
    // 10629 0021;	
    // (êò©) LINEAR A SIGN AB048	[491A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10629, 0x0021 };
    uint32_t const ces[9] = { 0x491A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_015)
{
    // 10629 003F;	
    // (êò©) LINEAR A SIGN AB048	[491A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10629, 0x003F };
    uint32_t const ces[9] = { 0x491A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_016)
{
    // 10629 0061;	
    // (êò©) LINEAR A SIGN AB048	[491A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10629, 0x0061 };
    uint32_t const ces[9] = { 0x491A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_017)
{
    // 10629 0041;	
    // (êò©) LINEAR A SIGN AB048	[491A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10629, 0x0041 };
    uint32_t const ces[9] = { 0x491A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_018)
{
    // 10629 0062;	
    // (êò©) LINEAR A SIGN AB048	[491A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10629, 0x0062 };
    uint32_t const ces[9] = { 0x491A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_019)
{
    // 1062A 0021;	
    // (êò™) LINEAR A SIGN AB049	[491B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062A, 0x0021 };
    uint32_t const ces[9] = { 0x491B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_020)
{
    // 1062A 003F;	
    // (êò™) LINEAR A SIGN AB049	[491B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062A, 0x003F };
    uint32_t const ces[9] = { 0x491B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_021)
{
    // 1062A 0061;	
    // (êò™) LINEAR A SIGN AB049	[491B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062A, 0x0061 };
    uint32_t const ces[9] = { 0x491B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_022)
{
    // 1062A 0041;	
    // (êò™) LINEAR A SIGN AB049	[491B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062A, 0x0041 };
    uint32_t const ces[9] = { 0x491B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_023)
{
    // 1062A 0062;	
    // (êò™) LINEAR A SIGN AB049	[491B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062A, 0x0062 };
    uint32_t const ces[9] = { 0x491B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_024)
{
    // 1062B 0021;	
    // (êò´) LINEAR A SIGN AB050	[491C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062B, 0x0021 };
    uint32_t const ces[9] = { 0x491C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_025)
{
    // 1062B 003F;	
    // (êò´) LINEAR A SIGN AB050	[491C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062B, 0x003F };
    uint32_t const ces[9] = { 0x491C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_026)
{
    // 1062B 0061;	
    // (êò´) LINEAR A SIGN AB050	[491C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062B, 0x0061 };
    uint32_t const ces[9] = { 0x491C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_027)
{
    // 1062B 0041;	
    // (êò´) LINEAR A SIGN AB050	[491C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062B, 0x0041 };
    uint32_t const ces[9] = { 0x491C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_028)
{
    // 1062B 0062;	
    // (êò´) LINEAR A SIGN AB050	[491C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062B, 0x0062 };
    uint32_t const ces[9] = { 0x491C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_029)
{
    // 1062C 0021;	
    // (êò¨) LINEAR A SIGN AB051	[491D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062C, 0x0021 };
    uint32_t const ces[9] = { 0x491D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_030)
{
    // 1062C 003F;	
    // (êò¨) LINEAR A SIGN AB051	[491D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062C, 0x003F };
    uint32_t const ces[9] = { 0x491D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_031)
{
    // 1062C 0061;	
    // (êò¨) LINEAR A SIGN AB051	[491D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062C, 0x0061 };
    uint32_t const ces[9] = { 0x491D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_032)
{
    // 1062C 0041;	
    // (êò¨) LINEAR A SIGN AB051	[491D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062C, 0x0041 };
    uint32_t const ces[9] = { 0x491D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_033)
{
    // 1062C 0062;	
    // (êò¨) LINEAR A SIGN AB051	[491D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062C, 0x0062 };
    uint32_t const ces[9] = { 0x491D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_034)
{
    // 1062D 0021;	
    // (êò≠) LINEAR A SIGN AB053	[491E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062D, 0x0021 };
    uint32_t const ces[9] = { 0x491E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_035)
{
    // 1062D 003F;	
    // (êò≠) LINEAR A SIGN AB053	[491E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062D, 0x003F };
    uint32_t const ces[9] = { 0x491E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_036)
{
    // 1062D 0061;	
    // (êò≠) LINEAR A SIGN AB053	[491E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062D, 0x0061 };
    uint32_t const ces[9] = { 0x491E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_037)
{
    // 1062D 0041;	
    // (êò≠) LINEAR A SIGN AB053	[491E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062D, 0x0041 };
    uint32_t const ces[9] = { 0x491E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_038)
{
    // 1062D 0062;	
    // (êò≠) LINEAR A SIGN AB053	[491E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062D, 0x0062 };
    uint32_t const ces[9] = { 0x491E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_039)
{
    // 1062E 0021;	
    // (êòÆ) LINEAR A SIGN AB054	[491F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062E, 0x0021 };
    uint32_t const ces[9] = { 0x491F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_040)
{
    // 1062E 003F;	
    // (êòÆ) LINEAR A SIGN AB054	[491F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062E, 0x003F };
    uint32_t const ces[9] = { 0x491F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_041)
{
    // 1062E 0061;	
    // (êòÆ) LINEAR A SIGN AB054	[491F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062E, 0x0061 };
    uint32_t const ces[9] = { 0x491F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_042)
{
    // 1062E 0041;	
    // (êòÆ) LINEAR A SIGN AB054	[491F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062E, 0x0041 };
    uint32_t const ces[9] = { 0x491F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_043)
{
    // 1062E 0062;	
    // (êòÆ) LINEAR A SIGN AB054	[491F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062E, 0x0062 };
    uint32_t const ces[9] = { 0x491F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_044)
{
    // 1062F 0021;	
    // (êòØ) LINEAR A SIGN AB055	[4920 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062F, 0x0021 };
    uint32_t const ces[9] = { 0x4920, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_045)
{
    // 1062F 003F;	
    // (êòØ) LINEAR A SIGN AB055	[4920 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062F, 0x003F };
    uint32_t const ces[9] = { 0x4920, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_046)
{
    // 1062F 0061;	
    // (êòØ) LINEAR A SIGN AB055	[4920 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062F, 0x0061 };
    uint32_t const ces[9] = { 0x4920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_047)
{
    // 1062F 0041;	
    // (êòØ) LINEAR A SIGN AB055	[4920 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062F, 0x0041 };
    uint32_t const ces[9] = { 0x4920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_048)
{
    // 1062F 0062;	
    // (êòØ) LINEAR A SIGN AB055	[4920 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062F, 0x0062 };
    uint32_t const ces[9] = { 0x4920, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_049)
{
    // 10630 0021;	
    // (êò∞) LINEAR A SIGN AB056	[4921 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10630, 0x0021 };
    uint32_t const ces[9] = { 0x4921, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_050)
{
    // 10630 003F;	
    // (êò∞) LINEAR A SIGN AB056	[4921 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10630, 0x003F };
    uint32_t const ces[9] = { 0x4921, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_051)
{
    // 10630 0061;	
    // (êò∞) LINEAR A SIGN AB056	[4921 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10630, 0x0061 };
    uint32_t const ces[9] = { 0x4921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_052)
{
    // 10630 0041;	
    // (êò∞) LINEAR A SIGN AB056	[4921 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10630, 0x0041 };
    uint32_t const ces[9] = { 0x4921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_053)
{
    // 10630 0062;	
    // (êò∞) LINEAR A SIGN AB056	[4921 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10630, 0x0062 };
    uint32_t const ces[9] = { 0x4921, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_054)
{
    // 10631 0021;	
    // (êò±) LINEAR A SIGN AB057	[4922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10631, 0x0021 };
    uint32_t const ces[9] = { 0x4922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_055)
{
    // 10631 003F;	
    // (êò±) LINEAR A SIGN AB057	[4922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10631, 0x003F };
    uint32_t const ces[9] = { 0x4922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_056)
{
    // 10631 0061;	
    // (êò±) LINEAR A SIGN AB057	[4922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10631, 0x0061 };
    uint32_t const ces[9] = { 0x4922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_057)
{
    // 10631 0041;	
    // (êò±) LINEAR A SIGN AB057	[4922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10631, 0x0041 };
    uint32_t const ces[9] = { 0x4922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_058)
{
    // 10631 0062;	
    // (êò±) LINEAR A SIGN AB057	[4922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10631, 0x0062 };
    uint32_t const ces[9] = { 0x4922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_059)
{
    // 10632 0021;	
    // (êò≤) LINEAR A SIGN AB058	[4923 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10632, 0x0021 };
    uint32_t const ces[9] = { 0x4923, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_060)
{
    // 10632 003F;	
    // (êò≤) LINEAR A SIGN AB058	[4923 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10632, 0x003F };
    uint32_t const ces[9] = { 0x4923, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_061)
{
    // 10632 0061;	
    // (êò≤) LINEAR A SIGN AB058	[4923 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10632, 0x0061 };
    uint32_t const ces[9] = { 0x4923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_062)
{
    // 10632 0041;	
    // (êò≤) LINEAR A SIGN AB058	[4923 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10632, 0x0041 };
    uint32_t const ces[9] = { 0x4923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_063)
{
    // 10632 0062;	
    // (êò≤) LINEAR A SIGN AB058	[4923 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10632, 0x0062 };
    uint32_t const ces[9] = { 0x4923, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_064)
{
    // 10633 0021;	
    // (êò≥) LINEAR A SIGN AB059	[4924 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10633, 0x0021 };
    uint32_t const ces[9] = { 0x4924, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_065)
{
    // 10633 003F;	
    // (êò≥) LINEAR A SIGN AB059	[4924 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10633, 0x003F };
    uint32_t const ces[9] = { 0x4924, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_066)
{
    // 10633 0061;	
    // (êò≥) LINEAR A SIGN AB059	[4924 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10633, 0x0061 };
    uint32_t const ces[9] = { 0x4924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_067)
{
    // 10633 0041;	
    // (êò≥) LINEAR A SIGN AB059	[4924 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10633, 0x0041 };
    uint32_t const ces[9] = { 0x4924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_068)
{
    // 10633 0062;	
    // (êò≥) LINEAR A SIGN AB059	[4924 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10633, 0x0062 };
    uint32_t const ces[9] = { 0x4924, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_069)
{
    // 10634 0021;	
    // (êò¥) LINEAR A SIGN AB060	[4925 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10634, 0x0021 };
    uint32_t const ces[9] = { 0x4925, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_070)
{
    // 10634 003F;	
    // (êò¥) LINEAR A SIGN AB060	[4925 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10634, 0x003F };
    uint32_t const ces[9] = { 0x4925, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_071)
{
    // 10634 0061;	
    // (êò¥) LINEAR A SIGN AB060	[4925 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10634, 0x0061 };
    uint32_t const ces[9] = { 0x4925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_072)
{
    // 10634 0041;	
    // (êò¥) LINEAR A SIGN AB060	[4925 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10634, 0x0041 };
    uint32_t const ces[9] = { 0x4925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_073)
{
    // 10634 0062;	
    // (êò¥) LINEAR A SIGN AB060	[4925 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10634, 0x0062 };
    uint32_t const ces[9] = { 0x4925, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_074)
{
    // 10635 0021;	
    // (êòµ) LINEAR A SIGN AB061	[4926 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10635, 0x0021 };
    uint32_t const ces[9] = { 0x4926, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_075)
{
    // 10635 003F;	
    // (êòµ) LINEAR A SIGN AB061	[4926 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10635, 0x003F };
    uint32_t const ces[9] = { 0x4926, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_076)
{
    // 10635 0061;	
    // (êòµ) LINEAR A SIGN AB061	[4926 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10635, 0x0061 };
    uint32_t const ces[9] = { 0x4926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_077)
{
    // 10635 0041;	
    // (êòµ) LINEAR A SIGN AB061	[4926 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10635, 0x0041 };
    uint32_t const ces[9] = { 0x4926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_078)
{
    // 10635 0062;	
    // (êòµ) LINEAR A SIGN AB061	[4926 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10635, 0x0062 };
    uint32_t const ces[9] = { 0x4926, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_079)
{
    // 10636 0021;	
    // (êò∂) LINEAR A SIGN AB065	[4927 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10636, 0x0021 };
    uint32_t const ces[9] = { 0x4927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_080)
{
    // 10636 003F;	
    // (êò∂) LINEAR A SIGN AB065	[4927 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10636, 0x003F };
    uint32_t const ces[9] = { 0x4927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_081)
{
    // 10636 0061;	
    // (êò∂) LINEAR A SIGN AB065	[4927 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10636, 0x0061 };
    uint32_t const ces[9] = { 0x4927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_082)
{
    // 10636 0041;	
    // (êò∂) LINEAR A SIGN AB065	[4927 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10636, 0x0041 };
    uint32_t const ces[9] = { 0x4927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_083)
{
    // 10636 0062;	
    // (êò∂) LINEAR A SIGN AB065	[4927 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10636, 0x0062 };
    uint32_t const ces[9] = { 0x4927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_084)
{
    // 10637 0021;	
    // (êò∑) LINEAR A SIGN AB066	[4928 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10637, 0x0021 };
    uint32_t const ces[9] = { 0x4928, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_085)
{
    // 10637 003F;	
    // (êò∑) LINEAR A SIGN AB066	[4928 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10637, 0x003F };
    uint32_t const ces[9] = { 0x4928, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_086)
{
    // 10637 0061;	
    // (êò∑) LINEAR A SIGN AB066	[4928 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10637, 0x0061 };
    uint32_t const ces[9] = { 0x4928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_087)
{
    // 10637 0041;	
    // (êò∑) LINEAR A SIGN AB066	[4928 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10637, 0x0041 };
    uint32_t const ces[9] = { 0x4928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_088)
{
    // 10637 0062;	
    // (êò∑) LINEAR A SIGN AB066	[4928 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10637, 0x0062 };
    uint32_t const ces[9] = { 0x4928, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_089)
{
    // 10638 0021;	
    // (êò∏) LINEAR A SIGN AB067	[4929 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10638, 0x0021 };
    uint32_t const ces[9] = { 0x4929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_090)
{
    // 10638 003F;	
    // (êò∏) LINEAR A SIGN AB067	[4929 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10638, 0x003F };
    uint32_t const ces[9] = { 0x4929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_091)
{
    // 10638 0061;	
    // (êò∏) LINEAR A SIGN AB067	[4929 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10638, 0x0061 };
    uint32_t const ces[9] = { 0x4929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_092)
{
    // 10638 0041;	
    // (êò∏) LINEAR A SIGN AB067	[4929 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10638, 0x0041 };
    uint32_t const ces[9] = { 0x4929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_093)
{
    // 10638 0062;	
    // (êò∏) LINEAR A SIGN AB067	[4929 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10638, 0x0062 };
    uint32_t const ces[9] = { 0x4929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_094)
{
    // 10639 0021;	
    // (êòπ) LINEAR A SIGN AB069	[492A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10639, 0x0021 };
    uint32_t const ces[9] = { 0x492A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_095)
{
    // 10639 003F;	
    // (êòπ) LINEAR A SIGN AB069	[492A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10639, 0x003F };
    uint32_t const ces[9] = { 0x492A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_096)
{
    // 10639 0061;	
    // (êòπ) LINEAR A SIGN AB069	[492A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10639, 0x0061 };
    uint32_t const ces[9] = { 0x492A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_097)
{
    // 10639 0041;	
    // (êòπ) LINEAR A SIGN AB069	[492A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10639, 0x0041 };
    uint32_t const ces[9] = { 0x492A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_098)
{
    // 10639 0062;	
    // (êòπ) LINEAR A SIGN AB069	[492A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10639, 0x0062 };
    uint32_t const ces[9] = { 0x492A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_099)
{
    // 1063A 0021;	
    // (êò∫) LINEAR A SIGN AB070	[492B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063A, 0x0021 };
    uint32_t const ces[9] = { 0x492B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_100)
{
    // 1063A 003F;	
    // (êò∫) LINEAR A SIGN AB070	[492B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063A, 0x003F };
    uint32_t const ces[9] = { 0x492B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_101)
{
    // 1063A 0061;	
    // (êò∫) LINEAR A SIGN AB070	[492B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063A, 0x0061 };
    uint32_t const ces[9] = { 0x492B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_102)
{
    // 1063A 0041;	
    // (êò∫) LINEAR A SIGN AB070	[492B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063A, 0x0041 };
    uint32_t const ces[9] = { 0x492B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_103)
{
    // 1063A 0062;	
    // (êò∫) LINEAR A SIGN AB070	[492B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063A, 0x0062 };
    uint32_t const ces[9] = { 0x492B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_104)
{
    // 1063B 0021;	
    // (êòª) LINEAR A SIGN AB073	[492C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063B, 0x0021 };
    uint32_t const ces[9] = { 0x492C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_105)
{
    // 1063B 003F;	
    // (êòª) LINEAR A SIGN AB073	[492C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063B, 0x003F };
    uint32_t const ces[9] = { 0x492C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_106)
{
    // 1063B 0061;	
    // (êòª) LINEAR A SIGN AB073	[492C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063B, 0x0061 };
    uint32_t const ces[9] = { 0x492C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_107)
{
    // 1063B 0041;	
    // (êòª) LINEAR A SIGN AB073	[492C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063B, 0x0041 };
    uint32_t const ces[9] = { 0x492C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_108)
{
    // 1063B 0062;	
    // (êòª) LINEAR A SIGN AB073	[492C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063B, 0x0062 };
    uint32_t const ces[9] = { 0x492C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_109)
{
    // 1063C 0021;	
    // (êòº) LINEAR A SIGN AB074	[492D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063C, 0x0021 };
    uint32_t const ces[9] = { 0x492D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_110)
{
    // 1063C 003F;	
    // (êòº) LINEAR A SIGN AB074	[492D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063C, 0x003F };
    uint32_t const ces[9] = { 0x492D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_111)
{
    // 1063C 0061;	
    // (êòº) LINEAR A SIGN AB074	[492D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063C, 0x0061 };
    uint32_t const ces[9] = { 0x492D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_112)
{
    // 1063C 0041;	
    // (êòº) LINEAR A SIGN AB074	[492D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063C, 0x0041 };
    uint32_t const ces[9] = { 0x492D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_113)
{
    // 1063C 0062;	
    // (êòº) LINEAR A SIGN AB074	[492D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063C, 0x0062 };
    uint32_t const ces[9] = { 0x492D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_114)
{
    // 1063D 0021;	
    // (êòΩ) LINEAR A SIGN AB076	[492E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063D, 0x0021 };
    uint32_t const ces[9] = { 0x492E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_115)
{
    // 1063D 003F;	
    // (êòΩ) LINEAR A SIGN AB076	[492E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063D, 0x003F };
    uint32_t const ces[9] = { 0x492E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_116)
{
    // 1063D 0061;	
    // (êòΩ) LINEAR A SIGN AB076	[492E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063D, 0x0061 };
    uint32_t const ces[9] = { 0x492E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_117)
{
    // 1063D 0041;	
    // (êòΩ) LINEAR A SIGN AB076	[492E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063D, 0x0041 };
    uint32_t const ces[9] = { 0x492E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_118)
{
    // 1063D 0062;	
    // (êòΩ) LINEAR A SIGN AB076	[492E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063D, 0x0062 };
    uint32_t const ces[9] = { 0x492E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_119)
{
    // 1063E 0021;	
    // (êòæ) LINEAR A SIGN AB077	[492F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063E, 0x0021 };
    uint32_t const ces[9] = { 0x492F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_120)
{
    // 1063E 003F;	
    // (êòæ) LINEAR A SIGN AB077	[492F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063E, 0x003F };
    uint32_t const ces[9] = { 0x492F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_121)
{
    // 1063E 0061;	
    // (êòæ) LINEAR A SIGN AB077	[492F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063E, 0x0061 };
    uint32_t const ces[9] = { 0x492F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_122)
{
    // 1063E 0041;	
    // (êòæ) LINEAR A SIGN AB077	[492F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063E, 0x0041 };
    uint32_t const ces[9] = { 0x492F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_123)
{
    // 1063E 0062;	
    // (êòæ) LINEAR A SIGN AB077	[492F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063E, 0x0062 };
    uint32_t const ces[9] = { 0x492F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_124)
{
    // 1063F 0021;	
    // (êòø) LINEAR A SIGN AB078	[4930 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063F, 0x0021 };
    uint32_t const ces[9] = { 0x4930, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_125)
{
    // 1063F 003F;	
    // (êòø) LINEAR A SIGN AB078	[4930 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063F, 0x003F };
    uint32_t const ces[9] = { 0x4930, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_126)
{
    // 1063F 0061;	
    // (êòø) LINEAR A SIGN AB078	[4930 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063F, 0x0061 };
    uint32_t const ces[9] = { 0x4930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_127)
{
    // 1063F 0041;	
    // (êòø) LINEAR A SIGN AB078	[4930 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063F, 0x0041 };
    uint32_t const ces[9] = { 0x4930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_128)
{
    // 1063F 0062;	
    // (êòø) LINEAR A SIGN AB078	[4930 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063F, 0x0062 };
    uint32_t const ces[9] = { 0x4930, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_129)
{
    // 10640 0021;	
    // (êôÄ) LINEAR A SIGN AB079	[4931 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10640, 0x0021 };
    uint32_t const ces[9] = { 0x4931, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_130)
{
    // 10640 003F;	
    // (êôÄ) LINEAR A SIGN AB079	[4931 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10640, 0x003F };
    uint32_t const ces[9] = { 0x4931, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_131)
{
    // 10640 0061;	
    // (êôÄ) LINEAR A SIGN AB079	[4931 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10640, 0x0061 };
    uint32_t const ces[9] = { 0x4931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_132)
{
    // 10640 0041;	
    // (êôÄ) LINEAR A SIGN AB079	[4931 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10640, 0x0041 };
    uint32_t const ces[9] = { 0x4931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_133)
{
    // 10640 0062;	
    // (êôÄ) LINEAR A SIGN AB079	[4931 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10640, 0x0062 };
    uint32_t const ces[9] = { 0x4931, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_134)
{
    // 10641 0021;	
    // (êôÅ) LINEAR A SIGN AB080	[4932 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10641, 0x0021 };
    uint32_t const ces[9] = { 0x4932, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_135)
{
    // 10641 003F;	
    // (êôÅ) LINEAR A SIGN AB080	[4932 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10641, 0x003F };
    uint32_t const ces[9] = { 0x4932, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_136)
{
    // 10641 0061;	
    // (êôÅ) LINEAR A SIGN AB080	[4932 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10641, 0x0061 };
    uint32_t const ces[9] = { 0x4932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_137)
{
    // 10641 0041;	
    // (êôÅ) LINEAR A SIGN AB080	[4932 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10641, 0x0041 };
    uint32_t const ces[9] = { 0x4932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_138)
{
    // 10641 0062;	
    // (êôÅ) LINEAR A SIGN AB080	[4932 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10641, 0x0062 };
    uint32_t const ces[9] = { 0x4932, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_139)
{
    // 10642 0021;	
    // (êôÇ) LINEAR A SIGN AB081	[4933 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10642, 0x0021 };
    uint32_t const ces[9] = { 0x4933, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_140)
{
    // 10642 003F;	
    // (êôÇ) LINEAR A SIGN AB081	[4933 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10642, 0x003F };
    uint32_t const ces[9] = { 0x4933, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_141)
{
    // 10642 0061;	
    // (êôÇ) LINEAR A SIGN AB081	[4933 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10642, 0x0061 };
    uint32_t const ces[9] = { 0x4933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_142)
{
    // 10642 0041;	
    // (êôÇ) LINEAR A SIGN AB081	[4933 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10642, 0x0041 };
    uint32_t const ces[9] = { 0x4933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_143)
{
    // 10642 0062;	
    // (êôÇ) LINEAR A SIGN AB081	[4933 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10642, 0x0062 };
    uint32_t const ces[9] = { 0x4933, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_144)
{
    // 10643 0021;	
    // (êôÉ) LINEAR A SIGN AB082	[4934 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10643, 0x0021 };
    uint32_t const ces[9] = { 0x4934, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_145)
{
    // 10643 003F;	
    // (êôÉ) LINEAR A SIGN AB082	[4934 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10643, 0x003F };
    uint32_t const ces[9] = { 0x4934, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_146)
{
    // 10643 0061;	
    // (êôÉ) LINEAR A SIGN AB082	[4934 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10643, 0x0061 };
    uint32_t const ces[9] = { 0x4934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_147)
{
    // 10643 0041;	
    // (êôÉ) LINEAR A SIGN AB082	[4934 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10643, 0x0041 };
    uint32_t const ces[9] = { 0x4934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_148)
{
    // 10643 0062;	
    // (êôÉ) LINEAR A SIGN AB082	[4934 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10643, 0x0062 };
    uint32_t const ces[9] = { 0x4934, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_149)
{
    // 10644 0021;	
    // (êôÑ) LINEAR A SIGN AB085	[4935 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10644, 0x0021 };
    uint32_t const ces[9] = { 0x4935, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_150)
{
    // 10644 003F;	
    // (êôÑ) LINEAR A SIGN AB085	[4935 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10644, 0x003F };
    uint32_t const ces[9] = { 0x4935, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_151)
{
    // 10644 0061;	
    // (êôÑ) LINEAR A SIGN AB085	[4935 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10644, 0x0061 };
    uint32_t const ces[9] = { 0x4935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_152)
{
    // 10644 0041;	
    // (êôÑ) LINEAR A SIGN AB085	[4935 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10644, 0x0041 };
    uint32_t const ces[9] = { 0x4935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_153)
{
    // 10644 0062;	
    // (êôÑ) LINEAR A SIGN AB085	[4935 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10644, 0x0062 };
    uint32_t const ces[9] = { 0x4935, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_154)
{
    // 10645 0021;	
    // (êôÖ) LINEAR A SIGN AB086	[4936 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10645, 0x0021 };
    uint32_t const ces[9] = { 0x4936, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_155)
{
    // 10645 003F;	
    // (êôÖ) LINEAR A SIGN AB086	[4936 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10645, 0x003F };
    uint32_t const ces[9] = { 0x4936, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_156)
{
    // 10645 0061;	
    // (êôÖ) LINEAR A SIGN AB086	[4936 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10645, 0x0061 };
    uint32_t const ces[9] = { 0x4936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_157)
{
    // 10645 0041;	
    // (êôÖ) LINEAR A SIGN AB086	[4936 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10645, 0x0041 };
    uint32_t const ces[9] = { 0x4936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_158)
{
    // 10645 0062;	
    // (êôÖ) LINEAR A SIGN AB086	[4936 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10645, 0x0062 };
    uint32_t const ces[9] = { 0x4936, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_159)
{
    // 10646 0021;	
    // (êôÜ) LINEAR A SIGN AB087	[4937 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10646, 0x0021 };
    uint32_t const ces[9] = { 0x4937, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_160)
{
    // 10646 003F;	
    // (êôÜ) LINEAR A SIGN AB087	[4937 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10646, 0x003F };
    uint32_t const ces[9] = { 0x4937, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_161)
{
    // 10646 0061;	
    // (êôÜ) LINEAR A SIGN AB087	[4937 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10646, 0x0061 };
    uint32_t const ces[9] = { 0x4937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_162)
{
    // 10646 0041;	
    // (êôÜ) LINEAR A SIGN AB087	[4937 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10646, 0x0041 };
    uint32_t const ces[9] = { 0x4937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_163)
{
    // 10646 0062;	
    // (êôÜ) LINEAR A SIGN AB087	[4937 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10646, 0x0062 };
    uint32_t const ces[9] = { 0x4937, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_164)
{
    // 10647 0021;	
    // (êôá) LINEAR A SIGN A100-102	[4938 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10647, 0x0021 };
    uint32_t const ces[9] = { 0x4938, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_165)
{
    // 10647 003F;	
    // (êôá) LINEAR A SIGN A100-102	[4938 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10647, 0x003F };
    uint32_t const ces[9] = { 0x4938, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_166)
{
    // 10647 0061;	
    // (êôá) LINEAR A SIGN A100-102	[4938 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10647, 0x0061 };
    uint32_t const ces[9] = { 0x4938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_167)
{
    // 10647 0041;	
    // (êôá) LINEAR A SIGN A100-102	[4938 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10647, 0x0041 };
    uint32_t const ces[9] = { 0x4938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_168)
{
    // 10647 0062;	
    // (êôá) LINEAR A SIGN A100-102	[4938 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10647, 0x0062 };
    uint32_t const ces[9] = { 0x4938, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_169)
{
    // 10648 0021;	
    // (êôà) LINEAR A SIGN AB118	[4939 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10648, 0x0021 };
    uint32_t const ces[9] = { 0x4939, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_170)
{
    // 10648 003F;	
    // (êôà) LINEAR A SIGN AB118	[4939 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10648, 0x003F };
    uint32_t const ces[9] = { 0x4939, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_171)
{
    // 10648 0061;	
    // (êôà) LINEAR A SIGN AB118	[4939 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10648, 0x0061 };
    uint32_t const ces[9] = { 0x4939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_172)
{
    // 10648 0041;	
    // (êôà) LINEAR A SIGN AB118	[4939 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10648, 0x0041 };
    uint32_t const ces[9] = { 0x4939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_173)
{
    // 10648 0062;	
    // (êôà) LINEAR A SIGN AB118	[4939 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10648, 0x0062 };
    uint32_t const ces[9] = { 0x4939, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_174)
{
    // 10649 0021;	
    // (êôâ) LINEAR A SIGN AB120	[493A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10649, 0x0021 };
    uint32_t const ces[9] = { 0x493A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_175)
{
    // 10649 003F;	
    // (êôâ) LINEAR A SIGN AB120	[493A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10649, 0x003F };
    uint32_t const ces[9] = { 0x493A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_176)
{
    // 10649 0061;	
    // (êôâ) LINEAR A SIGN AB120	[493A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10649, 0x0061 };
    uint32_t const ces[9] = { 0x493A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_177)
{
    // 10649 0041;	
    // (êôâ) LINEAR A SIGN AB120	[493A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10649, 0x0041 };
    uint32_t const ces[9] = { 0x493A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_178)
{
    // 10649 0062;	
    // (êôâ) LINEAR A SIGN AB120	[493A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10649, 0x0062 };
    uint32_t const ces[9] = { 0x493A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_179)
{
    // 1064A 0021;	
    // (êôä) LINEAR A SIGN A120B	[493B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064A, 0x0021 };
    uint32_t const ces[9] = { 0x493B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_180)
{
    // 1064A 003F;	
    // (êôä) LINEAR A SIGN A120B	[493B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064A, 0x003F };
    uint32_t const ces[9] = { 0x493B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_181)
{
    // 1064A 0061;	
    // (êôä) LINEAR A SIGN A120B	[493B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064A, 0x0061 };
    uint32_t const ces[9] = { 0x493B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_182)
{
    // 1064A 0041;	
    // (êôä) LINEAR A SIGN A120B	[493B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064A, 0x0041 };
    uint32_t const ces[9] = { 0x493B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_183)
{
    // 1064A 0062;	
    // (êôä) LINEAR A SIGN A120B	[493B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064A, 0x0062 };
    uint32_t const ces[9] = { 0x493B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_184)
{
    // 1064B 0021;	
    // (êôã) LINEAR A SIGN AB122	[493C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064B, 0x0021 };
    uint32_t const ces[9] = { 0x493C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_185)
{
    // 1064B 003F;	
    // (êôã) LINEAR A SIGN AB122	[493C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064B, 0x003F };
    uint32_t const ces[9] = { 0x493C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_186)
{
    // 1064B 0061;	
    // (êôã) LINEAR A SIGN AB122	[493C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064B, 0x0061 };
    uint32_t const ces[9] = { 0x493C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_187)
{
    // 1064B 0041;	
    // (êôã) LINEAR A SIGN AB122	[493C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064B, 0x0041 };
    uint32_t const ces[9] = { 0x493C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_188)
{
    // 1064B 0062;	
    // (êôã) LINEAR A SIGN AB122	[493C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064B, 0x0062 };
    uint32_t const ces[9] = { 0x493C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_189)
{
    // 1064C 0021;	
    // (êôå) LINEAR A SIGN AB123	[493D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064C, 0x0021 };
    uint32_t const ces[9] = { 0x493D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_190)
{
    // 1064C 003F;	
    // (êôå) LINEAR A SIGN AB123	[493D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064C, 0x003F };
    uint32_t const ces[9] = { 0x493D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_191)
{
    // 1064C 0061;	
    // (êôå) LINEAR A SIGN AB123	[493D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064C, 0x0061 };
    uint32_t const ces[9] = { 0x493D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_192)
{
    // 1064C 0041;	
    // (êôå) LINEAR A SIGN AB123	[493D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064C, 0x0041 };
    uint32_t const ces[9] = { 0x493D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_193)
{
    // 1064C 0062;	
    // (êôå) LINEAR A SIGN AB123	[493D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064C, 0x0062 };
    uint32_t const ces[9] = { 0x493D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_194)
{
    // 1064D 0021;	
    // (êôç) LINEAR A SIGN AB131A	[493E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064D, 0x0021 };
    uint32_t const ces[9] = { 0x493E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_195)
{
    // 1064D 003F;	
    // (êôç) LINEAR A SIGN AB131A	[493E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064D, 0x003F };
    uint32_t const ces[9] = { 0x493E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_196)
{
    // 1064D 0061;	
    // (êôç) LINEAR A SIGN AB131A	[493E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064D, 0x0061 };
    uint32_t const ces[9] = { 0x493E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_197)
{
    // 1064D 0041;	
    // (êôç) LINEAR A SIGN AB131A	[493E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064D, 0x0041 };
    uint32_t const ces[9] = { 0x493E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_198)
{
    // 1064D 0062;	
    // (êôç) LINEAR A SIGN AB131A	[493E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064D, 0x0062 };
    uint32_t const ces[9] = { 0x493E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_199)
{
    // 1064E 0021;	
    // (êôé) LINEAR A SIGN AB131B	[493F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064E, 0x0021 };
    uint32_t const ces[9] = { 0x493F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_200)
{
    // 1064E 003F;	
    // (êôé) LINEAR A SIGN AB131B	[493F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064E, 0x003F };
    uint32_t const ces[9] = { 0x493F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_201)
{
    // 1064E 0061;	
    // (êôé) LINEAR A SIGN AB131B	[493F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064E, 0x0061 };
    uint32_t const ces[9] = { 0x493F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_202)
{
    // 1064E 0041;	
    // (êôé) LINEAR A SIGN AB131B	[493F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064E, 0x0041 };
    uint32_t const ces[9] = { 0x493F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_203)
{
    // 1064E 0062;	
    // (êôé) LINEAR A SIGN AB131B	[493F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064E, 0x0062 };
    uint32_t const ces[9] = { 0x493F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_204)
{
    // 1064F 0021;	
    // (êôè) LINEAR A SIGN A131C	[4940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064F, 0x0021 };
    uint32_t const ces[9] = { 0x4940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_205)
{
    // 1064F 003F;	
    // (êôè) LINEAR A SIGN A131C	[4940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064F, 0x003F };
    uint32_t const ces[9] = { 0x4940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_206)
{
    // 1064F 0061;	
    // (êôè) LINEAR A SIGN A131C	[4940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064F, 0x0061 };
    uint32_t const ces[9] = { 0x4940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_207)
{
    // 1064F 0041;	
    // (êôè) LINEAR A SIGN A131C	[4940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064F, 0x0041 };
    uint32_t const ces[9] = { 0x4940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_208)
{
    // 1064F 0062;	
    // (êôè) LINEAR A SIGN A131C	[4940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064F, 0x0062 };
    uint32_t const ces[9] = { 0x4940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_209)
{
    // 10650 0021;	
    // (êôê) LINEAR A SIGN AB164	[4941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10650, 0x0021 };
    uint32_t const ces[9] = { 0x4941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_210)
{
    // 10650 003F;	
    // (êôê) LINEAR A SIGN AB164	[4941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10650, 0x003F };
    uint32_t const ces[9] = { 0x4941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_211)
{
    // 10650 0061;	
    // (êôê) LINEAR A SIGN AB164	[4941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10650, 0x0061 };
    uint32_t const ces[9] = { 0x4941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_212)
{
    // 10650 0041;	
    // (êôê) LINEAR A SIGN AB164	[4941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10650, 0x0041 };
    uint32_t const ces[9] = { 0x4941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_213)
{
    // 10650 0062;	
    // (êôê) LINEAR A SIGN AB164	[4941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10650, 0x0062 };
    uint32_t const ces[9] = { 0x4941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_214)
{
    // 10651 0021;	
    // (êôë) LINEAR A SIGN AB171	[4942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10651, 0x0021 };
    uint32_t const ces[9] = { 0x4942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_215)
{
    // 10651 003F;	
    // (êôë) LINEAR A SIGN AB171	[4942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10651, 0x003F };
    uint32_t const ces[9] = { 0x4942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_216)
{
    // 10651 0061;	
    // (êôë) LINEAR A SIGN AB171	[4942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10651, 0x0061 };
    uint32_t const ces[9] = { 0x4942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_217)
{
    // 10651 0041;	
    // (êôë) LINEAR A SIGN AB171	[4942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10651, 0x0041 };
    uint32_t const ces[9] = { 0x4942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_218)
{
    // 10651 0062;	
    // (êôë) LINEAR A SIGN AB171	[4942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10651, 0x0062 };
    uint32_t const ces[9] = { 0x4942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_219)
{
    // 10652 0021;	
    // (êôí) LINEAR A SIGN AB180	[4943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10652, 0x0021 };
    uint32_t const ces[9] = { 0x4943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_220)
{
    // 10652 003F;	
    // (êôí) LINEAR A SIGN AB180	[4943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10652, 0x003F };
    uint32_t const ces[9] = { 0x4943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_221)
{
    // 10652 0061;	
    // (êôí) LINEAR A SIGN AB180	[4943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10652, 0x0061 };
    uint32_t const ces[9] = { 0x4943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_222)
{
    // 10652 0041;	
    // (êôí) LINEAR A SIGN AB180	[4943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10652, 0x0041 };
    uint32_t const ces[9] = { 0x4943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_223)
{
    // 10652 0062;	
    // (êôí) LINEAR A SIGN AB180	[4943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10652, 0x0062 };
    uint32_t const ces[9] = { 0x4943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_224)
{
    // 10653 0021;	
    // (êôì) LINEAR A SIGN AB188	[4944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10653, 0x0021 };
    uint32_t const ces[9] = { 0x4944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_225)
{
    // 10653 003F;	
    // (êôì) LINEAR A SIGN AB188	[4944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10653, 0x003F };
    uint32_t const ces[9] = { 0x4944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_226)
{
    // 10653 0061;	
    // (êôì) LINEAR A SIGN AB188	[4944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10653, 0x0061 };
    uint32_t const ces[9] = { 0x4944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_227)
{
    // 10653 0041;	
    // (êôì) LINEAR A SIGN AB188	[4944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10653, 0x0041 };
    uint32_t const ces[9] = { 0x4944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_228)
{
    // 10653 0062;	
    // (êôì) LINEAR A SIGN AB188	[4944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10653, 0x0062 };
    uint32_t const ces[9] = { 0x4944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_229)
{
    // 10654 0021;	
    // (êôî) LINEAR A SIGN AB191	[4945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10654, 0x0021 };
    uint32_t const ces[9] = { 0x4945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_230)
{
    // 10654 003F;	
    // (êôî) LINEAR A SIGN AB191	[4945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10654, 0x003F };
    uint32_t const ces[9] = { 0x4945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_231)
{
    // 10654 0061;	
    // (êôî) LINEAR A SIGN AB191	[4945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10654, 0x0061 };
    uint32_t const ces[9] = { 0x4945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_232)
{
    // 10654 0041;	
    // (êôî) LINEAR A SIGN AB191	[4945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10654, 0x0041 };
    uint32_t const ces[9] = { 0x4945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_233)
{
    // 10654 0062;	
    // (êôî) LINEAR A SIGN AB191	[4945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10654, 0x0062 };
    uint32_t const ces[9] = { 0x4945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_234)
{
    // 10655 0021;	
    // (êôï) LINEAR A SIGN A301	[4946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10655, 0x0021 };
    uint32_t const ces[9] = { 0x4946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_235)
{
    // 10655 003F;	
    // (êôï) LINEAR A SIGN A301	[4946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10655, 0x003F };
    uint32_t const ces[9] = { 0x4946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_236)
{
    // 10655 0061;	
    // (êôï) LINEAR A SIGN A301	[4946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10655, 0x0061 };
    uint32_t const ces[9] = { 0x4946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_237)
{
    // 10655 0041;	
    // (êôï) LINEAR A SIGN A301	[4946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10655, 0x0041 };
    uint32_t const ces[9] = { 0x4946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_238)
{
    // 10655 0062;	
    // (êôï) LINEAR A SIGN A301	[4946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10655, 0x0062 };
    uint32_t const ces[9] = { 0x4946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_239)
{
    // 10656 0021;	
    // (êôñ) LINEAR A SIGN A302	[4947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10656, 0x0021 };
    uint32_t const ces[9] = { 0x4947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_240)
{
    // 10656 003F;	
    // (êôñ) LINEAR A SIGN A302	[4947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10656, 0x003F };
    uint32_t const ces[9] = { 0x4947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_241)
{
    // 10656 0061;	
    // (êôñ) LINEAR A SIGN A302	[4947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10656, 0x0061 };
    uint32_t const ces[9] = { 0x4947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_242)
{
    // 10656 0041;	
    // (êôñ) LINEAR A SIGN A302	[4947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10656, 0x0041 };
    uint32_t const ces[9] = { 0x4947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_243)
{
    // 10656 0062;	
    // (êôñ) LINEAR A SIGN A302	[4947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10656, 0x0062 };
    uint32_t const ces[9] = { 0x4947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_244)
{
    // 10657 0021;	
    // (êôó) LINEAR A SIGN A303	[4948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10657, 0x0021 };
    uint32_t const ces[9] = { 0x4948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_245)
{
    // 10657 003F;	
    // (êôó) LINEAR A SIGN A303	[4948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10657, 0x003F };
    uint32_t const ces[9] = { 0x4948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_246)
{
    // 10657 0061;	
    // (êôó) LINEAR A SIGN A303	[4948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10657, 0x0061 };
    uint32_t const ces[9] = { 0x4948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_247)
{
    // 10657 0041;	
    // (êôó) LINEAR A SIGN A303	[4948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10657, 0x0041 };
    uint32_t const ces[9] = { 0x4948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_248)
{
    // 10657 0062;	
    // (êôó) LINEAR A SIGN A303	[4948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10657, 0x0062 };
    uint32_t const ces[9] = { 0x4948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_249)
{
    // 10658 0021;	
    // (êôò) LINEAR A SIGN A304	[4949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10658, 0x0021 };
    uint32_t const ces[9] = { 0x4949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_250)
{
    // 10658 003F;	
    // (êôò) LINEAR A SIGN A304	[4949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10658, 0x003F };
    uint32_t const ces[9] = { 0x4949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_251)
{
    // 10658 0061;	
    // (êôò) LINEAR A SIGN A304	[4949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10658, 0x0061 };
    uint32_t const ces[9] = { 0x4949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_252)
{
    // 10658 0041;	
    // (êôò) LINEAR A SIGN A304	[4949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10658, 0x0041 };
    uint32_t const ces[9] = { 0x4949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_253)
{
    // 10658 0062;	
    // (êôò) LINEAR A SIGN A304	[4949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10658, 0x0062 };
    uint32_t const ces[9] = { 0x4949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_254)
{
    // 10659 0021;	
    // (êôô) LINEAR A SIGN A305	[494A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10659, 0x0021 };
    uint32_t const ces[9] = { 0x494A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_255)
{
    // 10659 003F;	
    // (êôô) LINEAR A SIGN A305	[494A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10659, 0x003F };
    uint32_t const ces[9] = { 0x494A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_256)
{
    // 10659 0061;	
    // (êôô) LINEAR A SIGN A305	[494A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10659, 0x0061 };
    uint32_t const ces[9] = { 0x494A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_257)
{
    // 10659 0041;	
    // (êôô) LINEAR A SIGN A305	[494A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10659, 0x0041 };
    uint32_t const ces[9] = { 0x494A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_258)
{
    // 10659 0062;	
    // (êôô) LINEAR A SIGN A305	[494A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10659, 0x0062 };
    uint32_t const ces[9] = { 0x494A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_259)
{
    // 1065A 0021;	
    // (êôö) LINEAR A SIGN A306	[494B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065A, 0x0021 };
    uint32_t const ces[9] = { 0x494B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_260)
{
    // 1065A 003F;	
    // (êôö) LINEAR A SIGN A306	[494B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065A, 0x003F };
    uint32_t const ces[9] = { 0x494B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_261)
{
    // 1065A 0061;	
    // (êôö) LINEAR A SIGN A306	[494B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065A, 0x0061 };
    uint32_t const ces[9] = { 0x494B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_262)
{
    // 1065A 0041;	
    // (êôö) LINEAR A SIGN A306	[494B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065A, 0x0041 };
    uint32_t const ces[9] = { 0x494B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_263)
{
    // 1065A 0062;	
    // (êôö) LINEAR A SIGN A306	[494B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065A, 0x0062 };
    uint32_t const ces[9] = { 0x494B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_264)
{
    // 1065B 0021;	
    // (êôõ) LINEAR A SIGN A307	[494C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065B, 0x0021 };
    uint32_t const ces[9] = { 0x494C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_265)
{
    // 1065B 003F;	
    // (êôõ) LINEAR A SIGN A307	[494C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065B, 0x003F };
    uint32_t const ces[9] = { 0x494C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_266)
{
    // 1065B 0061;	
    // (êôõ) LINEAR A SIGN A307	[494C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065B, 0x0061 };
    uint32_t const ces[9] = { 0x494C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_267)
{
    // 1065B 0041;	
    // (êôõ) LINEAR A SIGN A307	[494C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065B, 0x0041 };
    uint32_t const ces[9] = { 0x494C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_268)
{
    // 1065B 0062;	
    // (êôõ) LINEAR A SIGN A307	[494C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065B, 0x0062 };
    uint32_t const ces[9] = { 0x494C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_269)
{
    // 1065C 0021;	
    // (êôú) LINEAR A SIGN A308	[494D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065C, 0x0021 };
    uint32_t const ces[9] = { 0x494D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_270)
{
    // 1065C 003F;	
    // (êôú) LINEAR A SIGN A308	[494D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065C, 0x003F };
    uint32_t const ces[9] = { 0x494D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_271)
{
    // 1065C 0061;	
    // (êôú) LINEAR A SIGN A308	[494D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065C, 0x0061 };
    uint32_t const ces[9] = { 0x494D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_272)
{
    // 1065C 0041;	
    // (êôú) LINEAR A SIGN A308	[494D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065C, 0x0041 };
    uint32_t const ces[9] = { 0x494D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_273)
{
    // 1065C 0062;	
    // (êôú) LINEAR A SIGN A308	[494D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065C, 0x0062 };
    uint32_t const ces[9] = { 0x494D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_274)
{
    // 1065D 0021;	
    // (êôù) LINEAR A SIGN A309A	[494E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065D, 0x0021 };
    uint32_t const ces[9] = { 0x494E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_275)
{
    // 1065D 003F;	
    // (êôù) LINEAR A SIGN A309A	[494E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065D, 0x003F };
    uint32_t const ces[9] = { 0x494E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_276)
{
    // 1065D 0061;	
    // (êôù) LINEAR A SIGN A309A	[494E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065D, 0x0061 };
    uint32_t const ces[9] = { 0x494E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_277)
{
    // 1065D 0041;	
    // (êôù) LINEAR A SIGN A309A	[494E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065D, 0x0041 };
    uint32_t const ces[9] = { 0x494E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_278)
{
    // 1065D 0062;	
    // (êôù) LINEAR A SIGN A309A	[494E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065D, 0x0062 };
    uint32_t const ces[9] = { 0x494E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_279)
{
    // 1065E 0021;	
    // (êôû) LINEAR A SIGN A309B	[494F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065E, 0x0021 };
    uint32_t const ces[9] = { 0x494F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_280)
{
    // 1065E 003F;	
    // (êôû) LINEAR A SIGN A309B	[494F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065E, 0x003F };
    uint32_t const ces[9] = { 0x494F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_281)
{
    // 1065E 0061;	
    // (êôû) LINEAR A SIGN A309B	[494F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065E, 0x0061 };
    uint32_t const ces[9] = { 0x494F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_282)
{
    // 1065E 0041;	
    // (êôû) LINEAR A SIGN A309B	[494F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065E, 0x0041 };
    uint32_t const ces[9] = { 0x494F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_283)
{
    // 1065E 0062;	
    // (êôû) LINEAR A SIGN A309B	[494F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065E, 0x0062 };
    uint32_t const ces[9] = { 0x494F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_284)
{
    // 1065F 0021;	
    // (êôü) LINEAR A SIGN A309C	[4950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065F, 0x0021 };
    uint32_t const ces[9] = { 0x4950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_285)
{
    // 1065F 003F;	
    // (êôü) LINEAR A SIGN A309C	[4950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065F, 0x003F };
    uint32_t const ces[9] = { 0x4950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_286)
{
    // 1065F 0061;	
    // (êôü) LINEAR A SIGN A309C	[4950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065F, 0x0061 };
    uint32_t const ces[9] = { 0x4950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_287)
{
    // 1065F 0041;	
    // (êôü) LINEAR A SIGN A309C	[4950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065F, 0x0041 };
    uint32_t const ces[9] = { 0x4950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_288)
{
    // 1065F 0062;	
    // (êôü) LINEAR A SIGN A309C	[4950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065F, 0x0062 };
    uint32_t const ces[9] = { 0x4950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_289)
{
    // 10660 0021;	
    // (êô†) LINEAR A SIGN A310	[4951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10660, 0x0021 };
    uint32_t const ces[9] = { 0x4951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_290)
{
    // 10660 003F;	
    // (êô†) LINEAR A SIGN A310	[4951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10660, 0x003F };
    uint32_t const ces[9] = { 0x4951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_291)
{
    // 10660 0061;	
    // (êô†) LINEAR A SIGN A310	[4951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10660, 0x0061 };
    uint32_t const ces[9] = { 0x4951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_292)
{
    // 10660 0041;	
    // (êô†) LINEAR A SIGN A310	[4951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10660, 0x0041 };
    uint32_t const ces[9] = { 0x4951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_293)
{
    // 10660 0062;	
    // (êô†) LINEAR A SIGN A310	[4951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10660, 0x0062 };
    uint32_t const ces[9] = { 0x4951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_294)
{
    // 10661 0021;	
    // (êô°) LINEAR A SIGN A311	[4952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10661, 0x0021 };
    uint32_t const ces[9] = { 0x4952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_295)
{
    // 10661 003F;	
    // (êô°) LINEAR A SIGN A311	[4952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10661, 0x003F };
    uint32_t const ces[9] = { 0x4952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_296)
{
    // 10661 0061;	
    // (êô°) LINEAR A SIGN A311	[4952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10661, 0x0061 };
    uint32_t const ces[9] = { 0x4952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_297)
{
    // 10661 0041;	
    // (êô°) LINEAR A SIGN A311	[4952 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10661, 0x0041 };
    uint32_t const ces[9] = { 0x4952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_298)
{
    // 10661 0062;	
    // (êô°) LINEAR A SIGN A311	[4952 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10661, 0x0062 };
    uint32_t const ces[9] = { 0x4952, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_299)
{
    // 10662 0021;	
    // (êô¢) LINEAR A SIGN A312	[4953 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10662, 0x0021 };
    uint32_t const ces[9] = { 0x4953, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_300)
{
    // 10662 003F;	
    // (êô¢) LINEAR A SIGN A312	[4953 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10662, 0x003F };
    uint32_t const ces[9] = { 0x4953, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_301)
{
    // 10662 0061;	
    // (êô¢) LINEAR A SIGN A312	[4953 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10662, 0x0061 };
    uint32_t const ces[9] = { 0x4953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_302)
{
    // 10662 0041;	
    // (êô¢) LINEAR A SIGN A312	[4953 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10662, 0x0041 };
    uint32_t const ces[9] = { 0x4953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_303)
{
    // 10662 0062;	
    // (êô¢) LINEAR A SIGN A312	[4953 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10662, 0x0062 };
    uint32_t const ces[9] = { 0x4953, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_304)
{
    // 10663 0021;	
    // (êô£) LINEAR A SIGN A313A	[4954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10663, 0x0021 };
    uint32_t const ces[9] = { 0x4954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_305)
{
    // 10663 003F;	
    // (êô£) LINEAR A SIGN A313A	[4954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10663, 0x003F };
    uint32_t const ces[9] = { 0x4954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_306)
{
    // 10663 0061;	
    // (êô£) LINEAR A SIGN A313A	[4954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10663, 0x0061 };
    uint32_t const ces[9] = { 0x4954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_307)
{
    // 10663 0041;	
    // (êô£) LINEAR A SIGN A313A	[4954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10663, 0x0041 };
    uint32_t const ces[9] = { 0x4954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_308)
{
    // 10663 0062;	
    // (êô£) LINEAR A SIGN A313A	[4954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10663, 0x0062 };
    uint32_t const ces[9] = { 0x4954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_309)
{
    // 10664 0021;	
    // (êô§) LINEAR A SIGN A313B	[4955 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10664, 0x0021 };
    uint32_t const ces[9] = { 0x4955, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_310)
{
    // 10664 003F;	
    // (êô§) LINEAR A SIGN A313B	[4955 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10664, 0x003F };
    uint32_t const ces[9] = { 0x4955, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_311)
{
    // 10664 0061;	
    // (êô§) LINEAR A SIGN A313B	[4955 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10664, 0x0061 };
    uint32_t const ces[9] = { 0x4955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_312)
{
    // 10664 0041;	
    // (êô§) LINEAR A SIGN A313B	[4955 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10664, 0x0041 };
    uint32_t const ces[9] = { 0x4955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_313)
{
    // 10664 0062;	
    // (êô§) LINEAR A SIGN A313B	[4955 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10664, 0x0062 };
    uint32_t const ces[9] = { 0x4955, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_314)
{
    // 10665 0021;	
    // (êô•) LINEAR A SIGN A313C	[4956 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10665, 0x0021 };
    uint32_t const ces[9] = { 0x4956, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_315)
{
    // 10665 003F;	
    // (êô•) LINEAR A SIGN A313C	[4956 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10665, 0x003F };
    uint32_t const ces[9] = { 0x4956, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_316)
{
    // 10665 0061;	
    // (êô•) LINEAR A SIGN A313C	[4956 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10665, 0x0061 };
    uint32_t const ces[9] = { 0x4956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_317)
{
    // 10665 0041;	
    // (êô•) LINEAR A SIGN A313C	[4956 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10665, 0x0041 };
    uint32_t const ces[9] = { 0x4956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_318)
{
    // 10665 0062;	
    // (êô•) LINEAR A SIGN A313C	[4956 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10665, 0x0062 };
    uint32_t const ces[9] = { 0x4956, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_319)
{
    // 10666 0021;	
    // (êô¶) LINEAR A SIGN A314	[4957 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10666, 0x0021 };
    uint32_t const ces[9] = { 0x4957, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_320)
{
    // 10666 003F;	
    // (êô¶) LINEAR A SIGN A314	[4957 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10666, 0x003F };
    uint32_t const ces[9] = { 0x4957, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_321)
{
    // 10666 0061;	
    // (êô¶) LINEAR A SIGN A314	[4957 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10666, 0x0061 };
    uint32_t const ces[9] = { 0x4957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_322)
{
    // 10666 0041;	
    // (êô¶) LINEAR A SIGN A314	[4957 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10666, 0x0041 };
    uint32_t const ces[9] = { 0x4957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_323)
{
    // 10666 0062;	
    // (êô¶) LINEAR A SIGN A314	[4957 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10666, 0x0062 };
    uint32_t const ces[9] = { 0x4957, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_324)
{
    // 10667 0021;	
    // (êôß) LINEAR A SIGN A315	[4958 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10667, 0x0021 };
    uint32_t const ces[9] = { 0x4958, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_325)
{
    // 10667 003F;	
    // (êôß) LINEAR A SIGN A315	[4958 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10667, 0x003F };
    uint32_t const ces[9] = { 0x4958, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_326)
{
    // 10667 0061;	
    // (êôß) LINEAR A SIGN A315	[4958 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10667, 0x0061 };
    uint32_t const ces[9] = { 0x4958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_327)
{
    // 10667 0041;	
    // (êôß) LINEAR A SIGN A315	[4958 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10667, 0x0041 };
    uint32_t const ces[9] = { 0x4958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_328)
{
    // 10667 0062;	
    // (êôß) LINEAR A SIGN A315	[4958 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10667, 0x0062 };
    uint32_t const ces[9] = { 0x4958, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_329)
{
    // 10668 0021;	
    // (êô®) LINEAR A SIGN A316	[4959 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10668, 0x0021 };
    uint32_t const ces[9] = { 0x4959, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_330)
{
    // 10668 003F;	
    // (êô®) LINEAR A SIGN A316	[4959 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10668, 0x003F };
    uint32_t const ces[9] = { 0x4959, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_331)
{
    // 10668 0061;	
    // (êô®) LINEAR A SIGN A316	[4959 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10668, 0x0061 };
    uint32_t const ces[9] = { 0x4959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_332)
{
    // 10668 0041;	
    // (êô®) LINEAR A SIGN A316	[4959 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10668, 0x0041 };
    uint32_t const ces[9] = { 0x4959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_333)
{
    // 10668 0062;	
    // (êô®) LINEAR A SIGN A316	[4959 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10668, 0x0062 };
    uint32_t const ces[9] = { 0x4959, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_334)
{
    // 10669 0021;	
    // (êô©) LINEAR A SIGN A317	[495A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10669, 0x0021 };
    uint32_t const ces[9] = { 0x495A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_335)
{
    // 10669 003F;	
    // (êô©) LINEAR A SIGN A317	[495A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10669, 0x003F };
    uint32_t const ces[9] = { 0x495A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_336)
{
    // 10669 0061;	
    // (êô©) LINEAR A SIGN A317	[495A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10669, 0x0061 };
    uint32_t const ces[9] = { 0x495A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_337)
{
    // 10669 0041;	
    // (êô©) LINEAR A SIGN A317	[495A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10669, 0x0041 };
    uint32_t const ces[9] = { 0x495A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_338)
{
    // 10669 0062;	
    // (êô©) LINEAR A SIGN A317	[495A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10669, 0x0062 };
    uint32_t const ces[9] = { 0x495A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_339)
{
    // 1066A 0021;	
    // (êô™) LINEAR A SIGN A318	[495B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066A, 0x0021 };
    uint32_t const ces[9] = { 0x495B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_340)
{
    // 1066A 003F;	
    // (êô™) LINEAR A SIGN A318	[495B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066A, 0x003F };
    uint32_t const ces[9] = { 0x495B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_341)
{
    // 1066A 0061;	
    // (êô™) LINEAR A SIGN A318	[495B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066A, 0x0061 };
    uint32_t const ces[9] = { 0x495B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_342)
{
    // 1066A 0041;	
    // (êô™) LINEAR A SIGN A318	[495B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066A, 0x0041 };
    uint32_t const ces[9] = { 0x495B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_343)
{
    // 1066A 0062;	
    // (êô™) LINEAR A SIGN A318	[495B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066A, 0x0062 };
    uint32_t const ces[9] = { 0x495B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_344)
{
    // 1066B 0021;	
    // (êô´) LINEAR A SIGN A319	[495C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066B, 0x0021 };
    uint32_t const ces[9] = { 0x495C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_345)
{
    // 1066B 003F;	
    // (êô´) LINEAR A SIGN A319	[495C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066B, 0x003F };
    uint32_t const ces[9] = { 0x495C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_346)
{
    // 1066B 0061;	
    // (êô´) LINEAR A SIGN A319	[495C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066B, 0x0061 };
    uint32_t const ces[9] = { 0x495C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_347)
{
    // 1066B 0041;	
    // (êô´) LINEAR A SIGN A319	[495C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066B, 0x0041 };
    uint32_t const ces[9] = { 0x495C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_348)
{
    // 1066B 0062;	
    // (êô´) LINEAR A SIGN A319	[495C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066B, 0x0062 };
    uint32_t const ces[9] = { 0x495C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_349)
{
    // 1066C 0021;	
    // (êô¨) LINEAR A SIGN A320	[495D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066C, 0x0021 };
    uint32_t const ces[9] = { 0x495D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_350)
{
    // 1066C 003F;	
    // (êô¨) LINEAR A SIGN A320	[495D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066C, 0x003F };
    uint32_t const ces[9] = { 0x495D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_351)
{
    // 1066C 0061;	
    // (êô¨) LINEAR A SIGN A320	[495D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066C, 0x0061 };
    uint32_t const ces[9] = { 0x495D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_352)
{
    // 1066C 0041;	
    // (êô¨) LINEAR A SIGN A320	[495D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066C, 0x0041 };
    uint32_t const ces[9] = { 0x495D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_353)
{
    // 1066C 0062;	
    // (êô¨) LINEAR A SIGN A320	[495D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066C, 0x0062 };
    uint32_t const ces[9] = { 0x495D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_354)
{
    // 1066D 0021;	
    // (êô≠) LINEAR A SIGN A321	[495E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066D, 0x0021 };
    uint32_t const ces[9] = { 0x495E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_355)
{
    // 1066D 003F;	
    // (êô≠) LINEAR A SIGN A321	[495E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066D, 0x003F };
    uint32_t const ces[9] = { 0x495E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_356)
{
    // 1066D 0061;	
    // (êô≠) LINEAR A SIGN A321	[495E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066D, 0x0061 };
    uint32_t const ces[9] = { 0x495E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_357)
{
    // 1066D 0041;	
    // (êô≠) LINEAR A SIGN A321	[495E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066D, 0x0041 };
    uint32_t const ces[9] = { 0x495E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_358)
{
    // 1066D 0062;	
    // (êô≠) LINEAR A SIGN A321	[495E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066D, 0x0062 };
    uint32_t const ces[9] = { 0x495E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_359)
{
    // 1066E 0021;	
    // (êôÆ) LINEAR A SIGN A322	[495F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066E, 0x0021 };
    uint32_t const ces[9] = { 0x495F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_360)
{
    // 1066E 003F;	
    // (êôÆ) LINEAR A SIGN A322	[495F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066E, 0x003F };
    uint32_t const ces[9] = { 0x495F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_361)
{
    // 1066E 0061;	
    // (êôÆ) LINEAR A SIGN A322	[495F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066E, 0x0061 };
    uint32_t const ces[9] = { 0x495F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_362)
{
    // 1066E 0041;	
    // (êôÆ) LINEAR A SIGN A322	[495F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066E, 0x0041 };
    uint32_t const ces[9] = { 0x495F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_363)
{
    // 1066E 0062;	
    // (êôÆ) LINEAR A SIGN A322	[495F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066E, 0x0062 };
    uint32_t const ces[9] = { 0x495F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_364)
{
    // 1066F 0021;	
    // (êôØ) LINEAR A SIGN A323	[4960 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066F, 0x0021 };
    uint32_t const ces[9] = { 0x4960, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_365)
{
    // 1066F 003F;	
    // (êôØ) LINEAR A SIGN A323	[4960 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066F, 0x003F };
    uint32_t const ces[9] = { 0x4960, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_366)
{
    // 1066F 0061;	
    // (êôØ) LINEAR A SIGN A323	[4960 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066F, 0x0061 };
    uint32_t const ces[9] = { 0x4960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_367)
{
    // 1066F 0041;	
    // (êôØ) LINEAR A SIGN A323	[4960 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066F, 0x0041 };
    uint32_t const ces[9] = { 0x4960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_368)
{
    // 1066F 0062;	
    // (êôØ) LINEAR A SIGN A323	[4960 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066F, 0x0062 };
    uint32_t const ces[9] = { 0x4960, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_369)
{
    // 10670 0021;	
    // (êô∞) LINEAR A SIGN A324	[4961 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10670, 0x0021 };
    uint32_t const ces[9] = { 0x4961, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_370)
{
    // 10670 003F;	
    // (êô∞) LINEAR A SIGN A324	[4961 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10670, 0x003F };
    uint32_t const ces[9] = { 0x4961, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_371)
{
    // 10670 0061;	
    // (êô∞) LINEAR A SIGN A324	[4961 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10670, 0x0061 };
    uint32_t const ces[9] = { 0x4961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_372)
{
    // 10670 0041;	
    // (êô∞) LINEAR A SIGN A324	[4961 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10670, 0x0041 };
    uint32_t const ces[9] = { 0x4961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_373)
{
    // 10670 0062;	
    // (êô∞) LINEAR A SIGN A324	[4961 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10670, 0x0062 };
    uint32_t const ces[9] = { 0x4961, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_374)
{
    // 10671 0021;	
    // (êô±) LINEAR A SIGN A325	[4962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10671, 0x0021 };
    uint32_t const ces[9] = { 0x4962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_375)
{
    // 10671 003F;	
    // (êô±) LINEAR A SIGN A325	[4962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10671, 0x003F };
    uint32_t const ces[9] = { 0x4962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_376)
{
    // 10671 0061;	
    // (êô±) LINEAR A SIGN A325	[4962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10671, 0x0061 };
    uint32_t const ces[9] = { 0x4962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_377)
{
    // 10671 0041;	
    // (êô±) LINEAR A SIGN A325	[4962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10671, 0x0041 };
    uint32_t const ces[9] = { 0x4962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_378)
{
    // 10671 0062;	
    // (êô±) LINEAR A SIGN A325	[4962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10671, 0x0062 };
    uint32_t const ces[9] = { 0x4962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_379)
{
    // 10672 0021;	
    // (êô≤) LINEAR A SIGN A326	[4963 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10672, 0x0021 };
    uint32_t const ces[9] = { 0x4963, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_380)
{
    // 10672 003F;	
    // (êô≤) LINEAR A SIGN A326	[4963 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10672, 0x003F };
    uint32_t const ces[9] = { 0x4963, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_381)
{
    // 10672 0061;	
    // (êô≤) LINEAR A SIGN A326	[4963 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10672, 0x0061 };
    uint32_t const ces[9] = { 0x4963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_382)
{
    // 10672 0041;	
    // (êô≤) LINEAR A SIGN A326	[4963 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10672, 0x0041 };
    uint32_t const ces[9] = { 0x4963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_383)
{
    // 10672 0062;	
    // (êô≤) LINEAR A SIGN A326	[4963 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10672, 0x0062 };
    uint32_t const ces[9] = { 0x4963, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_384)
{
    // 10673 0021;	
    // (êô≥) LINEAR A SIGN A327	[4964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10673, 0x0021 };
    uint32_t const ces[9] = { 0x4964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_385)
{
    // 10673 003F;	
    // (êô≥) LINEAR A SIGN A327	[4964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10673, 0x003F };
    uint32_t const ces[9] = { 0x4964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_386)
{
    // 10673 0061;	
    // (êô≥) LINEAR A SIGN A327	[4964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10673, 0x0061 };
    uint32_t const ces[9] = { 0x4964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_387)
{
    // 10673 0041;	
    // (êô≥) LINEAR A SIGN A327	[4964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10673, 0x0041 };
    uint32_t const ces[9] = { 0x4964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_388)
{
    // 10673 0062;	
    // (êô≥) LINEAR A SIGN A327	[4964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10673, 0x0062 };
    uint32_t const ces[9] = { 0x4964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_389)
{
    // 10674 0021;	
    // (êô¥) LINEAR A SIGN A328	[4965 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10674, 0x0021 };
    uint32_t const ces[9] = { 0x4965, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_390)
{
    // 10674 003F;	
    // (êô¥) LINEAR A SIGN A328	[4965 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10674, 0x003F };
    uint32_t const ces[9] = { 0x4965, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_391)
{
    // 10674 0061;	
    // (êô¥) LINEAR A SIGN A328	[4965 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10674, 0x0061 };
    uint32_t const ces[9] = { 0x4965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_392)
{
    // 10674 0041;	
    // (êô¥) LINEAR A SIGN A328	[4965 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10674, 0x0041 };
    uint32_t const ces[9] = { 0x4965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_393)
{
    // 10674 0062;	
    // (êô¥) LINEAR A SIGN A328	[4965 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10674, 0x0062 };
    uint32_t const ces[9] = { 0x4965, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_394)
{
    // 10675 0021;	
    // (êôµ) LINEAR A SIGN A329	[4966 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10675, 0x0021 };
    uint32_t const ces[9] = { 0x4966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_395)
{
    // 10675 003F;	
    // (êôµ) LINEAR A SIGN A329	[4966 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10675, 0x003F };
    uint32_t const ces[9] = { 0x4966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_396)
{
    // 10675 0061;	
    // (êôµ) LINEAR A SIGN A329	[4966 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10675, 0x0061 };
    uint32_t const ces[9] = { 0x4966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_397)
{
    // 10675 0041;	
    // (êôµ) LINEAR A SIGN A329	[4966 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10675, 0x0041 };
    uint32_t const ces[9] = { 0x4966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_398)
{
    // 10675 0062;	
    // (êôµ) LINEAR A SIGN A329	[4966 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10675, 0x0062 };
    uint32_t const ces[9] = { 0x4966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_399)
{
    // 10676 0021;	
    // (êô∂) LINEAR A SIGN A330	[4967 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10676, 0x0021 };
    uint32_t const ces[9] = { 0x4967, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_400)
{
    // 10676 003F;	
    // (êô∂) LINEAR A SIGN A330	[4967 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10676, 0x003F };
    uint32_t const ces[9] = { 0x4967, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_401)
{
    // 10676 0061;	
    // (êô∂) LINEAR A SIGN A330	[4967 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10676, 0x0061 };
    uint32_t const ces[9] = { 0x4967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_402)
{
    // 10676 0041;	
    // (êô∂) LINEAR A SIGN A330	[4967 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10676, 0x0041 };
    uint32_t const ces[9] = { 0x4967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_403)
{
    // 10676 0062;	
    // (êô∂) LINEAR A SIGN A330	[4967 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10676, 0x0062 };
    uint32_t const ces[9] = { 0x4967, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_404)
{
    // 10677 0021;	
    // (êô∑) LINEAR A SIGN A331	[4968 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10677, 0x0021 };
    uint32_t const ces[9] = { 0x4968, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_405)
{
    // 10677 003F;	
    // (êô∑) LINEAR A SIGN A331	[4968 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10677, 0x003F };
    uint32_t const ces[9] = { 0x4968, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_406)
{
    // 10677 0061;	
    // (êô∑) LINEAR A SIGN A331	[4968 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10677, 0x0061 };
    uint32_t const ces[9] = { 0x4968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_407)
{
    // 10677 0041;	
    // (êô∑) LINEAR A SIGN A331	[4968 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10677, 0x0041 };
    uint32_t const ces[9] = { 0x4968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_408)
{
    // 10677 0062;	
    // (êô∑) LINEAR A SIGN A331	[4968 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10677, 0x0062 };
    uint32_t const ces[9] = { 0x4968, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_409)
{
    // 10678 0021;	
    // (êô∏) LINEAR A SIGN A332	[4969 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10678, 0x0021 };
    uint32_t const ces[9] = { 0x4969, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_410)
{
    // 10678 003F;	
    // (êô∏) LINEAR A SIGN A332	[4969 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10678, 0x003F };
    uint32_t const ces[9] = { 0x4969, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_411)
{
    // 10678 0061;	
    // (êô∏) LINEAR A SIGN A332	[4969 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10678, 0x0061 };
    uint32_t const ces[9] = { 0x4969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_412)
{
    // 10678 0041;	
    // (êô∏) LINEAR A SIGN A332	[4969 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10678, 0x0041 };
    uint32_t const ces[9] = { 0x4969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_413)
{
    // 10678 0062;	
    // (êô∏) LINEAR A SIGN A332	[4969 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10678, 0x0062 };
    uint32_t const ces[9] = { 0x4969, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_414)
{
    // 10679 0021;	
    // (êôπ) LINEAR A SIGN A333	[496A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10679, 0x0021 };
    uint32_t const ces[9] = { 0x496A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_415)
{
    // 10679 003F;	
    // (êôπ) LINEAR A SIGN A333	[496A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10679, 0x003F };
    uint32_t const ces[9] = { 0x496A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_416)
{
    // 10679 0061;	
    // (êôπ) LINEAR A SIGN A333	[496A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10679, 0x0061 };
    uint32_t const ces[9] = { 0x496A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_417)
{
    // 10679 0041;	
    // (êôπ) LINEAR A SIGN A333	[496A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10679, 0x0041 };
    uint32_t const ces[9] = { 0x496A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_418)
{
    // 10679 0062;	
    // (êôπ) LINEAR A SIGN A333	[496A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10679, 0x0062 };
    uint32_t const ces[9] = { 0x496A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_419)
{
    // 1067A 0021;	
    // (êô∫) LINEAR A SIGN A334	[496B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067A, 0x0021 };
    uint32_t const ces[9] = { 0x496B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_420)
{
    // 1067A 003F;	
    // (êô∫) LINEAR A SIGN A334	[496B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067A, 0x003F };
    uint32_t const ces[9] = { 0x496B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_421)
{
    // 1067A 0061;	
    // (êô∫) LINEAR A SIGN A334	[496B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067A, 0x0061 };
    uint32_t const ces[9] = { 0x496B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_422)
{
    // 1067A 0041;	
    // (êô∫) LINEAR A SIGN A334	[496B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067A, 0x0041 };
    uint32_t const ces[9] = { 0x496B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_423)
{
    // 1067A 0062;	
    // (êô∫) LINEAR A SIGN A334	[496B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067A, 0x0062 };
    uint32_t const ces[9] = { 0x496B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_424)
{
    // 1067B 0021;	
    // (êôª) LINEAR A SIGN A335	[496C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067B, 0x0021 };
    uint32_t const ces[9] = { 0x496C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_425)
{
    // 1067B 003F;	
    // (êôª) LINEAR A SIGN A335	[496C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067B, 0x003F };
    uint32_t const ces[9] = { 0x496C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_426)
{
    // 1067B 0061;	
    // (êôª) LINEAR A SIGN A335	[496C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067B, 0x0061 };
    uint32_t const ces[9] = { 0x496C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_427)
{
    // 1067B 0041;	
    // (êôª) LINEAR A SIGN A335	[496C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067B, 0x0041 };
    uint32_t const ces[9] = { 0x496C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_428)
{
    // 1067B 0062;	
    // (êôª) LINEAR A SIGN A335	[496C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067B, 0x0062 };
    uint32_t const ces[9] = { 0x496C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_429)
{
    // 1067C 0021;	
    // (êôº) LINEAR A SIGN A336	[496D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067C, 0x0021 };
    uint32_t const ces[9] = { 0x496D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_430)
{
    // 1067C 003F;	
    // (êôº) LINEAR A SIGN A336	[496D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067C, 0x003F };
    uint32_t const ces[9] = { 0x496D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_431)
{
    // 1067C 0061;	
    // (êôº) LINEAR A SIGN A336	[496D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067C, 0x0061 };
    uint32_t const ces[9] = { 0x496D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_432)
{
    // 1067C 0041;	
    // (êôº) LINEAR A SIGN A336	[496D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067C, 0x0041 };
    uint32_t const ces[9] = { 0x496D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_433)
{
    // 1067C 0062;	
    // (êôº) LINEAR A SIGN A336	[496D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067C, 0x0062 };
    uint32_t const ces[9] = { 0x496D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_434)
{
    // 1067D 0021;	
    // (êôΩ) LINEAR A SIGN A337	[496E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067D, 0x0021 };
    uint32_t const ces[9] = { 0x496E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_435)
{
    // 1067D 003F;	
    // (êôΩ) LINEAR A SIGN A337	[496E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067D, 0x003F };
    uint32_t const ces[9] = { 0x496E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_436)
{
    // 1067D 0061;	
    // (êôΩ) LINEAR A SIGN A337	[496E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067D, 0x0061 };
    uint32_t const ces[9] = { 0x496E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_437)
{
    // 1067D 0041;	
    // (êôΩ) LINEAR A SIGN A337	[496E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067D, 0x0041 };
    uint32_t const ces[9] = { 0x496E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_438)
{
    // 1067D 0062;	
    // (êôΩ) LINEAR A SIGN A337	[496E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067D, 0x0062 };
    uint32_t const ces[9] = { 0x496E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_439)
{
    // 1067E 0021;	
    // (êôæ) LINEAR A SIGN A338	[496F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067E, 0x0021 };
    uint32_t const ces[9] = { 0x496F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_440)
{
    // 1067E 003F;	
    // (êôæ) LINEAR A SIGN A338	[496F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067E, 0x003F };
    uint32_t const ces[9] = { 0x496F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_441)
{
    // 1067E 0061;	
    // (êôæ) LINEAR A SIGN A338	[496F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067E, 0x0061 };
    uint32_t const ces[9] = { 0x496F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_442)
{
    // 1067E 0041;	
    // (êôæ) LINEAR A SIGN A338	[496F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067E, 0x0041 };
    uint32_t const ces[9] = { 0x496F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_443)
{
    // 1067E 0062;	
    // (êôæ) LINEAR A SIGN A338	[496F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067E, 0x0062 };
    uint32_t const ces[9] = { 0x496F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_444)
{
    // 1067F 0021;	
    // (êôø) LINEAR A SIGN A339	[4970 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067F, 0x0021 };
    uint32_t const ces[9] = { 0x4970, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_445)
{
    // 1067F 003F;	
    // (êôø) LINEAR A SIGN A339	[4970 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067F, 0x003F };
    uint32_t const ces[9] = { 0x4970, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_446)
{
    // 1067F 0061;	
    // (êôø) LINEAR A SIGN A339	[4970 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067F, 0x0061 };
    uint32_t const ces[9] = { 0x4970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_447)
{
    // 1067F 0041;	
    // (êôø) LINEAR A SIGN A339	[4970 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067F, 0x0041 };
    uint32_t const ces[9] = { 0x4970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_448)
{
    // 1067F 0062;	
    // (êôø) LINEAR A SIGN A339	[4970 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067F, 0x0062 };
    uint32_t const ces[9] = { 0x4970, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_449)
{
    // 10680 0021;	
    // (êöÄ) LINEAR A SIGN A340	[4971 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10680, 0x0021 };
    uint32_t const ces[9] = { 0x4971, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_450)
{
    // 10680 003F;	
    // (êöÄ) LINEAR A SIGN A340	[4971 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10680, 0x003F };
    uint32_t const ces[9] = { 0x4971, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_451)
{
    // 10680 0061;	
    // (êöÄ) LINEAR A SIGN A340	[4971 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10680, 0x0061 };
    uint32_t const ces[9] = { 0x4971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_452)
{
    // 10680 0041;	
    // (êöÄ) LINEAR A SIGN A340	[4971 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10680, 0x0041 };
    uint32_t const ces[9] = { 0x4971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_453)
{
    // 10680 0062;	
    // (êöÄ) LINEAR A SIGN A340	[4971 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10680, 0x0062 };
    uint32_t const ces[9] = { 0x4971, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_454)
{
    // 10681 0021;	
    // (êöÅ) LINEAR A SIGN A341	[4972 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10681, 0x0021 };
    uint32_t const ces[9] = { 0x4972, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_455)
{
    // 10681 003F;	
    // (êöÅ) LINEAR A SIGN A341	[4972 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10681, 0x003F };
    uint32_t const ces[9] = { 0x4972, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_456)
{
    // 10681 0061;	
    // (êöÅ) LINEAR A SIGN A341	[4972 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10681, 0x0061 };
    uint32_t const ces[9] = { 0x4972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_457)
{
    // 10681 0041;	
    // (êöÅ) LINEAR A SIGN A341	[4972 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10681, 0x0041 };
    uint32_t const ces[9] = { 0x4972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_458)
{
    // 10681 0062;	
    // (êöÅ) LINEAR A SIGN A341	[4972 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10681, 0x0062 };
    uint32_t const ces[9] = { 0x4972, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_459)
{
    // 10682 0021;	
    // (êöÇ) LINEAR A SIGN A342	[4973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10682, 0x0021 };
    uint32_t const ces[9] = { 0x4973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_460)
{
    // 10682 003F;	
    // (êöÇ) LINEAR A SIGN A342	[4973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10682, 0x003F };
    uint32_t const ces[9] = { 0x4973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_461)
{
    // 10682 0061;	
    // (êöÇ) LINEAR A SIGN A342	[4973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10682, 0x0061 };
    uint32_t const ces[9] = { 0x4973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_462)
{
    // 10682 0041;	
    // (êöÇ) LINEAR A SIGN A342	[4973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10682, 0x0041 };
    uint32_t const ces[9] = { 0x4973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_463)
{
    // 10682 0062;	
    // (êöÇ) LINEAR A SIGN A342	[4973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10682, 0x0062 };
    uint32_t const ces[9] = { 0x4973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_464)
{
    // 10683 0021;	
    // (êöÉ) LINEAR A SIGN A343	[4974 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10683, 0x0021 };
    uint32_t const ces[9] = { 0x4974, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_465)
{
    // 10683 003F;	
    // (êöÉ) LINEAR A SIGN A343	[4974 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10683, 0x003F };
    uint32_t const ces[9] = { 0x4974, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_466)
{
    // 10683 0061;	
    // (êöÉ) LINEAR A SIGN A343	[4974 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10683, 0x0061 };
    uint32_t const ces[9] = { 0x4974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_467)
{
    // 10683 0041;	
    // (êöÉ) LINEAR A SIGN A343	[4974 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10683, 0x0041 };
    uint32_t const ces[9] = { 0x4974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_468)
{
    // 10683 0062;	
    // (êöÉ) LINEAR A SIGN A343	[4974 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10683, 0x0062 };
    uint32_t const ces[9] = { 0x4974, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_469)
{
    // 10684 0021;	
    // (êöÑ) LINEAR A SIGN A344	[4975 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10684, 0x0021 };
    uint32_t const ces[9] = { 0x4975, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_470)
{
    // 10684 003F;	
    // (êöÑ) LINEAR A SIGN A344	[4975 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10684, 0x003F };
    uint32_t const ces[9] = { 0x4975, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_471)
{
    // 10684 0061;	
    // (êöÑ) LINEAR A SIGN A344	[4975 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10684, 0x0061 };
    uint32_t const ces[9] = { 0x4975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_472)
{
    // 10684 0041;	
    // (êöÑ) LINEAR A SIGN A344	[4975 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10684, 0x0041 };
    uint32_t const ces[9] = { 0x4975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_473)
{
    // 10684 0062;	
    // (êöÑ) LINEAR A SIGN A344	[4975 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10684, 0x0062 };
    uint32_t const ces[9] = { 0x4975, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_474)
{
    // 10685 0021;	
    // (êöÖ) LINEAR A SIGN A345	[4976 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10685, 0x0021 };
    uint32_t const ces[9] = { 0x4976, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_475)
{
    // 10685 003F;	
    // (êöÖ) LINEAR A SIGN A345	[4976 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10685, 0x003F };
    uint32_t const ces[9] = { 0x4976, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_476)
{
    // 10685 0061;	
    // (êöÖ) LINEAR A SIGN A345	[4976 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10685, 0x0061 };
    uint32_t const ces[9] = { 0x4976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_477)
{
    // 10685 0041;	
    // (êöÖ) LINEAR A SIGN A345	[4976 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10685, 0x0041 };
    uint32_t const ces[9] = { 0x4976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_478)
{
    // 10685 0062;	
    // (êöÖ) LINEAR A SIGN A345	[4976 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10685, 0x0062 };
    uint32_t const ces[9] = { 0x4976, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_479)
{
    // 10686 0021;	
    // (êöÜ) LINEAR A SIGN A346	[4977 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10686, 0x0021 };
    uint32_t const ces[9] = { 0x4977, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_480)
{
    // 10686 003F;	
    // (êöÜ) LINEAR A SIGN A346	[4977 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10686, 0x003F };
    uint32_t const ces[9] = { 0x4977, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_481)
{
    // 10686 0061;	
    // (êöÜ) LINEAR A SIGN A346	[4977 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10686, 0x0061 };
    uint32_t const ces[9] = { 0x4977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_482)
{
    // 10686 0041;	
    // (êöÜ) LINEAR A SIGN A346	[4977 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10686, 0x0041 };
    uint32_t const ces[9] = { 0x4977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_483)
{
    // 10686 0062;	
    // (êöÜ) LINEAR A SIGN A346	[4977 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10686, 0x0062 };
    uint32_t const ces[9] = { 0x4977, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_484)
{
    // 10687 0021;	
    // (êöá) LINEAR A SIGN A347	[4978 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10687, 0x0021 };
    uint32_t const ces[9] = { 0x4978, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_485)
{
    // 10687 003F;	
    // (êöá) LINEAR A SIGN A347	[4978 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10687, 0x003F };
    uint32_t const ces[9] = { 0x4978, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_486)
{
    // 10687 0061;	
    // (êöá) LINEAR A SIGN A347	[4978 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10687, 0x0061 };
    uint32_t const ces[9] = { 0x4978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_487)
{
    // 10687 0041;	
    // (êöá) LINEAR A SIGN A347	[4978 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10687, 0x0041 };
    uint32_t const ces[9] = { 0x4978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_488)
{
    // 10687 0062;	
    // (êöá) LINEAR A SIGN A347	[4978 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10687, 0x0062 };
    uint32_t const ces[9] = { 0x4978, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_489)
{
    // 10688 0021;	
    // (êöà) LINEAR A SIGN A348	[4979 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10688, 0x0021 };
    uint32_t const ces[9] = { 0x4979, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_490)
{
    // 10688 003F;	
    // (êöà) LINEAR A SIGN A348	[4979 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10688, 0x003F };
    uint32_t const ces[9] = { 0x4979, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_491)
{
    // 10688 0061;	
    // (êöà) LINEAR A SIGN A348	[4979 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10688, 0x0061 };
    uint32_t const ces[9] = { 0x4979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_492)
{
    // 10688 0041;	
    // (êöà) LINEAR A SIGN A348	[4979 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10688, 0x0041 };
    uint32_t const ces[9] = { 0x4979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_493)
{
    // 10688 0062;	
    // (êöà) LINEAR A SIGN A348	[4979 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10688, 0x0062 };
    uint32_t const ces[9] = { 0x4979, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_494)
{
    // 10689 0021;	
    // (êöâ) LINEAR A SIGN A349	[497A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10689, 0x0021 };
    uint32_t const ces[9] = { 0x497A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_495)
{
    // 10689 003F;	
    // (êöâ) LINEAR A SIGN A349	[497A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10689, 0x003F };
    uint32_t const ces[9] = { 0x497A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_496)
{
    // 10689 0061;	
    // (êöâ) LINEAR A SIGN A349	[497A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10689, 0x0061 };
    uint32_t const ces[9] = { 0x497A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_497)
{
    // 10689 0041;	
    // (êöâ) LINEAR A SIGN A349	[497A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10689, 0x0041 };
    uint32_t const ces[9] = { 0x497A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_498)
{
    // 10689 0062;	
    // (êöâ) LINEAR A SIGN A349	[497A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10689, 0x0062 };
    uint32_t const ces[9] = { 0x497A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_278_499)
{
    // 1068A 0021;	
    // (êöä) LINEAR A SIGN A350	[497B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068A, 0x0021 };
    uint32_t const ces[9] = { 0x497B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

