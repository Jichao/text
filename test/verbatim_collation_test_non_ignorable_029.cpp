// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_029_000)
{
    // 2571 0041;	
    // (╱) BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT	[08A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2571, 0x0041 };
    uint32_t const ces[9] = { 0x08A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_001)
{
    // 2571 0062;	
    // (╱) BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT	[08A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2571, 0x0062 };
    uint32_t const ces[9] = { 0x08A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_002)
{
    // 2572 0021;	
    // (╲) BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT	[08A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2572, 0x0021 };
    uint32_t const ces[9] = { 0x08A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_003)
{
    // 2572 003F;	
    // (╲) BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT	[08A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2572, 0x003F };
    uint32_t const ces[9] = { 0x08A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_004)
{
    // 2572 0061;	
    // (╲) BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT	[08A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2572, 0x0061 };
    uint32_t const ces[9] = { 0x08A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_005)
{
    // 2572 0041;	
    // (╲) BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT	[08A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2572, 0x0041 };
    uint32_t const ces[9] = { 0x08A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_006)
{
    // 2572 0062;	
    // (╲) BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT	[08A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2572, 0x0062 };
    uint32_t const ces[9] = { 0x08A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_007)
{
    // 2573 0021;	
    // (╳) BOX DRAWINGS LIGHT DIAGONAL CROSS	[08A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2573, 0x0021 };
    uint32_t const ces[9] = { 0x08A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_008)
{
    // 2573 003F;	
    // (╳) BOX DRAWINGS LIGHT DIAGONAL CROSS	[08A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2573, 0x003F };
    uint32_t const ces[9] = { 0x08A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_009)
{
    // 2573 0061;	
    // (╳) BOX DRAWINGS LIGHT DIAGONAL CROSS	[08A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2573, 0x0061 };
    uint32_t const ces[9] = { 0x08A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_010)
{
    // 2573 0041;	
    // (╳) BOX DRAWINGS LIGHT DIAGONAL CROSS	[08A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2573, 0x0041 };
    uint32_t const ces[9] = { 0x08A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_011)
{
    // 2573 0062;	
    // (╳) BOX DRAWINGS LIGHT DIAGONAL CROSS	[08A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2573, 0x0062 };
    uint32_t const ces[9] = { 0x08A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_012)
{
    // 2574 0021;	
    // (╴) BOX DRAWINGS LIGHT LEFT	[08A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2574, 0x0021 };
    uint32_t const ces[9] = { 0x08A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_013)
{
    // 2574 003F;	
    // (╴) BOX DRAWINGS LIGHT LEFT	[08A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2574, 0x003F };
    uint32_t const ces[9] = { 0x08A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_014)
{
    // 2574 0061;	
    // (╴) BOX DRAWINGS LIGHT LEFT	[08A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2574, 0x0061 };
    uint32_t const ces[9] = { 0x08A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_015)
{
    // 2574 0041;	
    // (╴) BOX DRAWINGS LIGHT LEFT	[08A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2574, 0x0041 };
    uint32_t const ces[9] = { 0x08A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_016)
{
    // 2574 0062;	
    // (╴) BOX DRAWINGS LIGHT LEFT	[08A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2574, 0x0062 };
    uint32_t const ces[9] = { 0x08A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_017)
{
    // 2575 0021;	
    // (╵) BOX DRAWINGS LIGHT UP	[08A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2575, 0x0021 };
    uint32_t const ces[9] = { 0x08A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_018)
{
    // 2575 003F;	
    // (╵) BOX DRAWINGS LIGHT UP	[08A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2575, 0x003F };
    uint32_t const ces[9] = { 0x08A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_019)
{
    // 2575 0061;	
    // (╵) BOX DRAWINGS LIGHT UP	[08A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2575, 0x0061 };
    uint32_t const ces[9] = { 0x08A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_020)
{
    // 2575 0041;	
    // (╵) BOX DRAWINGS LIGHT UP	[08A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2575, 0x0041 };
    uint32_t const ces[9] = { 0x08A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_021)
{
    // 2575 0062;	
    // (╵) BOX DRAWINGS LIGHT UP	[08A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2575, 0x0062 };
    uint32_t const ces[9] = { 0x08A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_022)
{
    // 2576 0021;	
    // (╶) BOX DRAWINGS LIGHT RIGHT	[08A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2576, 0x0021 };
    uint32_t const ces[9] = { 0x08A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_023)
{
    // 2576 003F;	
    // (╶) BOX DRAWINGS LIGHT RIGHT	[08A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2576, 0x003F };
    uint32_t const ces[9] = { 0x08A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_024)
{
    // 2576 0061;	
    // (╶) BOX DRAWINGS LIGHT RIGHT	[08A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2576, 0x0061 };
    uint32_t const ces[9] = { 0x08A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_025)
{
    // 2576 0041;	
    // (╶) BOX DRAWINGS LIGHT RIGHT	[08A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2576, 0x0041 };
    uint32_t const ces[9] = { 0x08A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_026)
{
    // 2576 0062;	
    // (╶) BOX DRAWINGS LIGHT RIGHT	[08A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2576, 0x0062 };
    uint32_t const ces[9] = { 0x08A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_027)
{
    // 2577 0021;	
    // (╷) BOX DRAWINGS LIGHT DOWN	[08A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2577, 0x0021 };
    uint32_t const ces[9] = { 0x08A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_028)
{
    // 2577 003F;	
    // (╷) BOX DRAWINGS LIGHT DOWN	[08A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2577, 0x003F };
    uint32_t const ces[9] = { 0x08A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_029)
{
    // 2577 0061;	
    // (╷) BOX DRAWINGS LIGHT DOWN	[08A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2577, 0x0061 };
    uint32_t const ces[9] = { 0x08A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_030)
{
    // 2577 0041;	
    // (╷) BOX DRAWINGS LIGHT DOWN	[08A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2577, 0x0041 };
    uint32_t const ces[9] = { 0x08A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_031)
{
    // 2577 0062;	
    // (╷) BOX DRAWINGS LIGHT DOWN	[08A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2577, 0x0062 };
    uint32_t const ces[9] = { 0x08A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_032)
{
    // 2578 0021;	
    // (╸) BOX DRAWINGS HEAVY LEFT	[08A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2578, 0x0021 };
    uint32_t const ces[9] = { 0x08A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_033)
{
    // 2578 003F;	
    // (╸) BOX DRAWINGS HEAVY LEFT	[08A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2578, 0x003F };
    uint32_t const ces[9] = { 0x08A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_034)
{
    // 2578 0061;	
    // (╸) BOX DRAWINGS HEAVY LEFT	[08A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2578, 0x0061 };
    uint32_t const ces[9] = { 0x08A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_035)
{
    // 2578 0041;	
    // (╸) BOX DRAWINGS HEAVY LEFT	[08A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2578, 0x0041 };
    uint32_t const ces[9] = { 0x08A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_036)
{
    // 2578 0062;	
    // (╸) BOX DRAWINGS HEAVY LEFT	[08A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2578, 0x0062 };
    uint32_t const ces[9] = { 0x08A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_037)
{
    // 2579 0021;	
    // (╹) BOX DRAWINGS HEAVY UP	[08A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2579, 0x0021 };
    uint32_t const ces[9] = { 0x08A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_038)
{
    // 2579 003F;	
    // (╹) BOX DRAWINGS HEAVY UP	[08A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2579, 0x003F };
    uint32_t const ces[9] = { 0x08A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_039)
{
    // 2579 0061;	
    // (╹) BOX DRAWINGS HEAVY UP	[08A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2579, 0x0061 };
    uint32_t const ces[9] = { 0x08A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_040)
{
    // 2579 0041;	
    // (╹) BOX DRAWINGS HEAVY UP	[08A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2579, 0x0041 };
    uint32_t const ces[9] = { 0x08A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_041)
{
    // 2579 0062;	
    // (╹) BOX DRAWINGS HEAVY UP	[08A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2579, 0x0062 };
    uint32_t const ces[9] = { 0x08A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_042)
{
    // 257A 0021;	
    // (╺) BOX DRAWINGS HEAVY RIGHT	[08A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257A, 0x0021 };
    uint32_t const ces[9] = { 0x08A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_043)
{
    // 257A 003F;	
    // (╺) BOX DRAWINGS HEAVY RIGHT	[08A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257A, 0x003F };
    uint32_t const ces[9] = { 0x08A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_044)
{
    // 257A 0061;	
    // (╺) BOX DRAWINGS HEAVY RIGHT	[08A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257A, 0x0061 };
    uint32_t const ces[9] = { 0x08A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_045)
{
    // 257A 0041;	
    // (╺) BOX DRAWINGS HEAVY RIGHT	[08A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257A, 0x0041 };
    uint32_t const ces[9] = { 0x08A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_046)
{
    // 257A 0062;	
    // (╺) BOX DRAWINGS HEAVY RIGHT	[08A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257A, 0x0062 };
    uint32_t const ces[9] = { 0x08A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_047)
{
    // 257B 0021;	
    // (╻) BOX DRAWINGS HEAVY DOWN	[08AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257B, 0x0021 };
    uint32_t const ces[9] = { 0x08AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_048)
{
    // 257B 003F;	
    // (╻) BOX DRAWINGS HEAVY DOWN	[08AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257B, 0x003F };
    uint32_t const ces[9] = { 0x08AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_049)
{
    // 257B 0061;	
    // (╻) BOX DRAWINGS HEAVY DOWN	[08AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257B, 0x0061 };
    uint32_t const ces[9] = { 0x08AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_050)
{
    // 257B 0041;	
    // (╻) BOX DRAWINGS HEAVY DOWN	[08AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257B, 0x0041 };
    uint32_t const ces[9] = { 0x08AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_051)
{
    // 257B 0062;	
    // (╻) BOX DRAWINGS HEAVY DOWN	[08AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257B, 0x0062 };
    uint32_t const ces[9] = { 0x08AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_052)
{
    // 257C 0021;	
    // (╼) BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT	[08AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257C, 0x0021 };
    uint32_t const ces[9] = { 0x08AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_053)
{
    // 257C 003F;	
    // (╼) BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT	[08AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257C, 0x003F };
    uint32_t const ces[9] = { 0x08AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_054)
{
    // 257C 0061;	
    // (╼) BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT	[08AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257C, 0x0061 };
    uint32_t const ces[9] = { 0x08AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_055)
{
    // 257C 0041;	
    // (╼) BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT	[08AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257C, 0x0041 };
    uint32_t const ces[9] = { 0x08AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_056)
{
    // 257C 0062;	
    // (╼) BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT	[08AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257C, 0x0062 };
    uint32_t const ces[9] = { 0x08AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_057)
{
    // 257D 0021;	
    // (╽) BOX DRAWINGS LIGHT UP AND HEAVY DOWN	[08AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257D, 0x0021 };
    uint32_t const ces[9] = { 0x08AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_058)
{
    // 257D 003F;	
    // (╽) BOX DRAWINGS LIGHT UP AND HEAVY DOWN	[08AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257D, 0x003F };
    uint32_t const ces[9] = { 0x08AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_059)
{
    // 257D 0061;	
    // (╽) BOX DRAWINGS LIGHT UP AND HEAVY DOWN	[08AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257D, 0x0061 };
    uint32_t const ces[9] = { 0x08AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_060)
{
    // 257D 0041;	
    // (╽) BOX DRAWINGS LIGHT UP AND HEAVY DOWN	[08AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257D, 0x0041 };
    uint32_t const ces[9] = { 0x08AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_061)
{
    // 257D 0062;	
    // (╽) BOX DRAWINGS LIGHT UP AND HEAVY DOWN	[08AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257D, 0x0062 };
    uint32_t const ces[9] = { 0x08AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_062)
{
    // 257E 0021;	
    // (╾) BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT	[08AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257E, 0x0021 };
    uint32_t const ces[9] = { 0x08AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_063)
{
    // 257E 003F;	
    // (╾) BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT	[08AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257E, 0x003F };
    uint32_t const ces[9] = { 0x08AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_064)
{
    // 257E 0061;	
    // (╾) BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT	[08AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257E, 0x0061 };
    uint32_t const ces[9] = { 0x08AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_065)
{
    // 257E 0041;	
    // (╾) BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT	[08AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257E, 0x0041 };
    uint32_t const ces[9] = { 0x08AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_066)
{
    // 257E 0062;	
    // (╾) BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT	[08AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257E, 0x0062 };
    uint32_t const ces[9] = { 0x08AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_067)
{
    // 257F 0021;	
    // (╿) BOX DRAWINGS HEAVY UP AND LIGHT DOWN	[08AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257F, 0x0021 };
    uint32_t const ces[9] = { 0x08AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_068)
{
    // 257F 003F;	
    // (╿) BOX DRAWINGS HEAVY UP AND LIGHT DOWN	[08AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257F, 0x003F };
    uint32_t const ces[9] = { 0x08AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_069)
{
    // 257F 0061;	
    // (╿) BOX DRAWINGS HEAVY UP AND LIGHT DOWN	[08AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257F, 0x0061 };
    uint32_t const ces[9] = { 0x08AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_070)
{
    // 257F 0041;	
    // (╿) BOX DRAWINGS HEAVY UP AND LIGHT DOWN	[08AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x257F, 0x0041 };
    uint32_t const ces[9] = { 0x08AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_071)
{
    // 257F 0062;	
    // (╿) BOX DRAWINGS HEAVY UP AND LIGHT DOWN	[08AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x257F, 0x0062 };
    uint32_t const ces[9] = { 0x08AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_072)
{
    // 2580 0021;	
    // (▀) UPPER HALF BLOCK	[08AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2580, 0x0021 };
    uint32_t const ces[9] = { 0x08AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_073)
{
    // 2580 003F;	
    // (▀) UPPER HALF BLOCK	[08AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2580, 0x003F };
    uint32_t const ces[9] = { 0x08AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_074)
{
    // 2580 0061;	
    // (▀) UPPER HALF BLOCK	[08AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2580, 0x0061 };
    uint32_t const ces[9] = { 0x08AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_075)
{
    // 2580 0041;	
    // (▀) UPPER HALF BLOCK	[08AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2580, 0x0041 };
    uint32_t const ces[9] = { 0x08AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_076)
{
    // 2580 0062;	
    // (▀) UPPER HALF BLOCK	[08AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2580, 0x0062 };
    uint32_t const ces[9] = { 0x08AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_077)
{
    // 2581 0021;	
    // (▁) LOWER ONE EIGHTH BLOCK	[08B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2581, 0x0021 };
    uint32_t const ces[9] = { 0x08B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_078)
{
    // 2581 003F;	
    // (▁) LOWER ONE EIGHTH BLOCK	[08B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2581, 0x003F };
    uint32_t const ces[9] = { 0x08B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_079)
{
    // 2581 0061;	
    // (▁) LOWER ONE EIGHTH BLOCK	[08B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2581, 0x0061 };
    uint32_t const ces[9] = { 0x08B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_080)
{
    // 2581 0041;	
    // (▁) LOWER ONE EIGHTH BLOCK	[08B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2581, 0x0041 };
    uint32_t const ces[9] = { 0x08B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_081)
{
    // 2581 0062;	
    // (▁) LOWER ONE EIGHTH BLOCK	[08B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2581, 0x0062 };
    uint32_t const ces[9] = { 0x08B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_082)
{
    // 2582 0021;	
    // (▂) LOWER ONE QUARTER BLOCK	[08B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2582, 0x0021 };
    uint32_t const ces[9] = { 0x08B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_083)
{
    // 2582 003F;	
    // (▂) LOWER ONE QUARTER BLOCK	[08B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2582, 0x003F };
    uint32_t const ces[9] = { 0x08B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_084)
{
    // 2582 0061;	
    // (▂) LOWER ONE QUARTER BLOCK	[08B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2582, 0x0061 };
    uint32_t const ces[9] = { 0x08B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_085)
{
    // 2582 0041;	
    // (▂) LOWER ONE QUARTER BLOCK	[08B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2582, 0x0041 };
    uint32_t const ces[9] = { 0x08B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_086)
{
    // 2582 0062;	
    // (▂) LOWER ONE QUARTER BLOCK	[08B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2582, 0x0062 };
    uint32_t const ces[9] = { 0x08B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_087)
{
    // 2583 0021;	
    // (▃) LOWER THREE EIGHTHS BLOCK	[08B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2583, 0x0021 };
    uint32_t const ces[9] = { 0x08B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_088)
{
    // 2583 003F;	
    // (▃) LOWER THREE EIGHTHS BLOCK	[08B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2583, 0x003F };
    uint32_t const ces[9] = { 0x08B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_089)
{
    // 2583 0061;	
    // (▃) LOWER THREE EIGHTHS BLOCK	[08B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2583, 0x0061 };
    uint32_t const ces[9] = { 0x08B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_090)
{
    // 2583 0041;	
    // (▃) LOWER THREE EIGHTHS BLOCK	[08B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2583, 0x0041 };
    uint32_t const ces[9] = { 0x08B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_091)
{
    // 2583 0062;	
    // (▃) LOWER THREE EIGHTHS BLOCK	[08B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2583, 0x0062 };
    uint32_t const ces[9] = { 0x08B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_092)
{
    // 2584 0021;	
    // (▄) LOWER HALF BLOCK	[08B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2584, 0x0021 };
    uint32_t const ces[9] = { 0x08B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_093)
{
    // 2584 003F;	
    // (▄) LOWER HALF BLOCK	[08B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2584, 0x003F };
    uint32_t const ces[9] = { 0x08B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_094)
{
    // 2584 0061;	
    // (▄) LOWER HALF BLOCK	[08B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2584, 0x0061 };
    uint32_t const ces[9] = { 0x08B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_095)
{
    // 2584 0041;	
    // (▄) LOWER HALF BLOCK	[08B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2584, 0x0041 };
    uint32_t const ces[9] = { 0x08B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_096)
{
    // 2584 0062;	
    // (▄) LOWER HALF BLOCK	[08B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2584, 0x0062 };
    uint32_t const ces[9] = { 0x08B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_097)
{
    // 2585 0021;	
    // (▅) LOWER FIVE EIGHTHS BLOCK	[08B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2585, 0x0021 };
    uint32_t const ces[9] = { 0x08B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_098)
{
    // 2585 003F;	
    // (▅) LOWER FIVE EIGHTHS BLOCK	[08B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2585, 0x003F };
    uint32_t const ces[9] = { 0x08B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_099)
{
    // 2585 0061;	
    // (▅) LOWER FIVE EIGHTHS BLOCK	[08B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2585, 0x0061 };
    uint32_t const ces[9] = { 0x08B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_100)
{
    // 2585 0041;	
    // (▅) LOWER FIVE EIGHTHS BLOCK	[08B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2585, 0x0041 };
    uint32_t const ces[9] = { 0x08B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_101)
{
    // 2585 0062;	
    // (▅) LOWER FIVE EIGHTHS BLOCK	[08B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2585, 0x0062 };
    uint32_t const ces[9] = { 0x08B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_102)
{
    // 2586 0021;	
    // (▆) LOWER THREE QUARTERS BLOCK	[08B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2586, 0x0021 };
    uint32_t const ces[9] = { 0x08B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_103)
{
    // 2586 003F;	
    // (▆) LOWER THREE QUARTERS BLOCK	[08B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2586, 0x003F };
    uint32_t const ces[9] = { 0x08B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_104)
{
    // 2586 0061;	
    // (▆) LOWER THREE QUARTERS BLOCK	[08B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2586, 0x0061 };
    uint32_t const ces[9] = { 0x08B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_105)
{
    // 2586 0041;	
    // (▆) LOWER THREE QUARTERS BLOCK	[08B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2586, 0x0041 };
    uint32_t const ces[9] = { 0x08B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_106)
{
    // 2586 0062;	
    // (▆) LOWER THREE QUARTERS BLOCK	[08B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2586, 0x0062 };
    uint32_t const ces[9] = { 0x08B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_107)
{
    // 2587 0021;	
    // (▇) LOWER SEVEN EIGHTHS BLOCK	[08B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2587, 0x0021 };
    uint32_t const ces[9] = { 0x08B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_108)
{
    // 2587 003F;	
    // (▇) LOWER SEVEN EIGHTHS BLOCK	[08B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2587, 0x003F };
    uint32_t const ces[9] = { 0x08B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_109)
{
    // 2587 0061;	
    // (▇) LOWER SEVEN EIGHTHS BLOCK	[08B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2587, 0x0061 };
    uint32_t const ces[9] = { 0x08B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_110)
{
    // 2587 0041;	
    // (▇) LOWER SEVEN EIGHTHS BLOCK	[08B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2587, 0x0041 };
    uint32_t const ces[9] = { 0x08B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_111)
{
    // 2587 0062;	
    // (▇) LOWER SEVEN EIGHTHS BLOCK	[08B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2587, 0x0062 };
    uint32_t const ces[9] = { 0x08B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_112)
{
    // 2588 0021;	
    // (█) FULL BLOCK	[08B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2588, 0x0021 };
    uint32_t const ces[9] = { 0x08B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_113)
{
    // 2588 003F;	
    // (█) FULL BLOCK	[08B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2588, 0x003F };
    uint32_t const ces[9] = { 0x08B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_114)
{
    // 2588 0061;	
    // (█) FULL BLOCK	[08B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2588, 0x0061 };
    uint32_t const ces[9] = { 0x08B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_115)
{
    // 2588 0041;	
    // (█) FULL BLOCK	[08B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2588, 0x0041 };
    uint32_t const ces[9] = { 0x08B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_116)
{
    // 2588 0062;	
    // (█) FULL BLOCK	[08B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2588, 0x0062 };
    uint32_t const ces[9] = { 0x08B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_117)
{
    // 2589 0021;	
    // (▉) LEFT SEVEN EIGHTHS BLOCK	[08B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2589, 0x0021 };
    uint32_t const ces[9] = { 0x08B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_118)
{
    // 2589 003F;	
    // (▉) LEFT SEVEN EIGHTHS BLOCK	[08B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2589, 0x003F };
    uint32_t const ces[9] = { 0x08B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_119)
{
    // 2589 0061;	
    // (▉) LEFT SEVEN EIGHTHS BLOCK	[08B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2589, 0x0061 };
    uint32_t const ces[9] = { 0x08B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_120)
{
    // 2589 0041;	
    // (▉) LEFT SEVEN EIGHTHS BLOCK	[08B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2589, 0x0041 };
    uint32_t const ces[9] = { 0x08B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_121)
{
    // 2589 0062;	
    // (▉) LEFT SEVEN EIGHTHS BLOCK	[08B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2589, 0x0062 };
    uint32_t const ces[9] = { 0x08B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_122)
{
    // 258A 0021;	
    // (▊) LEFT THREE QUARTERS BLOCK	[08B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258A, 0x0021 };
    uint32_t const ces[9] = { 0x08B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_123)
{
    // 258A 003F;	
    // (▊) LEFT THREE QUARTERS BLOCK	[08B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258A, 0x003F };
    uint32_t const ces[9] = { 0x08B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_124)
{
    // 258A 0061;	
    // (▊) LEFT THREE QUARTERS BLOCK	[08B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258A, 0x0061 };
    uint32_t const ces[9] = { 0x08B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_125)
{
    // 258A 0041;	
    // (▊) LEFT THREE QUARTERS BLOCK	[08B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258A, 0x0041 };
    uint32_t const ces[9] = { 0x08B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_126)
{
    // 258A 0062;	
    // (▊) LEFT THREE QUARTERS BLOCK	[08B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258A, 0x0062 };
    uint32_t const ces[9] = { 0x08B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_127)
{
    // 258B 0021;	
    // (▋) LEFT FIVE EIGHTHS BLOCK	[08BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258B, 0x0021 };
    uint32_t const ces[9] = { 0x08BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_128)
{
    // 258B 003F;	
    // (▋) LEFT FIVE EIGHTHS BLOCK	[08BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258B, 0x003F };
    uint32_t const ces[9] = { 0x08BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_129)
{
    // 258B 0061;	
    // (▋) LEFT FIVE EIGHTHS BLOCK	[08BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258B, 0x0061 };
    uint32_t const ces[9] = { 0x08BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_130)
{
    // 258B 0041;	
    // (▋) LEFT FIVE EIGHTHS BLOCK	[08BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258B, 0x0041 };
    uint32_t const ces[9] = { 0x08BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_131)
{
    // 258B 0062;	
    // (▋) LEFT FIVE EIGHTHS BLOCK	[08BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258B, 0x0062 };
    uint32_t const ces[9] = { 0x08BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_132)
{
    // 258C 0021;	
    // (▌) LEFT HALF BLOCK	[08BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258C, 0x0021 };
    uint32_t const ces[9] = { 0x08BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_133)
{
    // 258C 003F;	
    // (▌) LEFT HALF BLOCK	[08BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258C, 0x003F };
    uint32_t const ces[9] = { 0x08BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_134)
{
    // 258C 0061;	
    // (▌) LEFT HALF BLOCK	[08BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258C, 0x0061 };
    uint32_t const ces[9] = { 0x08BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_135)
{
    // 258C 0041;	
    // (▌) LEFT HALF BLOCK	[08BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258C, 0x0041 };
    uint32_t const ces[9] = { 0x08BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_136)
{
    // 258C 0062;	
    // (▌) LEFT HALF BLOCK	[08BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258C, 0x0062 };
    uint32_t const ces[9] = { 0x08BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_137)
{
    // 258D 0021;	
    // (▍) LEFT THREE EIGHTHS BLOCK	[08BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258D, 0x0021 };
    uint32_t const ces[9] = { 0x08BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_138)
{
    // 258D 003F;	
    // (▍) LEFT THREE EIGHTHS BLOCK	[08BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258D, 0x003F };
    uint32_t const ces[9] = { 0x08BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_139)
{
    // 258D 0061;	
    // (▍) LEFT THREE EIGHTHS BLOCK	[08BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258D, 0x0061 };
    uint32_t const ces[9] = { 0x08BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_140)
{
    // 258D 0041;	
    // (▍) LEFT THREE EIGHTHS BLOCK	[08BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258D, 0x0041 };
    uint32_t const ces[9] = { 0x08BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_141)
{
    // 258D 0062;	
    // (▍) LEFT THREE EIGHTHS BLOCK	[08BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258D, 0x0062 };
    uint32_t const ces[9] = { 0x08BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_142)
{
    // 258E 0021;	
    // (▎) LEFT ONE QUARTER BLOCK	[08BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258E, 0x0021 };
    uint32_t const ces[9] = { 0x08BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_143)
{
    // 258E 003F;	
    // (▎) LEFT ONE QUARTER BLOCK	[08BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258E, 0x003F };
    uint32_t const ces[9] = { 0x08BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_144)
{
    // 258E 0061;	
    // (▎) LEFT ONE QUARTER BLOCK	[08BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258E, 0x0061 };
    uint32_t const ces[9] = { 0x08BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_145)
{
    // 258E 0041;	
    // (▎) LEFT ONE QUARTER BLOCK	[08BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258E, 0x0041 };
    uint32_t const ces[9] = { 0x08BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_146)
{
    // 258E 0062;	
    // (▎) LEFT ONE QUARTER BLOCK	[08BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258E, 0x0062 };
    uint32_t const ces[9] = { 0x08BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_147)
{
    // 258F 0021;	
    // (▏) LEFT ONE EIGHTH BLOCK	[08BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258F, 0x0021 };
    uint32_t const ces[9] = { 0x08BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_148)
{
    // 258F 003F;	
    // (▏) LEFT ONE EIGHTH BLOCK	[08BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258F, 0x003F };
    uint32_t const ces[9] = { 0x08BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_149)
{
    // 258F 0061;	
    // (▏) LEFT ONE EIGHTH BLOCK	[08BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258F, 0x0061 };
    uint32_t const ces[9] = { 0x08BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_150)
{
    // 258F 0041;	
    // (▏) LEFT ONE EIGHTH BLOCK	[08BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x258F, 0x0041 };
    uint32_t const ces[9] = { 0x08BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_151)
{
    // 258F 0062;	
    // (▏) LEFT ONE EIGHTH BLOCK	[08BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x258F, 0x0062 };
    uint32_t const ces[9] = { 0x08BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_152)
{
    // 2590 0021;	
    // (▐) RIGHT HALF BLOCK	[08BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2590, 0x0021 };
    uint32_t const ces[9] = { 0x08BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_153)
{
    // 2590 003F;	
    // (▐) RIGHT HALF BLOCK	[08BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2590, 0x003F };
    uint32_t const ces[9] = { 0x08BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_154)
{
    // 2590 0061;	
    // (▐) RIGHT HALF BLOCK	[08BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2590, 0x0061 };
    uint32_t const ces[9] = { 0x08BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_155)
{
    // 2590 0041;	
    // (▐) RIGHT HALF BLOCK	[08BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2590, 0x0041 };
    uint32_t const ces[9] = { 0x08BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_156)
{
    // 2590 0062;	
    // (▐) RIGHT HALF BLOCK	[08BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2590, 0x0062 };
    uint32_t const ces[9] = { 0x08BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_157)
{
    // 2591 0021;	
    // (░) LIGHT SHADE	[08C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2591, 0x0021 };
    uint32_t const ces[9] = { 0x08C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_158)
{
    // 2591 003F;	
    // (░) LIGHT SHADE	[08C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2591, 0x003F };
    uint32_t const ces[9] = { 0x08C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_159)
{
    // 2591 0061;	
    // (░) LIGHT SHADE	[08C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2591, 0x0061 };
    uint32_t const ces[9] = { 0x08C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_160)
{
    // 2591 0041;	
    // (░) LIGHT SHADE	[08C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2591, 0x0041 };
    uint32_t const ces[9] = { 0x08C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_161)
{
    // 2591 0062;	
    // (░) LIGHT SHADE	[08C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2591, 0x0062 };
    uint32_t const ces[9] = { 0x08C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_162)
{
    // 2592 0021;	
    // (▒) MEDIUM SHADE	[08C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2592, 0x0021 };
    uint32_t const ces[9] = { 0x08C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_163)
{
    // 2592 003F;	
    // (▒) MEDIUM SHADE	[08C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2592, 0x003F };
    uint32_t const ces[9] = { 0x08C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_164)
{
    // 2592 0061;	
    // (▒) MEDIUM SHADE	[08C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2592, 0x0061 };
    uint32_t const ces[9] = { 0x08C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_165)
{
    // 2592 0041;	
    // (▒) MEDIUM SHADE	[08C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2592, 0x0041 };
    uint32_t const ces[9] = { 0x08C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_166)
{
    // 2592 0062;	
    // (▒) MEDIUM SHADE	[08C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2592, 0x0062 };
    uint32_t const ces[9] = { 0x08C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_167)
{
    // 2593 0021;	
    // (▓) DARK SHADE	[08C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2593, 0x0021 };
    uint32_t const ces[9] = { 0x08C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_168)
{
    // 2593 003F;	
    // (▓) DARK SHADE	[08C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2593, 0x003F };
    uint32_t const ces[9] = { 0x08C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_169)
{
    // 2593 0061;	
    // (▓) DARK SHADE	[08C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2593, 0x0061 };
    uint32_t const ces[9] = { 0x08C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_170)
{
    // 2593 0041;	
    // (▓) DARK SHADE	[08C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2593, 0x0041 };
    uint32_t const ces[9] = { 0x08C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_171)
{
    // 2593 0062;	
    // (▓) DARK SHADE	[08C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2593, 0x0062 };
    uint32_t const ces[9] = { 0x08C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_172)
{
    // 2594 0021;	
    // (▔) UPPER ONE EIGHTH BLOCK	[08C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2594, 0x0021 };
    uint32_t const ces[9] = { 0x08C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_173)
{
    // 2594 003F;	
    // (▔) UPPER ONE EIGHTH BLOCK	[08C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2594, 0x003F };
    uint32_t const ces[9] = { 0x08C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_174)
{
    // 2594 0061;	
    // (▔) UPPER ONE EIGHTH BLOCK	[08C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2594, 0x0061 };
    uint32_t const ces[9] = { 0x08C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_175)
{
    // 2594 0041;	
    // (▔) UPPER ONE EIGHTH BLOCK	[08C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2594, 0x0041 };
    uint32_t const ces[9] = { 0x08C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_176)
{
    // 2594 0062;	
    // (▔) UPPER ONE EIGHTH BLOCK	[08C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2594, 0x0062 };
    uint32_t const ces[9] = { 0x08C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_177)
{
    // 2595 0021;	
    // (▕) RIGHT ONE EIGHTH BLOCK	[08C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2595, 0x0021 };
    uint32_t const ces[9] = { 0x08C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_178)
{
    // 2595 003F;	
    // (▕) RIGHT ONE EIGHTH BLOCK	[08C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2595, 0x003F };
    uint32_t const ces[9] = { 0x08C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_179)
{
    // 2595 0061;	
    // (▕) RIGHT ONE EIGHTH BLOCK	[08C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2595, 0x0061 };
    uint32_t const ces[9] = { 0x08C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_180)
{
    // 2595 0041;	
    // (▕) RIGHT ONE EIGHTH BLOCK	[08C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2595, 0x0041 };
    uint32_t const ces[9] = { 0x08C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_181)
{
    // 2595 0062;	
    // (▕) RIGHT ONE EIGHTH BLOCK	[08C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2595, 0x0062 };
    uint32_t const ces[9] = { 0x08C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_182)
{
    // 2596 0021;	
    // (▖) QUADRANT LOWER LEFT	[08C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2596, 0x0021 };
    uint32_t const ces[9] = { 0x08C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_183)
{
    // 2596 003F;	
    // (▖) QUADRANT LOWER LEFT	[08C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2596, 0x003F };
    uint32_t const ces[9] = { 0x08C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_184)
{
    // 2596 0061;	
    // (▖) QUADRANT LOWER LEFT	[08C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2596, 0x0061 };
    uint32_t const ces[9] = { 0x08C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_185)
{
    // 2596 0041;	
    // (▖) QUADRANT LOWER LEFT	[08C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2596, 0x0041 };
    uint32_t const ces[9] = { 0x08C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_186)
{
    // 2596 0062;	
    // (▖) QUADRANT LOWER LEFT	[08C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2596, 0x0062 };
    uint32_t const ces[9] = { 0x08C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_187)
{
    // 2597 0021;	
    // (▗) QUADRANT LOWER RIGHT	[08C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2597, 0x0021 };
    uint32_t const ces[9] = { 0x08C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_188)
{
    // 2597 003F;	
    // (▗) QUADRANT LOWER RIGHT	[08C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2597, 0x003F };
    uint32_t const ces[9] = { 0x08C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_189)
{
    // 2597 0061;	
    // (▗) QUADRANT LOWER RIGHT	[08C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2597, 0x0061 };
    uint32_t const ces[9] = { 0x08C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_190)
{
    // 2597 0041;	
    // (▗) QUADRANT LOWER RIGHT	[08C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2597, 0x0041 };
    uint32_t const ces[9] = { 0x08C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_191)
{
    // 2597 0062;	
    // (▗) QUADRANT LOWER RIGHT	[08C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2597, 0x0062 };
    uint32_t const ces[9] = { 0x08C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_192)
{
    // 2598 0021;	
    // (▘) QUADRANT UPPER LEFT	[08C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2598, 0x0021 };
    uint32_t const ces[9] = { 0x08C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_193)
{
    // 2598 003F;	
    // (▘) QUADRANT UPPER LEFT	[08C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2598, 0x003F };
    uint32_t const ces[9] = { 0x08C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_194)
{
    // 2598 0061;	
    // (▘) QUADRANT UPPER LEFT	[08C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2598, 0x0061 };
    uint32_t const ces[9] = { 0x08C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_195)
{
    // 2598 0041;	
    // (▘) QUADRANT UPPER LEFT	[08C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2598, 0x0041 };
    uint32_t const ces[9] = { 0x08C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_196)
{
    // 2598 0062;	
    // (▘) QUADRANT UPPER LEFT	[08C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2598, 0x0062 };
    uint32_t const ces[9] = { 0x08C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_197)
{
    // 2599 0021;	
    // (▙) QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT	[08C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2599, 0x0021 };
    uint32_t const ces[9] = { 0x08C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_198)
{
    // 2599 003F;	
    // (▙) QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT	[08C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2599, 0x003F };
    uint32_t const ces[9] = { 0x08C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_199)
{
    // 2599 0061;	
    // (▙) QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT	[08C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2599, 0x0061 };
    uint32_t const ces[9] = { 0x08C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_200)
{
    // 2599 0041;	
    // (▙) QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT	[08C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2599, 0x0041 };
    uint32_t const ces[9] = { 0x08C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_201)
{
    // 2599 0062;	
    // (▙) QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT	[08C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2599, 0x0062 };
    uint32_t const ces[9] = { 0x08C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_202)
{
    // 259A 0021;	
    // (▚) QUADRANT UPPER LEFT AND LOWER RIGHT	[08C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259A, 0x0021 };
    uint32_t const ces[9] = { 0x08C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_203)
{
    // 259A 003F;	
    // (▚) QUADRANT UPPER LEFT AND LOWER RIGHT	[08C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259A, 0x003F };
    uint32_t const ces[9] = { 0x08C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_204)
{
    // 259A 0061;	
    // (▚) QUADRANT UPPER LEFT AND LOWER RIGHT	[08C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259A, 0x0061 };
    uint32_t const ces[9] = { 0x08C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_205)
{
    // 259A 0041;	
    // (▚) QUADRANT UPPER LEFT AND LOWER RIGHT	[08C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259A, 0x0041 };
    uint32_t const ces[9] = { 0x08C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_206)
{
    // 259A 0062;	
    // (▚) QUADRANT UPPER LEFT AND LOWER RIGHT	[08C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259A, 0x0062 };
    uint32_t const ces[9] = { 0x08C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_207)
{
    // 259B 0021;	
    // (▛) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT	[08CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259B, 0x0021 };
    uint32_t const ces[9] = { 0x08CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_208)
{
    // 259B 003F;	
    // (▛) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT	[08CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259B, 0x003F };
    uint32_t const ces[9] = { 0x08CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_209)
{
    // 259B 0061;	
    // (▛) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT	[08CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259B, 0x0061 };
    uint32_t const ces[9] = { 0x08CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_210)
{
    // 259B 0041;	
    // (▛) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT	[08CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259B, 0x0041 };
    uint32_t const ces[9] = { 0x08CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_211)
{
    // 259B 0062;	
    // (▛) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT	[08CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259B, 0x0062 };
    uint32_t const ces[9] = { 0x08CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_212)
{
    // 259C 0021;	
    // (▜) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT	[08CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259C, 0x0021 };
    uint32_t const ces[9] = { 0x08CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_213)
{
    // 259C 003F;	
    // (▜) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT	[08CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259C, 0x003F };
    uint32_t const ces[9] = { 0x08CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_214)
{
    // 259C 0061;	
    // (▜) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT	[08CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259C, 0x0061 };
    uint32_t const ces[9] = { 0x08CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_215)
{
    // 259C 0041;	
    // (▜) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT	[08CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259C, 0x0041 };
    uint32_t const ces[9] = { 0x08CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_216)
{
    // 259C 0062;	
    // (▜) QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT	[08CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259C, 0x0062 };
    uint32_t const ces[9] = { 0x08CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_217)
{
    // 259D 0021;	
    // (▝) QUADRANT UPPER RIGHT	[08CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259D, 0x0021 };
    uint32_t const ces[9] = { 0x08CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_218)
{
    // 259D 003F;	
    // (▝) QUADRANT UPPER RIGHT	[08CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259D, 0x003F };
    uint32_t const ces[9] = { 0x08CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_219)
{
    // 259D 0061;	
    // (▝) QUADRANT UPPER RIGHT	[08CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259D, 0x0061 };
    uint32_t const ces[9] = { 0x08CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_220)
{
    // 259D 0041;	
    // (▝) QUADRANT UPPER RIGHT	[08CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259D, 0x0041 };
    uint32_t const ces[9] = { 0x08CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_221)
{
    // 259D 0062;	
    // (▝) QUADRANT UPPER RIGHT	[08CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259D, 0x0062 };
    uint32_t const ces[9] = { 0x08CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_222)
{
    // 259E 0021;	
    // (▞) QUADRANT UPPER RIGHT AND LOWER LEFT	[08CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259E, 0x0021 };
    uint32_t const ces[9] = { 0x08CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_223)
{
    // 259E 003F;	
    // (▞) QUADRANT UPPER RIGHT AND LOWER LEFT	[08CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259E, 0x003F };
    uint32_t const ces[9] = { 0x08CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_224)
{
    // 259E 0061;	
    // (▞) QUADRANT UPPER RIGHT AND LOWER LEFT	[08CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259E, 0x0061 };
    uint32_t const ces[9] = { 0x08CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_225)
{
    // 259E 0041;	
    // (▞) QUADRANT UPPER RIGHT AND LOWER LEFT	[08CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259E, 0x0041 };
    uint32_t const ces[9] = { 0x08CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_226)
{
    // 259E 0062;	
    // (▞) QUADRANT UPPER RIGHT AND LOWER LEFT	[08CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259E, 0x0062 };
    uint32_t const ces[9] = { 0x08CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_227)
{
    // 259F 0021;	
    // (▟) QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT	[08CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259F, 0x0021 };
    uint32_t const ces[9] = { 0x08CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_228)
{
    // 259F 003F;	
    // (▟) QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT	[08CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259F, 0x003F };
    uint32_t const ces[9] = { 0x08CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_229)
{
    // 259F 0061;	
    // (▟) QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT	[08CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259F, 0x0061 };
    uint32_t const ces[9] = { 0x08CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_230)
{
    // 259F 0041;	
    // (▟) QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT	[08CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x259F, 0x0041 };
    uint32_t const ces[9] = { 0x08CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_231)
{
    // 259F 0062;	
    // (▟) QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT	[08CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x259F, 0x0062 };
    uint32_t const ces[9] = { 0x08CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_232)
{
    // 25A0 0021;	
    // (■) BLACK SQUARE	[08CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A0, 0x0021 };
    uint32_t const ces[9] = { 0x08CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_233)
{
    // FFED 0021;	
    // (￭) HALFWIDTH BLACK SQUARE	[08CF 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFED, 0x0021 };
    uint32_t const ces[9] = { 0x08CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_234)
{
    // 25A0 003F;	
    // (■) BLACK SQUARE	[08CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A0, 0x003F };
    uint32_t const ces[9] = { 0x08CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_235)
{
    // FFED 003F;	
    // (￭) HALFWIDTH BLACK SQUARE	[08CF 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFED, 0x003F };
    uint32_t const ces[9] = { 0x08CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_236)
{
    // 25A0 0061;	
    // (■) BLACK SQUARE	[08CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A0, 0x0061 };
    uint32_t const ces[9] = { 0x08CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_237)
{
    // 25A0 0041;	
    // (■) BLACK SQUARE	[08CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A0, 0x0041 };
    uint32_t const ces[9] = { 0x08CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_238)
{
    // FFED 0061;	
    // (￭) HALFWIDTH BLACK SQUARE	[08CF 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFED, 0x0061 };
    uint32_t const ces[9] = { 0x08CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_239)
{
    // FFED 0041;	
    // (￭) HALFWIDTH BLACK SQUARE	[08CF 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFED, 0x0041 };
    uint32_t const ces[9] = { 0x08CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_240)
{
    // 25A0 0062;	
    // (■) BLACK SQUARE	[08CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A0, 0x0062 };
    uint32_t const ces[9] = { 0x08CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_241)
{
    // FFED 0062;	
    // (￭) HALFWIDTH BLACK SQUARE	[08CF 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFED, 0x0062 };
    uint32_t const ces[9] = { 0x08CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_242)
{
    // 25A1 0021;	
    // (□) WHITE SQUARE	[08D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A1, 0x0021 };
    uint32_t const ces[9] = { 0x08D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_243)
{
    // 25A1 003F;	
    // (□) WHITE SQUARE	[08D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A1, 0x003F };
    uint32_t const ces[9] = { 0x08D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_244)
{
    // 25A1 0061;	
    // (□) WHITE SQUARE	[08D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A1, 0x0061 };
    uint32_t const ces[9] = { 0x08D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_245)
{
    // 25A1 0041;	
    // (□) WHITE SQUARE	[08D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A1, 0x0041 };
    uint32_t const ces[9] = { 0x08D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_246)
{
    // 25A1 0062;	
    // (□) WHITE SQUARE	[08D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A1, 0x0062 };
    uint32_t const ces[9] = { 0x08D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_247)
{
    // 25A2 0021;	
    // (▢) WHITE SQUARE WITH ROUNDED CORNERS	[08D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A2, 0x0021 };
    uint32_t const ces[9] = { 0x08D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_248)
{
    // 25A2 003F;	
    // (▢) WHITE SQUARE WITH ROUNDED CORNERS	[08D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A2, 0x003F };
    uint32_t const ces[9] = { 0x08D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_249)
{
    // 25A2 0061;	
    // (▢) WHITE SQUARE WITH ROUNDED CORNERS	[08D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A2, 0x0061 };
    uint32_t const ces[9] = { 0x08D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_250)
{
    // 25A2 0041;	
    // (▢) WHITE SQUARE WITH ROUNDED CORNERS	[08D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A2, 0x0041 };
    uint32_t const ces[9] = { 0x08D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_251)
{
    // 25A2 0062;	
    // (▢) WHITE SQUARE WITH ROUNDED CORNERS	[08D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A2, 0x0062 };
    uint32_t const ces[9] = { 0x08D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_252)
{
    // 25A3 0021;	
    // (▣) WHITE SQUARE CONTAINING BLACK SMALL SQUARE	[08D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A3, 0x0021 };
    uint32_t const ces[9] = { 0x08D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_253)
{
    // 25A3 003F;	
    // (▣) WHITE SQUARE CONTAINING BLACK SMALL SQUARE	[08D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A3, 0x003F };
    uint32_t const ces[9] = { 0x08D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_254)
{
    // 25A3 0061;	
    // (▣) WHITE SQUARE CONTAINING BLACK SMALL SQUARE	[08D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A3, 0x0061 };
    uint32_t const ces[9] = { 0x08D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_255)
{
    // 25A3 0041;	
    // (▣) WHITE SQUARE CONTAINING BLACK SMALL SQUARE	[08D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A3, 0x0041 };
    uint32_t const ces[9] = { 0x08D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_256)
{
    // 25A3 0062;	
    // (▣) WHITE SQUARE CONTAINING BLACK SMALL SQUARE	[08D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A3, 0x0062 };
    uint32_t const ces[9] = { 0x08D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_257)
{
    // 25A4 0021;	
    // (▤) SQUARE WITH HORIZONTAL FILL	[08D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A4, 0x0021 };
    uint32_t const ces[9] = { 0x08D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_258)
{
    // 25A4 003F;	
    // (▤) SQUARE WITH HORIZONTAL FILL	[08D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A4, 0x003F };
    uint32_t const ces[9] = { 0x08D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_259)
{
    // 25A4 0061;	
    // (▤) SQUARE WITH HORIZONTAL FILL	[08D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A4, 0x0061 };
    uint32_t const ces[9] = { 0x08D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_260)
{
    // 25A4 0041;	
    // (▤) SQUARE WITH HORIZONTAL FILL	[08D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A4, 0x0041 };
    uint32_t const ces[9] = { 0x08D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_261)
{
    // 25A4 0062;	
    // (▤) SQUARE WITH HORIZONTAL FILL	[08D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A4, 0x0062 };
    uint32_t const ces[9] = { 0x08D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_262)
{
    // 25A5 0021;	
    // (▥) SQUARE WITH VERTICAL FILL	[08D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A5, 0x0021 };
    uint32_t const ces[9] = { 0x08D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_263)
{
    // 25A5 003F;	
    // (▥) SQUARE WITH VERTICAL FILL	[08D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A5, 0x003F };
    uint32_t const ces[9] = { 0x08D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_264)
{
    // 25A5 0061;	
    // (▥) SQUARE WITH VERTICAL FILL	[08D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A5, 0x0061 };
    uint32_t const ces[9] = { 0x08D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_265)
{
    // 25A5 0041;	
    // (▥) SQUARE WITH VERTICAL FILL	[08D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A5, 0x0041 };
    uint32_t const ces[9] = { 0x08D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_266)
{
    // 25A5 0062;	
    // (▥) SQUARE WITH VERTICAL FILL	[08D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A5, 0x0062 };
    uint32_t const ces[9] = { 0x08D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_267)
{
    // 25A6 0021;	
    // (▦) SQUARE WITH ORTHOGONAL CROSSHATCH FILL	[08D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A6, 0x0021 };
    uint32_t const ces[9] = { 0x08D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_268)
{
    // 25A6 003F;	
    // (▦) SQUARE WITH ORTHOGONAL CROSSHATCH FILL	[08D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A6, 0x003F };
    uint32_t const ces[9] = { 0x08D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_269)
{
    // 25A6 0061;	
    // (▦) SQUARE WITH ORTHOGONAL CROSSHATCH FILL	[08D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A6, 0x0061 };
    uint32_t const ces[9] = { 0x08D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_270)
{
    // 25A6 0041;	
    // (▦) SQUARE WITH ORTHOGONAL CROSSHATCH FILL	[08D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A6, 0x0041 };
    uint32_t const ces[9] = { 0x08D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_271)
{
    // 25A6 0062;	
    // (▦) SQUARE WITH ORTHOGONAL CROSSHATCH FILL	[08D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A6, 0x0062 };
    uint32_t const ces[9] = { 0x08D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_272)
{
    // 25A7 0021;	
    // (▧) SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL	[08D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A7, 0x0021 };
    uint32_t const ces[9] = { 0x08D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_273)
{
    // 25A7 003F;	
    // (▧) SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL	[08D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A7, 0x003F };
    uint32_t const ces[9] = { 0x08D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_274)
{
    // 25A7 0061;	
    // (▧) SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL	[08D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A7, 0x0061 };
    uint32_t const ces[9] = { 0x08D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_275)
{
    // 25A7 0041;	
    // (▧) SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL	[08D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A7, 0x0041 };
    uint32_t const ces[9] = { 0x08D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_276)
{
    // 25A7 0062;	
    // (▧) SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL	[08D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A7, 0x0062 };
    uint32_t const ces[9] = { 0x08D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_277)
{
    // 25A8 0021;	
    // (▨) SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL	[08D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A8, 0x0021 };
    uint32_t const ces[9] = { 0x08D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_278)
{
    // 25A8 003F;	
    // (▨) SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL	[08D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A8, 0x003F };
    uint32_t const ces[9] = { 0x08D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_279)
{
    // 25A8 0061;	
    // (▨) SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL	[08D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A8, 0x0061 };
    uint32_t const ces[9] = { 0x08D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_280)
{
    // 25A8 0041;	
    // (▨) SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL	[08D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A8, 0x0041 };
    uint32_t const ces[9] = { 0x08D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_281)
{
    // 25A8 0062;	
    // (▨) SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL	[08D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A8, 0x0062 };
    uint32_t const ces[9] = { 0x08D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_282)
{
    // 25A9 0021;	
    // (▩) SQUARE WITH DIAGONAL CROSSHATCH FILL	[08D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A9, 0x0021 };
    uint32_t const ces[9] = { 0x08D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_283)
{
    // 25A9 003F;	
    // (▩) SQUARE WITH DIAGONAL CROSSHATCH FILL	[08D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A9, 0x003F };
    uint32_t const ces[9] = { 0x08D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_284)
{
    // 25A9 0061;	
    // (▩) SQUARE WITH DIAGONAL CROSSHATCH FILL	[08D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A9, 0x0061 };
    uint32_t const ces[9] = { 0x08D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_285)
{
    // 25A9 0041;	
    // (▩) SQUARE WITH DIAGONAL CROSSHATCH FILL	[08D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25A9, 0x0041 };
    uint32_t const ces[9] = { 0x08D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_286)
{
    // 25A9 0062;	
    // (▩) SQUARE WITH DIAGONAL CROSSHATCH FILL	[08D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25A9, 0x0062 };
    uint32_t const ces[9] = { 0x08D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_287)
{
    // 25AA 0021;	
    // (▪) BLACK SMALL SQUARE	[08D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AA, 0x0021 };
    uint32_t const ces[9] = { 0x08D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_288)
{
    // 25AA 003F;	
    // (▪) BLACK SMALL SQUARE	[08D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AA, 0x003F };
    uint32_t const ces[9] = { 0x08D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_289)
{
    // 25AA 0061;	
    // (▪) BLACK SMALL SQUARE	[08D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AA, 0x0061 };
    uint32_t const ces[9] = { 0x08D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_290)
{
    // 25AA 0041;	
    // (▪) BLACK SMALL SQUARE	[08D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AA, 0x0041 };
    uint32_t const ces[9] = { 0x08D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_291)
{
    // 25AA 0062;	
    // (▪) BLACK SMALL SQUARE	[08D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AA, 0x0062 };
    uint32_t const ces[9] = { 0x08D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_292)
{
    // 25AB 0021;	
    // (▫) WHITE SMALL SQUARE	[08DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AB, 0x0021 };
    uint32_t const ces[9] = { 0x08DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_293)
{
    // 25AB 003F;	
    // (▫) WHITE SMALL SQUARE	[08DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AB, 0x003F };
    uint32_t const ces[9] = { 0x08DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_294)
{
    // 25AB 0061;	
    // (▫) WHITE SMALL SQUARE	[08DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AB, 0x0061 };
    uint32_t const ces[9] = { 0x08DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_295)
{
    // 25AB 0041;	
    // (▫) WHITE SMALL SQUARE	[08DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AB, 0x0041 };
    uint32_t const ces[9] = { 0x08DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_296)
{
    // 25AB 0062;	
    // (▫) WHITE SMALL SQUARE	[08DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AB, 0x0062 };
    uint32_t const ces[9] = { 0x08DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_297)
{
    // 25AC 0021;	
    // (▬) BLACK RECTANGLE	[08DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AC, 0x0021 };
    uint32_t const ces[9] = { 0x08DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_298)
{
    // 25AC 003F;	
    // (▬) BLACK RECTANGLE	[08DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AC, 0x003F };
    uint32_t const ces[9] = { 0x08DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_299)
{
    // 25AC 0061;	
    // (▬) BLACK RECTANGLE	[08DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AC, 0x0061 };
    uint32_t const ces[9] = { 0x08DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_300)
{
    // 25AC 0041;	
    // (▬) BLACK RECTANGLE	[08DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AC, 0x0041 };
    uint32_t const ces[9] = { 0x08DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_301)
{
    // 25AC 0062;	
    // (▬) BLACK RECTANGLE	[08DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AC, 0x0062 };
    uint32_t const ces[9] = { 0x08DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_302)
{
    // 25AD 0021;	
    // (▭) WHITE RECTANGLE	[08DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AD, 0x0021 };
    uint32_t const ces[9] = { 0x08DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_303)
{
    // 25AD 003F;	
    // (▭) WHITE RECTANGLE	[08DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AD, 0x003F };
    uint32_t const ces[9] = { 0x08DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_304)
{
    // 25AD 0061;	
    // (▭) WHITE RECTANGLE	[08DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AD, 0x0061 };
    uint32_t const ces[9] = { 0x08DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_305)
{
    // 25AD 0041;	
    // (▭) WHITE RECTANGLE	[08DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AD, 0x0041 };
    uint32_t const ces[9] = { 0x08DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_306)
{
    // 25AD 0062;	
    // (▭) WHITE RECTANGLE	[08DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AD, 0x0062 };
    uint32_t const ces[9] = { 0x08DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_307)
{
    // 25AE 0021;	
    // (▮) BLACK VERTICAL RECTANGLE	[08DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AE, 0x0021 };
    uint32_t const ces[9] = { 0x08DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_308)
{
    // 25AE 003F;	
    // (▮) BLACK VERTICAL RECTANGLE	[08DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AE, 0x003F };
    uint32_t const ces[9] = { 0x08DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_309)
{
    // 25AE 0061;	
    // (▮) BLACK VERTICAL RECTANGLE	[08DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AE, 0x0061 };
    uint32_t const ces[9] = { 0x08DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_310)
{
    // 25AE 0041;	
    // (▮) BLACK VERTICAL RECTANGLE	[08DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AE, 0x0041 };
    uint32_t const ces[9] = { 0x08DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_311)
{
    // 25AE 0062;	
    // (▮) BLACK VERTICAL RECTANGLE	[08DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AE, 0x0062 };
    uint32_t const ces[9] = { 0x08DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_312)
{
    // 25AF 0021;	
    // (▯) WHITE VERTICAL RECTANGLE	[08DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AF, 0x0021 };
    uint32_t const ces[9] = { 0x08DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_313)
{
    // 25AF 003F;	
    // (▯) WHITE VERTICAL RECTANGLE	[08DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AF, 0x003F };
    uint32_t const ces[9] = { 0x08DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_314)
{
    // 25AF 0061;	
    // (▯) WHITE VERTICAL RECTANGLE	[08DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AF, 0x0061 };
    uint32_t const ces[9] = { 0x08DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_315)
{
    // 25AF 0041;	
    // (▯) WHITE VERTICAL RECTANGLE	[08DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25AF, 0x0041 };
    uint32_t const ces[9] = { 0x08DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_316)
{
    // 25AF 0062;	
    // (▯) WHITE VERTICAL RECTANGLE	[08DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25AF, 0x0062 };
    uint32_t const ces[9] = { 0x08DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_317)
{
    // 25B0 0021;	
    // (▰) BLACK PARALLELOGRAM	[08DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B0, 0x0021 };
    uint32_t const ces[9] = { 0x08DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_318)
{
    // 25B0 003F;	
    // (▰) BLACK PARALLELOGRAM	[08DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B0, 0x003F };
    uint32_t const ces[9] = { 0x08DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_319)
{
    // 25B0 0061;	
    // (▰) BLACK PARALLELOGRAM	[08DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B0, 0x0061 };
    uint32_t const ces[9] = { 0x08DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_320)
{
    // 25B0 0041;	
    // (▰) BLACK PARALLELOGRAM	[08DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B0, 0x0041 };
    uint32_t const ces[9] = { 0x08DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_321)
{
    // 25B0 0062;	
    // (▰) BLACK PARALLELOGRAM	[08DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B0, 0x0062 };
    uint32_t const ces[9] = { 0x08DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_322)
{
    // 25B1 0021;	
    // (▱) WHITE PARALLELOGRAM	[08E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B1, 0x0021 };
    uint32_t const ces[9] = { 0x08E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_323)
{
    // 25B1 003F;	
    // (▱) WHITE PARALLELOGRAM	[08E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B1, 0x003F };
    uint32_t const ces[9] = { 0x08E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_324)
{
    // 25B1 0061;	
    // (▱) WHITE PARALLELOGRAM	[08E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B1, 0x0061 };
    uint32_t const ces[9] = { 0x08E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_325)
{
    // 25B1 0041;	
    // (▱) WHITE PARALLELOGRAM	[08E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B1, 0x0041 };
    uint32_t const ces[9] = { 0x08E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_326)
{
    // 25B1 0062;	
    // (▱) WHITE PARALLELOGRAM	[08E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B1, 0x0062 };
    uint32_t const ces[9] = { 0x08E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_327)
{
    // 25B2 0021;	
    // (▲) BLACK UP-POINTING TRIANGLE	[08E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B2, 0x0021 };
    uint32_t const ces[9] = { 0x08E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_328)
{
    // 25B2 003F;	
    // (▲) BLACK UP-POINTING TRIANGLE	[08E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B2, 0x003F };
    uint32_t const ces[9] = { 0x08E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_329)
{
    // 25B2 0061;	
    // (▲) BLACK UP-POINTING TRIANGLE	[08E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B2, 0x0061 };
    uint32_t const ces[9] = { 0x08E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_330)
{
    // 25B2 0041;	
    // (▲) BLACK UP-POINTING TRIANGLE	[08E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B2, 0x0041 };
    uint32_t const ces[9] = { 0x08E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_331)
{
    // 25B2 0062;	
    // (▲) BLACK UP-POINTING TRIANGLE	[08E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B2, 0x0062 };
    uint32_t const ces[9] = { 0x08E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_332)
{
    // 25B3 0021;	
    // (△) WHITE UP-POINTING TRIANGLE	[08E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B3, 0x0021 };
    uint32_t const ces[9] = { 0x08E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_333)
{
    // 25B3 003F;	
    // (△) WHITE UP-POINTING TRIANGLE	[08E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B3, 0x003F };
    uint32_t const ces[9] = { 0x08E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_334)
{
    // 25B3 0061;	
    // (△) WHITE UP-POINTING TRIANGLE	[08E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B3, 0x0061 };
    uint32_t const ces[9] = { 0x08E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_335)
{
    // 25B3 0041;	
    // (△) WHITE UP-POINTING TRIANGLE	[08E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B3, 0x0041 };
    uint32_t const ces[9] = { 0x08E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_336)
{
    // 25B3 0062;	
    // (△) WHITE UP-POINTING TRIANGLE	[08E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B3, 0x0062 };
    uint32_t const ces[9] = { 0x08E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_337)
{
    // 25B4 0021;	
    // (▴) BLACK UP-POINTING SMALL TRIANGLE	[08E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B4, 0x0021 };
    uint32_t const ces[9] = { 0x08E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_338)
{
    // 25B4 003F;	
    // (▴) BLACK UP-POINTING SMALL TRIANGLE	[08E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B4, 0x003F };
    uint32_t const ces[9] = { 0x08E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_339)
{
    // 25B4 0061;	
    // (▴) BLACK UP-POINTING SMALL TRIANGLE	[08E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B4, 0x0061 };
    uint32_t const ces[9] = { 0x08E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_340)
{
    // 25B4 0041;	
    // (▴) BLACK UP-POINTING SMALL TRIANGLE	[08E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B4, 0x0041 };
    uint32_t const ces[9] = { 0x08E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_341)
{
    // 25B4 0062;	
    // (▴) BLACK UP-POINTING SMALL TRIANGLE	[08E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B4, 0x0062 };
    uint32_t const ces[9] = { 0x08E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_342)
{
    // 25B5 0021;	
    // (▵) WHITE UP-POINTING SMALL TRIANGLE	[08E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B5, 0x0021 };
    uint32_t const ces[9] = { 0x08E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_343)
{
    // 25B5 003F;	
    // (▵) WHITE UP-POINTING SMALL TRIANGLE	[08E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B5, 0x003F };
    uint32_t const ces[9] = { 0x08E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_344)
{
    // 25B5 0061;	
    // (▵) WHITE UP-POINTING SMALL TRIANGLE	[08E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B5, 0x0061 };
    uint32_t const ces[9] = { 0x08E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_345)
{
    // 25B5 0041;	
    // (▵) WHITE UP-POINTING SMALL TRIANGLE	[08E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B5, 0x0041 };
    uint32_t const ces[9] = { 0x08E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_346)
{
    // 25B5 0062;	
    // (▵) WHITE UP-POINTING SMALL TRIANGLE	[08E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B5, 0x0062 };
    uint32_t const ces[9] = { 0x08E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_347)
{
    // 25B6 0021;	
    // (▶) BLACK RIGHT-POINTING TRIANGLE	[08E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B6, 0x0021 };
    uint32_t const ces[9] = { 0x08E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_348)
{
    // 25B6 003F;	
    // (▶) BLACK RIGHT-POINTING TRIANGLE	[08E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B6, 0x003F };
    uint32_t const ces[9] = { 0x08E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_349)
{
    // 25B6 0061;	
    // (▶) BLACK RIGHT-POINTING TRIANGLE	[08E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B6, 0x0061 };
    uint32_t const ces[9] = { 0x08E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_350)
{
    // 25B6 0041;	
    // (▶) BLACK RIGHT-POINTING TRIANGLE	[08E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B6, 0x0041 };
    uint32_t const ces[9] = { 0x08E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_351)
{
    // 25B6 0062;	
    // (▶) BLACK RIGHT-POINTING TRIANGLE	[08E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B6, 0x0062 };
    uint32_t const ces[9] = { 0x08E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_352)
{
    // 25B7 0021;	
    // (▷) WHITE RIGHT-POINTING TRIANGLE	[08E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B7, 0x0021 };
    uint32_t const ces[9] = { 0x08E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_353)
{
    // 25B7 003F;	
    // (▷) WHITE RIGHT-POINTING TRIANGLE	[08E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B7, 0x003F };
    uint32_t const ces[9] = { 0x08E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_354)
{
    // 25B7 0061;	
    // (▷) WHITE RIGHT-POINTING TRIANGLE	[08E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B7, 0x0061 };
    uint32_t const ces[9] = { 0x08E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_355)
{
    // 25B7 0041;	
    // (▷) WHITE RIGHT-POINTING TRIANGLE	[08E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B7, 0x0041 };
    uint32_t const ces[9] = { 0x08E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_356)
{
    // 25B7 0062;	
    // (▷) WHITE RIGHT-POINTING TRIANGLE	[08E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B7, 0x0062 };
    uint32_t const ces[9] = { 0x08E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_357)
{
    // 25B8 0021;	
    // (▸) BLACK RIGHT-POINTING SMALL TRIANGLE	[08E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B8, 0x0021 };
    uint32_t const ces[9] = { 0x08E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_358)
{
    // 25B8 003F;	
    // (▸) BLACK RIGHT-POINTING SMALL TRIANGLE	[08E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B8, 0x003F };
    uint32_t const ces[9] = { 0x08E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_359)
{
    // 25B8 0061;	
    // (▸) BLACK RIGHT-POINTING SMALL TRIANGLE	[08E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B8, 0x0061 };
    uint32_t const ces[9] = { 0x08E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_360)
{
    // 25B8 0041;	
    // (▸) BLACK RIGHT-POINTING SMALL TRIANGLE	[08E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B8, 0x0041 };
    uint32_t const ces[9] = { 0x08E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_361)
{
    // 25B8 0062;	
    // (▸) BLACK RIGHT-POINTING SMALL TRIANGLE	[08E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B8, 0x0062 };
    uint32_t const ces[9] = { 0x08E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_362)
{
    // 25B9 0021;	
    // (▹) WHITE RIGHT-POINTING SMALL TRIANGLE	[08E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B9, 0x0021 };
    uint32_t const ces[9] = { 0x08E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_363)
{
    // 25B9 003F;	
    // (▹) WHITE RIGHT-POINTING SMALL TRIANGLE	[08E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B9, 0x003F };
    uint32_t const ces[9] = { 0x08E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_364)
{
    // 25B9 0061;	
    // (▹) WHITE RIGHT-POINTING SMALL TRIANGLE	[08E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B9, 0x0061 };
    uint32_t const ces[9] = { 0x08E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_365)
{
    // 25B9 0041;	
    // (▹) WHITE RIGHT-POINTING SMALL TRIANGLE	[08E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25B9, 0x0041 };
    uint32_t const ces[9] = { 0x08E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_366)
{
    // 25B9 0062;	
    // (▹) WHITE RIGHT-POINTING SMALL TRIANGLE	[08E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25B9, 0x0062 };
    uint32_t const ces[9] = { 0x08E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_367)
{
    // 25BA 0021;	
    // (►) BLACK RIGHT-POINTING POINTER	[08E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BA, 0x0021 };
    uint32_t const ces[9] = { 0x08E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_368)
{
    // 25BA 003F;	
    // (►) BLACK RIGHT-POINTING POINTER	[08E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BA, 0x003F };
    uint32_t const ces[9] = { 0x08E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_369)
{
    // 25BA 0061;	
    // (►) BLACK RIGHT-POINTING POINTER	[08E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BA, 0x0061 };
    uint32_t const ces[9] = { 0x08E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_370)
{
    // 25BA 0041;	
    // (►) BLACK RIGHT-POINTING POINTER	[08E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BA, 0x0041 };
    uint32_t const ces[9] = { 0x08E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_371)
{
    // 25BA 0062;	
    // (►) BLACK RIGHT-POINTING POINTER	[08E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BA, 0x0062 };
    uint32_t const ces[9] = { 0x08E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_372)
{
    // 25BB 0021;	
    // (▻) WHITE RIGHT-POINTING POINTER	[08EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BB, 0x0021 };
    uint32_t const ces[9] = { 0x08EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_373)
{
    // 25BB 003F;	
    // (▻) WHITE RIGHT-POINTING POINTER	[08EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BB, 0x003F };
    uint32_t const ces[9] = { 0x08EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_374)
{
    // 25BB 0061;	
    // (▻) WHITE RIGHT-POINTING POINTER	[08EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BB, 0x0061 };
    uint32_t const ces[9] = { 0x08EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_375)
{
    // 25BB 0041;	
    // (▻) WHITE RIGHT-POINTING POINTER	[08EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BB, 0x0041 };
    uint32_t const ces[9] = { 0x08EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_376)
{
    // 25BB 0062;	
    // (▻) WHITE RIGHT-POINTING POINTER	[08EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BB, 0x0062 };
    uint32_t const ces[9] = { 0x08EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_377)
{
    // 25BC 0021;	
    // (▼) BLACK DOWN-POINTING TRIANGLE	[08EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BC, 0x0021 };
    uint32_t const ces[9] = { 0x08EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_378)
{
    // 25BC 003F;	
    // (▼) BLACK DOWN-POINTING TRIANGLE	[08EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BC, 0x003F };
    uint32_t const ces[9] = { 0x08EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_379)
{
    // 25BC 0061;	
    // (▼) BLACK DOWN-POINTING TRIANGLE	[08EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BC, 0x0061 };
    uint32_t const ces[9] = { 0x08EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_380)
{
    // 25BC 0041;	
    // (▼) BLACK DOWN-POINTING TRIANGLE	[08EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BC, 0x0041 };
    uint32_t const ces[9] = { 0x08EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_381)
{
    // 25BC 0062;	
    // (▼) BLACK DOWN-POINTING TRIANGLE	[08EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BC, 0x0062 };
    uint32_t const ces[9] = { 0x08EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_382)
{
    // 25BD 0021;	
    // (▽) WHITE DOWN-POINTING TRIANGLE	[08EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BD, 0x0021 };
    uint32_t const ces[9] = { 0x08EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_383)
{
    // 25BD 003F;	
    // (▽) WHITE DOWN-POINTING TRIANGLE	[08EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BD, 0x003F };
    uint32_t const ces[9] = { 0x08EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_384)
{
    // 25BD 0061;	
    // (▽) WHITE DOWN-POINTING TRIANGLE	[08EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BD, 0x0061 };
    uint32_t const ces[9] = { 0x08EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_385)
{
    // 25BD 0041;	
    // (▽) WHITE DOWN-POINTING TRIANGLE	[08EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BD, 0x0041 };
    uint32_t const ces[9] = { 0x08EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_386)
{
    // 25BD 0062;	
    // (▽) WHITE DOWN-POINTING TRIANGLE	[08EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BD, 0x0062 };
    uint32_t const ces[9] = { 0x08EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_387)
{
    // 25BE 0021;	
    // (▾) BLACK DOWN-POINTING SMALL TRIANGLE	[08ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BE, 0x0021 };
    uint32_t const ces[9] = { 0x08ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_388)
{
    // 25BE 003F;	
    // (▾) BLACK DOWN-POINTING SMALL TRIANGLE	[08ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BE, 0x003F };
    uint32_t const ces[9] = { 0x08ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_389)
{
    // 25BE 0061;	
    // (▾) BLACK DOWN-POINTING SMALL TRIANGLE	[08ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BE, 0x0061 };
    uint32_t const ces[9] = { 0x08ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_390)
{
    // 25BE 0041;	
    // (▾) BLACK DOWN-POINTING SMALL TRIANGLE	[08ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BE, 0x0041 };
    uint32_t const ces[9] = { 0x08ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_391)
{
    // 25BE 0062;	
    // (▾) BLACK DOWN-POINTING SMALL TRIANGLE	[08ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BE, 0x0062 };
    uint32_t const ces[9] = { 0x08ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_392)
{
    // 25BF 0021;	
    // (▿) WHITE DOWN-POINTING SMALL TRIANGLE	[08EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BF, 0x0021 };
    uint32_t const ces[9] = { 0x08EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_393)
{
    // 25BF 003F;	
    // (▿) WHITE DOWN-POINTING SMALL TRIANGLE	[08EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BF, 0x003F };
    uint32_t const ces[9] = { 0x08EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_394)
{
    // 25BF 0061;	
    // (▿) WHITE DOWN-POINTING SMALL TRIANGLE	[08EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BF, 0x0061 };
    uint32_t const ces[9] = { 0x08EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_395)
{
    // 25BF 0041;	
    // (▿) WHITE DOWN-POINTING SMALL TRIANGLE	[08EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25BF, 0x0041 };
    uint32_t const ces[9] = { 0x08EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_396)
{
    // 25BF 0062;	
    // (▿) WHITE DOWN-POINTING SMALL TRIANGLE	[08EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25BF, 0x0062 };
    uint32_t const ces[9] = { 0x08EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_397)
{
    // 25C0 0021;	
    // (◀) BLACK LEFT-POINTING TRIANGLE	[08EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C0, 0x0021 };
    uint32_t const ces[9] = { 0x08EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_398)
{
    // 25C0 003F;	
    // (◀) BLACK LEFT-POINTING TRIANGLE	[08EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C0, 0x003F };
    uint32_t const ces[9] = { 0x08EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_399)
{
    // 25C0 0061;	
    // (◀) BLACK LEFT-POINTING TRIANGLE	[08EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C0, 0x0061 };
    uint32_t const ces[9] = { 0x08EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_400)
{
    // 25C0 0041;	
    // (◀) BLACK LEFT-POINTING TRIANGLE	[08EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C0, 0x0041 };
    uint32_t const ces[9] = { 0x08EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_401)
{
    // 25C0 0062;	
    // (◀) BLACK LEFT-POINTING TRIANGLE	[08EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C0, 0x0062 };
    uint32_t const ces[9] = { 0x08EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_402)
{
    // 25C1 0021;	
    // (◁) WHITE LEFT-POINTING TRIANGLE	[08F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C1, 0x0021 };
    uint32_t const ces[9] = { 0x08F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_403)
{
    // 25C1 003F;	
    // (◁) WHITE LEFT-POINTING TRIANGLE	[08F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C1, 0x003F };
    uint32_t const ces[9] = { 0x08F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_404)
{
    // 25C1 0061;	
    // (◁) WHITE LEFT-POINTING TRIANGLE	[08F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C1, 0x0061 };
    uint32_t const ces[9] = { 0x08F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_405)
{
    // 25C1 0041;	
    // (◁) WHITE LEFT-POINTING TRIANGLE	[08F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C1, 0x0041 };
    uint32_t const ces[9] = { 0x08F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_406)
{
    // 25C1 0062;	
    // (◁) WHITE LEFT-POINTING TRIANGLE	[08F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C1, 0x0062 };
    uint32_t const ces[9] = { 0x08F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_407)
{
    // 25C2 0021;	
    // (◂) BLACK LEFT-POINTING SMALL TRIANGLE	[08F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C2, 0x0021 };
    uint32_t const ces[9] = { 0x08F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_408)
{
    // 25C2 003F;	
    // (◂) BLACK LEFT-POINTING SMALL TRIANGLE	[08F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C2, 0x003F };
    uint32_t const ces[9] = { 0x08F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_409)
{
    // 25C2 0061;	
    // (◂) BLACK LEFT-POINTING SMALL TRIANGLE	[08F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C2, 0x0061 };
    uint32_t const ces[9] = { 0x08F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_410)
{
    // 25C2 0041;	
    // (◂) BLACK LEFT-POINTING SMALL TRIANGLE	[08F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C2, 0x0041 };
    uint32_t const ces[9] = { 0x08F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_411)
{
    // 25C2 0062;	
    // (◂) BLACK LEFT-POINTING SMALL TRIANGLE	[08F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C2, 0x0062 };
    uint32_t const ces[9] = { 0x08F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_412)
{
    // 25C3 0021;	
    // (◃) WHITE LEFT-POINTING SMALL TRIANGLE	[08F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C3, 0x0021 };
    uint32_t const ces[9] = { 0x08F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_413)
{
    // 25C3 003F;	
    // (◃) WHITE LEFT-POINTING SMALL TRIANGLE	[08F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C3, 0x003F };
    uint32_t const ces[9] = { 0x08F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_414)
{
    // 25C3 0061;	
    // (◃) WHITE LEFT-POINTING SMALL TRIANGLE	[08F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C3, 0x0061 };
    uint32_t const ces[9] = { 0x08F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_415)
{
    // 25C3 0041;	
    // (◃) WHITE LEFT-POINTING SMALL TRIANGLE	[08F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C3, 0x0041 };
    uint32_t const ces[9] = { 0x08F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_416)
{
    // 25C3 0062;	
    // (◃) WHITE LEFT-POINTING SMALL TRIANGLE	[08F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C3, 0x0062 };
    uint32_t const ces[9] = { 0x08F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_417)
{
    // 25C4 0021;	
    // (◄) BLACK LEFT-POINTING POINTER	[08F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C4, 0x0021 };
    uint32_t const ces[9] = { 0x08F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_418)
{
    // 25C4 003F;	
    // (◄) BLACK LEFT-POINTING POINTER	[08F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C4, 0x003F };
    uint32_t const ces[9] = { 0x08F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_419)
{
    // 25C4 0061;	
    // (◄) BLACK LEFT-POINTING POINTER	[08F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C4, 0x0061 };
    uint32_t const ces[9] = { 0x08F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_420)
{
    // 25C4 0041;	
    // (◄) BLACK LEFT-POINTING POINTER	[08F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C4, 0x0041 };
    uint32_t const ces[9] = { 0x08F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_421)
{
    // 25C4 0062;	
    // (◄) BLACK LEFT-POINTING POINTER	[08F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C4, 0x0062 };
    uint32_t const ces[9] = { 0x08F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_422)
{
    // 25C5 0021;	
    // (◅) WHITE LEFT-POINTING POINTER	[08F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C5, 0x0021 };
    uint32_t const ces[9] = { 0x08F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_423)
{
    // 25C5 003F;	
    // (◅) WHITE LEFT-POINTING POINTER	[08F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C5, 0x003F };
    uint32_t const ces[9] = { 0x08F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_424)
{
    // 25C5 0061;	
    // (◅) WHITE LEFT-POINTING POINTER	[08F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C5, 0x0061 };
    uint32_t const ces[9] = { 0x08F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_425)
{
    // 25C5 0041;	
    // (◅) WHITE LEFT-POINTING POINTER	[08F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C5, 0x0041 };
    uint32_t const ces[9] = { 0x08F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_426)
{
    // 25C5 0062;	
    // (◅) WHITE LEFT-POINTING POINTER	[08F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C5, 0x0062 };
    uint32_t const ces[9] = { 0x08F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_427)
{
    // 25C6 0021;	
    // (◆) BLACK DIAMOND	[08F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C6, 0x0021 };
    uint32_t const ces[9] = { 0x08F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_428)
{
    // 25C6 003F;	
    // (◆) BLACK DIAMOND	[08F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C6, 0x003F };
    uint32_t const ces[9] = { 0x08F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_429)
{
    // 25C6 0061;	
    // (◆) BLACK DIAMOND	[08F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C6, 0x0061 };
    uint32_t const ces[9] = { 0x08F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_430)
{
    // 25C6 0041;	
    // (◆) BLACK DIAMOND	[08F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C6, 0x0041 };
    uint32_t const ces[9] = { 0x08F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_431)
{
    // 25C6 0062;	
    // (◆) BLACK DIAMOND	[08F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C6, 0x0062 };
    uint32_t const ces[9] = { 0x08F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_432)
{
    // 25C7 0021;	
    // (◇) WHITE DIAMOND	[08F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C7, 0x0021 };
    uint32_t const ces[9] = { 0x08F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_433)
{
    // 25C7 003F;	
    // (◇) WHITE DIAMOND	[08F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C7, 0x003F };
    uint32_t const ces[9] = { 0x08F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_434)
{
    // 25C7 0061;	
    // (◇) WHITE DIAMOND	[08F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C7, 0x0061 };
    uint32_t const ces[9] = { 0x08F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_435)
{
    // 25C7 0041;	
    // (◇) WHITE DIAMOND	[08F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C7, 0x0041 };
    uint32_t const ces[9] = { 0x08F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_436)
{
    // 25C7 0062;	
    // (◇) WHITE DIAMOND	[08F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C7, 0x0062 };
    uint32_t const ces[9] = { 0x08F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_437)
{
    // 25C8 0021;	
    // (◈) WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND	[08F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C8, 0x0021 };
    uint32_t const ces[9] = { 0x08F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_438)
{
    // 25C8 003F;	
    // (◈) WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND	[08F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C8, 0x003F };
    uint32_t const ces[9] = { 0x08F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_439)
{
    // 25C8 0061;	
    // (◈) WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND	[08F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C8, 0x0061 };
    uint32_t const ces[9] = { 0x08F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_440)
{
    // 25C8 0041;	
    // (◈) WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND	[08F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C8, 0x0041 };
    uint32_t const ces[9] = { 0x08F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_441)
{
    // 25C8 0062;	
    // (◈) WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND	[08F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C8, 0x0062 };
    uint32_t const ces[9] = { 0x08F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_442)
{
    // 25C9 0021;	
    // (◉) FISHEYE	[08F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C9, 0x0021 };
    uint32_t const ces[9] = { 0x08F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_443)
{
    // 25C9 003F;	
    // (◉) FISHEYE	[08F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C9, 0x003F };
    uint32_t const ces[9] = { 0x08F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_444)
{
    // 25C9 0061;	
    // (◉) FISHEYE	[08F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C9, 0x0061 };
    uint32_t const ces[9] = { 0x08F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_445)
{
    // 25C9 0041;	
    // (◉) FISHEYE	[08F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25C9, 0x0041 };
    uint32_t const ces[9] = { 0x08F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_446)
{
    // 25C9 0062;	
    // (◉) FISHEYE	[08F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25C9, 0x0062 };
    uint32_t const ces[9] = { 0x08F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_447)
{
    // 25CA 0021;	
    // (◊) LOZENGE	[08F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CA, 0x0021 };
    uint32_t const ces[9] = { 0x08F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_448)
{
    // 25CA 003F;	
    // (◊) LOZENGE	[08F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CA, 0x003F };
    uint32_t const ces[9] = { 0x08F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_449)
{
    // 25CA 0061;	
    // (◊) LOZENGE	[08F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CA, 0x0061 };
    uint32_t const ces[9] = { 0x08F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_450)
{
    // 25CA 0041;	
    // (◊) LOZENGE	[08F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CA, 0x0041 };
    uint32_t const ces[9] = { 0x08F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_451)
{
    // 25CA 0062;	
    // (◊) LOZENGE	[08F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CA, 0x0062 };
    uint32_t const ces[9] = { 0x08F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_452)
{
    // 25CB 0021;	
    // (○) WHITE CIRCLE	[08FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CB, 0x0021 };
    uint32_t const ces[9] = { 0x08FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_453)
{
    // FFEE 0021;	
    // (￮) HALFWIDTH WHITE CIRCLE	[08FA 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEE, 0x0021 };
    uint32_t const ces[9] = { 0x08FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_454)
{
    // 25CB 003F;	
    // (○) WHITE CIRCLE	[08FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CB, 0x003F };
    uint32_t const ces[9] = { 0x08FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_455)
{
    // FFEE 003F;	
    // (￮) HALFWIDTH WHITE CIRCLE	[08FA 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEE, 0x003F };
    uint32_t const ces[9] = { 0x08FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_456)
{
    // 25CB 0061;	
    // (○) WHITE CIRCLE	[08FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CB, 0x0061 };
    uint32_t const ces[9] = { 0x08FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_457)
{
    // 25CB 0041;	
    // (○) WHITE CIRCLE	[08FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CB, 0x0041 };
    uint32_t const ces[9] = { 0x08FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_458)
{
    // FFEE 0061;	
    // (￮) HALFWIDTH WHITE CIRCLE	[08FA 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEE, 0x0061 };
    uint32_t const ces[9] = { 0x08FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_459)
{
    // FFEE 0041;	
    // (￮) HALFWIDTH WHITE CIRCLE	[08FA 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFEE, 0x0041 };
    uint32_t const ces[9] = { 0x08FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_460)
{
    // 25CB 0062;	
    // (○) WHITE CIRCLE	[08FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CB, 0x0062 };
    uint32_t const ces[9] = { 0x08FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_461)
{
    // FFEE 0062;	
    // (￮) HALFWIDTH WHITE CIRCLE	[08FA 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEE, 0x0062 };
    uint32_t const ces[9] = { 0x08FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_462)
{
    // 25CC 0021;	
    // (◌) DOTTED CIRCLE	[08FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CC, 0x0021 };
    uint32_t const ces[9] = { 0x08FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_463)
{
    // 25CC 003F;	
    // (◌) DOTTED CIRCLE	[08FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CC, 0x003F };
    uint32_t const ces[9] = { 0x08FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_464)
{
    // 25CC 0061;	
    // (◌) DOTTED CIRCLE	[08FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CC, 0x0061 };
    uint32_t const ces[9] = { 0x08FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_465)
{
    // 25CC 0041;	
    // (◌) DOTTED CIRCLE	[08FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CC, 0x0041 };
    uint32_t const ces[9] = { 0x08FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_466)
{
    // 25CC 0062;	
    // (◌) DOTTED CIRCLE	[08FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CC, 0x0062 };
    uint32_t const ces[9] = { 0x08FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_467)
{
    // 25CD 0021;	
    // (◍) CIRCLE WITH VERTICAL FILL	[08FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CD, 0x0021 };
    uint32_t const ces[9] = { 0x08FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_468)
{
    // 25CD 003F;	
    // (◍) CIRCLE WITH VERTICAL FILL	[08FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CD, 0x003F };
    uint32_t const ces[9] = { 0x08FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_469)
{
    // 25CD 0061;	
    // (◍) CIRCLE WITH VERTICAL FILL	[08FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CD, 0x0061 };
    uint32_t const ces[9] = { 0x08FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_470)
{
    // 25CD 0041;	
    // (◍) CIRCLE WITH VERTICAL FILL	[08FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CD, 0x0041 };
    uint32_t const ces[9] = { 0x08FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_471)
{
    // 25CD 0062;	
    // (◍) CIRCLE WITH VERTICAL FILL	[08FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CD, 0x0062 };
    uint32_t const ces[9] = { 0x08FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_472)
{
    // 25CE 0021;	
    // (◎) BULLSEYE	[08FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CE, 0x0021 };
    uint32_t const ces[9] = { 0x08FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_473)
{
    // 25CE 003F;	
    // (◎) BULLSEYE	[08FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CE, 0x003F };
    uint32_t const ces[9] = { 0x08FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_474)
{
    // 25CE 0061;	
    // (◎) BULLSEYE	[08FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CE, 0x0061 };
    uint32_t const ces[9] = { 0x08FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_475)
{
    // 25CE 0041;	
    // (◎) BULLSEYE	[08FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CE, 0x0041 };
    uint32_t const ces[9] = { 0x08FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_476)
{
    // 25CE 0062;	
    // (◎) BULLSEYE	[08FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CE, 0x0062 };
    uint32_t const ces[9] = { 0x08FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_477)
{
    // 25CF 0021;	
    // (●) BLACK CIRCLE	[08FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CF, 0x0021 };
    uint32_t const ces[9] = { 0x08FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_478)
{
    // 25CF 003F;	
    // (●) BLACK CIRCLE	[08FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CF, 0x003F };
    uint32_t const ces[9] = { 0x08FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_479)
{
    // 25CF 0061;	
    // (●) BLACK CIRCLE	[08FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CF, 0x0061 };
    uint32_t const ces[9] = { 0x08FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_480)
{
    // 25CF 0041;	
    // (●) BLACK CIRCLE	[08FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25CF, 0x0041 };
    uint32_t const ces[9] = { 0x08FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_481)
{
    // 25CF 0062;	
    // (●) BLACK CIRCLE	[08FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25CF, 0x0062 };
    uint32_t const ces[9] = { 0x08FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_482)
{
    // 25D0 0021;	
    // (◐) CIRCLE WITH LEFT HALF BLACK	[08FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D0, 0x0021 };
    uint32_t const ces[9] = { 0x08FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_483)
{
    // 25D0 003F;	
    // (◐) CIRCLE WITH LEFT HALF BLACK	[08FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D0, 0x003F };
    uint32_t const ces[9] = { 0x08FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_484)
{
    // 25D0 0061;	
    // (◐) CIRCLE WITH LEFT HALF BLACK	[08FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D0, 0x0061 };
    uint32_t const ces[9] = { 0x08FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_485)
{
    // 25D0 0041;	
    // (◐) CIRCLE WITH LEFT HALF BLACK	[08FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D0, 0x0041 };
    uint32_t const ces[9] = { 0x08FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_486)
{
    // 25D0 0062;	
    // (◐) CIRCLE WITH LEFT HALF BLACK	[08FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D0, 0x0062 };
    uint32_t const ces[9] = { 0x08FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_487)
{
    // 25D1 0021;	
    // (◑) CIRCLE WITH RIGHT HALF BLACK	[0900 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D1, 0x0021 };
    uint32_t const ces[9] = { 0x0900, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_488)
{
    // 25D1 003F;	
    // (◑) CIRCLE WITH RIGHT HALF BLACK	[0900 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D1, 0x003F };
    uint32_t const ces[9] = { 0x0900, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_489)
{
    // 25D1 0061;	
    // (◑) CIRCLE WITH RIGHT HALF BLACK	[0900 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D1, 0x0061 };
    uint32_t const ces[9] = { 0x0900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_490)
{
    // 25D1 0041;	
    // (◑) CIRCLE WITH RIGHT HALF BLACK	[0900 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D1, 0x0041 };
    uint32_t const ces[9] = { 0x0900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_491)
{
    // 25D1 0062;	
    // (◑) CIRCLE WITH RIGHT HALF BLACK	[0900 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D1, 0x0062 };
    uint32_t const ces[9] = { 0x0900, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_492)
{
    // 25D2 0021;	
    // (◒) CIRCLE WITH LOWER HALF BLACK	[0901 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D2, 0x0021 };
    uint32_t const ces[9] = { 0x0901, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_493)
{
    // 25D2 003F;	
    // (◒) CIRCLE WITH LOWER HALF BLACK	[0901 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D2, 0x003F };
    uint32_t const ces[9] = { 0x0901, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_494)
{
    // 25D2 0061;	
    // (◒) CIRCLE WITH LOWER HALF BLACK	[0901 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D2, 0x0061 };
    uint32_t const ces[9] = { 0x0901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_495)
{
    // 25D2 0041;	
    // (◒) CIRCLE WITH LOWER HALF BLACK	[0901 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x25D2, 0x0041 };
    uint32_t const ces[9] = { 0x0901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_496)
{
    // 25D2 0062;	
    // (◒) CIRCLE WITH LOWER HALF BLACK	[0901 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D2, 0x0062 };
    uint32_t const ces[9] = { 0x0901, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_497)
{
    // 25D3 0021;	
    // (◓) CIRCLE WITH UPPER HALF BLACK	[0902 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D3, 0x0021 };
    uint32_t const ces[9] = { 0x0902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_498)
{
    // 25D3 003F;	
    // (◓) CIRCLE WITH UPPER HALF BLACK	[0902 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D3, 0x003F };
    uint32_t const ces[9] = { 0x0902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_029_499)
{
    // 25D3 0061;	
    // (◓) CIRCLE WITH UPPER HALF BLACK	[0902 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x25D3, 0x0061 };
    uint32_t const ces[9] = { 0x0902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

