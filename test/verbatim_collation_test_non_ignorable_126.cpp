// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_126_000)
{
    // 021D 0021;	
    // (ȝ) LATIN SMALL LETTER YOGH	[1F83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x021D, 0x0021 };
    uint32_t const ces[9] = { 0x1F83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_001)
{
    // 021C 0021;	
    // (Ȝ) LATIN CAPITAL LETTER YOGH	[1F83 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x021C, 0x0021 };
    uint32_t const ces[9] = { 0x1F83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_002)
{
    // 021D 003F;	
    // (ȝ) LATIN SMALL LETTER YOGH	[1F83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x021D, 0x003F };
    uint32_t const ces[9] = { 0x1F83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_003)
{
    // 021C 003F;	
    // (Ȝ) LATIN CAPITAL LETTER YOGH	[1F83 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x021C, 0x003F };
    uint32_t const ces[9] = { 0x1F83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_004)
{
    // 021D 0061;	
    // (ȝ) LATIN SMALL LETTER YOGH	[1F83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x021D, 0x0061 };
    uint32_t const ces[9] = { 0x1F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_005)
{
    // 021D 0041;	
    // (ȝ) LATIN SMALL LETTER YOGH	[1F83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x021D, 0x0041 };
    uint32_t const ces[9] = { 0x1F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_006)
{
    // 021C 0061;	
    // (Ȝ) LATIN CAPITAL LETTER YOGH	[1F83 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x021C, 0x0061 };
    uint32_t const ces[9] = { 0x1F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_007)
{
    // 021C 0041;	
    // (Ȝ) LATIN CAPITAL LETTER YOGH	[1F83 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x021C, 0x0041 };
    uint32_t const ces[9] = { 0x1F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_008)
{
    // 021D 0062;	
    // (ȝ) LATIN SMALL LETTER YOGH	[1F83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x021D, 0x0062 };
    uint32_t const ces[9] = { 0x1F83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_009)
{
    // 021C 0062;	
    // (Ȝ) LATIN CAPITAL LETTER YOGH	[1F83 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x021C, 0x0062 };
    uint32_t const ces[9] = { 0x1F83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_010)
{
    // 007A 0301 0334;	
    // (ź) LATIN SMALL LETTER Z, COMBINING ACUTE ACCENT	[1F87 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_011)
{
    // 007A 0334 0301;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_012)
{
    // 007A 0334 0341;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_013)
{
    // 017A 0334;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017A, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_014)
{
    // 005A 0301 0334;	
    // (Ź) LATIN CAPITAL LETTER Z, COMBINING ACUTE ACCENT	[1F87 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_015)
{
    // 005A 0334 0301;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_016)
{
    // 005A 0334 0341;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_017)
{
    // 0179 0334;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0179, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_018)
{
    // 007A 0302 0334;	
    // (ẑ) LATIN SMALL LETTER Z, COMBINING CIRCUMFLEX ACCENT	[1F87 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_019)
{
    // 007A 0334 0302;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_020)
{
    // 1E91 0334;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E91, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_021)
{
    // 005A 0302 0334;	
    // (Ẑ) LATIN CAPITAL LETTER Z, COMBINING CIRCUMFLEX ACCENT	[1F87 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_022)
{
    // 005A 0334 0302;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_023)
{
    // 1E90 0334;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E90, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_024)
{
    // 007A 030C 0334;	
    // (ž) LATIN SMALL LETTER Z, COMBINING CARON	[1F87 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_025)
{
    // 007A 0334 030C;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_026)
{
    // 017E 0334;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017E, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_027)
{
    // 005A 030C 0334;	
    // (Ž) LATIN CAPITAL LETTER Z, COMBINING CARON	[1F87 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_028)
{
    // 005A 0334 030C;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_029)
{
    // 017D 0334;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017D, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_030)
{
    // 007A 0307 0334;	
    // (ż) LATIN SMALL LETTER Z, COMBINING DOT ABOVE	[1F87 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_031)
{
    // 007A 0334 0307;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_032)
{
    // 017C 0334;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017C, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_033)
{
    // 005A 0307 0334;	
    // (Ż) LATIN CAPITAL LETTER Z, COMBINING DOT ABOVE	[1F87 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_034)
{
    // 005A 0334 0307;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_035)
{
    // 017B 0334;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017B, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_036)
{
    // 007A 0323 0334;	
    // (ẓ) LATIN SMALL LETTER Z, COMBINING DOT BELOW	[1F87 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_037)
{
    // 007A 0334 0323;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_038)
{
    // 1E93 0334;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E93, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_039)
{
    // 005A 0323 0334;	
    // (Ẓ) LATIN CAPITAL LETTER Z, COMBINING DOT BELOW	[1F87 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_040)
{
    // 005A 0334 0323;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_041)
{
    // 1E92 0334;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E92, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_042)
{
    // 007A 0331 0334;	
    // (ẕ) LATIN SMALL LETTER Z, COMBINING MACRON BELOW	[1F87 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_043)
{
    // 007A 0334 0331;	
    // (z̴) LATIN SMALL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x007A, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_044)
{
    // 1E95 0334;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 | 0020 004A 0049 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E95, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_045)
{
    // 005A 0331 0334;	
    // (Ẕ) LATIN CAPITAL LETTER Z, COMBINING MACRON BELOW	[1F87 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0331, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_046)
{
    // 005A 0334 0331;	
    // (Z̴) LATIN CAPITAL LETTER Z, COMBINING TILDE OVERLAY	[1F87 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x005A, 0x0334, 0x0331 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_047)
{
    // 1E94 0334;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 | 0020 004A 0049 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E94, 0x0334 };
    uint32_t const ces[10] = { 0x1F87, 0x0000, 0x0020, 0x004A, 0x0049, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_048)
{
    // 0334 1DE6;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DE6 };
    uint32_t const ces[8] = { 0x1F87, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_049)
{
    // 1DE6 0334;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DE6, 0x0334 };
    uint32_t const ces[8] = { 0x1F87, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_050)
{
    // 007A 0021;	
    // (z) LATIN SMALL LETTER Z	[1F87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007A, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_051)
{
    // FF5A 0021;	
    // (ｚ) FULLWIDTH LATIN SMALL LETTER Z	[1F87 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5A, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_052)
{
    // 1DE6 0021;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE6, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_053)
{
    // 1D433 0021;	
    // (𝐳) MATHEMATICAL BOLD SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D433, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_054)
{
    // 1D467 0021;	
    // (𝑧) MATHEMATICAL ITALIC SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D467, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_055)
{
    // 1D49B 0021;	
    // (𝒛) MATHEMATICAL BOLD ITALIC SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49B, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_056)
{
    // 1D4CF 0021;	
    // (𝓏) MATHEMATICAL SCRIPT SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CF, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_057)
{
    // 1D503 0021;	
    // (𝔃) MATHEMATICAL BOLD SCRIPT SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D503, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_058)
{
    // 1D537 0021;	
    // (𝔷) MATHEMATICAL FRAKTUR SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D537, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_059)
{
    // 1D56B 0021;	
    // (𝕫) MATHEMATICAL DOUBLE-STRUCK SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56B, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_060)
{
    // 1D59F 0021;	
    // (𝖟) MATHEMATICAL BOLD FRAKTUR SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59F, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_061)
{
    // 1D5D3 0021;	
    // (𝗓) MATHEMATICAL SANS-SERIF SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D3, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_062)
{
    // 1D607 0021;	
    // (𝘇) MATHEMATICAL SANS-SERIF BOLD SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D607, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_063)
{
    // 1D63B 0021;	
    // (𝘻) MATHEMATICAL SANS-SERIF ITALIC SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63B, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_064)
{
    // 1D66F 0021;	
    // (𝙯) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66F, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_065)
{
    // 1D6A3 0021;	
    // (𝚣) MATHEMATICAL MONOSPACE SMALL Z	[1F87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A3, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_066)
{
    // 24E9 0021;	
    // (ⓩ) CIRCLED LATIN SMALL LETTER Z	[1F87 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E9, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_067)
{
    // 005A 0021;	
    // (Z) LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x005A, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_068)
{
    // FF3A 0021;	
    // (Ｚ) FULLWIDTH LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF3A, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_069)
{
    // 2124 0021;	
    // (ℤ) DOUBLE-STRUCK CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2124, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_070)
{
    // 2128 0021;	
    // (ℨ) BLACK-LETTER CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2128, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_071)
{
    // 1D419 0021;	
    // (𝐙) MATHEMATICAL BOLD CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D419, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_072)
{
    // 1D44D 0021;	
    // (𝑍) MATHEMATICAL ITALIC CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44D, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_073)
{
    // 1D481 0021;	
    // (𝒁) MATHEMATICAL BOLD ITALIC CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D481, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_074)
{
    // 1D4B5 0021;	
    // (𝒵) MATHEMATICAL SCRIPT CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B5, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_075)
{
    // 1D4E9 0021;	
    // (𝓩) MATHEMATICAL BOLD SCRIPT CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E9, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_076)
{
    // 1D585 0021;	
    // (𝖅) MATHEMATICAL BOLD FRAKTUR CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D585, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_077)
{
    // 1D5B9 0021;	
    // (𝖹) MATHEMATICAL SANS-SERIF CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B9, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_078)
{
    // 1D5ED 0021;	
    // (𝗭) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5ED, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_079)
{
    // 1D621 0021;	
    // (𝘡) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D621, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_080)
{
    // 1D655 0021;	
    // (𝙕) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D655, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_081)
{
    // 1D689 0021;	
    // (𝚉) MATHEMATICAL MONOSPACE CAPITAL Z	[1F87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D689, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_082)
{
    // 24CF 0021;	
    // (Ⓩ) CIRCLED LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CF, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_083)
{
    // 1F169 0021;	
    // (🅩) NEGATIVE CIRCLED LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F169, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_084)
{
    // 1DBB 0021;	
    // (ᶻ) MODIFIER LETTER SMALL Z	[1F87 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBB, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_085)
{
    // 1F149 0021;	
    // (🅉) SQUARED LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F149, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_086)
{
    // 1F189 0021;	
    // (🆉) NEGATIVE SQUARED LATIN CAPITAL LETTER Z	[1F87 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F189, 0x0021 };
    uint32_t const ces[9] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_087)
{
    // 017A 0021;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017A, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_088)
{
    // 0179 0021;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0179, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_089)
{
    // 1E91 0021;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E91, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_090)
{
    // 1E90 0021;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E90, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_091)
{
    // 017E 0021;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017E, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_092)
{
    // 017D 0021;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017D, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_093)
{
    // 017C 0021;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017C, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_094)
{
    // 017B 0021;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017B, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_095)
{
    // 1E93 0021;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E93, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_096)
{
    // 1E92 0021;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E92, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_097)
{
    // 1E95 0021;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 0261 | 0020 0049 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E95, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_098)
{
    // 1E94 0021;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 0261 | 0020 0049 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E94, 0x0021 };
    uint32_t const ces[11] = { 0x1F87, 0x0261, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_099)
{
    // 007A 003F;	
    // (z) LATIN SMALL LETTER Z	[1F87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007A, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_100)
{
    // FF5A 003F;	
    // (ｚ) FULLWIDTH LATIN SMALL LETTER Z	[1F87 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5A, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_101)
{
    // 1DE6 003F;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE6, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_102)
{
    // 1D433 003F;	
    // (𝐳) MATHEMATICAL BOLD SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D433, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_103)
{
    // 1D467 003F;	
    // (𝑧) MATHEMATICAL ITALIC SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D467, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_104)
{
    // 1D49B 003F;	
    // (𝒛) MATHEMATICAL BOLD ITALIC SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49B, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_105)
{
    // 1D4CF 003F;	
    // (𝓏) MATHEMATICAL SCRIPT SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CF, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_106)
{
    // 1D503 003F;	
    // (𝔃) MATHEMATICAL BOLD SCRIPT SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D503, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_107)
{
    // 1D537 003F;	
    // (𝔷) MATHEMATICAL FRAKTUR SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D537, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_108)
{
    // 1D56B 003F;	
    // (𝕫) MATHEMATICAL DOUBLE-STRUCK SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56B, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_109)
{
    // 1D59F 003F;	
    // (𝖟) MATHEMATICAL BOLD FRAKTUR SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59F, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_110)
{
    // 1D5D3 003F;	
    // (𝗓) MATHEMATICAL SANS-SERIF SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D3, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_111)
{
    // 1D607 003F;	
    // (𝘇) MATHEMATICAL SANS-SERIF BOLD SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D607, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_112)
{
    // 1D63B 003F;	
    // (𝘻) MATHEMATICAL SANS-SERIF ITALIC SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63B, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_113)
{
    // 1D66F 003F;	
    // (𝙯) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66F, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_114)
{
    // 1D6A3 003F;	
    // (𝚣) MATHEMATICAL MONOSPACE SMALL Z	[1F87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A3, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_115)
{
    // 24E9 003F;	
    // (ⓩ) CIRCLED LATIN SMALL LETTER Z	[1F87 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E9, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_116)
{
    // 005A 003F;	
    // (Z) LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x005A, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_117)
{
    // FF3A 003F;	
    // (Ｚ) FULLWIDTH LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF3A, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_118)
{
    // 2124 003F;	
    // (ℤ) DOUBLE-STRUCK CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2124, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_119)
{
    // 2128 003F;	
    // (ℨ) BLACK-LETTER CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2128, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_120)
{
    // 1D419 003F;	
    // (𝐙) MATHEMATICAL BOLD CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D419, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_121)
{
    // 1D44D 003F;	
    // (𝑍) MATHEMATICAL ITALIC CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44D, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_122)
{
    // 1D481 003F;	
    // (𝒁) MATHEMATICAL BOLD ITALIC CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D481, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_123)
{
    // 1D4B5 003F;	
    // (𝒵) MATHEMATICAL SCRIPT CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B5, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_124)
{
    // 1D4E9 003F;	
    // (𝓩) MATHEMATICAL BOLD SCRIPT CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E9, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_125)
{
    // 1D585 003F;	
    // (𝖅) MATHEMATICAL BOLD FRAKTUR CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D585, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_126)
{
    // 1D5B9 003F;	
    // (𝖹) MATHEMATICAL SANS-SERIF CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B9, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_127)
{
    // 1D5ED 003F;	
    // (𝗭) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5ED, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_128)
{
    // 1D621 003F;	
    // (𝘡) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D621, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_129)
{
    // 1D655 003F;	
    // (𝙕) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D655, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_130)
{
    // 1D689 003F;	
    // (𝚉) MATHEMATICAL MONOSPACE CAPITAL Z	[1F87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D689, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_131)
{
    // 24CF 003F;	
    // (Ⓩ) CIRCLED LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CF, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_132)
{
    // 1F169 003F;	
    // (🅩) NEGATIVE CIRCLED LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F169, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_133)
{
    // 1DBB 003F;	
    // (ᶻ) MODIFIER LETTER SMALL Z	[1F87 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBB, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_134)
{
    // 1F149 003F;	
    // (🅉) SQUARED LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F149, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_135)
{
    // 1F189 003F;	
    // (🆉) NEGATIVE SQUARED LATIN CAPITAL LETTER Z	[1F87 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F189, 0x003F };
    uint32_t const ces[9] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_136)
{
    // 017A 003F;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017A, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_137)
{
    // 0179 003F;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0179, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_138)
{
    // 1E91 003F;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E91, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_139)
{
    // 1E90 003F;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E90, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_140)
{
    // 017E 003F;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017E, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_141)
{
    // 017D 003F;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017D, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_142)
{
    // 017C 003F;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017C, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_143)
{
    // 017B 003F;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017B, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_144)
{
    // 1E93 003F;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E93, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_145)
{
    // 1E92 003F;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E92, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_146)
{
    // 1E95 003F;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 0267 | 0020 0049 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E95, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_147)
{
    // 1E94 003F;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 0267 | 0020 0049 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E94, 0x003F };
    uint32_t const ces[11] = { 0x1F87, 0x0267, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_148)
{
    // 007A 0061;	
    // (z) LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007A, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_149)
{
    // 007A 0041;	
    // (z) LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x007A, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_150)
{
    // FF5A 0061;	
    // (ｚ) FULLWIDTH LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5A, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_151)
{
    // FF5A 0041;	
    // (ｚ) FULLWIDTH LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5A, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_152)
{
    // 1DE6 0061;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE6, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_153)
{
    // 1DE6 0041;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DE6, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_154)
{
    // 1D433 0061;	
    // (𝐳) MATHEMATICAL BOLD SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D433, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_155)
{
    // 1D467 0061;	
    // (𝑧) MATHEMATICAL ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D467, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_156)
{
    // 1D49B 0061;	
    // (𝒛) MATHEMATICAL BOLD ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49B, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_157)
{
    // 1D4CF 0061;	
    // (𝓏) MATHEMATICAL SCRIPT SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CF, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_158)
{
    // 1D503 0061;	
    // (𝔃) MATHEMATICAL BOLD SCRIPT SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D503, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_159)
{
    // 1D537 0061;	
    // (𝔷) MATHEMATICAL FRAKTUR SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D537, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_160)
{
    // 1D56B 0061;	
    // (𝕫) MATHEMATICAL DOUBLE-STRUCK SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56B, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_161)
{
    // 1D59F 0061;	
    // (𝖟) MATHEMATICAL BOLD FRAKTUR SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59F, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_162)
{
    // 1D5D3 0061;	
    // (𝗓) MATHEMATICAL SANS-SERIF SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D3, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_163)
{
    // 1D607 0061;	
    // (𝘇) MATHEMATICAL SANS-SERIF BOLD SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D607, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_164)
{
    // 1D63B 0061;	
    // (𝘻) MATHEMATICAL SANS-SERIF ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63B, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_165)
{
    // 1D66F 0061;	
    // (𝙯) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66F, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_166)
{
    // 1D6A3 0061;	
    // (𝚣) MATHEMATICAL MONOSPACE SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A3, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_167)
{
    // 1D433 0041;	
    // (𝐳) MATHEMATICAL BOLD SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D433, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_168)
{
    // 1D467 0041;	
    // (𝑧) MATHEMATICAL ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D467, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_169)
{
    // 1D49B 0041;	
    // (𝒛) MATHEMATICAL BOLD ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D49B, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_170)
{
    // 1D4CF 0041;	
    // (𝓏) MATHEMATICAL SCRIPT SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4CF, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_171)
{
    // 1D503 0041;	
    // (𝔃) MATHEMATICAL BOLD SCRIPT SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D503, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_172)
{
    // 1D537 0041;	
    // (𝔷) MATHEMATICAL FRAKTUR SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D537, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_173)
{
    // 1D56B 0041;	
    // (𝕫) MATHEMATICAL DOUBLE-STRUCK SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D56B, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_174)
{
    // 1D59F 0041;	
    // (𝖟) MATHEMATICAL BOLD FRAKTUR SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D59F, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_175)
{
    // 1D5D3 0041;	
    // (𝗓) MATHEMATICAL SANS-SERIF SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5D3, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_176)
{
    // 1D607 0041;	
    // (𝘇) MATHEMATICAL SANS-SERIF BOLD SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D607, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_177)
{
    // 1D63B 0041;	
    // (𝘻) MATHEMATICAL SANS-SERIF ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D63B, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_178)
{
    // 1D66F 0041;	
    // (𝙯) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D66F, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_179)
{
    // 1D6A3 0041;	
    // (𝚣) MATHEMATICAL MONOSPACE SMALL Z	[1F87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6A3, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_180)
{
    // 24E9 0061;	
    // (ⓩ) CIRCLED LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E9, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_181)
{
    // 24E9 0041;	
    // (ⓩ) CIRCLED LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24E9, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_182)
{
    // 005A 0061;	
    // (Z) LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x005A, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_183)
{
    // 005A 0041;	
    // (Z) LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x005A, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_184)
{
    // FF3A 0061;	
    // (Ｚ) FULLWIDTH LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF3A, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_185)
{
    // FF3A 0041;	
    // (Ｚ) FULLWIDTH LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF3A, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_186)
{
    // 2124 0061;	
    // (ℤ) DOUBLE-STRUCK CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2124, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_187)
{
    // 2128 0061;	
    // (ℨ) BLACK-LETTER CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2128, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_188)
{
    // 1D419 0061;	
    // (𝐙) MATHEMATICAL BOLD CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D419, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_189)
{
    // 1D44D 0061;	
    // (𝑍) MATHEMATICAL ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44D, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_190)
{
    // 1D481 0061;	
    // (𝒁) MATHEMATICAL BOLD ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D481, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_191)
{
    // 1D4B5 0061;	
    // (𝒵) MATHEMATICAL SCRIPT CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B5, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_192)
{
    // 1D4E9 0061;	
    // (𝓩) MATHEMATICAL BOLD SCRIPT CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E9, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_193)
{
    // 1D585 0061;	
    // (𝖅) MATHEMATICAL BOLD FRAKTUR CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D585, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_194)
{
    // 1D5B9 0061;	
    // (𝖹) MATHEMATICAL SANS-SERIF CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B9, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_195)
{
    // 1D5ED 0061;	
    // (𝗭) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5ED, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_196)
{
    // 1D621 0061;	
    // (𝘡) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D621, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_197)
{
    // 1D655 0061;	
    // (𝙕) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D655, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_198)
{
    // 1D689 0061;	
    // (𝚉) MATHEMATICAL MONOSPACE CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D689, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_199)
{
    // 2124 0041;	
    // (ℤ) DOUBLE-STRUCK CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2124, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_200)
{
    // 2128 0041;	
    // (ℨ) BLACK-LETTER CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2128, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_201)
{
    // 1D419 0041;	
    // (𝐙) MATHEMATICAL BOLD CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D419, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_202)
{
    // 1D44D 0041;	
    // (𝑍) MATHEMATICAL ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D44D, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_203)
{
    // 1D481 0041;	
    // (𝒁) MATHEMATICAL BOLD ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D481, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_204)
{
    // 1D4B5 0041;	
    // (𝒵) MATHEMATICAL SCRIPT CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4B5, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_205)
{
    // 1D4E9 0041;	
    // (𝓩) MATHEMATICAL BOLD SCRIPT CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4E9, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_206)
{
    // 1D585 0041;	
    // (𝖅) MATHEMATICAL BOLD FRAKTUR CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D585, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_207)
{
    // 1D5B9 0041;	
    // (𝖹) MATHEMATICAL SANS-SERIF CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5B9, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_208)
{
    // 1D5ED 0041;	
    // (𝗭) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5ED, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_209)
{
    // 1D621 0041;	
    // (𝘡) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D621, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_210)
{
    // 1D655 0041;	
    // (𝙕) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D655, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_211)
{
    // 1D689 0041;	
    // (𝚉) MATHEMATICAL MONOSPACE CAPITAL Z	[1F87 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D689, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_212)
{
    // 24CF 0061;	
    // (Ⓩ) CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CF, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_213)
{
    // 1F169 0061;	
    // (🅩) NEGATIVE CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F169, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_214)
{
    // 24CF 0041;	
    // (Ⓩ) CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24CF, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_215)
{
    // 1F169 0041;	
    // (🅩) NEGATIVE CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F169, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_216)
{
    // 1DBB 0061;	
    // (ᶻ) MODIFIER LETTER SMALL Z	[1F87 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBB, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_217)
{
    // 1DBB 0041;	
    // (ᶻ) MODIFIER LETTER SMALL Z	[1F87 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DBB, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_218)
{
    // 1F149 0061;	
    // (🅉) SQUARED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F149, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_219)
{
    // 1F189 0061;	
    // (🆉) NEGATIVE SQUARED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F189, 0x0061 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_220)
{
    // 1F149 0041;	
    // (🅉) SQUARED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F149, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_221)
{
    // 1F189 0041;	
    // (🆉) NEGATIVE SQUARED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F189, 0x0041 };
    uint32_t const ces[9] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_222)
{
    // 017A 0061;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017A, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_223)
{
    // 017A 0041;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x017A, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_224)
{
    // 0179 0061;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0179, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_225)
{
    // 0179 0041;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0179, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_226)
{
    // 1E91 0061;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E91, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_227)
{
    // 1E91 0041;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E91, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_228)
{
    // 1E90 0061;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E90, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_229)
{
    // 1E90 0041;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E90, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_230)
{
    // 017E 0061;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017E, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_231)
{
    // 017E 0041;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x017E, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_232)
{
    // 017D 0061;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017D, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_233)
{
    // 017D 0041;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x017D, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_234)
{
    // 017C 0061;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017C, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_235)
{
    // 017C 0041;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x017C, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_236)
{
    // 017B 0061;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017B, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_237)
{
    // 017B 0041;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x017B, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_238)
{
    // 1E93 0061;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E93, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_239)
{
    // 1E93 0041;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E93, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_240)
{
    // 1E92 0061;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E92, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_241)
{
    // 1E92 0041;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E92, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_242)
{
    // 1E95 0061;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 1CAD | 0020 0049 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E95, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_243)
{
    // 1E95 0041;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 1CAD | 0020 0049 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E95, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_244)
{
    // 1E94 0061;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 1CAD | 0020 0049 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E94, 0x0061 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_245)
{
    // 1E94 0041;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 1CAD | 0020 0049 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E94, 0x0041 };
    uint32_t const ces[11] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_246)
{
    // 007A 0062;	
    // (z) LATIN SMALL LETTER Z	[1F87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007A, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_247)
{
    // FF5A 0062;	
    // (ｚ) FULLWIDTH LATIN SMALL LETTER Z	[1F87 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5A, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_248)
{
    // 1DE6 0062;	
    // (ᷦ) COMBINING LATIN SMALL LETTER Z	[1F87 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DE6, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_249)
{
    // 1D433 0062;	
    // (𝐳) MATHEMATICAL BOLD SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D433, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_250)
{
    // 1D467 0062;	
    // (𝑧) MATHEMATICAL ITALIC SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D467, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_251)
{
    // 1D49B 0062;	
    // (𝒛) MATHEMATICAL BOLD ITALIC SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49B, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_252)
{
    // 1D4CF 0062;	
    // (𝓏) MATHEMATICAL SCRIPT SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CF, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_253)
{
    // 1D503 0062;	
    // (𝔃) MATHEMATICAL BOLD SCRIPT SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D503, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_254)
{
    // 1D537 0062;	
    // (𝔷) MATHEMATICAL FRAKTUR SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D537, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_255)
{
    // 1D56B 0062;	
    // (𝕫) MATHEMATICAL DOUBLE-STRUCK SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56B, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_256)
{
    // 1D59F 0062;	
    // (𝖟) MATHEMATICAL BOLD FRAKTUR SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59F, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_257)
{
    // 1D5D3 0062;	
    // (𝗓) MATHEMATICAL SANS-SERIF SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D3, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_258)
{
    // 1D607 0062;	
    // (𝘇) MATHEMATICAL SANS-SERIF BOLD SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D607, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_259)
{
    // 1D63B 0062;	
    // (𝘻) MATHEMATICAL SANS-SERIF ITALIC SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63B, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_260)
{
    // 1D66F 0062;	
    // (𝙯) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66F, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_261)
{
    // 1D6A3 0062;	
    // (𝚣) MATHEMATICAL MONOSPACE SMALL Z	[1F87 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A3, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_262)
{
    // 24E9 0062;	
    // (ⓩ) CIRCLED LATIN SMALL LETTER Z	[1F87 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E9, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_263)
{
    // 005A 0062;	
    // (Z) LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x005A, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_264)
{
    // FF3A 0062;	
    // (Ｚ) FULLWIDTH LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF3A, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_265)
{
    // 2124 0062;	
    // (ℤ) DOUBLE-STRUCK CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2124, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_266)
{
    // 2128 0062;	
    // (ℨ) BLACK-LETTER CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2128, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_267)
{
    // 1D419 0062;	
    // (𝐙) MATHEMATICAL BOLD CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D419, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_268)
{
    // 1D44D 0062;	
    // (𝑍) MATHEMATICAL ITALIC CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44D, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_269)
{
    // 1D481 0062;	
    // (𝒁) MATHEMATICAL BOLD ITALIC CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D481, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_270)
{
    // 1D4B5 0062;	
    // (𝒵) MATHEMATICAL SCRIPT CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B5, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_271)
{
    // 1D4E9 0062;	
    // (𝓩) MATHEMATICAL BOLD SCRIPT CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E9, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_272)
{
    // 1D585 0062;	
    // (𝖅) MATHEMATICAL BOLD FRAKTUR CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D585, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_273)
{
    // 1D5B9 0062;	
    // (𝖹) MATHEMATICAL SANS-SERIF CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B9, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_274)
{
    // 1D5ED 0062;	
    // (𝗭) MATHEMATICAL SANS-SERIF BOLD CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5ED, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_275)
{
    // 1D621 0062;	
    // (𝘡) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D621, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_276)
{
    // 1D655 0062;	
    // (𝙕) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D655, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_277)
{
    // 1D689 0062;	
    // (𝚉) MATHEMATICAL MONOSPACE CAPITAL Z	[1F87 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D689, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_278)
{
    // 24CF 0062;	
    // (Ⓩ) CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CF, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_279)
{
    // 1F169 0062;	
    // (🅩) NEGATIVE CIRCLED LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F169, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_280)
{
    // 1DBB 0062;	
    // (ᶻ) MODIFIER LETTER SMALL Z	[1F87 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBB, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_281)
{
    // 1F149 0062;	
    // (🅉) SQUARED LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F149, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_282)
{
    // 1F189 0062;	
    // (🆉) NEGATIVE SQUARED LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F189, 0x0062 };
    uint32_t const ces[9] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_283)
{
    // 017A 0062;	
    // (ź) LATIN SMALL LETTER Z WITH ACUTE	[1F87 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017A, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_284)
{
    // 0179 0062;	
    // (Ź) LATIN CAPITAL LETTER Z WITH ACUTE	[1F87 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0179, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_285)
{
    // 1E91 0062;	
    // (ẑ) LATIN SMALL LETTER Z WITH CIRCUMFLEX	[1F87 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E91, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_286)
{
    // 1E90 0062;	
    // (Ẑ) LATIN CAPITAL LETTER Z WITH CIRCUMFLEX	[1F87 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E90, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_287)
{
    // 017E 0062;	
    // (ž) LATIN SMALL LETTER Z WITH CARON	[1F87 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017E, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_288)
{
    // 017D 0062;	
    // (Ž) LATIN CAPITAL LETTER Z WITH CARON	[1F87 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017D, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_289)
{
    // 017C 0062;	
    // (ż) LATIN SMALL LETTER Z WITH DOT ABOVE	[1F87 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x017C, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_290)
{
    // 017B 0062;	
    // (Ż) LATIN CAPITAL LETTER Z WITH DOT ABOVE	[1F87 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x017B, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_291)
{
    // 1E93 0062;	
    // (ẓ) LATIN SMALL LETTER Z WITH DOT BELOW	[1F87 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E93, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_292)
{
    // 1E92 0062;	
    // (Ẓ) LATIN CAPITAL LETTER Z WITH DOT BELOW	[1F87 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E92, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_293)
{
    // 1E95 0062;	
    // (ẕ) LATIN SMALL LETTER Z WITH LINE BELOW	[1F87 1CC6 | 0020 0049 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E95, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_294)
{
    // 1E94 0062;	
    // (Ẕ) LATIN CAPITAL LETTER Z WITH LINE BELOW	[1F87 1CC6 | 0020 0049 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E94, 0x0062 };
    uint32_t const ces[11] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_295)
{
    // 018D 0021;	
    // (ƍ) LATIN SMALL LETTER TURNED DELTA	[1F87 1F5B 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x018D, 0x0021 };
    uint32_t const ces[12] = { 0x1F87, 0x1F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_296)
{
    // 018D 003F;	
    // (ƍ) LATIN SMALL LETTER TURNED DELTA	[1F87 1F5B 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x018D, 0x003F };
    uint32_t const ces[12] = { 0x1F87, 0x1F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_297)
{
    // 018D 0061;	
    // (ƍ) LATIN SMALL LETTER TURNED DELTA	[1F87 1F5B 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x018D, 0x0061 };
    uint32_t const ces[12] = { 0x1F87, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_298)
{
    // 018D 0041;	
    // (ƍ) LATIN SMALL LETTER TURNED DELTA	[1F87 1F5B 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x018D, 0x0041 };
    uint32_t const ces[12] = { 0x1F87, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_299)
{
    // 018D 0062;	
    // (ƍ) LATIN SMALL LETTER TURNED DELTA	[1F87 1F5B 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x018D, 0x0062 };
    uint32_t const ces[12] = { 0x1F87, 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_300)
{
    // 1D22 0021;	
    // (ᴢ) LATIN LETTER SMALL CAPITAL Z	[1F8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22, 0x0021 };
    uint32_t const ces[9] = { 0x1F8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_301)
{
    // 1D22 003F;	
    // (ᴢ) LATIN LETTER SMALL CAPITAL Z	[1F8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22, 0x003F };
    uint32_t const ces[9] = { 0x1F8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_302)
{
    // 1D22 0061;	
    // (ᴢ) LATIN LETTER SMALL CAPITAL Z	[1F8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22, 0x0061 };
    uint32_t const ces[9] = { 0x1F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_303)
{
    // 1D22 0041;	
    // (ᴢ) LATIN LETTER SMALL CAPITAL Z	[1F8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D22, 0x0041 };
    uint32_t const ces[9] = { 0x1F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_304)
{
    // 1D22 0062;	
    // (ᴢ) LATIN LETTER SMALL CAPITAL Z	[1F8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D22, 0x0062 };
    uint32_t const ces[9] = { 0x1F8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_305)
{
    // 01B6 0021;	
    // (ƶ) LATIN SMALL LETTER Z WITH STROKE	[1F8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B6, 0x0021 };
    uint32_t const ces[9] = { 0x1F8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_306)
{
    // 01B5 0021;	
    // (Ƶ) LATIN CAPITAL LETTER Z WITH STROKE	[1F8C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B5, 0x0021 };
    uint32_t const ces[9] = { 0x1F8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_307)
{
    // 01B6 003F;	
    // (ƶ) LATIN SMALL LETTER Z WITH STROKE	[1F8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B6, 0x003F };
    uint32_t const ces[9] = { 0x1F8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_308)
{
    // 01B5 003F;	
    // (Ƶ) LATIN CAPITAL LETTER Z WITH STROKE	[1F8C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B5, 0x003F };
    uint32_t const ces[9] = { 0x1F8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_309)
{
    // 01B6 0061;	
    // (ƶ) LATIN SMALL LETTER Z WITH STROKE	[1F8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B6, 0x0061 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_310)
{
    // 01B6 0041;	
    // (ƶ) LATIN SMALL LETTER Z WITH STROKE	[1F8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01B6, 0x0041 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_311)
{
    // 01B5 0061;	
    // (Ƶ) LATIN CAPITAL LETTER Z WITH STROKE	[1F8C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B5, 0x0061 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_312)
{
    // 01B5 0041;	
    // (Ƶ) LATIN CAPITAL LETTER Z WITH STROKE	[1F8C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01B5, 0x0041 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_313)
{
    // 01B6 0062;	
    // (ƶ) LATIN SMALL LETTER Z WITH STROKE	[1F8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B6, 0x0062 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_314)
{
    // 01B5 0062;	
    // (Ƶ) LATIN CAPITAL LETTER Z WITH STROKE	[1F8C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B5, 0x0062 };
    uint32_t const ces[9] = { 0x1F8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_315)
{
    // 1D76 0021;	
    // (ᵶ) LATIN SMALL LETTER Z WITH MIDDLE TILDE	[1F90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D76, 0x0021 };
    uint32_t const ces[9] = { 0x1F90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_316)
{
    // 1D76 003F;	
    // (ᵶ) LATIN SMALL LETTER Z WITH MIDDLE TILDE	[1F90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D76, 0x003F };
    uint32_t const ces[9] = { 0x1F90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_317)
{
    // 1D76 0061;	
    // (ᵶ) LATIN SMALL LETTER Z WITH MIDDLE TILDE	[1F90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D76, 0x0061 };
    uint32_t const ces[9] = { 0x1F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_318)
{
    // 1D76 0041;	
    // (ᵶ) LATIN SMALL LETTER Z WITH MIDDLE TILDE	[1F90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D76, 0x0041 };
    uint32_t const ces[9] = { 0x1F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_319)
{
    // 1D76 0062;	
    // (ᵶ) LATIN SMALL LETTER Z WITH MIDDLE TILDE	[1F90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D76, 0x0062 };
    uint32_t const ces[9] = { 0x1F90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_320)
{
    // 1D8E 0021;	
    // (ᶎ) LATIN SMALL LETTER Z WITH PALATAL HOOK	[1F91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8E, 0x0021 };
    uint32_t const ces[9] = { 0x1F91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_321)
{
    // 1D8E 003F;	
    // (ᶎ) LATIN SMALL LETTER Z WITH PALATAL HOOK	[1F91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8E, 0x003F };
    uint32_t const ces[9] = { 0x1F91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_322)
{
    // 1D8E 0061;	
    // (ᶎ) LATIN SMALL LETTER Z WITH PALATAL HOOK	[1F91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8E, 0x0061 };
    uint32_t const ces[9] = { 0x1F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_323)
{
    // 1D8E 0041;	
    // (ᶎ) LATIN SMALL LETTER Z WITH PALATAL HOOK	[1F91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8E, 0x0041 };
    uint32_t const ces[9] = { 0x1F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_324)
{
    // 1D8E 0062;	
    // (ᶎ) LATIN SMALL LETTER Z WITH PALATAL HOOK	[1F91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8E, 0x0062 };
    uint32_t const ces[9] = { 0x1F91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_325)
{
    // 0225 0021;	
    // (ȥ) LATIN SMALL LETTER Z WITH HOOK	[1F92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0225, 0x0021 };
    uint32_t const ces[9] = { 0x1F92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_326)
{
    // 0224 0021;	
    // (Ȥ) LATIN CAPITAL LETTER Z WITH HOOK	[1F92 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0224, 0x0021 };
    uint32_t const ces[9] = { 0x1F92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_327)
{
    // 0225 003F;	
    // (ȥ) LATIN SMALL LETTER Z WITH HOOK	[1F92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0225, 0x003F };
    uint32_t const ces[9] = { 0x1F92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_328)
{
    // 0224 003F;	
    // (Ȥ) LATIN CAPITAL LETTER Z WITH HOOK	[1F92 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0224, 0x003F };
    uint32_t const ces[9] = { 0x1F92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_329)
{
    // 0225 0061;	
    // (ȥ) LATIN SMALL LETTER Z WITH HOOK	[1F92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0225, 0x0061 };
    uint32_t const ces[9] = { 0x1F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_330)
{
    // 0225 0041;	
    // (ȥ) LATIN SMALL LETTER Z WITH HOOK	[1F92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0225, 0x0041 };
    uint32_t const ces[9] = { 0x1F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_331)
{
    // 0224 0061;	
    // (Ȥ) LATIN CAPITAL LETTER Z WITH HOOK	[1F92 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0224, 0x0061 };
    uint32_t const ces[9] = { 0x1F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_332)
{
    // 0224 0041;	
    // (Ȥ) LATIN CAPITAL LETTER Z WITH HOOK	[1F92 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0224, 0x0041 };
    uint32_t const ces[9] = { 0x1F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_333)
{
    // 0225 0062;	
    // (ȥ) LATIN SMALL LETTER Z WITH HOOK	[1F92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0225, 0x0062 };
    uint32_t const ces[9] = { 0x1F92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_334)
{
    // 0224 0062;	
    // (Ȥ) LATIN CAPITAL LETTER Z WITH HOOK	[1F92 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0224, 0x0062 };
    uint32_t const ces[9] = { 0x1F92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_335)
{
    // 0290 0021;	
    // (ʐ) LATIN SMALL LETTER Z WITH RETROFLEX HOOK	[1F96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0290, 0x0021 };
    uint32_t const ces[9] = { 0x1F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_336)
{
    // 1DBC 0021;	
    // (ᶼ) MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK	[1F96 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBC, 0x0021 };
    uint32_t const ces[9] = { 0x1F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_337)
{
    // 0290 003F;	
    // (ʐ) LATIN SMALL LETTER Z WITH RETROFLEX HOOK	[1F96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0290, 0x003F };
    uint32_t const ces[9] = { 0x1F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_338)
{
    // 1DBC 003F;	
    // (ᶼ) MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK	[1F96 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBC, 0x003F };
    uint32_t const ces[9] = { 0x1F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_339)
{
    // 0290 0061;	
    // (ʐ) LATIN SMALL LETTER Z WITH RETROFLEX HOOK	[1F96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0290, 0x0061 };
    uint32_t const ces[9] = { 0x1F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_340)
{
    // 0290 0041;	
    // (ʐ) LATIN SMALL LETTER Z WITH RETROFLEX HOOK	[1F96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0290, 0x0041 };
    uint32_t const ces[9] = { 0x1F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_341)
{
    // 1DBC 0061;	
    // (ᶼ) MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK	[1F96 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBC, 0x0061 };
    uint32_t const ces[9] = { 0x1F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_342)
{
    // 1DBC 0041;	
    // (ᶼ) MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK	[1F96 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DBC, 0x0041 };
    uint32_t const ces[9] = { 0x1F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_343)
{
    // 0290 0062;	
    // (ʐ) LATIN SMALL LETTER Z WITH RETROFLEX HOOK	[1F96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0290, 0x0062 };
    uint32_t const ces[9] = { 0x1F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_344)
{
    // 1DBC 0062;	
    // (ᶼ) MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK	[1F96 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBC, 0x0062 };
    uint32_t const ces[9] = { 0x1F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_345)
{
    // 0291 0021;	
    // (ʑ) LATIN SMALL LETTER Z WITH CURL	[1F9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0291, 0x0021 };
    uint32_t const ces[9] = { 0x1F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_346)
{
    // 1DBD 0021;	
    // (ᶽ) MODIFIER LETTER SMALL Z WITH CURL	[1F9A 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBD, 0x0021 };
    uint32_t const ces[9] = { 0x1F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_347)
{
    // 0291 003F;	
    // (ʑ) LATIN SMALL LETTER Z WITH CURL	[1F9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0291, 0x003F };
    uint32_t const ces[9] = { 0x1F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_348)
{
    // 1DBD 003F;	
    // (ᶽ) MODIFIER LETTER SMALL Z WITH CURL	[1F9A 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBD, 0x003F };
    uint32_t const ces[9] = { 0x1F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_349)
{
    // 0291 0061;	
    // (ʑ) LATIN SMALL LETTER Z WITH CURL	[1F9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0291, 0x0061 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_350)
{
    // 0291 0041;	
    // (ʑ) LATIN SMALL LETTER Z WITH CURL	[1F9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0291, 0x0041 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_351)
{
    // 1DBD 0061;	
    // (ᶽ) MODIFIER LETTER SMALL Z WITH CURL	[1F9A 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBD, 0x0061 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_352)
{
    // 1DBD 0041;	
    // (ᶽ) MODIFIER LETTER SMALL Z WITH CURL	[1F9A 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DBD, 0x0041 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_353)
{
    // 0291 0062;	
    // (ʑ) LATIN SMALL LETTER Z WITH CURL	[1F9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0291, 0x0062 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_354)
{
    // 1DBD 0062;	
    // (ᶽ) MODIFIER LETTER SMALL Z WITH CURL	[1F9A 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBD, 0x0062 };
    uint32_t const ces[9] = { 0x1F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_355)
{
    // 0240 0021;	
    // (ɀ) LATIN SMALL LETTER Z WITH SWASH TAIL	[1F9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0240, 0x0021 };
    uint32_t const ces[9] = { 0x1F9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_356)
{
    // 2C7F 0021;	
    // (Ɀ) LATIN CAPITAL LETTER Z WITH SWASH TAIL	[1F9E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C7F, 0x0021 };
    uint32_t const ces[9] = { 0x1F9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_357)
{
    // 0240 003F;	
    // (ɀ) LATIN SMALL LETTER Z WITH SWASH TAIL	[1F9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0240, 0x003F };
    uint32_t const ces[9] = { 0x1F9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_358)
{
    // 2C7F 003F;	
    // (Ɀ) LATIN CAPITAL LETTER Z WITH SWASH TAIL	[1F9E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C7F, 0x003F };
    uint32_t const ces[9] = { 0x1F9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_359)
{
    // 0240 0061;	
    // (ɀ) LATIN SMALL LETTER Z WITH SWASH TAIL	[1F9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0240, 0x0061 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_360)
{
    // 0240 0041;	
    // (ɀ) LATIN SMALL LETTER Z WITH SWASH TAIL	[1F9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0240, 0x0041 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_361)
{
    // 2C7F 0061;	
    // (Ɀ) LATIN CAPITAL LETTER Z WITH SWASH TAIL	[1F9E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C7F, 0x0061 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_362)
{
    // 2C7F 0041;	
    // (Ɀ) LATIN CAPITAL LETTER Z WITH SWASH TAIL	[1F9E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C7F, 0x0041 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_363)
{
    // 0240 0062;	
    // (ɀ) LATIN SMALL LETTER Z WITH SWASH TAIL	[1F9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0240, 0x0062 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_364)
{
    // 2C7F 0062;	
    // (Ɀ) LATIN CAPITAL LETTER Z WITH SWASH TAIL	[1F9E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C7F, 0x0062 };
    uint32_t const ces[9] = { 0x1F9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_365)
{
    // 2C6C 0021;	
    // (ⱬ) LATIN SMALL LETTER Z WITH DESCENDER	[1FA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C6C, 0x0021 };
    uint32_t const ces[9] = { 0x1FA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_366)
{
    // 2C6B 0021;	
    // (Ⱬ) LATIN CAPITAL LETTER Z WITH DESCENDER	[1FA2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6B, 0x0021 };
    uint32_t const ces[9] = { 0x1FA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_367)
{
    // 2C6C 003F;	
    // (ⱬ) LATIN SMALL LETTER Z WITH DESCENDER	[1FA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C6C, 0x003F };
    uint32_t const ces[9] = { 0x1FA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_368)
{
    // 2C6B 003F;	
    // (Ⱬ) LATIN CAPITAL LETTER Z WITH DESCENDER	[1FA2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6B, 0x003F };
    uint32_t const ces[9] = { 0x1FA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_369)
{
    // 2C6C 0061;	
    // (ⱬ) LATIN SMALL LETTER Z WITH DESCENDER	[1FA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C6C, 0x0061 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_370)
{
    // 2C6C 0041;	
    // (ⱬ) LATIN SMALL LETTER Z WITH DESCENDER	[1FA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C6C, 0x0041 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_371)
{
    // 2C6B 0061;	
    // (Ⱬ) LATIN CAPITAL LETTER Z WITH DESCENDER	[1FA2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6B, 0x0061 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_372)
{
    // 2C6B 0041;	
    // (Ⱬ) LATIN CAPITAL LETTER Z WITH DESCENDER	[1FA2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C6B, 0x0041 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_373)
{
    // 2C6C 0062;	
    // (ⱬ) LATIN SMALL LETTER Z WITH DESCENDER	[1FA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C6C, 0x0062 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_374)
{
    // 2C6B 0062;	
    // (Ⱬ) LATIN CAPITAL LETTER Z WITH DESCENDER	[1FA2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C6B, 0x0062 };
    uint32_t const ces[9] = { 0x1FA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_375)
{
    // A763 0021;	
    // (ꝣ) LATIN SMALL LETTER VISIGOTHIC Z	[1FA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA763, 0x0021 };
    uint32_t const ces[9] = { 0x1FA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_376)
{
    // A762 0021;	
    // (Ꝣ) LATIN CAPITAL LETTER VISIGOTHIC Z	[1FA3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA762, 0x0021 };
    uint32_t const ces[9] = { 0x1FA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_377)
{
    // A763 003F;	
    // (ꝣ) LATIN SMALL LETTER VISIGOTHIC Z	[1FA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA763, 0x003F };
    uint32_t const ces[9] = { 0x1FA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_378)
{
    // A762 003F;	
    // (Ꝣ) LATIN CAPITAL LETTER VISIGOTHIC Z	[1FA3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA762, 0x003F };
    uint32_t const ces[9] = { 0x1FA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_379)
{
    // A763 0061;	
    // (ꝣ) LATIN SMALL LETTER VISIGOTHIC Z	[1FA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA763, 0x0061 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_380)
{
    // A763 0041;	
    // (ꝣ) LATIN SMALL LETTER VISIGOTHIC Z	[1FA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA763, 0x0041 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_381)
{
    // A762 0061;	
    // (Ꝣ) LATIN CAPITAL LETTER VISIGOTHIC Z	[1FA3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA762, 0x0061 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_382)
{
    // A762 0041;	
    // (Ꝣ) LATIN CAPITAL LETTER VISIGOTHIC Z	[1FA3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA762, 0x0041 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_383)
{
    // A763 0062;	
    // (ꝣ) LATIN SMALL LETTER VISIGOTHIC Z	[1FA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA763, 0x0062 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_384)
{
    // A762 0062;	
    // (Ꝣ) LATIN CAPITAL LETTER VISIGOTHIC Z	[1FA3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA762, 0x0062 };
    uint32_t const ces[9] = { 0x1FA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_385)
{
    // 01EF 0334;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EF, 0x0334 };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_386)
{
    // 0292 030C 0334;	
    // (ǯ) LATIN SMALL LETTER EZH, COMBINING CARON	[1FA4 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0292, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_387)
{
    // 0292 0334 030C;	
    // (ʒ̴) LATIN SMALL LETTER EZH, COMBINING TILDE OVERLAY	[1FA4 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0292, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_388)
{
    // 01B7 030C 0334;	
    // (Ǯ) LATIN CAPITAL LETTER EZH, COMBINING CARON	[1FA4 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x01B7, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_389)
{
    // 01B7 0334 030C;	
    // (Ʒ̴) LATIN CAPITAL LETTER EZH, COMBINING TILDE OVERLAY	[1FA4 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x01B7, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_390)
{
    // 01EE 0334;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EE, 0x0334 };
    uint32_t const ces[10] = { 0x1FA4, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_391)
{
    // 0292 0021;	
    // (ʒ) LATIN SMALL LETTER EZH	[1FA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0292, 0x0021 };
    uint32_t const ces[9] = { 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_392)
{
    // 01B7 0021;	
    // (Ʒ) LATIN CAPITAL LETTER EZH	[1FA4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B7, 0x0021 };
    uint32_t const ces[9] = { 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_393)
{
    // 1DBE 0021;	
    // (ᶾ) MODIFIER LETTER SMALL EZH	[1FA4 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBE, 0x0021 };
    uint32_t const ces[9] = { 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_394)
{
    // 01EF 0021;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EF, 0x0021 };
    uint32_t const ces[11] = { 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_395)
{
    // 01EE 0021;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EE, 0x0021 };
    uint32_t const ces[11] = { 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_396)
{
    // 0292 003F;	
    // (ʒ) LATIN SMALL LETTER EZH	[1FA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0292, 0x003F };
    uint32_t const ces[9] = { 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_397)
{
    // 01B7 003F;	
    // (Ʒ) LATIN CAPITAL LETTER EZH	[1FA4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B7, 0x003F };
    uint32_t const ces[9] = { 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_398)
{
    // 1DBE 003F;	
    // (ᶾ) MODIFIER LETTER SMALL EZH	[1FA4 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBE, 0x003F };
    uint32_t const ces[9] = { 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_399)
{
    // 01EF 003F;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EF, 0x003F };
    uint32_t const ces[11] = { 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_400)
{
    // 01EE 003F;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EE, 0x003F };
    uint32_t const ces[11] = { 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_401)
{
    // 0292 0061;	
    // (ʒ) LATIN SMALL LETTER EZH	[1FA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0292, 0x0061 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_402)
{
    // 0292 0041;	
    // (ʒ) LATIN SMALL LETTER EZH	[1FA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0292, 0x0041 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_403)
{
    // 01B7 0061;	
    // (Ʒ) LATIN CAPITAL LETTER EZH	[1FA4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B7, 0x0061 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_404)
{
    // 01B7 0041;	
    // (Ʒ) LATIN CAPITAL LETTER EZH	[1FA4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01B7, 0x0041 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_405)
{
    // 1DBE 0061;	
    // (ᶾ) MODIFIER LETTER SMALL EZH	[1FA4 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBE, 0x0061 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_406)
{
    // 1DBE 0041;	
    // (ᶾ) MODIFIER LETTER SMALL EZH	[1FA4 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DBE, 0x0041 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_407)
{
    // 01EF 0061;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EF, 0x0061 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_408)
{
    // 01EF 0041;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01EF, 0x0041 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_409)
{
    // 01EE 0061;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EE, 0x0061 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_410)
{
    // 01EE 0041;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01EE, 0x0041 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_411)
{
    // 0292 0062;	
    // (ʒ) LATIN SMALL LETTER EZH	[1FA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0292, 0x0062 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_412)
{
    // 01B7 0062;	
    // (Ʒ) LATIN CAPITAL LETTER EZH	[1FA4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B7, 0x0062 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_413)
{
    // 1DBE 0062;	
    // (ᶾ) MODIFIER LETTER SMALL EZH	[1FA4 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DBE, 0x0062 };
    uint32_t const ces[9] = { 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_414)
{
    // 01EF 0062;	
    // (ǯ) LATIN SMALL LETTER EZH WITH CARON	[1FA4 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01EF, 0x0062 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_415)
{
    // 01EE 0062;	
    // (Ǯ) LATIN CAPITAL LETTER EZH WITH CARON	[1FA4 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01EE, 0x0062 };
    uint32_t const ces[11] = { 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_416)
{
    // 1D23 0021;	
    // (ᴣ) LATIN LETTER SMALL CAPITAL EZH	[1FA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23, 0x0021 };
    uint32_t const ces[9] = { 0x1FA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_417)
{
    // 1D23 003F;	
    // (ᴣ) LATIN LETTER SMALL CAPITAL EZH	[1FA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23, 0x003F };
    uint32_t const ces[9] = { 0x1FA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_418)
{
    // 1D23 0061;	
    // (ᴣ) LATIN LETTER SMALL CAPITAL EZH	[1FA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23, 0x0061 };
    uint32_t const ces[9] = { 0x1FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_419)
{
    // 1D23 0041;	
    // (ᴣ) LATIN LETTER SMALL CAPITAL EZH	[1FA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D23, 0x0041 };
    uint32_t const ces[9] = { 0x1FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_420)
{
    // 1D23 0062;	
    // (ᴣ) LATIN LETTER SMALL CAPITAL EZH	[1FA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D23, 0x0062 };
    uint32_t const ces[9] = { 0x1FA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_421)
{
    // 01B9 0021;	
    // (ƹ) LATIN SMALL LETTER EZH REVERSED	[1FA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B9, 0x0021 };
    uint32_t const ces[9] = { 0x1FA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_422)
{
    // 01B8 0021;	
    // (Ƹ) LATIN CAPITAL LETTER EZH REVERSED	[1FA9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B8, 0x0021 };
    uint32_t const ces[9] = { 0x1FA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_423)
{
    // 01B9 003F;	
    // (ƹ) LATIN SMALL LETTER EZH REVERSED	[1FA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B9, 0x003F };
    uint32_t const ces[9] = { 0x1FA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_424)
{
    // 01B8 003F;	
    // (Ƹ) LATIN CAPITAL LETTER EZH REVERSED	[1FA9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B8, 0x003F };
    uint32_t const ces[9] = { 0x1FA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_425)
{
    // 01B9 0061;	
    // (ƹ) LATIN SMALL LETTER EZH REVERSED	[1FA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B9, 0x0061 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_426)
{
    // 01B9 0041;	
    // (ƹ) LATIN SMALL LETTER EZH REVERSED	[1FA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01B9, 0x0041 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_427)
{
    // 01B8 0061;	
    // (Ƹ) LATIN CAPITAL LETTER EZH REVERSED	[1FA9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B8, 0x0061 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_428)
{
    // 01B8 0041;	
    // (Ƹ) LATIN CAPITAL LETTER EZH REVERSED	[1FA9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01B8, 0x0041 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_429)
{
    // 01B9 0062;	
    // (ƹ) LATIN SMALL LETTER EZH REVERSED	[1FA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B9, 0x0062 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_430)
{
    // 01B8 0062;	
    // (Ƹ) LATIN CAPITAL LETTER EZH REVERSED	[1FA9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B8, 0x0062 };
    uint32_t const ces[9] = { 0x1FA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_431)
{
    // 1D9A 0021;	
    // (ᶚ) LATIN SMALL LETTER EZH WITH RETROFLEX HOOK	[1FAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9A, 0x0021 };
    uint32_t const ces[9] = { 0x1FAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_432)
{
    // 1D9A 003F;	
    // (ᶚ) LATIN SMALL LETTER EZH WITH RETROFLEX HOOK	[1FAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9A, 0x003F };
    uint32_t const ces[9] = { 0x1FAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_433)
{
    // 1D9A 0061;	
    // (ᶚ) LATIN SMALL LETTER EZH WITH RETROFLEX HOOK	[1FAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9A, 0x0061 };
    uint32_t const ces[9] = { 0x1FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_434)
{
    // 1D9A 0041;	
    // (ᶚ) LATIN SMALL LETTER EZH WITH RETROFLEX HOOK	[1FAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D9A, 0x0041 };
    uint32_t const ces[9] = { 0x1FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_435)
{
    // 1D9A 0062;	
    // (ᶚ) LATIN SMALL LETTER EZH WITH RETROFLEX HOOK	[1FAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D9A, 0x0062 };
    uint32_t const ces[9] = { 0x1FAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_436)
{
    // 01BA 0021;	
    // (ƺ) LATIN SMALL LETTER EZH WITH TAIL	[1FAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BA, 0x0021 };
    uint32_t const ces[9] = { 0x1FAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_437)
{
    // 01BA 003F;	
    // (ƺ) LATIN SMALL LETTER EZH WITH TAIL	[1FAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BA, 0x003F };
    uint32_t const ces[9] = { 0x1FAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_438)
{
    // 01BA 0061;	
    // (ƺ) LATIN SMALL LETTER EZH WITH TAIL	[1FAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BA, 0x0061 };
    uint32_t const ces[9] = { 0x1FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_439)
{
    // 01BA 0041;	
    // (ƺ) LATIN SMALL LETTER EZH WITH TAIL	[1FAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01BA, 0x0041 };
    uint32_t const ces[9] = { 0x1FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_440)
{
    // 01BA 0062;	
    // (ƺ) LATIN SMALL LETTER EZH WITH TAIL	[1FAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BA, 0x0062 };
    uint32_t const ces[9] = { 0x1FAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_441)
{
    // 0293 0021;	
    // (ʓ) LATIN SMALL LETTER EZH WITH CURL	[1FB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0293, 0x0021 };
    uint32_t const ces[9] = { 0x1FB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_442)
{
    // 0293 003F;	
    // (ʓ) LATIN SMALL LETTER EZH WITH CURL	[1FB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0293, 0x003F };
    uint32_t const ces[9] = { 0x1FB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_443)
{
    // 0293 0061;	
    // (ʓ) LATIN SMALL LETTER EZH WITH CURL	[1FB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0293, 0x0061 };
    uint32_t const ces[9] = { 0x1FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_444)
{
    // 0293 0041;	
    // (ʓ) LATIN SMALL LETTER EZH WITH CURL	[1FB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0293, 0x0041 };
    uint32_t const ces[9] = { 0x1FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_445)
{
    // 0293 0062;	
    // (ʓ) LATIN SMALL LETTER EZH WITH CURL	[1FB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0293, 0x0062 };
    uint32_t const ces[9] = { 0x1FB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_446)
{
    // 00FE 0021;	
    // (þ) LATIN SMALL LETTER THORN	[1FB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00FE, 0x0021 };
    uint32_t const ces[9] = { 0x1FB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_447)
{
    // 00DE 0021;	
    // (Þ) LATIN CAPITAL LETTER THORN	[1FB6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x00DE, 0x0021 };
    uint32_t const ces[9] = { 0x1FB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_448)
{
    // 00FE 003F;	
    // (þ) LATIN SMALL LETTER THORN	[1FB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00FE, 0x003F };
    uint32_t const ces[9] = { 0x1FB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_449)
{
    // 00DE 003F;	
    // (Þ) LATIN CAPITAL LETTER THORN	[1FB6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x00DE, 0x003F };
    uint32_t const ces[9] = { 0x1FB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_450)
{
    // 00FE 0061;	
    // (þ) LATIN SMALL LETTER THORN	[1FB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00FE, 0x0061 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_451)
{
    // 00FE 0041;	
    // (þ) LATIN SMALL LETTER THORN	[1FB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00FE, 0x0041 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_452)
{
    // 00DE 0061;	
    // (Þ) LATIN CAPITAL LETTER THORN	[1FB6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x00DE, 0x0061 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_453)
{
    // 00DE 0041;	
    // (Þ) LATIN CAPITAL LETTER THORN	[1FB6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x00DE, 0x0041 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_454)
{
    // 00FE 0062;	
    // (þ) LATIN SMALL LETTER THORN	[1FB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00FE, 0x0062 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_455)
{
    // 00DE 0062;	
    // (Þ) LATIN CAPITAL LETTER THORN	[1FB6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x00DE, 0x0062 };
    uint32_t const ces[9] = { 0x1FB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_456)
{
    // A765 0021;	
    // (ꝥ) LATIN SMALL LETTER THORN WITH STROKE	[1FBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA765, 0x0021 };
    uint32_t const ces[9] = { 0x1FBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_457)
{
    // A764 0021;	
    // (Ꝥ) LATIN CAPITAL LETTER THORN WITH STROKE	[1FBA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA764, 0x0021 };
    uint32_t const ces[9] = { 0x1FBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_458)
{
    // A765 003F;	
    // (ꝥ) LATIN SMALL LETTER THORN WITH STROKE	[1FBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA765, 0x003F };
    uint32_t const ces[9] = { 0x1FBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_459)
{
    // A764 003F;	
    // (Ꝥ) LATIN CAPITAL LETTER THORN WITH STROKE	[1FBA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA764, 0x003F };
    uint32_t const ces[9] = { 0x1FBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_460)
{
    // A765 0061;	
    // (ꝥ) LATIN SMALL LETTER THORN WITH STROKE	[1FBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA765, 0x0061 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_461)
{
    // A765 0041;	
    // (ꝥ) LATIN SMALL LETTER THORN WITH STROKE	[1FBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA765, 0x0041 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_462)
{
    // A764 0061;	
    // (Ꝥ) LATIN CAPITAL LETTER THORN WITH STROKE	[1FBA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA764, 0x0061 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_463)
{
    // A764 0041;	
    // (Ꝥ) LATIN CAPITAL LETTER THORN WITH STROKE	[1FBA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA764, 0x0041 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_464)
{
    // A765 0062;	
    // (ꝥ) LATIN SMALL LETTER THORN WITH STROKE	[1FBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA765, 0x0062 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_465)
{
    // A764 0062;	
    // (Ꝥ) LATIN CAPITAL LETTER THORN WITH STROKE	[1FBA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA764, 0x0062 };
    uint32_t const ces[9] = { 0x1FBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_466)
{
    // A767 0021;	
    // (ꝧ) LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA767, 0x0021 };
    uint32_t const ces[9] = { 0x1FBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_467)
{
    // A766 0021;	
    // (Ꝧ) LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA766, 0x0021 };
    uint32_t const ces[9] = { 0x1FBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_468)
{
    // A767 003F;	
    // (ꝧ) LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA767, 0x003F };
    uint32_t const ces[9] = { 0x1FBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_469)
{
    // A766 003F;	
    // (Ꝧ) LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA766, 0x003F };
    uint32_t const ces[9] = { 0x1FBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_470)
{
    // A767 0061;	
    // (ꝧ) LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA767, 0x0061 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_471)
{
    // A767 0041;	
    // (ꝧ) LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA767, 0x0041 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_472)
{
    // A766 0061;	
    // (Ꝧ) LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA766, 0x0061 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_473)
{
    // A766 0041;	
    // (Ꝧ) LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA766, 0x0041 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_474)
{
    // A767 0062;	
    // (ꝧ) LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA767, 0x0062 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_475)
{
    // A766 0062;	
    // (Ꝧ) LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER	[1FBB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA766, 0x0062 };
    uint32_t const ces[9] = { 0x1FBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_476)
{
    // 01BF 0021;	
    // (ƿ) LATIN LETTER WYNN	[1FBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BF, 0x0021 };
    uint32_t const ces[9] = { 0x1FBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_477)
{
    // 01F7 0021;	
    // (Ƿ) LATIN CAPITAL LETTER WYNN	[1FBC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01F7, 0x0021 };
    uint32_t const ces[9] = { 0x1FBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_478)
{
    // 01BF 003F;	
    // (ƿ) LATIN LETTER WYNN	[1FBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BF, 0x003F };
    uint32_t const ces[9] = { 0x1FBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_479)
{
    // 01F7 003F;	
    // (Ƿ) LATIN CAPITAL LETTER WYNN	[1FBC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01F7, 0x003F };
    uint32_t const ces[9] = { 0x1FBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_480)
{
    // 01BF 0061;	
    // (ƿ) LATIN LETTER WYNN	[1FBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BF, 0x0061 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_481)
{
    // 01BF 0041;	
    // (ƿ) LATIN LETTER WYNN	[1FBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01BF, 0x0041 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_482)
{
    // 01F7 0061;	
    // (Ƿ) LATIN CAPITAL LETTER WYNN	[1FBC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01F7, 0x0061 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_483)
{
    // 01F7 0041;	
    // (Ƿ) LATIN CAPITAL LETTER WYNN	[1FBC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01F7, 0x0041 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_484)
{
    // 01BF 0062;	
    // (ƿ) LATIN LETTER WYNN	[1FBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BF, 0x0062 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_485)
{
    // 01F7 0062;	
    // (Ƿ) LATIN CAPITAL LETTER WYNN	[1FBC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01F7, 0x0062 };
    uint32_t const ces[9] = { 0x1FBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_486)
{
    // A769 0021;	
    // (ꝩ) LATIN SMALL LETTER VEND	[1FC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA769, 0x0021 };
    uint32_t const ces[9] = { 0x1FC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_487)
{
    // A768 0021;	
    // (Ꝩ) LATIN CAPITAL LETTER VEND	[1FC0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA768, 0x0021 };
    uint32_t const ces[9] = { 0x1FC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_488)
{
    // A769 003F;	
    // (ꝩ) LATIN SMALL LETTER VEND	[1FC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA769, 0x003F };
    uint32_t const ces[9] = { 0x1FC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_489)
{
    // A768 003F;	
    // (Ꝩ) LATIN CAPITAL LETTER VEND	[1FC0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA768, 0x003F };
    uint32_t const ces[9] = { 0x1FC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_490)
{
    // A769 0061;	
    // (ꝩ) LATIN SMALL LETTER VEND	[1FC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA769, 0x0061 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_491)
{
    // A769 0041;	
    // (ꝩ) LATIN SMALL LETTER VEND	[1FC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA769, 0x0041 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_492)
{
    // A768 0061;	
    // (Ꝩ) LATIN CAPITAL LETTER VEND	[1FC0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA768, 0x0061 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_493)
{
    // A768 0041;	
    // (Ꝩ) LATIN CAPITAL LETTER VEND	[1FC0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA768, 0x0041 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_494)
{
    // A769 0062;	
    // (ꝩ) LATIN SMALL LETTER VEND	[1FC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA769, 0x0062 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_495)
{
    // A768 0062;	
    // (Ꝩ) LATIN CAPITAL LETTER VEND	[1FC0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA768, 0x0062 };
    uint32_t const ces[9] = { 0x1FC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_496)
{
    // AB60 0021;	
    // (ꭠ) LATIN SMALL LETTER SAKHA YAT	[1FC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB60, 0x0021 };
    uint32_t const ces[9] = { 0x1FC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_497)
{
    // AB60 003F;	
    // (ꭠ) LATIN SMALL LETTER SAKHA YAT	[1FC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB60, 0x003F };
    uint32_t const ces[9] = { 0x1FC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_498)
{
    // AB60 0061;	
    // (ꭠ) LATIN SMALL LETTER SAKHA YAT	[1FC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB60, 0x0061 };
    uint32_t const ces[9] = { 0x1FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_126_499)
{
    // AB60 0041;	
    // (ꭠ) LATIN SMALL LETTER SAKHA YAT	[1FC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB60, 0x0041 };
    uint32_t const ces[9] = { 0x1FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

