// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_383_000)
{
    // 49BF 003F;	
    // (䦿) CJK UNIFIED IDEOGRAPH-49BF	[FB80 C9BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_001)
{
    // 49BF 0061;	
    // (䦿) CJK UNIFIED IDEOGRAPH-49BF	[FB80 C9BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_002)
{
    // 49BF 0041;	
    // (䦿) CJK UNIFIED IDEOGRAPH-49BF	[FB80 C9BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_003)
{
    // 49BF 0062;	
    // (䦿) CJK UNIFIED IDEOGRAPH-49BF	[FB80 C9BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_004)
{
    // 49C0 0021;	
    // (䧀) CJK UNIFIED IDEOGRAPH-49C0	[FB80 C9C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_005)
{
    // 49C0 003F;	
    // (䧀) CJK UNIFIED IDEOGRAPH-49C0	[FB80 C9C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_006)
{
    // 49C0 0061;	
    // (䧀) CJK UNIFIED IDEOGRAPH-49C0	[FB80 C9C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_007)
{
    // 49C0 0041;	
    // (䧀) CJK UNIFIED IDEOGRAPH-49C0	[FB80 C9C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_008)
{
    // 49C0 0062;	
    // (䧀) CJK UNIFIED IDEOGRAPH-49C0	[FB80 C9C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_009)
{
    // 49C1 0021;	
    // (䧁) CJK UNIFIED IDEOGRAPH-49C1	[FB80 C9C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_010)
{
    // 49C1 003F;	
    // (䧁) CJK UNIFIED IDEOGRAPH-49C1	[FB80 C9C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_011)
{
    // 49C1 0061;	
    // (䧁) CJK UNIFIED IDEOGRAPH-49C1	[FB80 C9C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_012)
{
    // 49C1 0041;	
    // (䧁) CJK UNIFIED IDEOGRAPH-49C1	[FB80 C9C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_013)
{
    // 49C1 0062;	
    // (䧁) CJK UNIFIED IDEOGRAPH-49C1	[FB80 C9C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_014)
{
    // 49C2 0021;	
    // (䧂) CJK UNIFIED IDEOGRAPH-49C2	[FB80 C9C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_015)
{
    // 49C2 003F;	
    // (䧂) CJK UNIFIED IDEOGRAPH-49C2	[FB80 C9C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_016)
{
    // 49C2 0061;	
    // (䧂) CJK UNIFIED IDEOGRAPH-49C2	[FB80 C9C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_017)
{
    // 49C2 0041;	
    // (䧂) CJK UNIFIED IDEOGRAPH-49C2	[FB80 C9C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_018)
{
    // 49C2 0062;	
    // (䧂) CJK UNIFIED IDEOGRAPH-49C2	[FB80 C9C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_019)
{
    // 49C3 0021;	
    // (䧃) CJK UNIFIED IDEOGRAPH-49C3	[FB80 C9C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_020)
{
    // 49C3 003F;	
    // (䧃) CJK UNIFIED IDEOGRAPH-49C3	[FB80 C9C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_021)
{
    // 49C3 0061;	
    // (䧃) CJK UNIFIED IDEOGRAPH-49C3	[FB80 C9C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_022)
{
    // 49C3 0041;	
    // (䧃) CJK UNIFIED IDEOGRAPH-49C3	[FB80 C9C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_023)
{
    // 49C3 0062;	
    // (䧃) CJK UNIFIED IDEOGRAPH-49C3	[FB80 C9C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_024)
{
    // 49C4 0021;	
    // (䧄) CJK UNIFIED IDEOGRAPH-49C4	[FB80 C9C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_025)
{
    // 49C4 003F;	
    // (䧄) CJK UNIFIED IDEOGRAPH-49C4	[FB80 C9C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_026)
{
    // 49C4 0061;	
    // (䧄) CJK UNIFIED IDEOGRAPH-49C4	[FB80 C9C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_027)
{
    // 49C4 0041;	
    // (䧄) CJK UNIFIED IDEOGRAPH-49C4	[FB80 C9C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_028)
{
    // 49C4 0062;	
    // (䧄) CJK UNIFIED IDEOGRAPH-49C4	[FB80 C9C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_029)
{
    // 49C5 0021;	
    // (䧅) CJK UNIFIED IDEOGRAPH-49C5	[FB80 C9C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_030)
{
    // 49C5 003F;	
    // (䧅) CJK UNIFIED IDEOGRAPH-49C5	[FB80 C9C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_031)
{
    // 49C5 0061;	
    // (䧅) CJK UNIFIED IDEOGRAPH-49C5	[FB80 C9C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_032)
{
    // 49C5 0041;	
    // (䧅) CJK UNIFIED IDEOGRAPH-49C5	[FB80 C9C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_033)
{
    // 49C5 0062;	
    // (䧅) CJK UNIFIED IDEOGRAPH-49C5	[FB80 C9C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_034)
{
    // 49C6 0021;	
    // (䧆) CJK UNIFIED IDEOGRAPH-49C6	[FB80 C9C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_035)
{
    // 49C6 003F;	
    // (䧆) CJK UNIFIED IDEOGRAPH-49C6	[FB80 C9C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_036)
{
    // 49C6 0061;	
    // (䧆) CJK UNIFIED IDEOGRAPH-49C6	[FB80 C9C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_037)
{
    // 49C6 0041;	
    // (䧆) CJK UNIFIED IDEOGRAPH-49C6	[FB80 C9C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_038)
{
    // 49C6 0062;	
    // (䧆) CJK UNIFIED IDEOGRAPH-49C6	[FB80 C9C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_039)
{
    // 49C7 0021;	
    // (䧇) CJK UNIFIED IDEOGRAPH-49C7	[FB80 C9C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_040)
{
    // 49C7 003F;	
    // (䧇) CJK UNIFIED IDEOGRAPH-49C7	[FB80 C9C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_041)
{
    // 49C7 0061;	
    // (䧇) CJK UNIFIED IDEOGRAPH-49C7	[FB80 C9C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_042)
{
    // 49C7 0041;	
    // (䧇) CJK UNIFIED IDEOGRAPH-49C7	[FB80 C9C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_043)
{
    // 49C7 0062;	
    // (䧇) CJK UNIFIED IDEOGRAPH-49C7	[FB80 C9C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_044)
{
    // 49C8 0021;	
    // (䧈) CJK UNIFIED IDEOGRAPH-49C8	[FB80 C9C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_045)
{
    // 49C8 003F;	
    // (䧈) CJK UNIFIED IDEOGRAPH-49C8	[FB80 C9C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_046)
{
    // 49C8 0061;	
    // (䧈) CJK UNIFIED IDEOGRAPH-49C8	[FB80 C9C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_047)
{
    // 49C8 0041;	
    // (䧈) CJK UNIFIED IDEOGRAPH-49C8	[FB80 C9C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_048)
{
    // 49C8 0062;	
    // (䧈) CJK UNIFIED IDEOGRAPH-49C8	[FB80 C9C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_049)
{
    // 49C9 0021;	
    // (䧉) CJK UNIFIED IDEOGRAPH-49C9	[FB80 C9C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_050)
{
    // 49C9 003F;	
    // (䧉) CJK UNIFIED IDEOGRAPH-49C9	[FB80 C9C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_051)
{
    // 49C9 0061;	
    // (䧉) CJK UNIFIED IDEOGRAPH-49C9	[FB80 C9C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_052)
{
    // 49C9 0041;	
    // (䧉) CJK UNIFIED IDEOGRAPH-49C9	[FB80 C9C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_053)
{
    // 49C9 0062;	
    // (䧉) CJK UNIFIED IDEOGRAPH-49C9	[FB80 C9C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_054)
{
    // 49CA 0021;	
    // (䧊) CJK UNIFIED IDEOGRAPH-49CA	[FB80 C9CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_055)
{
    // 49CA 003F;	
    // (䧊) CJK UNIFIED IDEOGRAPH-49CA	[FB80 C9CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_056)
{
    // 49CA 0061;	
    // (䧊) CJK UNIFIED IDEOGRAPH-49CA	[FB80 C9CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_057)
{
    // 49CA 0041;	
    // (䧊) CJK UNIFIED IDEOGRAPH-49CA	[FB80 C9CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_058)
{
    // 49CA 0062;	
    // (䧊) CJK UNIFIED IDEOGRAPH-49CA	[FB80 C9CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_059)
{
    // 49CB 0021;	
    // (䧋) CJK UNIFIED IDEOGRAPH-49CB	[FB80 C9CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_060)
{
    // 49CB 003F;	
    // (䧋) CJK UNIFIED IDEOGRAPH-49CB	[FB80 C9CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_061)
{
    // 49CB 0061;	
    // (䧋) CJK UNIFIED IDEOGRAPH-49CB	[FB80 C9CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_062)
{
    // 49CB 0041;	
    // (䧋) CJK UNIFIED IDEOGRAPH-49CB	[FB80 C9CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_063)
{
    // 49CB 0062;	
    // (䧋) CJK UNIFIED IDEOGRAPH-49CB	[FB80 C9CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_064)
{
    // 49CC 0021;	
    // (䧌) CJK UNIFIED IDEOGRAPH-49CC	[FB80 C9CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_065)
{
    // 49CC 003F;	
    // (䧌) CJK UNIFIED IDEOGRAPH-49CC	[FB80 C9CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_066)
{
    // 49CC 0061;	
    // (䧌) CJK UNIFIED IDEOGRAPH-49CC	[FB80 C9CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_067)
{
    // 49CC 0041;	
    // (䧌) CJK UNIFIED IDEOGRAPH-49CC	[FB80 C9CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_068)
{
    // 49CC 0062;	
    // (䧌) CJK UNIFIED IDEOGRAPH-49CC	[FB80 C9CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_069)
{
    // 49CD 0021;	
    // (䧍) CJK UNIFIED IDEOGRAPH-49CD	[FB80 C9CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_070)
{
    // 49CD 003F;	
    // (䧍) CJK UNIFIED IDEOGRAPH-49CD	[FB80 C9CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_071)
{
    // 49CD 0061;	
    // (䧍) CJK UNIFIED IDEOGRAPH-49CD	[FB80 C9CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_072)
{
    // 49CD 0041;	
    // (䧍) CJK UNIFIED IDEOGRAPH-49CD	[FB80 C9CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_073)
{
    // 49CD 0062;	
    // (䧍) CJK UNIFIED IDEOGRAPH-49CD	[FB80 C9CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_074)
{
    // 49CE 0021;	
    // (䧎) CJK UNIFIED IDEOGRAPH-49CE	[FB80 C9CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_075)
{
    // 49CE 003F;	
    // (䧎) CJK UNIFIED IDEOGRAPH-49CE	[FB80 C9CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_076)
{
    // 49CE 0061;	
    // (䧎) CJK UNIFIED IDEOGRAPH-49CE	[FB80 C9CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_077)
{
    // 49CE 0041;	
    // (䧎) CJK UNIFIED IDEOGRAPH-49CE	[FB80 C9CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_078)
{
    // 49CE 0062;	
    // (䧎) CJK UNIFIED IDEOGRAPH-49CE	[FB80 C9CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_079)
{
    // 49CF 0021;	
    // (䧏) CJK UNIFIED IDEOGRAPH-49CF	[FB80 C9CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_080)
{
    // 49CF 003F;	
    // (䧏) CJK UNIFIED IDEOGRAPH-49CF	[FB80 C9CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_081)
{
    // 49CF 0061;	
    // (䧏) CJK UNIFIED IDEOGRAPH-49CF	[FB80 C9CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_082)
{
    // 49CF 0041;	
    // (䧏) CJK UNIFIED IDEOGRAPH-49CF	[FB80 C9CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_083)
{
    // 49CF 0062;	
    // (䧏) CJK UNIFIED IDEOGRAPH-49CF	[FB80 C9CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_084)
{
    // 49D0 0021;	
    // (䧐) CJK UNIFIED IDEOGRAPH-49D0	[FB80 C9D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_085)
{
    // 49D0 003F;	
    // (䧐) CJK UNIFIED IDEOGRAPH-49D0	[FB80 C9D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_086)
{
    // 49D0 0061;	
    // (䧐) CJK UNIFIED IDEOGRAPH-49D0	[FB80 C9D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_087)
{
    // 49D0 0041;	
    // (䧐) CJK UNIFIED IDEOGRAPH-49D0	[FB80 C9D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_088)
{
    // 49D0 0062;	
    // (䧐) CJK UNIFIED IDEOGRAPH-49D0	[FB80 C9D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_089)
{
    // 49D1 0021;	
    // (䧑) CJK UNIFIED IDEOGRAPH-49D1	[FB80 C9D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_090)
{
    // 49D1 003F;	
    // (䧑) CJK UNIFIED IDEOGRAPH-49D1	[FB80 C9D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_091)
{
    // 49D1 0061;	
    // (䧑) CJK UNIFIED IDEOGRAPH-49D1	[FB80 C9D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_092)
{
    // 49D1 0041;	
    // (䧑) CJK UNIFIED IDEOGRAPH-49D1	[FB80 C9D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_093)
{
    // 49D1 0062;	
    // (䧑) CJK UNIFIED IDEOGRAPH-49D1	[FB80 C9D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_094)
{
    // 49D2 0021;	
    // (䧒) CJK UNIFIED IDEOGRAPH-49D2	[FB80 C9D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_095)
{
    // 49D2 003F;	
    // (䧒) CJK UNIFIED IDEOGRAPH-49D2	[FB80 C9D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_096)
{
    // 49D2 0061;	
    // (䧒) CJK UNIFIED IDEOGRAPH-49D2	[FB80 C9D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_097)
{
    // 49D2 0041;	
    // (䧒) CJK UNIFIED IDEOGRAPH-49D2	[FB80 C9D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_098)
{
    // 49D2 0062;	
    // (䧒) CJK UNIFIED IDEOGRAPH-49D2	[FB80 C9D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_099)
{
    // 49D3 0021;	
    // (䧓) CJK UNIFIED IDEOGRAPH-49D3	[FB80 C9D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_100)
{
    // 49D3 003F;	
    // (䧓) CJK UNIFIED IDEOGRAPH-49D3	[FB80 C9D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_101)
{
    // 49D3 0061;	
    // (䧓) CJK UNIFIED IDEOGRAPH-49D3	[FB80 C9D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_102)
{
    // 49D3 0041;	
    // (䧓) CJK UNIFIED IDEOGRAPH-49D3	[FB80 C9D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_103)
{
    // 49D3 0062;	
    // (䧓) CJK UNIFIED IDEOGRAPH-49D3	[FB80 C9D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_104)
{
    // 49D4 0021;	
    // (䧔) CJK UNIFIED IDEOGRAPH-49D4	[FB80 C9D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_105)
{
    // 49D4 003F;	
    // (䧔) CJK UNIFIED IDEOGRAPH-49D4	[FB80 C9D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_106)
{
    // 49D4 0061;	
    // (䧔) CJK UNIFIED IDEOGRAPH-49D4	[FB80 C9D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_107)
{
    // 49D4 0041;	
    // (䧔) CJK UNIFIED IDEOGRAPH-49D4	[FB80 C9D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_108)
{
    // 49D4 0062;	
    // (䧔) CJK UNIFIED IDEOGRAPH-49D4	[FB80 C9D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_109)
{
    // 49D5 0021;	
    // (䧕) CJK UNIFIED IDEOGRAPH-49D5	[FB80 C9D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_110)
{
    // 49D5 003F;	
    // (䧕) CJK UNIFIED IDEOGRAPH-49D5	[FB80 C9D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_111)
{
    // 49D5 0061;	
    // (䧕) CJK UNIFIED IDEOGRAPH-49D5	[FB80 C9D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_112)
{
    // 49D5 0041;	
    // (䧕) CJK UNIFIED IDEOGRAPH-49D5	[FB80 C9D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_113)
{
    // 49D5 0062;	
    // (䧕) CJK UNIFIED IDEOGRAPH-49D5	[FB80 C9D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_114)
{
    // 49D6 0021;	
    // (䧖) CJK UNIFIED IDEOGRAPH-49D6	[FB80 C9D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_115)
{
    // 49D6 003F;	
    // (䧖) CJK UNIFIED IDEOGRAPH-49D6	[FB80 C9D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_116)
{
    // 49D6 0061;	
    // (䧖) CJK UNIFIED IDEOGRAPH-49D6	[FB80 C9D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_117)
{
    // 49D6 0041;	
    // (䧖) CJK UNIFIED IDEOGRAPH-49D6	[FB80 C9D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_118)
{
    // 49D6 0062;	
    // (䧖) CJK UNIFIED IDEOGRAPH-49D6	[FB80 C9D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_119)
{
    // 49D7 0021;	
    // (䧗) CJK UNIFIED IDEOGRAPH-49D7	[FB80 C9D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_120)
{
    // 49D7 003F;	
    // (䧗) CJK UNIFIED IDEOGRAPH-49D7	[FB80 C9D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_121)
{
    // 49D7 0061;	
    // (䧗) CJK UNIFIED IDEOGRAPH-49D7	[FB80 C9D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_122)
{
    // 49D7 0041;	
    // (䧗) CJK UNIFIED IDEOGRAPH-49D7	[FB80 C9D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_123)
{
    // 49D7 0062;	
    // (䧗) CJK UNIFIED IDEOGRAPH-49D7	[FB80 C9D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_124)
{
    // 49D8 0021;	
    // (䧘) CJK UNIFIED IDEOGRAPH-49D8	[FB80 C9D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_125)
{
    // 49D8 003F;	
    // (䧘) CJK UNIFIED IDEOGRAPH-49D8	[FB80 C9D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_126)
{
    // 49D8 0061;	
    // (䧘) CJK UNIFIED IDEOGRAPH-49D8	[FB80 C9D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_127)
{
    // 49D8 0041;	
    // (䧘) CJK UNIFIED IDEOGRAPH-49D8	[FB80 C9D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_128)
{
    // 49D8 0062;	
    // (䧘) CJK UNIFIED IDEOGRAPH-49D8	[FB80 C9D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_129)
{
    // 49D9 0021;	
    // (䧙) CJK UNIFIED IDEOGRAPH-49D9	[FB80 C9D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_130)
{
    // 49D9 003F;	
    // (䧙) CJK UNIFIED IDEOGRAPH-49D9	[FB80 C9D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_131)
{
    // 49D9 0061;	
    // (䧙) CJK UNIFIED IDEOGRAPH-49D9	[FB80 C9D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_132)
{
    // 49D9 0041;	
    // (䧙) CJK UNIFIED IDEOGRAPH-49D9	[FB80 C9D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_133)
{
    // 49D9 0062;	
    // (䧙) CJK UNIFIED IDEOGRAPH-49D9	[FB80 C9D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_134)
{
    // 49DA 0021;	
    // (䧚) CJK UNIFIED IDEOGRAPH-49DA	[FB80 C9DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_135)
{
    // 49DA 003F;	
    // (䧚) CJK UNIFIED IDEOGRAPH-49DA	[FB80 C9DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_136)
{
    // 49DA 0061;	
    // (䧚) CJK UNIFIED IDEOGRAPH-49DA	[FB80 C9DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_137)
{
    // 49DA 0041;	
    // (䧚) CJK UNIFIED IDEOGRAPH-49DA	[FB80 C9DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_138)
{
    // 49DA 0062;	
    // (䧚) CJK UNIFIED IDEOGRAPH-49DA	[FB80 C9DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_139)
{
    // 49DB 0021;	
    // (䧛) CJK UNIFIED IDEOGRAPH-49DB	[FB80 C9DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_140)
{
    // 49DB 003F;	
    // (䧛) CJK UNIFIED IDEOGRAPH-49DB	[FB80 C9DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_141)
{
    // 49DB 0061;	
    // (䧛) CJK UNIFIED IDEOGRAPH-49DB	[FB80 C9DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_142)
{
    // 49DB 0041;	
    // (䧛) CJK UNIFIED IDEOGRAPH-49DB	[FB80 C9DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_143)
{
    // 49DB 0062;	
    // (䧛) CJK UNIFIED IDEOGRAPH-49DB	[FB80 C9DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_144)
{
    // 49DC 0021;	
    // (䧜) CJK UNIFIED IDEOGRAPH-49DC	[FB80 C9DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_145)
{
    // 49DC 003F;	
    // (䧜) CJK UNIFIED IDEOGRAPH-49DC	[FB80 C9DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_146)
{
    // 49DC 0061;	
    // (䧜) CJK UNIFIED IDEOGRAPH-49DC	[FB80 C9DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_147)
{
    // 49DC 0041;	
    // (䧜) CJK UNIFIED IDEOGRAPH-49DC	[FB80 C9DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_148)
{
    // 49DC 0062;	
    // (䧜) CJK UNIFIED IDEOGRAPH-49DC	[FB80 C9DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_149)
{
    // 49DD 0021;	
    // (䧝) CJK UNIFIED IDEOGRAPH-49DD	[FB80 C9DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_150)
{
    // 49DD 003F;	
    // (䧝) CJK UNIFIED IDEOGRAPH-49DD	[FB80 C9DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_151)
{
    // 49DD 0061;	
    // (䧝) CJK UNIFIED IDEOGRAPH-49DD	[FB80 C9DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_152)
{
    // 49DD 0041;	
    // (䧝) CJK UNIFIED IDEOGRAPH-49DD	[FB80 C9DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_153)
{
    // 49DD 0062;	
    // (䧝) CJK UNIFIED IDEOGRAPH-49DD	[FB80 C9DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_154)
{
    // 49DE 0021;	
    // (䧞) CJK UNIFIED IDEOGRAPH-49DE	[FB80 C9DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_155)
{
    // 49DE 003F;	
    // (䧞) CJK UNIFIED IDEOGRAPH-49DE	[FB80 C9DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_156)
{
    // 49DE 0061;	
    // (䧞) CJK UNIFIED IDEOGRAPH-49DE	[FB80 C9DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_157)
{
    // 49DE 0041;	
    // (䧞) CJK UNIFIED IDEOGRAPH-49DE	[FB80 C9DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_158)
{
    // 49DE 0062;	
    // (䧞) CJK UNIFIED IDEOGRAPH-49DE	[FB80 C9DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_159)
{
    // 49DF 0021;	
    // (䧟) CJK UNIFIED IDEOGRAPH-49DF	[FB80 C9DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_160)
{
    // 49DF 003F;	
    // (䧟) CJK UNIFIED IDEOGRAPH-49DF	[FB80 C9DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_161)
{
    // 49DF 0061;	
    // (䧟) CJK UNIFIED IDEOGRAPH-49DF	[FB80 C9DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_162)
{
    // 49DF 0041;	
    // (䧟) CJK UNIFIED IDEOGRAPH-49DF	[FB80 C9DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_163)
{
    // 49DF 0062;	
    // (䧟) CJK UNIFIED IDEOGRAPH-49DF	[FB80 C9DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_164)
{
    // 49E0 0021;	
    // (䧠) CJK UNIFIED IDEOGRAPH-49E0	[FB80 C9E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_165)
{
    // 49E0 003F;	
    // (䧠) CJK UNIFIED IDEOGRAPH-49E0	[FB80 C9E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_166)
{
    // 49E0 0061;	
    // (䧠) CJK UNIFIED IDEOGRAPH-49E0	[FB80 C9E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_167)
{
    // 49E0 0041;	
    // (䧠) CJK UNIFIED IDEOGRAPH-49E0	[FB80 C9E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_168)
{
    // 49E0 0062;	
    // (䧠) CJK UNIFIED IDEOGRAPH-49E0	[FB80 C9E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_169)
{
    // 49E1 0021;	
    // (䧡) CJK UNIFIED IDEOGRAPH-49E1	[FB80 C9E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_170)
{
    // 49E1 003F;	
    // (䧡) CJK UNIFIED IDEOGRAPH-49E1	[FB80 C9E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_171)
{
    // 49E1 0061;	
    // (䧡) CJK UNIFIED IDEOGRAPH-49E1	[FB80 C9E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_172)
{
    // 49E1 0041;	
    // (䧡) CJK UNIFIED IDEOGRAPH-49E1	[FB80 C9E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_173)
{
    // 49E1 0062;	
    // (䧡) CJK UNIFIED IDEOGRAPH-49E1	[FB80 C9E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_174)
{
    // 49E2 0021;	
    // (䧢) CJK UNIFIED IDEOGRAPH-49E2	[FB80 C9E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_175)
{
    // 49E2 003F;	
    // (䧢) CJK UNIFIED IDEOGRAPH-49E2	[FB80 C9E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_176)
{
    // 49E2 0061;	
    // (䧢) CJK UNIFIED IDEOGRAPH-49E2	[FB80 C9E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_177)
{
    // 49E2 0041;	
    // (䧢) CJK UNIFIED IDEOGRAPH-49E2	[FB80 C9E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_178)
{
    // 49E2 0062;	
    // (䧢) CJK UNIFIED IDEOGRAPH-49E2	[FB80 C9E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_179)
{
    // 49E3 0021;	
    // (䧣) CJK UNIFIED IDEOGRAPH-49E3	[FB80 C9E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_180)
{
    // 49E3 003F;	
    // (䧣) CJK UNIFIED IDEOGRAPH-49E3	[FB80 C9E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_181)
{
    // 49E3 0061;	
    // (䧣) CJK UNIFIED IDEOGRAPH-49E3	[FB80 C9E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_182)
{
    // 49E3 0041;	
    // (䧣) CJK UNIFIED IDEOGRAPH-49E3	[FB80 C9E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_183)
{
    // 49E3 0062;	
    // (䧣) CJK UNIFIED IDEOGRAPH-49E3	[FB80 C9E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_184)
{
    // 49E4 0021;	
    // (䧤) CJK UNIFIED IDEOGRAPH-49E4	[FB80 C9E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_185)
{
    // 49E4 003F;	
    // (䧤) CJK UNIFIED IDEOGRAPH-49E4	[FB80 C9E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_186)
{
    // 49E4 0061;	
    // (䧤) CJK UNIFIED IDEOGRAPH-49E4	[FB80 C9E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_187)
{
    // 49E4 0041;	
    // (䧤) CJK UNIFIED IDEOGRAPH-49E4	[FB80 C9E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_188)
{
    // 49E4 0062;	
    // (䧤) CJK UNIFIED IDEOGRAPH-49E4	[FB80 C9E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_189)
{
    // 49E5 0021;	
    // (䧥) CJK UNIFIED IDEOGRAPH-49E5	[FB80 C9E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_190)
{
    // 49E5 003F;	
    // (䧥) CJK UNIFIED IDEOGRAPH-49E5	[FB80 C9E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_191)
{
    // 49E5 0061;	
    // (䧥) CJK UNIFIED IDEOGRAPH-49E5	[FB80 C9E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_192)
{
    // 49E5 0041;	
    // (䧥) CJK UNIFIED IDEOGRAPH-49E5	[FB80 C9E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_193)
{
    // 49E5 0062;	
    // (䧥) CJK UNIFIED IDEOGRAPH-49E5	[FB80 C9E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_194)
{
    // 49E6 0021;	
    // (䧦) CJK UNIFIED IDEOGRAPH-49E6	[FB80 C9E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_195)
{
    // 2F9F2 0021;	
    // (䧦) CJK COMPATIBILITY IDEOGRAPH-2F9F2	[FB80 C9E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_196)
{
    // 49E6 003F;	
    // (䧦) CJK UNIFIED IDEOGRAPH-49E6	[FB80 C9E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_197)
{
    // 2F9F2 003F;	
    // (䧦) CJK COMPATIBILITY IDEOGRAPH-2F9F2	[FB80 C9E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_198)
{
    // 49E6 0061;	
    // (䧦) CJK UNIFIED IDEOGRAPH-49E6	[FB80 C9E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_199)
{
    // 2F9F2 0061;	
    // (䧦) CJK COMPATIBILITY IDEOGRAPH-2F9F2	[FB80 C9E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_200)
{
    // 49E6 0041;	
    // (䧦) CJK UNIFIED IDEOGRAPH-49E6	[FB80 C9E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_201)
{
    // 2F9F2 0041;	
    // (䧦) CJK COMPATIBILITY IDEOGRAPH-2F9F2	[FB80 C9E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_202)
{
    // 49E6 0062;	
    // (䧦) CJK UNIFIED IDEOGRAPH-49E6	[FB80 C9E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_203)
{
    // 2F9F2 0062;	
    // (䧦) CJK COMPATIBILITY IDEOGRAPH-2F9F2	[FB80 C9E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_204)
{
    // 49E7 0021;	
    // (䧧) CJK UNIFIED IDEOGRAPH-49E7	[FB80 C9E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_205)
{
    // 49E7 003F;	
    // (䧧) CJK UNIFIED IDEOGRAPH-49E7	[FB80 C9E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_206)
{
    // 49E7 0061;	
    // (䧧) CJK UNIFIED IDEOGRAPH-49E7	[FB80 C9E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_207)
{
    // 49E7 0041;	
    // (䧧) CJK UNIFIED IDEOGRAPH-49E7	[FB80 C9E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_208)
{
    // 49E7 0062;	
    // (䧧) CJK UNIFIED IDEOGRAPH-49E7	[FB80 C9E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_209)
{
    // 49E8 0021;	
    // (䧨) CJK UNIFIED IDEOGRAPH-49E8	[FB80 C9E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_210)
{
    // 49E8 003F;	
    // (䧨) CJK UNIFIED IDEOGRAPH-49E8	[FB80 C9E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_211)
{
    // 49E8 0061;	
    // (䧨) CJK UNIFIED IDEOGRAPH-49E8	[FB80 C9E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_212)
{
    // 49E8 0041;	
    // (䧨) CJK UNIFIED IDEOGRAPH-49E8	[FB80 C9E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_213)
{
    // 49E8 0062;	
    // (䧨) CJK UNIFIED IDEOGRAPH-49E8	[FB80 C9E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_214)
{
    // 49E9 0021;	
    // (䧩) CJK UNIFIED IDEOGRAPH-49E9	[FB80 C9E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_215)
{
    // 49E9 003F;	
    // (䧩) CJK UNIFIED IDEOGRAPH-49E9	[FB80 C9E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_216)
{
    // 49E9 0061;	
    // (䧩) CJK UNIFIED IDEOGRAPH-49E9	[FB80 C9E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_217)
{
    // 49E9 0041;	
    // (䧩) CJK UNIFIED IDEOGRAPH-49E9	[FB80 C9E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_218)
{
    // 49E9 0062;	
    // (䧩) CJK UNIFIED IDEOGRAPH-49E9	[FB80 C9E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_219)
{
    // 49EA 0021;	
    // (䧪) CJK UNIFIED IDEOGRAPH-49EA	[FB80 C9EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_220)
{
    // 49EA 003F;	
    // (䧪) CJK UNIFIED IDEOGRAPH-49EA	[FB80 C9EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_221)
{
    // 49EA 0061;	
    // (䧪) CJK UNIFIED IDEOGRAPH-49EA	[FB80 C9EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_222)
{
    // 49EA 0041;	
    // (䧪) CJK UNIFIED IDEOGRAPH-49EA	[FB80 C9EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_223)
{
    // 49EA 0062;	
    // (䧪) CJK UNIFIED IDEOGRAPH-49EA	[FB80 C9EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_224)
{
    // 49EB 0021;	
    // (䧫) CJK UNIFIED IDEOGRAPH-49EB	[FB80 C9EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_225)
{
    // 49EB 003F;	
    // (䧫) CJK UNIFIED IDEOGRAPH-49EB	[FB80 C9EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_226)
{
    // 49EB 0061;	
    // (䧫) CJK UNIFIED IDEOGRAPH-49EB	[FB80 C9EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_227)
{
    // 49EB 0041;	
    // (䧫) CJK UNIFIED IDEOGRAPH-49EB	[FB80 C9EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_228)
{
    // 49EB 0062;	
    // (䧫) CJK UNIFIED IDEOGRAPH-49EB	[FB80 C9EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_229)
{
    // 49EC 0021;	
    // (䧬) CJK UNIFIED IDEOGRAPH-49EC	[FB80 C9EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_230)
{
    // 49EC 003F;	
    // (䧬) CJK UNIFIED IDEOGRAPH-49EC	[FB80 C9EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_231)
{
    // 49EC 0061;	
    // (䧬) CJK UNIFIED IDEOGRAPH-49EC	[FB80 C9EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_232)
{
    // 49EC 0041;	
    // (䧬) CJK UNIFIED IDEOGRAPH-49EC	[FB80 C9EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_233)
{
    // 49EC 0062;	
    // (䧬) CJK UNIFIED IDEOGRAPH-49EC	[FB80 C9EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_234)
{
    // 49ED 0021;	
    // (䧭) CJK UNIFIED IDEOGRAPH-49ED	[FB80 C9ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_235)
{
    // 49ED 003F;	
    // (䧭) CJK UNIFIED IDEOGRAPH-49ED	[FB80 C9ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_236)
{
    // 49ED 0061;	
    // (䧭) CJK UNIFIED IDEOGRAPH-49ED	[FB80 C9ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_237)
{
    // 49ED 0041;	
    // (䧭) CJK UNIFIED IDEOGRAPH-49ED	[FB80 C9ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_238)
{
    // 49ED 0062;	
    // (䧭) CJK UNIFIED IDEOGRAPH-49ED	[FB80 C9ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_239)
{
    // 49EE 0021;	
    // (䧮) CJK UNIFIED IDEOGRAPH-49EE	[FB80 C9EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_240)
{
    // 49EE 003F;	
    // (䧮) CJK UNIFIED IDEOGRAPH-49EE	[FB80 C9EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_241)
{
    // 49EE 0061;	
    // (䧮) CJK UNIFIED IDEOGRAPH-49EE	[FB80 C9EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_242)
{
    // 49EE 0041;	
    // (䧮) CJK UNIFIED IDEOGRAPH-49EE	[FB80 C9EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_243)
{
    // 49EE 0062;	
    // (䧮) CJK UNIFIED IDEOGRAPH-49EE	[FB80 C9EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_244)
{
    // 49EF 0021;	
    // (䧯) CJK UNIFIED IDEOGRAPH-49EF	[FB80 C9EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_245)
{
    // 49EF 003F;	
    // (䧯) CJK UNIFIED IDEOGRAPH-49EF	[FB80 C9EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_246)
{
    // 49EF 0061;	
    // (䧯) CJK UNIFIED IDEOGRAPH-49EF	[FB80 C9EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_247)
{
    // 49EF 0041;	
    // (䧯) CJK UNIFIED IDEOGRAPH-49EF	[FB80 C9EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_248)
{
    // 49EF 0062;	
    // (䧯) CJK UNIFIED IDEOGRAPH-49EF	[FB80 C9EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_249)
{
    // 49F0 0021;	
    // (䧰) CJK UNIFIED IDEOGRAPH-49F0	[FB80 C9F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_250)
{
    // 49F0 003F;	
    // (䧰) CJK UNIFIED IDEOGRAPH-49F0	[FB80 C9F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_251)
{
    // 49F0 0061;	
    // (䧰) CJK UNIFIED IDEOGRAPH-49F0	[FB80 C9F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_252)
{
    // 49F0 0041;	
    // (䧰) CJK UNIFIED IDEOGRAPH-49F0	[FB80 C9F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_253)
{
    // 49F0 0062;	
    // (䧰) CJK UNIFIED IDEOGRAPH-49F0	[FB80 C9F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_254)
{
    // 49F1 0021;	
    // (䧱) CJK UNIFIED IDEOGRAPH-49F1	[FB80 C9F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_255)
{
    // 49F1 003F;	
    // (䧱) CJK UNIFIED IDEOGRAPH-49F1	[FB80 C9F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_256)
{
    // 49F1 0061;	
    // (䧱) CJK UNIFIED IDEOGRAPH-49F1	[FB80 C9F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_257)
{
    // 49F1 0041;	
    // (䧱) CJK UNIFIED IDEOGRAPH-49F1	[FB80 C9F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_258)
{
    // 49F1 0062;	
    // (䧱) CJK UNIFIED IDEOGRAPH-49F1	[FB80 C9F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_259)
{
    // 49F2 0021;	
    // (䧲) CJK UNIFIED IDEOGRAPH-49F2	[FB80 C9F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_260)
{
    // 49F2 003F;	
    // (䧲) CJK UNIFIED IDEOGRAPH-49F2	[FB80 C9F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_261)
{
    // 49F2 0061;	
    // (䧲) CJK UNIFIED IDEOGRAPH-49F2	[FB80 C9F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_262)
{
    // 49F2 0041;	
    // (䧲) CJK UNIFIED IDEOGRAPH-49F2	[FB80 C9F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_263)
{
    // 49F2 0062;	
    // (䧲) CJK UNIFIED IDEOGRAPH-49F2	[FB80 C9F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_264)
{
    // 49F3 0021;	
    // (䧳) CJK UNIFIED IDEOGRAPH-49F3	[FB80 C9F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_265)
{
    // 49F3 003F;	
    // (䧳) CJK UNIFIED IDEOGRAPH-49F3	[FB80 C9F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_266)
{
    // 49F3 0061;	
    // (䧳) CJK UNIFIED IDEOGRAPH-49F3	[FB80 C9F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_267)
{
    // 49F3 0041;	
    // (䧳) CJK UNIFIED IDEOGRAPH-49F3	[FB80 C9F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_268)
{
    // 49F3 0062;	
    // (䧳) CJK UNIFIED IDEOGRAPH-49F3	[FB80 C9F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_269)
{
    // 49F4 0021;	
    // (䧴) CJK UNIFIED IDEOGRAPH-49F4	[FB80 C9F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_270)
{
    // 49F4 003F;	
    // (䧴) CJK UNIFIED IDEOGRAPH-49F4	[FB80 C9F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_271)
{
    // 49F4 0061;	
    // (䧴) CJK UNIFIED IDEOGRAPH-49F4	[FB80 C9F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_272)
{
    // 49F4 0041;	
    // (䧴) CJK UNIFIED IDEOGRAPH-49F4	[FB80 C9F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_273)
{
    // 49F4 0062;	
    // (䧴) CJK UNIFIED IDEOGRAPH-49F4	[FB80 C9F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_274)
{
    // 49F5 0021;	
    // (䧵) CJK UNIFIED IDEOGRAPH-49F5	[FB80 C9F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_275)
{
    // 49F5 003F;	
    // (䧵) CJK UNIFIED IDEOGRAPH-49F5	[FB80 C9F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_276)
{
    // 49F5 0061;	
    // (䧵) CJK UNIFIED IDEOGRAPH-49F5	[FB80 C9F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_277)
{
    // 49F5 0041;	
    // (䧵) CJK UNIFIED IDEOGRAPH-49F5	[FB80 C9F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_278)
{
    // 49F5 0062;	
    // (䧵) CJK UNIFIED IDEOGRAPH-49F5	[FB80 C9F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_279)
{
    // 49F6 0021;	
    // (䧶) CJK UNIFIED IDEOGRAPH-49F6	[FB80 C9F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_280)
{
    // 49F6 003F;	
    // (䧶) CJK UNIFIED IDEOGRAPH-49F6	[FB80 C9F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_281)
{
    // 49F6 0061;	
    // (䧶) CJK UNIFIED IDEOGRAPH-49F6	[FB80 C9F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_282)
{
    // 49F6 0041;	
    // (䧶) CJK UNIFIED IDEOGRAPH-49F6	[FB80 C9F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_283)
{
    // 49F6 0062;	
    // (䧶) CJK UNIFIED IDEOGRAPH-49F6	[FB80 C9F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_284)
{
    // 49F7 0021;	
    // (䧷) CJK UNIFIED IDEOGRAPH-49F7	[FB80 C9F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_285)
{
    // 49F7 003F;	
    // (䧷) CJK UNIFIED IDEOGRAPH-49F7	[FB80 C9F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_286)
{
    // 49F7 0061;	
    // (䧷) CJK UNIFIED IDEOGRAPH-49F7	[FB80 C9F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_287)
{
    // 49F7 0041;	
    // (䧷) CJK UNIFIED IDEOGRAPH-49F7	[FB80 C9F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_288)
{
    // 49F7 0062;	
    // (䧷) CJK UNIFIED IDEOGRAPH-49F7	[FB80 C9F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_289)
{
    // 49F8 0021;	
    // (䧸) CJK UNIFIED IDEOGRAPH-49F8	[FB80 C9F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_290)
{
    // 49F8 003F;	
    // (䧸) CJK UNIFIED IDEOGRAPH-49F8	[FB80 C9F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_291)
{
    // 49F8 0061;	
    // (䧸) CJK UNIFIED IDEOGRAPH-49F8	[FB80 C9F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_292)
{
    // 49F8 0041;	
    // (䧸) CJK UNIFIED IDEOGRAPH-49F8	[FB80 C9F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_293)
{
    // 49F8 0062;	
    // (䧸) CJK UNIFIED IDEOGRAPH-49F8	[FB80 C9F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_294)
{
    // 49F9 0021;	
    // (䧹) CJK UNIFIED IDEOGRAPH-49F9	[FB80 C9F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_295)
{
    // 49F9 003F;	
    // (䧹) CJK UNIFIED IDEOGRAPH-49F9	[FB80 C9F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_296)
{
    // 49F9 0061;	
    // (䧹) CJK UNIFIED IDEOGRAPH-49F9	[FB80 C9F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_297)
{
    // 49F9 0041;	
    // (䧹) CJK UNIFIED IDEOGRAPH-49F9	[FB80 C9F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_298)
{
    // 49F9 0062;	
    // (䧹) CJK UNIFIED IDEOGRAPH-49F9	[FB80 C9F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_299)
{
    // 49FA 0021;	
    // (䧺) CJK UNIFIED IDEOGRAPH-49FA	[FB80 C9FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_300)
{
    // 49FA 003F;	
    // (䧺) CJK UNIFIED IDEOGRAPH-49FA	[FB80 C9FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_301)
{
    // 49FA 0061;	
    // (䧺) CJK UNIFIED IDEOGRAPH-49FA	[FB80 C9FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_302)
{
    // 49FA 0041;	
    // (䧺) CJK UNIFIED IDEOGRAPH-49FA	[FB80 C9FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_303)
{
    // 49FA 0062;	
    // (䧺) CJK UNIFIED IDEOGRAPH-49FA	[FB80 C9FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_304)
{
    // 49FB 0021;	
    // (䧻) CJK UNIFIED IDEOGRAPH-49FB	[FB80 C9FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_305)
{
    // 49FB 003F;	
    // (䧻) CJK UNIFIED IDEOGRAPH-49FB	[FB80 C9FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_306)
{
    // 49FB 0061;	
    // (䧻) CJK UNIFIED IDEOGRAPH-49FB	[FB80 C9FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_307)
{
    // 49FB 0041;	
    // (䧻) CJK UNIFIED IDEOGRAPH-49FB	[FB80 C9FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_308)
{
    // 49FB 0062;	
    // (䧻) CJK UNIFIED IDEOGRAPH-49FB	[FB80 C9FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_309)
{
    // 49FC 0021;	
    // (䧼) CJK UNIFIED IDEOGRAPH-49FC	[FB80 C9FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_310)
{
    // 49FC 003F;	
    // (䧼) CJK UNIFIED IDEOGRAPH-49FC	[FB80 C9FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_311)
{
    // 49FC 0061;	
    // (䧼) CJK UNIFIED IDEOGRAPH-49FC	[FB80 C9FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_312)
{
    // 49FC 0041;	
    // (䧼) CJK UNIFIED IDEOGRAPH-49FC	[FB80 C9FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_313)
{
    // 49FC 0062;	
    // (䧼) CJK UNIFIED IDEOGRAPH-49FC	[FB80 C9FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_314)
{
    // 49FD 0021;	
    // (䧽) CJK UNIFIED IDEOGRAPH-49FD	[FB80 C9FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_315)
{
    // 49FD 003F;	
    // (䧽) CJK UNIFIED IDEOGRAPH-49FD	[FB80 C9FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_316)
{
    // 49FD 0061;	
    // (䧽) CJK UNIFIED IDEOGRAPH-49FD	[FB80 C9FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_317)
{
    // 49FD 0041;	
    // (䧽) CJK UNIFIED IDEOGRAPH-49FD	[FB80 C9FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_318)
{
    // 49FD 0062;	
    // (䧽) CJK UNIFIED IDEOGRAPH-49FD	[FB80 C9FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_319)
{
    // 49FE 0021;	
    // (䧾) CJK UNIFIED IDEOGRAPH-49FE	[FB80 C9FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_320)
{
    // 49FE 003F;	
    // (䧾) CJK UNIFIED IDEOGRAPH-49FE	[FB80 C9FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_321)
{
    // 49FE 0061;	
    // (䧾) CJK UNIFIED IDEOGRAPH-49FE	[FB80 C9FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_322)
{
    // 49FE 0041;	
    // (䧾) CJK UNIFIED IDEOGRAPH-49FE	[FB80 C9FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_323)
{
    // 49FE 0062;	
    // (䧾) CJK UNIFIED IDEOGRAPH-49FE	[FB80 C9FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_324)
{
    // 49FF 0021;	
    // (䧿) CJK UNIFIED IDEOGRAPH-49FF	[FB80 C9FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_325)
{
    // 49FF 003F;	
    // (䧿) CJK UNIFIED IDEOGRAPH-49FF	[FB80 C9FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_326)
{
    // 49FF 0061;	
    // (䧿) CJK UNIFIED IDEOGRAPH-49FF	[FB80 C9FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_327)
{
    // 49FF 0041;	
    // (䧿) CJK UNIFIED IDEOGRAPH-49FF	[FB80 C9FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_328)
{
    // 49FF 0062;	
    // (䧿) CJK UNIFIED IDEOGRAPH-49FF	[FB80 C9FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_329)
{
    // 4A00 0021;	
    // (䨀) CJK UNIFIED IDEOGRAPH-4A00	[FB80 CA00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_330)
{
    // 4A00 003F;	
    // (䨀) CJK UNIFIED IDEOGRAPH-4A00	[FB80 CA00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_331)
{
    // 4A00 0061;	
    // (䨀) CJK UNIFIED IDEOGRAPH-4A00	[FB80 CA00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_332)
{
    // 4A00 0041;	
    // (䨀) CJK UNIFIED IDEOGRAPH-4A00	[FB80 CA00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_333)
{
    // 4A00 0062;	
    // (䨀) CJK UNIFIED IDEOGRAPH-4A00	[FB80 CA00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_334)
{
    // 4A01 0021;	
    // (䨁) CJK UNIFIED IDEOGRAPH-4A01	[FB80 CA01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_335)
{
    // 4A01 003F;	
    // (䨁) CJK UNIFIED IDEOGRAPH-4A01	[FB80 CA01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_336)
{
    // 4A01 0061;	
    // (䨁) CJK UNIFIED IDEOGRAPH-4A01	[FB80 CA01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_337)
{
    // 4A01 0041;	
    // (䨁) CJK UNIFIED IDEOGRAPH-4A01	[FB80 CA01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_338)
{
    // 4A01 0062;	
    // (䨁) CJK UNIFIED IDEOGRAPH-4A01	[FB80 CA01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_339)
{
    // 4A02 0021;	
    // (䨂) CJK UNIFIED IDEOGRAPH-4A02	[FB80 CA02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_340)
{
    // 4A02 003F;	
    // (䨂) CJK UNIFIED IDEOGRAPH-4A02	[FB80 CA02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_341)
{
    // 4A02 0061;	
    // (䨂) CJK UNIFIED IDEOGRAPH-4A02	[FB80 CA02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_342)
{
    // 4A02 0041;	
    // (䨂) CJK UNIFIED IDEOGRAPH-4A02	[FB80 CA02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_343)
{
    // 4A02 0062;	
    // (䨂) CJK UNIFIED IDEOGRAPH-4A02	[FB80 CA02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_344)
{
    // 4A03 0021;	
    // (䨃) CJK UNIFIED IDEOGRAPH-4A03	[FB80 CA03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_345)
{
    // 4A03 003F;	
    // (䨃) CJK UNIFIED IDEOGRAPH-4A03	[FB80 CA03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_346)
{
    // 4A03 0061;	
    // (䨃) CJK UNIFIED IDEOGRAPH-4A03	[FB80 CA03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_347)
{
    // 4A03 0041;	
    // (䨃) CJK UNIFIED IDEOGRAPH-4A03	[FB80 CA03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_348)
{
    // 4A03 0062;	
    // (䨃) CJK UNIFIED IDEOGRAPH-4A03	[FB80 CA03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_349)
{
    // 4A04 0021;	
    // (䨄) CJK UNIFIED IDEOGRAPH-4A04	[FB80 CA04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_350)
{
    // 4A04 003F;	
    // (䨄) CJK UNIFIED IDEOGRAPH-4A04	[FB80 CA04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_351)
{
    // 4A04 0061;	
    // (䨄) CJK UNIFIED IDEOGRAPH-4A04	[FB80 CA04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_352)
{
    // 4A04 0041;	
    // (䨄) CJK UNIFIED IDEOGRAPH-4A04	[FB80 CA04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_353)
{
    // 4A04 0062;	
    // (䨄) CJK UNIFIED IDEOGRAPH-4A04	[FB80 CA04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_354)
{
    // 4A05 0021;	
    // (䨅) CJK UNIFIED IDEOGRAPH-4A05	[FB80 CA05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_355)
{
    // 4A05 003F;	
    // (䨅) CJK UNIFIED IDEOGRAPH-4A05	[FB80 CA05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_356)
{
    // 4A05 0061;	
    // (䨅) CJK UNIFIED IDEOGRAPH-4A05	[FB80 CA05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_357)
{
    // 4A05 0041;	
    // (䨅) CJK UNIFIED IDEOGRAPH-4A05	[FB80 CA05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_358)
{
    // 4A05 0062;	
    // (䨅) CJK UNIFIED IDEOGRAPH-4A05	[FB80 CA05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_359)
{
    // 4A06 0021;	
    // (䨆) CJK UNIFIED IDEOGRAPH-4A06	[FB80 CA06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_360)
{
    // 4A06 003F;	
    // (䨆) CJK UNIFIED IDEOGRAPH-4A06	[FB80 CA06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_361)
{
    // 4A06 0061;	
    // (䨆) CJK UNIFIED IDEOGRAPH-4A06	[FB80 CA06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_362)
{
    // 4A06 0041;	
    // (䨆) CJK UNIFIED IDEOGRAPH-4A06	[FB80 CA06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_363)
{
    // 4A06 0062;	
    // (䨆) CJK UNIFIED IDEOGRAPH-4A06	[FB80 CA06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_364)
{
    // 4A07 0021;	
    // (䨇) CJK UNIFIED IDEOGRAPH-4A07	[FB80 CA07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_365)
{
    // 4A07 003F;	
    // (䨇) CJK UNIFIED IDEOGRAPH-4A07	[FB80 CA07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_366)
{
    // 4A07 0061;	
    // (䨇) CJK UNIFIED IDEOGRAPH-4A07	[FB80 CA07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_367)
{
    // 4A07 0041;	
    // (䨇) CJK UNIFIED IDEOGRAPH-4A07	[FB80 CA07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_368)
{
    // 4A07 0062;	
    // (䨇) CJK UNIFIED IDEOGRAPH-4A07	[FB80 CA07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_369)
{
    // 4A08 0021;	
    // (䨈) CJK UNIFIED IDEOGRAPH-4A08	[FB80 CA08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_370)
{
    // 4A08 003F;	
    // (䨈) CJK UNIFIED IDEOGRAPH-4A08	[FB80 CA08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_371)
{
    // 4A08 0061;	
    // (䨈) CJK UNIFIED IDEOGRAPH-4A08	[FB80 CA08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_372)
{
    // 4A08 0041;	
    // (䨈) CJK UNIFIED IDEOGRAPH-4A08	[FB80 CA08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_373)
{
    // 4A08 0062;	
    // (䨈) CJK UNIFIED IDEOGRAPH-4A08	[FB80 CA08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_374)
{
    // 4A09 0021;	
    // (䨉) CJK UNIFIED IDEOGRAPH-4A09	[FB80 CA09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_375)
{
    // 4A09 003F;	
    // (䨉) CJK UNIFIED IDEOGRAPH-4A09	[FB80 CA09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_376)
{
    // 4A09 0061;	
    // (䨉) CJK UNIFIED IDEOGRAPH-4A09	[FB80 CA09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_377)
{
    // 4A09 0041;	
    // (䨉) CJK UNIFIED IDEOGRAPH-4A09	[FB80 CA09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_378)
{
    // 4A09 0062;	
    // (䨉) CJK UNIFIED IDEOGRAPH-4A09	[FB80 CA09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_379)
{
    // 4A0A 0021;	
    // (䨊) CJK UNIFIED IDEOGRAPH-4A0A	[FB80 CA0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_380)
{
    // 4A0A 003F;	
    // (䨊) CJK UNIFIED IDEOGRAPH-4A0A	[FB80 CA0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_381)
{
    // 4A0A 0061;	
    // (䨊) CJK UNIFIED IDEOGRAPH-4A0A	[FB80 CA0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_382)
{
    // 4A0A 0041;	
    // (䨊) CJK UNIFIED IDEOGRAPH-4A0A	[FB80 CA0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_383)
{
    // 4A0A 0062;	
    // (䨊) CJK UNIFIED IDEOGRAPH-4A0A	[FB80 CA0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_384)
{
    // 4A0B 0021;	
    // (䨋) CJK UNIFIED IDEOGRAPH-4A0B	[FB80 CA0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_385)
{
    // 4A0B 003F;	
    // (䨋) CJK UNIFIED IDEOGRAPH-4A0B	[FB80 CA0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_386)
{
    // 4A0B 0061;	
    // (䨋) CJK UNIFIED IDEOGRAPH-4A0B	[FB80 CA0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_387)
{
    // 4A0B 0041;	
    // (䨋) CJK UNIFIED IDEOGRAPH-4A0B	[FB80 CA0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_388)
{
    // 4A0B 0062;	
    // (䨋) CJK UNIFIED IDEOGRAPH-4A0B	[FB80 CA0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_389)
{
    // 4A0C 0021;	
    // (䨌) CJK UNIFIED IDEOGRAPH-4A0C	[FB80 CA0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_390)
{
    // 4A0C 003F;	
    // (䨌) CJK UNIFIED IDEOGRAPH-4A0C	[FB80 CA0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_391)
{
    // 4A0C 0061;	
    // (䨌) CJK UNIFIED IDEOGRAPH-4A0C	[FB80 CA0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_392)
{
    // 4A0C 0041;	
    // (䨌) CJK UNIFIED IDEOGRAPH-4A0C	[FB80 CA0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_393)
{
    // 4A0C 0062;	
    // (䨌) CJK UNIFIED IDEOGRAPH-4A0C	[FB80 CA0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_394)
{
    // 4A0D 0021;	
    // (䨍) CJK UNIFIED IDEOGRAPH-4A0D	[FB80 CA0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_395)
{
    // 4A0D 003F;	
    // (䨍) CJK UNIFIED IDEOGRAPH-4A0D	[FB80 CA0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_396)
{
    // 4A0D 0061;	
    // (䨍) CJK UNIFIED IDEOGRAPH-4A0D	[FB80 CA0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_397)
{
    // 4A0D 0041;	
    // (䨍) CJK UNIFIED IDEOGRAPH-4A0D	[FB80 CA0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_398)
{
    // 4A0D 0062;	
    // (䨍) CJK UNIFIED IDEOGRAPH-4A0D	[FB80 CA0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_399)
{
    // 4A0E 0021;	
    // (䨎) CJK UNIFIED IDEOGRAPH-4A0E	[FB80 CA0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_400)
{
    // 4A0E 003F;	
    // (䨎) CJK UNIFIED IDEOGRAPH-4A0E	[FB80 CA0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_401)
{
    // 4A0E 0061;	
    // (䨎) CJK UNIFIED IDEOGRAPH-4A0E	[FB80 CA0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_402)
{
    // 4A0E 0041;	
    // (䨎) CJK UNIFIED IDEOGRAPH-4A0E	[FB80 CA0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_403)
{
    // 4A0E 0062;	
    // (䨎) CJK UNIFIED IDEOGRAPH-4A0E	[FB80 CA0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_404)
{
    // 4A0F 0021;	
    // (䨏) CJK UNIFIED IDEOGRAPH-4A0F	[FB80 CA0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_405)
{
    // 4A0F 003F;	
    // (䨏) CJK UNIFIED IDEOGRAPH-4A0F	[FB80 CA0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_406)
{
    // 4A0F 0061;	
    // (䨏) CJK UNIFIED IDEOGRAPH-4A0F	[FB80 CA0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_407)
{
    // 4A0F 0041;	
    // (䨏) CJK UNIFIED IDEOGRAPH-4A0F	[FB80 CA0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_408)
{
    // 4A0F 0062;	
    // (䨏) CJK UNIFIED IDEOGRAPH-4A0F	[FB80 CA0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_409)
{
    // 4A10 0021;	
    // (䨐) CJK UNIFIED IDEOGRAPH-4A10	[FB80 CA10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_410)
{
    // 4A10 003F;	
    // (䨐) CJK UNIFIED IDEOGRAPH-4A10	[FB80 CA10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_411)
{
    // 4A10 0061;	
    // (䨐) CJK UNIFIED IDEOGRAPH-4A10	[FB80 CA10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_412)
{
    // 4A10 0041;	
    // (䨐) CJK UNIFIED IDEOGRAPH-4A10	[FB80 CA10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_413)
{
    // 4A10 0062;	
    // (䨐) CJK UNIFIED IDEOGRAPH-4A10	[FB80 CA10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_414)
{
    // 4A11 0021;	
    // (䨑) CJK UNIFIED IDEOGRAPH-4A11	[FB80 CA11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_415)
{
    // 4A11 003F;	
    // (䨑) CJK UNIFIED IDEOGRAPH-4A11	[FB80 CA11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_416)
{
    // 4A11 0061;	
    // (䨑) CJK UNIFIED IDEOGRAPH-4A11	[FB80 CA11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_417)
{
    // 4A11 0041;	
    // (䨑) CJK UNIFIED IDEOGRAPH-4A11	[FB80 CA11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_418)
{
    // 4A11 0062;	
    // (䨑) CJK UNIFIED IDEOGRAPH-4A11	[FB80 CA11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_419)
{
    // 4A12 0021;	
    // (䨒) CJK UNIFIED IDEOGRAPH-4A12	[FB80 CA12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_420)
{
    // 4A12 003F;	
    // (䨒) CJK UNIFIED IDEOGRAPH-4A12	[FB80 CA12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_421)
{
    // 4A12 0061;	
    // (䨒) CJK UNIFIED IDEOGRAPH-4A12	[FB80 CA12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_422)
{
    // 4A12 0041;	
    // (䨒) CJK UNIFIED IDEOGRAPH-4A12	[FB80 CA12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_423)
{
    // 4A12 0062;	
    // (䨒) CJK UNIFIED IDEOGRAPH-4A12	[FB80 CA12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_424)
{
    // 4A13 0021;	
    // (䨓) CJK UNIFIED IDEOGRAPH-4A13	[FB80 CA13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_425)
{
    // 4A13 003F;	
    // (䨓) CJK UNIFIED IDEOGRAPH-4A13	[FB80 CA13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_426)
{
    // 4A13 0061;	
    // (䨓) CJK UNIFIED IDEOGRAPH-4A13	[FB80 CA13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_427)
{
    // 4A13 0041;	
    // (䨓) CJK UNIFIED IDEOGRAPH-4A13	[FB80 CA13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_428)
{
    // 4A13 0062;	
    // (䨓) CJK UNIFIED IDEOGRAPH-4A13	[FB80 CA13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_429)
{
    // 4A14 0021;	
    // (䨔) CJK UNIFIED IDEOGRAPH-4A14	[FB80 CA14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_430)
{
    // 4A14 003F;	
    // (䨔) CJK UNIFIED IDEOGRAPH-4A14	[FB80 CA14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_431)
{
    // 4A14 0061;	
    // (䨔) CJK UNIFIED IDEOGRAPH-4A14	[FB80 CA14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_432)
{
    // 4A14 0041;	
    // (䨔) CJK UNIFIED IDEOGRAPH-4A14	[FB80 CA14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_433)
{
    // 4A14 0062;	
    // (䨔) CJK UNIFIED IDEOGRAPH-4A14	[FB80 CA14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_434)
{
    // 4A15 0021;	
    // (䨕) CJK UNIFIED IDEOGRAPH-4A15	[FB80 CA15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_435)
{
    // 4A15 003F;	
    // (䨕) CJK UNIFIED IDEOGRAPH-4A15	[FB80 CA15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_436)
{
    // 4A15 0061;	
    // (䨕) CJK UNIFIED IDEOGRAPH-4A15	[FB80 CA15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_437)
{
    // 4A15 0041;	
    // (䨕) CJK UNIFIED IDEOGRAPH-4A15	[FB80 CA15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_438)
{
    // 4A15 0062;	
    // (䨕) CJK UNIFIED IDEOGRAPH-4A15	[FB80 CA15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_439)
{
    // 4A16 0021;	
    // (䨖) CJK UNIFIED IDEOGRAPH-4A16	[FB80 CA16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_440)
{
    // 4A16 003F;	
    // (䨖) CJK UNIFIED IDEOGRAPH-4A16	[FB80 CA16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_441)
{
    // 4A16 0061;	
    // (䨖) CJK UNIFIED IDEOGRAPH-4A16	[FB80 CA16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_442)
{
    // 4A16 0041;	
    // (䨖) CJK UNIFIED IDEOGRAPH-4A16	[FB80 CA16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_443)
{
    // 4A16 0062;	
    // (䨖) CJK UNIFIED IDEOGRAPH-4A16	[FB80 CA16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_444)
{
    // 4A17 0021;	
    // (䨗) CJK UNIFIED IDEOGRAPH-4A17	[FB80 CA17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_445)
{
    // 4A17 003F;	
    // (䨗) CJK UNIFIED IDEOGRAPH-4A17	[FB80 CA17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_446)
{
    // 4A17 0061;	
    // (䨗) CJK UNIFIED IDEOGRAPH-4A17	[FB80 CA17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_447)
{
    // 4A17 0041;	
    // (䨗) CJK UNIFIED IDEOGRAPH-4A17	[FB80 CA17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_448)
{
    // 4A17 0062;	
    // (䨗) CJK UNIFIED IDEOGRAPH-4A17	[FB80 CA17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_449)
{
    // 4A18 0021;	
    // (䨘) CJK UNIFIED IDEOGRAPH-4A18	[FB80 CA18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_450)
{
    // 4A18 003F;	
    // (䨘) CJK UNIFIED IDEOGRAPH-4A18	[FB80 CA18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_451)
{
    // 4A18 0061;	
    // (䨘) CJK UNIFIED IDEOGRAPH-4A18	[FB80 CA18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_452)
{
    // 4A18 0041;	
    // (䨘) CJK UNIFIED IDEOGRAPH-4A18	[FB80 CA18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_453)
{
    // 4A18 0062;	
    // (䨘) CJK UNIFIED IDEOGRAPH-4A18	[FB80 CA18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_454)
{
    // 4A19 0021;	
    // (䨙) CJK UNIFIED IDEOGRAPH-4A19	[FB80 CA19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_455)
{
    // 4A19 003F;	
    // (䨙) CJK UNIFIED IDEOGRAPH-4A19	[FB80 CA19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_456)
{
    // 4A19 0061;	
    // (䨙) CJK UNIFIED IDEOGRAPH-4A19	[FB80 CA19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_457)
{
    // 4A19 0041;	
    // (䨙) CJK UNIFIED IDEOGRAPH-4A19	[FB80 CA19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_458)
{
    // 4A19 0062;	
    // (䨙) CJK UNIFIED IDEOGRAPH-4A19	[FB80 CA19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_459)
{
    // 4A1A 0021;	
    // (䨚) CJK UNIFIED IDEOGRAPH-4A1A	[FB80 CA1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_460)
{
    // 4A1A 003F;	
    // (䨚) CJK UNIFIED IDEOGRAPH-4A1A	[FB80 CA1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_461)
{
    // 4A1A 0061;	
    // (䨚) CJK UNIFIED IDEOGRAPH-4A1A	[FB80 CA1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_462)
{
    // 4A1A 0041;	
    // (䨚) CJK UNIFIED IDEOGRAPH-4A1A	[FB80 CA1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_463)
{
    // 4A1A 0062;	
    // (䨚) CJK UNIFIED IDEOGRAPH-4A1A	[FB80 CA1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_464)
{
    // 4A1B 0021;	
    // (䨛) CJK UNIFIED IDEOGRAPH-4A1B	[FB80 CA1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_465)
{
    // 4A1B 003F;	
    // (䨛) CJK UNIFIED IDEOGRAPH-4A1B	[FB80 CA1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_466)
{
    // 4A1B 0061;	
    // (䨛) CJK UNIFIED IDEOGRAPH-4A1B	[FB80 CA1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_467)
{
    // 4A1B 0041;	
    // (䨛) CJK UNIFIED IDEOGRAPH-4A1B	[FB80 CA1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_468)
{
    // 4A1B 0062;	
    // (䨛) CJK UNIFIED IDEOGRAPH-4A1B	[FB80 CA1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_469)
{
    // 4A1C 0021;	
    // (䨜) CJK UNIFIED IDEOGRAPH-4A1C	[FB80 CA1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_470)
{
    // 4A1C 003F;	
    // (䨜) CJK UNIFIED IDEOGRAPH-4A1C	[FB80 CA1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_471)
{
    // 4A1C 0061;	
    // (䨜) CJK UNIFIED IDEOGRAPH-4A1C	[FB80 CA1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_472)
{
    // 4A1C 0041;	
    // (䨜) CJK UNIFIED IDEOGRAPH-4A1C	[FB80 CA1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_473)
{
    // 4A1C 0062;	
    // (䨜) CJK UNIFIED IDEOGRAPH-4A1C	[FB80 CA1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_474)
{
    // 4A1D 0021;	
    // (䨝) CJK UNIFIED IDEOGRAPH-4A1D	[FB80 CA1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_475)
{
    // 4A1D 003F;	
    // (䨝) CJK UNIFIED IDEOGRAPH-4A1D	[FB80 CA1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_476)
{
    // 4A1D 0061;	
    // (䨝) CJK UNIFIED IDEOGRAPH-4A1D	[FB80 CA1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_477)
{
    // 4A1D 0041;	
    // (䨝) CJK UNIFIED IDEOGRAPH-4A1D	[FB80 CA1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_478)
{
    // 4A1D 0062;	
    // (䨝) CJK UNIFIED IDEOGRAPH-4A1D	[FB80 CA1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_479)
{
    // 4A1E 0021;	
    // (䨞) CJK UNIFIED IDEOGRAPH-4A1E	[FB80 CA1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_480)
{
    // 4A1E 003F;	
    // (䨞) CJK UNIFIED IDEOGRAPH-4A1E	[FB80 CA1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_481)
{
    // 4A1E 0061;	
    // (䨞) CJK UNIFIED IDEOGRAPH-4A1E	[FB80 CA1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_482)
{
    // 4A1E 0041;	
    // (䨞) CJK UNIFIED IDEOGRAPH-4A1E	[FB80 CA1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_483)
{
    // 4A1E 0062;	
    // (䨞) CJK UNIFIED IDEOGRAPH-4A1E	[FB80 CA1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_484)
{
    // 4A1F 0021;	
    // (䨟) CJK UNIFIED IDEOGRAPH-4A1F	[FB80 CA1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_485)
{
    // 4A1F 003F;	
    // (䨟) CJK UNIFIED IDEOGRAPH-4A1F	[FB80 CA1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_486)
{
    // 4A1F 0061;	
    // (䨟) CJK UNIFIED IDEOGRAPH-4A1F	[FB80 CA1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_487)
{
    // 4A1F 0041;	
    // (䨟) CJK UNIFIED IDEOGRAPH-4A1F	[FB80 CA1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_488)
{
    // 4A1F 0062;	
    // (䨟) CJK UNIFIED IDEOGRAPH-4A1F	[FB80 CA1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_489)
{
    // 4A20 0021;	
    // (䨠) CJK UNIFIED IDEOGRAPH-4A20	[FB80 CA20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_490)
{
    // 4A20 003F;	
    // (䨠) CJK UNIFIED IDEOGRAPH-4A20	[FB80 CA20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_491)
{
    // 4A20 0061;	
    // (䨠) CJK UNIFIED IDEOGRAPH-4A20	[FB80 CA20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_492)
{
    // 4A20 0041;	
    // (䨠) CJK UNIFIED IDEOGRAPH-4A20	[FB80 CA20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_493)
{
    // 4A20 0062;	
    // (䨠) CJK UNIFIED IDEOGRAPH-4A20	[FB80 CA20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_494)
{
    // 4A21 0021;	
    // (䨡) CJK UNIFIED IDEOGRAPH-4A21	[FB80 CA21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_495)
{
    // 4A21 003F;	
    // (䨡) CJK UNIFIED IDEOGRAPH-4A21	[FB80 CA21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCA21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_496)
{
    // 4A21 0061;	
    // (䨡) CJK UNIFIED IDEOGRAPH-4A21	[FB80 CA21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_497)
{
    // 4A21 0041;	
    // (䨡) CJK UNIFIED IDEOGRAPH-4A21	[FB80 CA21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4A21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCA21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_498)
{
    // 4A21 0062;	
    // (䨡) CJK UNIFIED IDEOGRAPH-4A21	[FB80 CA21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCA21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_383_499)
{
    // 4A22 0021;	
    // (䨢) CJK UNIFIED IDEOGRAPH-4A22	[FB80 CA22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4A22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCA22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

