// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_116_000)
{
    // FFD2  ; [.3D96.0020.0012] 
    // HALFWIDTH HANGUL LETTER YO

    uint32_t const cps[1] = { 0xffd2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d96), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_001)
{
    // FFD3  ; [.3D97.0020.0012] 
    // HALFWIDTH HANGUL LETTER U

    uint32_t const cps[1] = { 0xffd3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d97), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_002)
{
    // FFD4  ; [.3D98.0020.0012] 
    // HALFWIDTH HANGUL LETTER WEO

    uint32_t const cps[1] = { 0xffd4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d98), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_003)
{
    // FFD5  ; [.3D99.0020.0012] 
    // HALFWIDTH HANGUL LETTER WE

    uint32_t const cps[1] = { 0xffd5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d99), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_004)
{
    // FFD6  ; [.3D9A.0020.0012] 
    // HALFWIDTH HANGUL LETTER WI

    uint32_t const cps[1] = { 0xffd6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d9a), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_005)
{
    // FFD7  ; [.3D9B.0020.0012] 
    // HALFWIDTH HANGUL LETTER YU

    uint32_t const cps[1] = { 0xffd7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d9b), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_006)
{
    // FFDA  ; [.3D9C.0020.0012] 
    // HALFWIDTH HANGUL LETTER EU

    uint32_t const cps[1] = { 0xffda };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d9c), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_007)
{
    // FFDB  ; [.3D9D.0020.0012] 
    // HALFWIDTH HANGUL LETTER YI

    uint32_t const cps[1] = { 0xffdb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d9d), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_008)
{
    // FFDC  ; [.3D9E.0020.0012] 
    // HALFWIDTH HANGUL LETTER I

    uint32_t const cps[1] = { 0xffdc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3d9e), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_009)
{
    // FFE0  ; [.1C76.0020.0003] 
    // FULLWIDTH CENT SIGN

    uint32_t const cps[1] = { 0xffe0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c76), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_010)
{
    // FFE1  ; [.1C78.0020.0003] 
    // FULLWIDTH POUND SIGN

    uint32_t const cps[1] = { 0xffe1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c78), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_011)
{
    // FFE2  ; [*0633.0020.0003] 
    // FULLWIDTH NOT SIGN

    uint32_t const cps[1] = { 0xffe2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x633), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_012)
{
    // FFE3  ; [*049C.0020.0003] 
    // FULLWIDTH MACRON

    uint32_t const cps[1] = { 0xffe3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x49c), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_013)
{
    // FFE4  ; [*0635.0020.0003] 
    // FULLWIDTH BROKEN BAR

    uint32_t const cps[1] = { 0xffe4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x635), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_014)
{
    // FFE5  ; [.1C79.0020.0003] 
    // FULLWIDTH YEN SIGN

    uint32_t const cps[1] = { 0xffe5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c79), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_015)
{
    // FFE6  ; [.1C8C.0020.0003] 
    // FULLWIDTH WON SIGN

    uint32_t const cps[1] = { 0xffe6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8c), uint8_t(0x0), uint8_t(0x3)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_016)
{
    // FFE8  ; [*0831.0020.0012] 
    // HALFWIDTH FORMS LIGHT VERTICAL

    uint32_t const cps[1] = { 0xffe8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x831), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_017)
{
    // FFE9  ; [*05B2.0020.0012] 
    // HALFWIDTH LEFTWARDS ARROW

    uint32_t const cps[1] = { 0xffe9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b2), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_018)
{
    // FFEA  ; [*05B4.0020.0012] 
    // HALFWIDTH UPWARDS ARROW

    uint32_t const cps[1] = { 0xffea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b4), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_019)
{
    // FFEB  ; [*05B3.0020.0012] 
    // HALFWIDTH RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0xffeb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b3), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_020)
{
    // FFEC  ; [*05B5.0020.0012] 
    // HALFWIDTH DOWNWARDS ARROW

    uint32_t const cps[1] = { 0xffec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5b5), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_021)
{
    // FFED  ; [*08CF.0020.0012] 
    // HALFWIDTH BLACK SQUARE

    uint32_t const cps[1] = { 0xffed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x8cf), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_022)
{
    // FFEE  ; [*08FA.0020.0012] 
    // HALFWIDTH WHITE CIRCLE

    uint32_t const cps[1] = { 0xffee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x8fa), uint8_t(0x0), uint8_t(0x12)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_023)
{
    // FFF9  ; [.0000.0000.0000] 
    // INTERLINEAR ANNOTATION ANCHOR

    uint32_t const cps[1] = { 0xfff9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_024)
{
    // FFFA  ; [.0000.0000.0000] 
    // INTERLINEAR ANNOTATION SEPARATOR

    uint32_t const cps[1] = { 0xfffa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_025)
{
    // FFFB  ; [.0000.0000.0000] 
    // INTERLINEAR ANNOTATION TERMINATOR

    uint32_t const cps[1] = { 0xfffb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_026)
{
    // FFFC  ; [*1AF9.0020.0002] 
    // OBJECT REPLACEMENT CHARACTER

    uint32_t const cps[1] = { 0xfffc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_027)
{
    // FFFD  ; [.FFFD.0020.0002] 
    // REPLACEMENT CHARACTER

    uint32_t const cps[1] = { 0xfffd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfffd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_028)
{
    // 10000 ; [.481E.0020.0002] 
    // LINEAR B SYLLABLE B008 A

    uint32_t const cps[1] = { 0x10000 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_029)
{
    // 10001 ; [.481F.0020.0002] 
    // LINEAR B SYLLABLE B038 E

    uint32_t const cps[1] = { 0x10001 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x481f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_030)
{
    // 10002 ; [.4820.0020.0002] 
    // LINEAR B SYLLABLE B028 I

    uint32_t const cps[1] = { 0x10002 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4820), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_031)
{
    // 10003 ; [.4821.0020.0002] 
    // LINEAR B SYLLABLE B061 O

    uint32_t const cps[1] = { 0x10003 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4821), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_032)
{
    // 10004 ; [.4822.0020.0002] 
    // LINEAR B SYLLABLE B010 U

    uint32_t const cps[1] = { 0x10004 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4822), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_033)
{
    // 10005 ; [.4823.0020.0002] 
    // LINEAR B SYLLABLE B001 DA

    uint32_t const cps[1] = { 0x10005 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4823), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_034)
{
    // 10006 ; [.4824.0020.0002] 
    // LINEAR B SYLLABLE B045 DE

    uint32_t const cps[1] = { 0x10006 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4824), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_035)
{
    // 10007 ; [.4825.0020.0002] 
    // LINEAR B SYLLABLE B007 DI

    uint32_t const cps[1] = { 0x10007 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4825), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_036)
{
    // 10008 ; [.4826.0020.0002] 
    // LINEAR B SYLLABLE B014 DO

    uint32_t const cps[1] = { 0x10008 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4826), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_037)
{
    // 10009 ; [.4827.0020.0002] 
    // LINEAR B SYLLABLE B051 DU

    uint32_t const cps[1] = { 0x10009 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4827), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_038)
{
    // 1000A ; [.4828.0020.0002] 
    // LINEAR B SYLLABLE B057 JA

    uint32_t const cps[1] = { 0x1000a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4828), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_039)
{
    // 1000B ; [.4829.0020.0002] 
    // LINEAR B SYLLABLE B046 JE

    uint32_t const cps[1] = { 0x1000b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4829), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_040)
{
    // 1000D ; [.482A.0020.0002] 
    // LINEAR B SYLLABLE B036 JO

    uint32_t const cps[1] = { 0x1000d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_041)
{
    // 1000E ; [.482B.0020.0002] 
    // LINEAR B SYLLABLE B065 JU

    uint32_t const cps[1] = { 0x1000e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_042)
{
    // 1000F ; [.482C.0020.0002] 
    // LINEAR B SYLLABLE B077 KA

    uint32_t const cps[1] = { 0x1000f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_043)
{
    // 10010 ; [.482D.0020.0002] 
    // LINEAR B SYLLABLE B044 KE

    uint32_t const cps[1] = { 0x10010 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_044)
{
    // 10011 ; [.482E.0020.0002] 
    // LINEAR B SYLLABLE B067 KI

    uint32_t const cps[1] = { 0x10011 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_045)
{
    // 10012 ; [.482F.0020.0002] 
    // LINEAR B SYLLABLE B070 KO

    uint32_t const cps[1] = { 0x10012 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x482f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_046)
{
    // 10013 ; [.4830.0020.0002] 
    // LINEAR B SYLLABLE B081 KU

    uint32_t const cps[1] = { 0x10013 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4830), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_047)
{
    // 10014 ; [.4831.0020.0002] 
    // LINEAR B SYLLABLE B080 MA

    uint32_t const cps[1] = { 0x10014 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4831), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_048)
{
    // 10015 ; [.4832.0020.0002] 
    // LINEAR B SYLLABLE B013 ME

    uint32_t const cps[1] = { 0x10015 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4832), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_049)
{
    // 10016 ; [.4833.0020.0002] 
    // LINEAR B SYLLABLE B073 MI

    uint32_t const cps[1] = { 0x10016 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4833), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_050)
{
    // 10017 ; [.4834.0020.0002] 
    // LINEAR B SYLLABLE B015 MO

    uint32_t const cps[1] = { 0x10017 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4834), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_051)
{
    // 10018 ; [.4835.0020.0002] 
    // LINEAR B SYLLABLE B023 MU

    uint32_t const cps[1] = { 0x10018 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4835), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_052)
{
    // 10019 ; [.4836.0020.0002] 
    // LINEAR B SYLLABLE B006 NA

    uint32_t const cps[1] = { 0x10019 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4836), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_053)
{
    // 1001A ; [.4837.0020.0002] 
    // LINEAR B SYLLABLE B024 NE

    uint32_t const cps[1] = { 0x1001a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4837), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_054)
{
    // 1001B ; [.4838.0020.0002] 
    // LINEAR B SYLLABLE B030 NI

    uint32_t const cps[1] = { 0x1001b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4838), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_055)
{
    // 1001C ; [.4839.0020.0002] 
    // LINEAR B SYLLABLE B052 NO

    uint32_t const cps[1] = { 0x1001c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4839), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_056)
{
    // 1001D ; [.483A.0020.0002] 
    // LINEAR B SYLLABLE B055 NU

    uint32_t const cps[1] = { 0x1001d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_057)
{
    // 1001E ; [.483B.0020.0002] 
    // LINEAR B SYLLABLE B003 PA

    uint32_t const cps[1] = { 0x1001e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_058)
{
    // 1001F ; [.483C.0020.0002] 
    // LINEAR B SYLLABLE B072 PE

    uint32_t const cps[1] = { 0x1001f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_059)
{
    // 10020 ; [.483D.0020.0002] 
    // LINEAR B SYLLABLE B039 PI

    uint32_t const cps[1] = { 0x10020 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_060)
{
    // 10021 ; [.483E.0020.0002] 
    // LINEAR B SYLLABLE B011 PO

    uint32_t const cps[1] = { 0x10021 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_061)
{
    // 10022 ; [.483F.0020.0002] 
    // LINEAR B SYLLABLE B050 PU

    uint32_t const cps[1] = { 0x10022 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x483f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_062)
{
    // 10023 ; [.4840.0020.0002] 
    // LINEAR B SYLLABLE B016 QA

    uint32_t const cps[1] = { 0x10023 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4840), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_063)
{
    // 10024 ; [.4841.0020.0002] 
    // LINEAR B SYLLABLE B078 QE

    uint32_t const cps[1] = { 0x10024 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4841), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_064)
{
    // 10025 ; [.4842.0020.0002] 
    // LINEAR B SYLLABLE B021 QI

    uint32_t const cps[1] = { 0x10025 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4842), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_065)
{
    // 10026 ; [.4843.0020.0002] 
    // LINEAR B SYLLABLE B032 QO

    uint32_t const cps[1] = { 0x10026 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4843), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_066)
{
    // 10028 ; [.4844.0020.0002] 
    // LINEAR B SYLLABLE B060 RA

    uint32_t const cps[1] = { 0x10028 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4844), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_067)
{
    // 10029 ; [.4845.0020.0002] 
    // LINEAR B SYLLABLE B027 RE

    uint32_t const cps[1] = { 0x10029 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4845), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_068)
{
    // 1002A ; [.4846.0020.0002] 
    // LINEAR B SYLLABLE B053 RI

    uint32_t const cps[1] = { 0x1002a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4846), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_069)
{
    // 1002B ; [.4847.0020.0002] 
    // LINEAR B SYLLABLE B002 RO

    uint32_t const cps[1] = { 0x1002b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4847), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_070)
{
    // 1002C ; [.4848.0020.0002] 
    // LINEAR B SYLLABLE B026 RU

    uint32_t const cps[1] = { 0x1002c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4848), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_071)
{
    // 1002D ; [.4849.0020.0002] 
    // LINEAR B SYLLABLE B031 SA

    uint32_t const cps[1] = { 0x1002d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4849), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_072)
{
    // 1002E ; [.484A.0020.0002] 
    // LINEAR B SYLLABLE B009 SE

    uint32_t const cps[1] = { 0x1002e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_073)
{
    // 1002F ; [.484B.0020.0002] 
    // LINEAR B SYLLABLE B041 SI

    uint32_t const cps[1] = { 0x1002f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_074)
{
    // 10030 ; [.484C.0020.0002] 
    // LINEAR B SYLLABLE B012 SO

    uint32_t const cps[1] = { 0x10030 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_075)
{
    // 10031 ; [.484D.0020.0002] 
    // LINEAR B SYLLABLE B058 SU

    uint32_t const cps[1] = { 0x10031 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_076)
{
    // 10032 ; [.484E.0020.0002] 
    // LINEAR B SYLLABLE B059 TA

    uint32_t const cps[1] = { 0x10032 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_077)
{
    // 10033 ; [.484F.0020.0002] 
    // LINEAR B SYLLABLE B004 TE

    uint32_t const cps[1] = { 0x10033 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x484f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_078)
{
    // 10034 ; [.4850.0020.0002] 
    // LINEAR B SYLLABLE B037 TI

    uint32_t const cps[1] = { 0x10034 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4850), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_079)
{
    // 10035 ; [.4851.0020.0002] 
    // LINEAR B SYLLABLE B005 TO

    uint32_t const cps[1] = { 0x10035 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4851), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_080)
{
    // 10036 ; [.4852.0020.0002] 
    // LINEAR B SYLLABLE B069 TU

    uint32_t const cps[1] = { 0x10036 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4852), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_081)
{
    // 10037 ; [.4853.0020.0002] 
    // LINEAR B SYLLABLE B054 WA

    uint32_t const cps[1] = { 0x10037 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4853), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_082)
{
    // 10038 ; [.4854.0020.0002] 
    // LINEAR B SYLLABLE B075 WE

    uint32_t const cps[1] = { 0x10038 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4854), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_083)
{
    // 10039 ; [.4855.0020.0002] 
    // LINEAR B SYLLABLE B040 WI

    uint32_t const cps[1] = { 0x10039 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4855), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_084)
{
    // 1003A ; [.4856.0020.0002] 
    // LINEAR B SYLLABLE B042 WO

    uint32_t const cps[1] = { 0x1003a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4856), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_085)
{
    // 1003C ; [.4857.0020.0002] 
    // LINEAR B SYLLABLE B017 ZA

    uint32_t const cps[1] = { 0x1003c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4857), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_086)
{
    // 1003D ; [.4858.0020.0002] 
    // LINEAR B SYLLABLE B074 ZE

    uint32_t const cps[1] = { 0x1003d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4858), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_087)
{
    // 1003F ; [.4859.0020.0002] 
    // LINEAR B SYLLABLE B020 ZO

    uint32_t const cps[1] = { 0x1003f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4859), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_088)
{
    // 10040 ; [.485A.0020.0002] 
    // LINEAR B SYLLABLE B025 A2

    uint32_t const cps[1] = { 0x10040 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_089)
{
    // 10041 ; [.485B.0020.0002] 
    // LINEAR B SYLLABLE B043 A3

    uint32_t const cps[1] = { 0x10041 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_090)
{
    // 10042 ; [.485C.0020.0002] 
    // LINEAR B SYLLABLE B085 AU

    uint32_t const cps[1] = { 0x10042 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_091)
{
    // 10043 ; [.485D.0020.0002] 
    // LINEAR B SYLLABLE B071 DWE

    uint32_t const cps[1] = { 0x10043 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_092)
{
    // 10044 ; [.485E.0020.0002] 
    // LINEAR B SYLLABLE B090 DWO

    uint32_t const cps[1] = { 0x10044 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_093)
{
    // 10045 ; [.485F.0020.0002] 
    // LINEAR B SYLLABLE B048 NWA

    uint32_t const cps[1] = { 0x10045 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x485f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_094)
{
    // 10046 ; [.4860.0020.0002] 
    // LINEAR B SYLLABLE B029 PU2

    uint32_t const cps[1] = { 0x10046 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4860), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_095)
{
    // 10047 ; [.4861.0020.0002] 
    // LINEAR B SYLLABLE B062 PTE

    uint32_t const cps[1] = { 0x10047 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4861), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_096)
{
    // 10048 ; [.4862.0020.0002] 
    // LINEAR B SYLLABLE B076 RA2

    uint32_t const cps[1] = { 0x10048 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4862), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_097)
{
    // 10049 ; [.4863.0020.0002] 
    // LINEAR B SYLLABLE B033 RA3

    uint32_t const cps[1] = { 0x10049 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4863), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_098)
{
    // 1004A ; [.4864.0020.0002] 
    // LINEAR B SYLLABLE B068 RO2

    uint32_t const cps[1] = { 0x1004a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4864), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_099)
{
    // 1004B ; [.4865.0020.0002] 
    // LINEAR B SYLLABLE B066 TA2

    uint32_t const cps[1] = { 0x1004b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4865), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_100)
{
    // 1004C ; [.4866.0020.0002] 
    // LINEAR B SYLLABLE B087 TWE

    uint32_t const cps[1] = { 0x1004c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4866), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_101)
{
    // 1004D ; [.4867.0020.0002] 
    // LINEAR B SYLLABLE B091 TWO

    uint32_t const cps[1] = { 0x1004d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4867), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_102)
{
    // 10050 ; [.4868.0020.0002] 
    // LINEAR B SYMBOL B018

    uint32_t const cps[1] = { 0x10050 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4868), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_103)
{
    // 10051 ; [.4869.0020.0002] 
    // LINEAR B SYMBOL B019

    uint32_t const cps[1] = { 0x10051 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4869), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_104)
{
    // 10052 ; [.486A.0020.0002] 
    // LINEAR B SYMBOL B022

    uint32_t const cps[1] = { 0x10052 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_105)
{
    // 10053 ; [.486B.0020.0002] 
    // LINEAR B SYMBOL B034

    uint32_t const cps[1] = { 0x10053 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_106)
{
    // 10054 ; [.486C.0020.0002] 
    // LINEAR B SYMBOL B047

    uint32_t const cps[1] = { 0x10054 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_107)
{
    // 10055 ; [.486D.0020.0002] 
    // LINEAR B SYMBOL B049

    uint32_t const cps[1] = { 0x10055 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_108)
{
    // 10056 ; [.486E.0020.0002] 
    // LINEAR B SYMBOL B056

    uint32_t const cps[1] = { 0x10056 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_109)
{
    // 10057 ; [.486F.0020.0002] 
    // LINEAR B SYMBOL B063

    uint32_t const cps[1] = { 0x10057 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x486f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_110)
{
    // 10058 ; [.4870.0020.0002] 
    // LINEAR B SYMBOL B064

    uint32_t const cps[1] = { 0x10058 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4870), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_111)
{
    // 10059 ; [.4871.0020.0002] 
    // LINEAR B SYMBOL B079

    uint32_t const cps[1] = { 0x10059 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4871), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_112)
{
    // 1005A ; [.4872.0020.0002] 
    // LINEAR B SYMBOL B082

    uint32_t const cps[1] = { 0x1005a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4872), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_113)
{
    // 1005B ; [.4873.0020.0002] 
    // LINEAR B SYMBOL B083

    uint32_t const cps[1] = { 0x1005b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4873), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_114)
{
    // 1005C ; [.4874.0020.0002] 
    // LINEAR B SYMBOL B086

    uint32_t const cps[1] = { 0x1005c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4874), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_115)
{
    // 1005D ; [.4875.0020.0002] 
    // LINEAR B SYMBOL B089

    uint32_t const cps[1] = { 0x1005d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4875), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_116)
{
    // 10080 ; [.4876.0020.0002] 
    // LINEAR B IDEOGRAM B100 MAN

    uint32_t const cps[1] = { 0x10080 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4876), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_117)
{
    // 10081 ; [.4877.0020.0002] 
    // LINEAR B IDEOGRAM B102 WOMAN

    uint32_t const cps[1] = { 0x10081 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4877), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_118)
{
    // 10082 ; [.4878.0020.0002] 
    // LINEAR B IDEOGRAM B104 DEER

    uint32_t const cps[1] = { 0x10082 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4878), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_119)
{
    // 10083 ; [.4879.0020.0002] 
    // LINEAR B IDEOGRAM B105 EQUID

    uint32_t const cps[1] = { 0x10083 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4879), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_120)
{
    // 10084 ; [.487A.0020.0002] 
    // LINEAR B IDEOGRAM B105F MARE

    uint32_t const cps[1] = { 0x10084 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_121)
{
    // 10085 ; [.487B.0020.0002] 
    // LINEAR B IDEOGRAM B105M STALLION

    uint32_t const cps[1] = { 0x10085 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_122)
{
    // 10086 ; [.487C.0020.0002] 
    // LINEAR B IDEOGRAM B106F EWE

    uint32_t const cps[1] = { 0x10086 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_123)
{
    // 10087 ; [.487D.0020.0002] 
    // LINEAR B IDEOGRAM B106M RAM

    uint32_t const cps[1] = { 0x10087 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_124)
{
    // 10088 ; [.487E.0020.0002] 
    // LINEAR B IDEOGRAM B107F SHE-GOAT

    uint32_t const cps[1] = { 0x10088 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_125)
{
    // 10089 ; [.487F.0020.0002] 
    // LINEAR B IDEOGRAM B107M HE-GOAT

    uint32_t const cps[1] = { 0x10089 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x487f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_126)
{
    // 1008A ; [.4880.0020.0002] 
    // LINEAR B IDEOGRAM B108F SOW

    uint32_t const cps[1] = { 0x1008a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4880), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_127)
{
    // 1008B ; [.4881.0020.0002] 
    // LINEAR B IDEOGRAM B108M BOAR

    uint32_t const cps[1] = { 0x1008b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4881), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_128)
{
    // 1008C ; [.4882.0020.0002] 
    // LINEAR B IDEOGRAM B109F COW

    uint32_t const cps[1] = { 0x1008c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4882), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_129)
{
    // 1008D ; [.4883.0020.0002] 
    // LINEAR B IDEOGRAM B109M BULL

    uint32_t const cps[1] = { 0x1008d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4883), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_130)
{
    // 1008E ; [.4884.0020.0002] 
    // LINEAR B IDEOGRAM B120 WHEAT

    uint32_t const cps[1] = { 0x1008e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4884), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_131)
{
    // 1008F ; [.4885.0020.0002] 
    // LINEAR B IDEOGRAM B121 BARLEY

    uint32_t const cps[1] = { 0x1008f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4885), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_132)
{
    // 10090 ; [.4886.0020.0002] 
    // LINEAR B IDEOGRAM B122 OLIVE

    uint32_t const cps[1] = { 0x10090 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4886), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_133)
{
    // 10091 ; [.4887.0020.0002] 
    // LINEAR B IDEOGRAM B123 SPICE

    uint32_t const cps[1] = { 0x10091 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4887), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_134)
{
    // 10092 ; [.4888.0020.0002] 
    // LINEAR B IDEOGRAM B125 CYPERUS

    uint32_t const cps[1] = { 0x10092 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4888), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_135)
{
    // 10093 ; [.4889.0020.0002] 
    // LINEAR B MONOGRAM B127 KAPO

    uint32_t const cps[1] = { 0x10093 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4889), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_136)
{
    // 10094 ; [.488A.0020.0002] 
    // LINEAR B MONOGRAM B128 KANAKO

    uint32_t const cps[1] = { 0x10094 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_137)
{
    // 10095 ; [.488B.0020.0002] 
    // LINEAR B IDEOGRAM B130 OIL

    uint32_t const cps[1] = { 0x10095 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_138)
{
    // 10096 ; [.488C.0020.0002] 
    // LINEAR B IDEOGRAM B131 WINE

    uint32_t const cps[1] = { 0x10096 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_139)
{
    // 10097 ; [.488D.0020.0002] 
    // LINEAR B IDEOGRAM B132

    uint32_t const cps[1] = { 0x10097 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_140)
{
    // 10098 ; [.488E.0020.0002] 
    // LINEAR B MONOGRAM B133 AREPA

    uint32_t const cps[1] = { 0x10098 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_141)
{
    // 10099 ; [.488F.0020.0002] 
    // LINEAR B MONOGRAM B135 MERI

    uint32_t const cps[1] = { 0x10099 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x488f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_142)
{
    // 1009A ; [.4890.0020.0002] 
    // LINEAR B IDEOGRAM B140 BRONZE

    uint32_t const cps[1] = { 0x1009a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4890), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_143)
{
    // 1009B ; [.4891.0020.0002] 
    // LINEAR B IDEOGRAM B141 GOLD

    uint32_t const cps[1] = { 0x1009b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4891), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_144)
{
    // 1009C ; [.4892.0020.0002] 
    // LINEAR B IDEOGRAM B142

    uint32_t const cps[1] = { 0x1009c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4892), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_145)
{
    // 1009D ; [.4893.0020.0002] 
    // LINEAR B IDEOGRAM B145 WOOL

    uint32_t const cps[1] = { 0x1009d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4893), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_146)
{
    // 1009E ; [.4894.0020.0002] 
    // LINEAR B IDEOGRAM B146

    uint32_t const cps[1] = { 0x1009e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4894), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_147)
{
    // 1009F ; [.4895.0020.0002] 
    // LINEAR B IDEOGRAM B150

    uint32_t const cps[1] = { 0x1009f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4895), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_148)
{
    // 100A0 ; [.4896.0020.0002] 
    // LINEAR B IDEOGRAM B151 HORN

    uint32_t const cps[1] = { 0x100a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4896), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_116_149)
{
    // 100A1 ; [.4897.0020.0002] 
    // LINEAR B IDEOGRAM B152

    uint32_t const cps[1] = { 0x100a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4897), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

