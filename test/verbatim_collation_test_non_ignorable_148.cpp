// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_148_000)
{
    // 08A8 0041;	
    // (‎‎ࢨ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE	[236E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A8, 0x0041 };
    uint32_t const ces[9] = { 0x236E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_001)
{
    // 08A8 0062;	
    // (‎‎ࢨ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE	[236E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A8, 0x0062 };
    uint32_t const ces[9] = { 0x236E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_002)
{
    // 08A9 0021;	
    // (‎‎ࢩ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE	[236F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A9, 0x0021 };
    uint32_t const ces[9] = { 0x236F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_003)
{
    // 08A9 003F;	
    // (‎‎ࢩ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE	[236F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A9, 0x003F };
    uint32_t const ces[9] = { 0x236F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_004)
{
    // 08A9 0061;	
    // (‎‎ࢩ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE	[236F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A9, 0x0061 };
    uint32_t const ces[9] = { 0x236F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_005)
{
    // 08A9 0041;	
    // (‎‎ࢩ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE	[236F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A9, 0x0041 };
    uint32_t const ces[9] = { 0x236F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_006)
{
    // 08A9 0062;	
    // (‎‎ࢩ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE	[236F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A9, 0x0062 };
    uint32_t const ces[9] = { 0x236F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_007)
{
    // 08AC 0021;	
    // (‎‎ࢬ‎‎) ARABIC LETTER ROHINGYA YEH	[2370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AC, 0x0021 };
    uint32_t const ces[9] = { 0x2370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_008)
{
    // 08AC 003F;	
    // (‎‎ࢬ‎‎) ARABIC LETTER ROHINGYA YEH	[2370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AC, 0x003F };
    uint32_t const ces[9] = { 0x2370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_009)
{
    // 08AC 0061;	
    // (‎‎ࢬ‎‎) ARABIC LETTER ROHINGYA YEH	[2370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AC, 0x0061 };
    uint32_t const ces[9] = { 0x2370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_010)
{
    // 08AC 0041;	
    // (‎‎ࢬ‎‎) ARABIC LETTER ROHINGYA YEH	[2370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08AC, 0x0041 };
    uint32_t const ces[9] = { 0x2370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_011)
{
    // 08AC 0062;	
    // (‎‎ࢬ‎‎) ARABIC LETTER ROHINGYA YEH	[2370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AC, 0x0062 };
    uint32_t const ces[9] = { 0x2370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_012)
{
    // 0627 0021;	
    // (‎‎ا‎‎) ARABIC LETTER ALEF	[2371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0627, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_013)
{
    // 08AD 0021;	
    // (‎‎ࢭ‎‎) ARABIC LETTER LOW ALEF	[2371 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x08AD, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_014)
{
    // 1EE00 0021;	
    // (‎‎𞸀‎‎) ARABIC MATHEMATICAL ALEF	[2371 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE00, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_015)
{
    // 1EE80 0021;	
    // (‎‎𞺀‎‎) ARABIC MATHEMATICAL LOOPED ALEF	[2371 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE80, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_016)
{
    // FE8E 0021;	
    // (‎‎ﺎ‎‎) ARABIC LETTER ALEF FINAL FORM	[2371 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8E, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_017)
{
    // FE8D 0021;	
    // (‎‎ﺍ‎‎) ARABIC LETTER ALEF ISOLATED FORM	[2371 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8D, 0x0021 };
    uint32_t const ces[9] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_018)
{
    // FD3C 0021;	
    // (‎‎ﴼ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM	[2371 0261 | 0020 006D 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD3C, 0x0021 };
    uint32_t const ces[11] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_019)
{
    // FD3D 0021;	
    // (‎‎ﴽ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM	[2371 0261 | 0020 006D 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD3D, 0x0021 };
    uint32_t const ces[11] = { 0x2371, 0x0261, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_020)
{
    // 0627 003F;	
    // (‎‎ا‎‎) ARABIC LETTER ALEF	[2371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0627, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_021)
{
    // 08AD 003F;	
    // (‎‎ࢭ‎‎) ARABIC LETTER LOW ALEF	[2371 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x08AD, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_022)
{
    // 1EE00 003F;	
    // (‎‎𞸀‎‎) ARABIC MATHEMATICAL ALEF	[2371 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE00, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_023)
{
    // 1EE80 003F;	
    // (‎‎𞺀‎‎) ARABIC MATHEMATICAL LOOPED ALEF	[2371 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE80, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_024)
{
    // FE8E 003F;	
    // (‎‎ﺎ‎‎) ARABIC LETTER ALEF FINAL FORM	[2371 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8E, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_025)
{
    // FE8D 003F;	
    // (‎‎ﺍ‎‎) ARABIC LETTER ALEF ISOLATED FORM	[2371 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8D, 0x003F };
    uint32_t const ces[9] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_026)
{
    // FD3C 003F;	
    // (‎‎ﴼ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM	[2371 0267 | 0020 006D 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD3C, 0x003F };
    uint32_t const ces[11] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_027)
{
    // FD3D 003F;	
    // (‎‎ﴽ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM	[2371 0267 | 0020 006D 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD3D, 0x003F };
    uint32_t const ces[11] = { 0x2371, 0x0267, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_028)
{
    // 0627 0061;	
    // (‎‎ا‎‎) ARABIC LETTER ALEF	[2371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0627, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_029)
{
    // 0627 0041;	
    // (‎‎ا‎‎) ARABIC LETTER ALEF	[2371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0627, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_030)
{
    // 08AD 0061;	
    // (‎‎ࢭ‎‎) ARABIC LETTER LOW ALEF	[2371 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x08AD, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_031)
{
    // 08AD 0041;	
    // (‎‎ࢭ‎‎) ARABIC LETTER LOW ALEF	[2371 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x08AD, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_032)
{
    // 1EE00 0061;	
    // (‎‎𞸀‎‎) ARABIC MATHEMATICAL ALEF	[2371 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE00, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_033)
{
    // 1EE80 0061;	
    // (‎‎𞺀‎‎) ARABIC MATHEMATICAL LOOPED ALEF	[2371 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE80, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_034)
{
    // 1EE00 0041;	
    // (‎‎𞸀‎‎) ARABIC MATHEMATICAL ALEF	[2371 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE00, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_035)
{
    // 1EE80 0041;	
    // (‎‎𞺀‎‎) ARABIC MATHEMATICAL LOOPED ALEF	[2371 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE80, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_036)
{
    // FE8E 0061;	
    // (‎‎ﺎ‎‎) ARABIC LETTER ALEF FINAL FORM	[2371 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8E, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_037)
{
    // FE8E 0041;	
    // (‎‎ﺎ‎‎) ARABIC LETTER ALEF FINAL FORM	[2371 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE8E, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_038)
{
    // FE8D 0061;	
    // (‎‎ﺍ‎‎) ARABIC LETTER ALEF ISOLATED FORM	[2371 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8D, 0x0061 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_039)
{
    // FE8D 0041;	
    // (‎‎ﺍ‎‎) ARABIC LETTER ALEF ISOLATED FORM	[2371 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE8D, 0x0041 };
    uint32_t const ces[9] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_040)
{
    // FD3C 0061;	
    // (‎‎ﴼ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM	[2371 1CAD | 0020 006D 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD3C, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_041)
{
    // FD3C 0041;	
    // (‎‎ﴼ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM	[2371 1CAD | 0020 006D 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD3C, 0x0041 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_042)
{
    // FD3D 0061;	
    // (‎‎ﴽ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM	[2371 1CAD | 0020 006D 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD3D, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_043)
{
    // FD3D 0041;	
    // (‎‎ﴽ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM	[2371 1CAD | 0020 006D 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD3D, 0x0041 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_044)
{
    // 0627 0001 0653 0061;	
    // (‎‎ا'\u0001'ٓ‎‎) ARABIC LETTER ALEF, <START OF HEADING>, ARABIC MADDAH ABOVE	[2371 1CAD | 0020 0082 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0001, 0x0653, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_045)
{
    // 0627 0001 0654 0061;	
    // (‎‎ا'\u0001'ٔ‎‎) ARABIC LETTER ALEF, <START OF HEADING>, ARABIC HAMZA ABOVE	[2371 1CAD | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0001, 0x0654, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_046)
{
    // 0627 0001 0655 0061;	
    // (‎‎ا'\u0001'ٕ‎‎) ARABIC LETTER ALEF, <START OF HEADING>, ARABIC HAMZA BELOW	[2371 1CAD | 0020 0084 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0001, 0x0655, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_047)
{
    // 0627 0591 0655 0061;	
    // (‎‎ا֑ٕ‎‎) ARABIC LETTER ALEF, HEBREW ACCENT ETNAHTA, ARABIC HAMZA BELOW	[2371 1CAD | 0020 0084 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0591, 0x0655, 0x0061 };
    uint32_t const ces[11] = { 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_048)
{
    // 0627 0062;	
    // (‎‎ا‎‎) ARABIC LETTER ALEF	[2371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0627, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_049)
{
    // 08AD 0062;	
    // (‎‎ࢭ‎‎) ARABIC LETTER LOW ALEF	[2371 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x08AD, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_050)
{
    // 1EE00 0062;	
    // (‎‎𞸀‎‎) ARABIC MATHEMATICAL ALEF	[2371 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE00, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_051)
{
    // 1EE80 0062;	
    // (‎‎𞺀‎‎) ARABIC MATHEMATICAL LOOPED ALEF	[2371 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE80, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_052)
{
    // FE8E 0062;	
    // (‎‎ﺎ‎‎) ARABIC LETTER ALEF FINAL FORM	[2371 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8E, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_053)
{
    // FE8D 0062;	
    // (‎‎ﺍ‎‎) ARABIC LETTER ALEF ISOLATED FORM	[2371 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8D, 0x0062 };
    uint32_t const ces[9] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_054)
{
    // FD3C 0062;	
    // (‎‎ﴼ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM	[2371 1CC6 | 0020 006D 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD3C, 0x0062 };
    uint32_t const ces[11] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_055)
{
    // FD3D 0062;	
    // (‎‎ﴽ‎‎) ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM	[2371 1CC6 | 0020 006D 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD3D, 0x0062 };
    uint32_t const ces[11] = { 0x2371, 0x1CC6, 0x0000, 0x0020, 0x006D, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_056)
{
    // 0675 0021;	
    // (‎‎ٵ‎‎) ARABIC LETTER HIGH HAMZA ALEF	[2371 2363 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0675, 0x0021 };
    uint32_t const ces[12] = { 0x2371, 0x2363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_057)
{
    // 0675 003F;	
    // (‎‎ٵ‎‎) ARABIC LETTER HIGH HAMZA ALEF	[2371 2363 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0675, 0x003F };
    uint32_t const ces[12] = { 0x2371, 0x2363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_058)
{
    // 0675 0061;	
    // (‎‎ٵ‎‎) ARABIC LETTER HIGH HAMZA ALEF	[2371 2363 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0675, 0x0061 };
    uint32_t const ces[12] = { 0x2371, 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_059)
{
    // 0675 0041;	
    // (‎‎ٵ‎‎) ARABIC LETTER HIGH HAMZA ALEF	[2371 2363 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0675, 0x0041 };
    uint32_t const ces[12] = { 0x2371, 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_060)
{
    // 0675 0062;	
    // (‎‎ٵ‎‎) ARABIC LETTER HIGH HAMZA ALEF	[2371 2363 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0675, 0x0062 };
    uint32_t const ces[12] = { 0x2371, 0x2363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_061)
{
    // FDF3 0021;	
    // (‎‎ﷳ‎‎) ARABIC LIGATURE AKBAR ISOLATED FORM	[2371 23ED 2373 23AC 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF3, 0x0021 };
    uint32_t const ces[18] = { 0x2371, 0x23ED, 0x2373, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_062)
{
    // FDF3 003F;	
    // (‎‎ﷳ‎‎) ARABIC LIGATURE AKBAR ISOLATED FORM	[2371 23ED 2373 23AC 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF3, 0x003F };
    uint32_t const ces[18] = { 0x2371, 0x23ED, 0x2373, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_063)
{
    // FDF3 0061;	
    // (‎‎ﷳ‎‎) ARABIC LIGATURE AKBAR ISOLATED FORM	[2371 23ED 2373 23AC 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF3, 0x0061 };
    uint32_t const ces[18] = { 0x2371, 0x23ED, 0x2373, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_064)
{
    // FDF3 0041;	
    // (‎‎ﷳ‎‎) ARABIC LIGATURE AKBAR ISOLATED FORM	[2371 23ED 2373 23AC 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF3, 0x0041 };
    uint32_t const ces[18] = { 0x2371, 0x23ED, 0x2373, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_065)
{
    // FDF3 0062;	
    // (‎‎ﷳ‎‎) ARABIC LIGATURE AKBAR ISOLATED FORM	[2371 23ED 2373 23AC 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF3, 0x0062 };
    uint32_t const ces[18] = { 0x2371, 0x23ED, 0x2373, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_066)
{
    // FDF2 0021;	
    // (‎‎ﷲ‎‎) ARABIC LIGATURE ALLAH ISOLATED FORM	[2371 2402 2402 2417 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF2, 0x0021 };
    uint32_t const ces[18] = { 0x2371, 0x2402, 0x2402, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_067)
{
    // FDF2 003F;	
    // (‎‎ﷲ‎‎) ARABIC LIGATURE ALLAH ISOLATED FORM	[2371 2402 2402 2417 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF2, 0x003F };
    uint32_t const ces[18] = { 0x2371, 0x2402, 0x2402, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_068)
{
    // FDF2 0061;	
    // (‎‎ﷲ‎‎) ARABIC LIGATURE ALLAH ISOLATED FORM	[2371 2402 2402 2417 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF2, 0x0061 };
    uint32_t const ces[18] = { 0x2371, 0x2402, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_069)
{
    // FDF2 0041;	
    // (‎‎ﷲ‎‎) ARABIC LIGATURE ALLAH ISOLATED FORM	[2371 2402 2402 2417 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF2, 0x0041 };
    uint32_t const ces[18] = { 0x2371, 0x2402, 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_070)
{
    // FDF2 0062;	
    // (‎‎ﷲ‎‎) ARABIC LIGATURE ALLAH ISOLATED FORM	[2371 2402 2402 2417 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF2, 0x0062 };
    uint32_t const ces[18] = { 0x2371, 0x2402, 0x2402, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_071)
{
    // 066E 0021;	
    // (‎‎ٮ‎‎) ARABIC LETTER DOTLESS BEH	[2372 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066E, 0x0021 };
    uint32_t const ces[9] = { 0x2372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_072)
{
    // 1EE1C 0021;	
    // (‎‎𞸜‎‎) ARABIC MATHEMATICAL DOTLESS BEH	[2372 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1C, 0x0021 };
    uint32_t const ces[9] = { 0x2372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_073)
{
    // 1EE7C 0021;	
    // (‎‎𞹼‎‎) ARABIC MATHEMATICAL STRETCHED DOTLESS BEH	[2372 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE7C, 0x0021 };
    uint32_t const ces[9] = { 0x2372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_074)
{
    // 066E 003F;	
    // (‎‎ٮ‎‎) ARABIC LETTER DOTLESS BEH	[2372 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066E, 0x003F };
    uint32_t const ces[9] = { 0x2372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_075)
{
    // 1EE1C 003F;	
    // (‎‎𞸜‎‎) ARABIC MATHEMATICAL DOTLESS BEH	[2372 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1C, 0x003F };
    uint32_t const ces[9] = { 0x2372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_076)
{
    // 1EE7C 003F;	
    // (‎‎𞹼‎‎) ARABIC MATHEMATICAL STRETCHED DOTLESS BEH	[2372 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE7C, 0x003F };
    uint32_t const ces[9] = { 0x2372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_077)
{
    // 066E 0061;	
    // (‎‎ٮ‎‎) ARABIC LETTER DOTLESS BEH	[2372 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066E, 0x0061 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_078)
{
    // 066E 0041;	
    // (‎‎ٮ‎‎) ARABIC LETTER DOTLESS BEH	[2372 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x066E, 0x0041 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_079)
{
    // 1EE1C 0061;	
    // (‎‎𞸜‎‎) ARABIC MATHEMATICAL DOTLESS BEH	[2372 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1C, 0x0061 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_080)
{
    // 1EE7C 0061;	
    // (‎‎𞹼‎‎) ARABIC MATHEMATICAL STRETCHED DOTLESS BEH	[2372 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE7C, 0x0061 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_081)
{
    // 1EE1C 0041;	
    // (‎‎𞸜‎‎) ARABIC MATHEMATICAL DOTLESS BEH	[2372 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE1C, 0x0041 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_082)
{
    // 1EE7C 0041;	
    // (‎‎𞹼‎‎) ARABIC MATHEMATICAL STRETCHED DOTLESS BEH	[2372 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE7C, 0x0041 };
    uint32_t const ces[9] = { 0x2372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_083)
{
    // 066E 0062;	
    // (‎‎ٮ‎‎) ARABIC LETTER DOTLESS BEH	[2372 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066E, 0x0062 };
    uint32_t const ces[9] = { 0x2372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_084)
{
    // 1EE1C 0062;	
    // (‎‎𞸜‎‎) ARABIC MATHEMATICAL DOTLESS BEH	[2372 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1C, 0x0062 };
    uint32_t const ces[9] = { 0x2372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_085)
{
    // 1EE7C 0062;	
    // (‎‎𞹼‎‎) ARABIC MATHEMATICAL STRETCHED DOTLESS BEH	[2372 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE7C, 0x0062 };
    uint32_t const ces[9] = { 0x2372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_086)
{
    // 0628 0021;	
    // (‎‎ب‎‎) ARABIC LETTER BEH	[2373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0628, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_087)
{
    // 1EE01 0021;	
    // (‎‎𞸁‎‎) ARABIC MATHEMATICAL BEH	[2373 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE01, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_088)
{
    // 1EE21 0021;	
    // (‎‎𞸡‎‎) ARABIC MATHEMATICAL INITIAL BEH	[2373 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE21, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_089)
{
    // 1EE61 0021;	
    // (‎‎𞹡‎‎) ARABIC MATHEMATICAL STRETCHED BEH	[2373 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE61, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_090)
{
    // 1EE81 0021;	
    // (‎‎𞺁‎‎) ARABIC MATHEMATICAL LOOPED BEH	[2373 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE81, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_091)
{
    // 1EEA1 0021;	
    // (‎‎𞺡‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK BEH	[2373 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA1, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_092)
{
    // FE91 0021;	
    // (‎‎ﺑ‎‎) ARABIC LETTER BEH INITIAL FORM	[2373 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE91, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_093)
{
    // FE92 0021;	
    // (‎‎ﺒ‎‎) ARABIC LETTER BEH MEDIAL FORM	[2373 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE92, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_094)
{
    // FE90 0021;	
    // (‎‎ﺐ‎‎) ARABIC LETTER BEH FINAL FORM	[2373 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE90, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_095)
{
    // FE8F 0021;	
    // (‎‎ﺏ‎‎) ARABIC LETTER BEH ISOLATED FORM	[2373 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8F, 0x0021 };
    uint32_t const ces[9] = { 0x2373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_096)
{
    // 0628 003F;	
    // (‎‎ب‎‎) ARABIC LETTER BEH	[2373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0628, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_097)
{
    // 1EE01 003F;	
    // (‎‎𞸁‎‎) ARABIC MATHEMATICAL BEH	[2373 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE01, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_098)
{
    // 1EE21 003F;	
    // (‎‎𞸡‎‎) ARABIC MATHEMATICAL INITIAL BEH	[2373 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE21, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_099)
{
    // 1EE61 003F;	
    // (‎‎𞹡‎‎) ARABIC MATHEMATICAL STRETCHED BEH	[2373 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE61, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_100)
{
    // 1EE81 003F;	
    // (‎‎𞺁‎‎) ARABIC MATHEMATICAL LOOPED BEH	[2373 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE81, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_101)
{
    // 1EEA1 003F;	
    // (‎‎𞺡‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK BEH	[2373 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA1, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_102)
{
    // FE91 003F;	
    // (‎‎ﺑ‎‎) ARABIC LETTER BEH INITIAL FORM	[2373 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE91, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_103)
{
    // FE92 003F;	
    // (‎‎ﺒ‎‎) ARABIC LETTER BEH MEDIAL FORM	[2373 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE92, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_104)
{
    // FE90 003F;	
    // (‎‎ﺐ‎‎) ARABIC LETTER BEH FINAL FORM	[2373 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE90, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_105)
{
    // FE8F 003F;	
    // (‎‎ﺏ‎‎) ARABIC LETTER BEH ISOLATED FORM	[2373 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8F, 0x003F };
    uint32_t const ces[9] = { 0x2373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_106)
{
    // 0628 0061;	
    // (‎‎ب‎‎) ARABIC LETTER BEH	[2373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0628, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_107)
{
    // 0628 0041;	
    // (‎‎ب‎‎) ARABIC LETTER BEH	[2373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0628, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_108)
{
    // 1EE01 0061;	
    // (‎‎𞸁‎‎) ARABIC MATHEMATICAL BEH	[2373 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE01, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_109)
{
    // 1EE21 0061;	
    // (‎‎𞸡‎‎) ARABIC MATHEMATICAL INITIAL BEH	[2373 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE21, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_110)
{
    // 1EE61 0061;	
    // (‎‎𞹡‎‎) ARABIC MATHEMATICAL STRETCHED BEH	[2373 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE61, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_111)
{
    // 1EE81 0061;	
    // (‎‎𞺁‎‎) ARABIC MATHEMATICAL LOOPED BEH	[2373 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE81, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_112)
{
    // 1EEA1 0061;	
    // (‎‎𞺡‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK BEH	[2373 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA1, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_113)
{
    // 1EE01 0041;	
    // (‎‎𞸁‎‎) ARABIC MATHEMATICAL BEH	[2373 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE01, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_114)
{
    // 1EE21 0041;	
    // (‎‎𞸡‎‎) ARABIC MATHEMATICAL INITIAL BEH	[2373 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE21, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_115)
{
    // 1EE61 0041;	
    // (‎‎𞹡‎‎) ARABIC MATHEMATICAL STRETCHED BEH	[2373 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE61, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_116)
{
    // 1EE81 0041;	
    // (‎‎𞺁‎‎) ARABIC MATHEMATICAL LOOPED BEH	[2373 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE81, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_117)
{
    // 1EEA1 0041;	
    // (‎‎𞺡‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK BEH	[2373 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEA1, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_118)
{
    // FE91 0061;	
    // (‎‎ﺑ‎‎) ARABIC LETTER BEH INITIAL FORM	[2373 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE91, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_119)
{
    // FE91 0041;	
    // (‎‎ﺑ‎‎) ARABIC LETTER BEH INITIAL FORM	[2373 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFE91, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_120)
{
    // FE92 0061;	
    // (‎‎ﺒ‎‎) ARABIC LETTER BEH MEDIAL FORM	[2373 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE92, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_121)
{
    // FE92 0041;	
    // (‎‎ﺒ‎‎) ARABIC LETTER BEH MEDIAL FORM	[2373 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE92, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_122)
{
    // FE90 0061;	
    // (‎‎ﺐ‎‎) ARABIC LETTER BEH FINAL FORM	[2373 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE90, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_123)
{
    // FE90 0041;	
    // (‎‎ﺐ‎‎) ARABIC LETTER BEH FINAL FORM	[2373 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE90, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_124)
{
    // FE8F 0061;	
    // (‎‎ﺏ‎‎) ARABIC LETTER BEH ISOLATED FORM	[2373 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8F, 0x0061 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_125)
{
    // FE8F 0041;	
    // (‎‎ﺏ‎‎) ARABIC LETTER BEH ISOLATED FORM	[2373 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE8F, 0x0041 };
    uint32_t const ces[9] = { 0x2373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_126)
{
    // 0628 0062;	
    // (‎‎ب‎‎) ARABIC LETTER BEH	[2373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0628, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_127)
{
    // 1EE01 0062;	
    // (‎‎𞸁‎‎) ARABIC MATHEMATICAL BEH	[2373 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE01, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_128)
{
    // 1EE21 0062;	
    // (‎‎𞸡‎‎) ARABIC MATHEMATICAL INITIAL BEH	[2373 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE21, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_129)
{
    // 1EE61 0062;	
    // (‎‎𞹡‎‎) ARABIC MATHEMATICAL STRETCHED BEH	[2373 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE61, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_130)
{
    // 1EE81 0062;	
    // (‎‎𞺁‎‎) ARABIC MATHEMATICAL LOOPED BEH	[2373 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE81, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_131)
{
    // 1EEA1 0062;	
    // (‎‎𞺡‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK BEH	[2373 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA1, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_132)
{
    // FE91 0062;	
    // (‎‎ﺑ‎‎) ARABIC LETTER BEH INITIAL FORM	[2373 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE91, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_133)
{
    // FE92 0062;	
    // (‎‎ﺒ‎‎) ARABIC LETTER BEH MEDIAL FORM	[2373 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE92, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_134)
{
    // FE90 0062;	
    // (‎‎ﺐ‎‎) ARABIC LETTER BEH FINAL FORM	[2373 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE90, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_135)
{
    // FE8F 0062;	
    // (‎‎ﺏ‎‎) ARABIC LETTER BEH ISOLATED FORM	[2373 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE8F, 0x0062 };
    uint32_t const ces[9] = { 0x2373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_136)
{
    // FC9C 0021;	
    // (‎‎ﲜ‎‎) ARABIC LIGATURE BEH WITH JEEM INITIAL FORM	[2373 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9C, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_137)
{
    // FC05 0021;	
    // (‎‎ﰅ‎‎) ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM	[2373 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC05, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_138)
{
    // FC9C 003F;	
    // (‎‎ﲜ‎‎) ARABIC LIGATURE BEH WITH JEEM INITIAL FORM	[2373 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9C, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_139)
{
    // FC05 003F;	
    // (‎‎ﰅ‎‎) ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM	[2373 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC05, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_140)
{
    // FC9C 0061;	
    // (‎‎ﲜ‎‎) ARABIC LIGATURE BEH WITH JEEM INITIAL FORM	[2373 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9C, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_141)
{
    // FC9C 0041;	
    // (‎‎ﲜ‎‎) ARABIC LIGATURE BEH WITH JEEM INITIAL FORM	[2373 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9C, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_142)
{
    // FC05 0061;	
    // (‎‎ﰅ‎‎) ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM	[2373 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC05, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_143)
{
    // FC05 0041;	
    // (‎‎ﰅ‎‎) ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM	[2373 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC05, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_144)
{
    // FC9C 0062;	
    // (‎‎ﲜ‎‎) ARABIC LIGATURE BEH WITH JEEM INITIAL FORM	[2373 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9C, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_145)
{
    // FC05 0062;	
    // (‎‎ﰅ‎‎) ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM	[2373 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC05, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_146)
{
    // FC9D 0021;	
    // (‎‎ﲝ‎‎) ARABIC LIGATURE BEH WITH HAH INITIAL FORM	[2373 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9D, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_147)
{
    // FC06 0021;	
    // (‎‎ﰆ‎‎) ARABIC LIGATURE BEH WITH HAH ISOLATED FORM	[2373 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC06, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_148)
{
    // FC9D 003F;	
    // (‎‎ﲝ‎‎) ARABIC LIGATURE BEH WITH HAH INITIAL FORM	[2373 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9D, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_149)
{
    // FC06 003F;	
    // (‎‎ﰆ‎‎) ARABIC LIGATURE BEH WITH HAH ISOLATED FORM	[2373 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC06, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_150)
{
    // FC9D 0061;	
    // (‎‎ﲝ‎‎) ARABIC LIGATURE BEH WITH HAH INITIAL FORM	[2373 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9D, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_151)
{
    // FC9D 0041;	
    // (‎‎ﲝ‎‎) ARABIC LIGATURE BEH WITH HAH INITIAL FORM	[2373 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9D, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_152)
{
    // FC06 0061;	
    // (‎‎ﰆ‎‎) ARABIC LIGATURE BEH WITH HAH ISOLATED FORM	[2373 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC06, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_153)
{
    // FC06 0041;	
    // (‎‎ﰆ‎‎) ARABIC LIGATURE BEH WITH HAH ISOLATED FORM	[2373 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC06, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_154)
{
    // FC9D 0062;	
    // (‎‎ﲝ‎‎) ARABIC LIGATURE BEH WITH HAH INITIAL FORM	[2373 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9D, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_155)
{
    // FC06 0062;	
    // (‎‎ﰆ‎‎) ARABIC LIGATURE BEH WITH HAH ISOLATED FORM	[2373 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC06, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_156)
{
    // FDC2 0021;	
    // (‎‎ﷂ‎‎) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM	[2373 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC2, 0x0021 };
    uint32_t const ces[15] = { 0x2373, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_157)
{
    // FDC2 003F;	
    // (‎‎ﷂ‎‎) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM	[2373 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC2, 0x003F };
    uint32_t const ces[15] = { 0x2373, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_158)
{
    // FDC2 0061;	
    // (‎‎ﷂ‎‎) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM	[2373 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC2, 0x0061 };
    uint32_t const ces[15] = { 0x2373, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_159)
{
    // FDC2 0041;	
    // (‎‎ﷂ‎‎) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM	[2373 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDC2, 0x0041 };
    uint32_t const ces[15] = { 0x2373, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_160)
{
    // FDC2 0062;	
    // (‎‎ﷂ‎‎) ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM	[2373 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC2, 0x0062 };
    uint32_t const ces[15] = { 0x2373, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_161)
{
    // FC9E 0021;	
    // (‎‎ﲞ‎‎) ARABIC LIGATURE BEH WITH KHAH INITIAL FORM	[2373 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9E, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_162)
{
    // FC07 0021;	
    // (‎‎ﰇ‎‎) ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM	[2373 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC07, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_163)
{
    // FC9E 003F;	
    // (‎‎ﲞ‎‎) ARABIC LIGATURE BEH WITH KHAH INITIAL FORM	[2373 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9E, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_164)
{
    // FC07 003F;	
    // (‎‎ﰇ‎‎) ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM	[2373 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC07, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_165)
{
    // FC9E 0061;	
    // (‎‎ﲞ‎‎) ARABIC LIGATURE BEH WITH KHAH INITIAL FORM	[2373 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9E, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_166)
{
    // FC9E 0041;	
    // (‎‎ﲞ‎‎) ARABIC LIGATURE BEH WITH KHAH INITIAL FORM	[2373 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9E, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_167)
{
    // FC07 0061;	
    // (‎‎ﰇ‎‎) ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM	[2373 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC07, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_168)
{
    // FC07 0041;	
    // (‎‎ﰇ‎‎) ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM	[2373 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC07, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_169)
{
    // FC9E 0062;	
    // (‎‎ﲞ‎‎) ARABIC LIGATURE BEH WITH KHAH INITIAL FORM	[2373 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9E, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_170)
{
    // FC07 0062;	
    // (‎‎ﰇ‎‎) ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM	[2373 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC07, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_171)
{
    // FD9E 0021;	
    // (‎‎ﶞ‎‎) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM	[2373 2393 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9E, 0x0021 };
    uint32_t const ces[15] = { 0x2373, 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_172)
{
    // FD9E 003F;	
    // (‎‎ﶞ‎‎) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM	[2373 2393 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9E, 0x003F };
    uint32_t const ces[15] = { 0x2373, 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_173)
{
    // FD9E 0061;	
    // (‎‎ﶞ‎‎) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM	[2373 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9E, 0x0061 };
    uint32_t const ces[15] = { 0x2373, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_174)
{
    // FD9E 0041;	
    // (‎‎ﶞ‎‎) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM	[2373 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD9E, 0x0041 };
    uint32_t const ces[15] = { 0x2373, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_175)
{
    // FD9E 0062;	
    // (‎‎ﶞ‎‎) ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM	[2373 2393 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9E, 0x0062 };
    uint32_t const ces[15] = { 0x2373, 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_176)
{
    // FC6A 0021;	
    // (‎‎ﱪ‎‎) ARABIC LIGATURE BEH WITH REH FINAL FORM	[2373 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6A, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_177)
{
    // FC6A 003F;	
    // (‎‎ﱪ‎‎) ARABIC LIGATURE BEH WITH REH FINAL FORM	[2373 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6A, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_178)
{
    // FC6A 0061;	
    // (‎‎ﱪ‎‎) ARABIC LIGATURE BEH WITH REH FINAL FORM	[2373 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6A, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_179)
{
    // FC6A 0041;	
    // (‎‎ﱪ‎‎) ARABIC LIGATURE BEH WITH REH FINAL FORM	[2373 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6A, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_180)
{
    // FC6A 0062;	
    // (‎‎ﱪ‎‎) ARABIC LIGATURE BEH WITH REH FINAL FORM	[2373 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6A, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_181)
{
    // FC6B 0021;	
    // (‎‎ﱫ‎‎) ARABIC LIGATURE BEH WITH ZAIN FINAL FORM	[2373 23AD 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6B, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_182)
{
    // FC6B 003F;	
    // (‎‎ﱫ‎‎) ARABIC LIGATURE BEH WITH ZAIN FINAL FORM	[2373 23AD 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6B, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_183)
{
    // FC6B 0061;	
    // (‎‎ﱫ‎‎) ARABIC LIGATURE BEH WITH ZAIN FINAL FORM	[2373 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6B, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_184)
{
    // FC6B 0041;	
    // (‎‎ﱫ‎‎) ARABIC LIGATURE BEH WITH ZAIN FINAL FORM	[2373 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6B, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_185)
{
    // FC6B 0062;	
    // (‎‎ﱫ‎‎) ARABIC LIGATURE BEH WITH ZAIN FINAL FORM	[2373 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6B, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_186)
{
    // FC9F 0021;	
    // (‎‎ﲟ‎‎) ARABIC LIGATURE BEH WITH MEEM INITIAL FORM	[2373 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9F, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_187)
{
    // FCE1 0021;	
    // (‎‎ﳡ‎‎) ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM	[2373 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE1, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_188)
{
    // FC6C 0021;	
    // (‎‎ﱬ‎‎) ARABIC LIGATURE BEH WITH MEEM FINAL FORM	[2373 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6C, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_189)
{
    // FC08 0021;	
    // (‎‎ﰈ‎‎) ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM	[2373 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC08, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_190)
{
    // FC9F 003F;	
    // (‎‎ﲟ‎‎) ARABIC LIGATURE BEH WITH MEEM INITIAL FORM	[2373 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9F, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_191)
{
    // FCE1 003F;	
    // (‎‎ﳡ‎‎) ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM	[2373 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE1, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_192)
{
    // FC6C 003F;	
    // (‎‎ﱬ‎‎) ARABIC LIGATURE BEH WITH MEEM FINAL FORM	[2373 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6C, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_193)
{
    // FC08 003F;	
    // (‎‎ﰈ‎‎) ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM	[2373 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC08, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_194)
{
    // FC9F 0061;	
    // (‎‎ﲟ‎‎) ARABIC LIGATURE BEH WITH MEEM INITIAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9F, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_195)
{
    // FC9F 0041;	
    // (‎‎ﲟ‎‎) ARABIC LIGATURE BEH WITH MEEM INITIAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9F, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_196)
{
    // FCE1 0061;	
    // (‎‎ﳡ‎‎) ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE1, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_197)
{
    // FCE1 0041;	
    // (‎‎ﳡ‎‎) ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE1, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_198)
{
    // FC6C 0061;	
    // (‎‎ﱬ‎‎) ARABIC LIGATURE BEH WITH MEEM FINAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6C, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_199)
{
    // FC6C 0041;	
    // (‎‎ﱬ‎‎) ARABIC LIGATURE BEH WITH MEEM FINAL FORM	[2373 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6C, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_200)
{
    // FC08 0061;	
    // (‎‎ﰈ‎‎) ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM	[2373 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC08, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_201)
{
    // FC08 0041;	
    // (‎‎ﰈ‎‎) ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM	[2373 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC08, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_202)
{
    // FC9F 0062;	
    // (‎‎ﲟ‎‎) ARABIC LIGATURE BEH WITH MEEM INITIAL FORM	[2373 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9F, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_203)
{
    // FCE1 0062;	
    // (‎‎ﳡ‎‎) ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM	[2373 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE1, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_204)
{
    // FC6C 0062;	
    // (‎‎ﱬ‎‎) ARABIC LIGATURE BEH WITH MEEM FINAL FORM	[2373 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6C, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_205)
{
    // FC08 0062;	
    // (‎‎ﰈ‎‎) ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM	[2373 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC08, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_206)
{
    // FC6D 0021;	
    // (‎‎ﱭ‎‎) ARABIC LIGATURE BEH WITH NOON FINAL FORM	[2373 240D 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6D, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_207)
{
    // FC6D 003F;	
    // (‎‎ﱭ‎‎) ARABIC LIGATURE BEH WITH NOON FINAL FORM	[2373 240D 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6D, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_208)
{
    // FC6D 0061;	
    // (‎‎ﱭ‎‎) ARABIC LIGATURE BEH WITH NOON FINAL FORM	[2373 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6D, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_209)
{
    // FC6D 0041;	
    // (‎‎ﱭ‎‎) ARABIC LIGATURE BEH WITH NOON FINAL FORM	[2373 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6D, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_210)
{
    // FC6D 0062;	
    // (‎‎ﱭ‎‎) ARABIC LIGATURE BEH WITH NOON FINAL FORM	[2373 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6D, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_211)
{
    // FCA0 0021;	
    // (‎‎ﲠ‎‎) ARABIC LIGATURE BEH WITH HEH INITIAL FORM	[2373 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA0, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_212)
{
    // FCE2 0021;	
    // (‎‎ﳢ‎‎) ARABIC LIGATURE BEH WITH HEH MEDIAL FORM	[2373 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE2, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_213)
{
    // FCA0 003F;	
    // (‎‎ﲠ‎‎) ARABIC LIGATURE BEH WITH HEH INITIAL FORM	[2373 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA0, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_214)
{
    // FCE2 003F;	
    // (‎‎ﳢ‎‎) ARABIC LIGATURE BEH WITH HEH MEDIAL FORM	[2373 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE2, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_215)
{
    // FCA0 0061;	
    // (‎‎ﲠ‎‎) ARABIC LIGATURE BEH WITH HEH INITIAL FORM	[2373 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA0, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_216)
{
    // FCA0 0041;	
    // (‎‎ﲠ‎‎) ARABIC LIGATURE BEH WITH HEH INITIAL FORM	[2373 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCA0, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_217)
{
    // FCE2 0061;	
    // (‎‎ﳢ‎‎) ARABIC LIGATURE BEH WITH HEH MEDIAL FORM	[2373 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE2, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_218)
{
    // FCE2 0041;	
    // (‎‎ﳢ‎‎) ARABIC LIGATURE BEH WITH HEH MEDIAL FORM	[2373 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE2, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_219)
{
    // FCA0 0062;	
    // (‎‎ﲠ‎‎) ARABIC LIGATURE BEH WITH HEH INITIAL FORM	[2373 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA0, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_220)
{
    // FCE2 0062;	
    // (‎‎ﳢ‎‎) ARABIC LIGATURE BEH WITH HEH MEDIAL FORM	[2373 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE2, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_221)
{
    // FC6E 0021;	
    // (‎‎ﱮ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM	[2373 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6E, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_222)
{
    // FC09 0021;	
    // (‎‎ﰉ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM	[2373 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC09, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_223)
{
    // FC6E 003F;	
    // (‎‎ﱮ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM	[2373 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6E, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_224)
{
    // FC09 003F;	
    // (‎‎ﰉ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM	[2373 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC09, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_225)
{
    // FC6E 0061;	
    // (‎‎ﱮ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM	[2373 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6E, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_226)
{
    // FC6E 0041;	
    // (‎‎ﱮ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM	[2373 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6E, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_227)
{
    // FC09 0061;	
    // (‎‎ﰉ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM	[2373 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC09, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_228)
{
    // FC09 0041;	
    // (‎‎ﰉ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM	[2373 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC09, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_229)
{
    // FC6E 0062;	
    // (‎‎ﱮ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM	[2373 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6E, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_230)
{
    // FC09 0062;	
    // (‎‎ﰉ‎‎) ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM	[2373 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC09, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_231)
{
    // FC6F 0021;	
    // (‎‎ﱯ‎‎) ARABIC LIGATURE BEH WITH YEH FINAL FORM	[2373 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6F, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_232)
{
    // FC0A 0021;	
    // (‎‎ﰊ‎‎) ARABIC LIGATURE BEH WITH YEH ISOLATED FORM	[2373 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0A, 0x0021 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_233)
{
    // FC6F 003F;	
    // (‎‎ﱯ‎‎) ARABIC LIGATURE BEH WITH YEH FINAL FORM	[2373 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6F, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_234)
{
    // FC0A 003F;	
    // (‎‎ﰊ‎‎) ARABIC LIGATURE BEH WITH YEH ISOLATED FORM	[2373 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0A, 0x003F };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_235)
{
    // FC6F 0061;	
    // (‎‎ﱯ‎‎) ARABIC LIGATURE BEH WITH YEH FINAL FORM	[2373 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6F, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_236)
{
    // FC6F 0041;	
    // (‎‎ﱯ‎‎) ARABIC LIGATURE BEH WITH YEH FINAL FORM	[2373 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC6F, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_237)
{
    // FC0A 0061;	
    // (‎‎ﰊ‎‎) ARABIC LIGATURE BEH WITH YEH ISOLATED FORM	[2373 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0A, 0x0061 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_238)
{
    // FC0A 0041;	
    // (‎‎ﰊ‎‎) ARABIC LIGATURE BEH WITH YEH ISOLATED FORM	[2373 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC0A, 0x0041 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_239)
{
    // FC6F 0062;	
    // (‎‎ﱯ‎‎) ARABIC LIGATURE BEH WITH YEH FINAL FORM	[2373 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC6F, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_240)
{
    // FC0A 0062;	
    // (‎‎ﰊ‎‎) ARABIC LIGATURE BEH WITH YEH ISOLATED FORM	[2373 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0A, 0x0062 };
    uint32_t const ces[12] = { 0x2373, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_241)
{
    // 067B 0021;	
    // (‎‎ٻ‎‎) ARABIC LETTER BEEH	[2374 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067B, 0x0021 };
    uint32_t const ces[9] = { 0x2374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_242)
{
    // FB54 0021;	
    // (‎‎ﭔ‎‎) ARABIC LETTER BEEH INITIAL FORM	[2374 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB54, 0x0021 };
    uint32_t const ces[9] = { 0x2374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_243)
{
    // FB55 0021;	
    // (‎‎ﭕ‎‎) ARABIC LETTER BEEH MEDIAL FORM	[2374 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB55, 0x0021 };
    uint32_t const ces[9] = { 0x2374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_244)
{
    // FB53 0021;	
    // (‎‎ﭓ‎‎) ARABIC LETTER BEEH FINAL FORM	[2374 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB53, 0x0021 };
    uint32_t const ces[9] = { 0x2374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_245)
{
    // FB52 0021;	
    // (‎‎ﭒ‎‎) ARABIC LETTER BEEH ISOLATED FORM	[2374 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB52, 0x0021 };
    uint32_t const ces[9] = { 0x2374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_246)
{
    // 067B 003F;	
    // (‎‎ٻ‎‎) ARABIC LETTER BEEH	[2374 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067B, 0x003F };
    uint32_t const ces[9] = { 0x2374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_247)
{
    // FB54 003F;	
    // (‎‎ﭔ‎‎) ARABIC LETTER BEEH INITIAL FORM	[2374 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB54, 0x003F };
    uint32_t const ces[9] = { 0x2374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_248)
{
    // FB55 003F;	
    // (‎‎ﭕ‎‎) ARABIC LETTER BEEH MEDIAL FORM	[2374 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB55, 0x003F };
    uint32_t const ces[9] = { 0x2374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_249)
{
    // FB53 003F;	
    // (‎‎ﭓ‎‎) ARABIC LETTER BEEH FINAL FORM	[2374 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB53, 0x003F };
    uint32_t const ces[9] = { 0x2374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_250)
{
    // FB52 003F;	
    // (‎‎ﭒ‎‎) ARABIC LETTER BEEH ISOLATED FORM	[2374 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB52, 0x003F };
    uint32_t const ces[9] = { 0x2374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_251)
{
    // 067B 0061;	
    // (‎‎ٻ‎‎) ARABIC LETTER BEEH	[2374 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067B, 0x0061 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_252)
{
    // 067B 0041;	
    // (‎‎ٻ‎‎) ARABIC LETTER BEEH	[2374 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x067B, 0x0041 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_253)
{
    // FB54 0061;	
    // (‎‎ﭔ‎‎) ARABIC LETTER BEEH INITIAL FORM	[2374 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB54, 0x0061 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_254)
{
    // FB54 0041;	
    // (‎‎ﭔ‎‎) ARABIC LETTER BEEH INITIAL FORM	[2374 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB54, 0x0041 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_255)
{
    // FB55 0061;	
    // (‎‎ﭕ‎‎) ARABIC LETTER BEEH MEDIAL FORM	[2374 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB55, 0x0061 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_256)
{
    // FB55 0041;	
    // (‎‎ﭕ‎‎) ARABIC LETTER BEEH MEDIAL FORM	[2374 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB55, 0x0041 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_257)
{
    // FB53 0061;	
    // (‎‎ﭓ‎‎) ARABIC LETTER BEEH FINAL FORM	[2374 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB53, 0x0061 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_258)
{
    // FB53 0041;	
    // (‎‎ﭓ‎‎) ARABIC LETTER BEEH FINAL FORM	[2374 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB53, 0x0041 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_259)
{
    // FB52 0061;	
    // (‎‎ﭒ‎‎) ARABIC LETTER BEEH ISOLATED FORM	[2374 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB52, 0x0061 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_260)
{
    // FB52 0041;	
    // (‎‎ﭒ‎‎) ARABIC LETTER BEEH ISOLATED FORM	[2374 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB52, 0x0041 };
    uint32_t const ces[9] = { 0x2374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_261)
{
    // 067B 0062;	
    // (‎‎ٻ‎‎) ARABIC LETTER BEEH	[2374 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067B, 0x0062 };
    uint32_t const ces[9] = { 0x2374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_262)
{
    // FB54 0062;	
    // (‎‎ﭔ‎‎) ARABIC LETTER BEEH INITIAL FORM	[2374 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB54, 0x0062 };
    uint32_t const ces[9] = { 0x2374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_263)
{
    // FB55 0062;	
    // (‎‎ﭕ‎‎) ARABIC LETTER BEEH MEDIAL FORM	[2374 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB55, 0x0062 };
    uint32_t const ces[9] = { 0x2374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_264)
{
    // FB53 0062;	
    // (‎‎ﭓ‎‎) ARABIC LETTER BEEH FINAL FORM	[2374 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB53, 0x0062 };
    uint32_t const ces[9] = { 0x2374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_265)
{
    // FB52 0062;	
    // (‎‎ﭒ‎‎) ARABIC LETTER BEEH ISOLATED FORM	[2374 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB52, 0x0062 };
    uint32_t const ces[9] = { 0x2374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_266)
{
    // 067E 0021;	
    // (‎‎پ‎‎) ARABIC LETTER PEH	[2375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067E, 0x0021 };
    uint32_t const ces[9] = { 0x2375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_267)
{
    // FB58 0021;	
    // (‎‎ﭘ‎‎) ARABIC LETTER PEH INITIAL FORM	[2375 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB58, 0x0021 };
    uint32_t const ces[9] = { 0x2375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_268)
{
    // FB59 0021;	
    // (‎‎ﭙ‎‎) ARABIC LETTER PEH MEDIAL FORM	[2375 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB59, 0x0021 };
    uint32_t const ces[9] = { 0x2375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_269)
{
    // FB57 0021;	
    // (‎‎ﭗ‎‎) ARABIC LETTER PEH FINAL FORM	[2375 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB57, 0x0021 };
    uint32_t const ces[9] = { 0x2375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_270)
{
    // FB56 0021;	
    // (‎‎ﭖ‎‎) ARABIC LETTER PEH ISOLATED FORM	[2375 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB56, 0x0021 };
    uint32_t const ces[9] = { 0x2375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_271)
{
    // 067E 003F;	
    // (‎‎پ‎‎) ARABIC LETTER PEH	[2375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067E, 0x003F };
    uint32_t const ces[9] = { 0x2375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_272)
{
    // FB58 003F;	
    // (‎‎ﭘ‎‎) ARABIC LETTER PEH INITIAL FORM	[2375 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB58, 0x003F };
    uint32_t const ces[9] = { 0x2375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_273)
{
    // FB59 003F;	
    // (‎‎ﭙ‎‎) ARABIC LETTER PEH MEDIAL FORM	[2375 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB59, 0x003F };
    uint32_t const ces[9] = { 0x2375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_274)
{
    // FB57 003F;	
    // (‎‎ﭗ‎‎) ARABIC LETTER PEH FINAL FORM	[2375 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB57, 0x003F };
    uint32_t const ces[9] = { 0x2375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_275)
{
    // FB56 003F;	
    // (‎‎ﭖ‎‎) ARABIC LETTER PEH ISOLATED FORM	[2375 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB56, 0x003F };
    uint32_t const ces[9] = { 0x2375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_276)
{
    // 067E 0061;	
    // (‎‎پ‎‎) ARABIC LETTER PEH	[2375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067E, 0x0061 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_277)
{
    // 067E 0041;	
    // (‎‎پ‎‎) ARABIC LETTER PEH	[2375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x067E, 0x0041 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_278)
{
    // FB58 0061;	
    // (‎‎ﭘ‎‎) ARABIC LETTER PEH INITIAL FORM	[2375 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB58, 0x0061 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_279)
{
    // FB58 0041;	
    // (‎‎ﭘ‎‎) ARABIC LETTER PEH INITIAL FORM	[2375 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB58, 0x0041 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_280)
{
    // FB59 0061;	
    // (‎‎ﭙ‎‎) ARABIC LETTER PEH MEDIAL FORM	[2375 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB59, 0x0061 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_281)
{
    // FB59 0041;	
    // (‎‎ﭙ‎‎) ARABIC LETTER PEH MEDIAL FORM	[2375 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB59, 0x0041 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_282)
{
    // FB57 0061;	
    // (‎‎ﭗ‎‎) ARABIC LETTER PEH FINAL FORM	[2375 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB57, 0x0061 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_283)
{
    // FB57 0041;	
    // (‎‎ﭗ‎‎) ARABIC LETTER PEH FINAL FORM	[2375 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB57, 0x0041 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_284)
{
    // FB56 0061;	
    // (‎‎ﭖ‎‎) ARABIC LETTER PEH ISOLATED FORM	[2375 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB56, 0x0061 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_285)
{
    // FB56 0041;	
    // (‎‎ﭖ‎‎) ARABIC LETTER PEH ISOLATED FORM	[2375 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB56, 0x0041 };
    uint32_t const ces[9] = { 0x2375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_286)
{
    // 067E 0062;	
    // (‎‎پ‎‎) ARABIC LETTER PEH	[2375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x067E, 0x0062 };
    uint32_t const ces[9] = { 0x2375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_287)
{
    // FB58 0062;	
    // (‎‎ﭘ‎‎) ARABIC LETTER PEH INITIAL FORM	[2375 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB58, 0x0062 };
    uint32_t const ces[9] = { 0x2375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_288)
{
    // FB59 0062;	
    // (‎‎ﭙ‎‎) ARABIC LETTER PEH MEDIAL FORM	[2375 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB59, 0x0062 };
    uint32_t const ces[9] = { 0x2375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_289)
{
    // FB57 0062;	
    // (‎‎ﭗ‎‎) ARABIC LETTER PEH FINAL FORM	[2375 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB57, 0x0062 };
    uint32_t const ces[9] = { 0x2375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_290)
{
    // FB56 0062;	
    // (‎‎ﭖ‎‎) ARABIC LETTER PEH ISOLATED FORM	[2375 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB56, 0x0062 };
    uint32_t const ces[9] = { 0x2375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_291)
{
    // 0680 0021;	
    // (‎‎ڀ‎‎) ARABIC LETTER BEHEH	[2376 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0680, 0x0021 };
    uint32_t const ces[9] = { 0x2376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_292)
{
    // FB5C 0021;	
    // (‎‎ﭜ‎‎) ARABIC LETTER BEHEH INITIAL FORM	[2376 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB5C, 0x0021 };
    uint32_t const ces[9] = { 0x2376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_293)
{
    // FB5D 0021;	
    // (‎‎ﭝ‎‎) ARABIC LETTER BEHEH MEDIAL FORM	[2376 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB5D, 0x0021 };
    uint32_t const ces[9] = { 0x2376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_294)
{
    // FB5B 0021;	
    // (‎‎ﭛ‎‎) ARABIC LETTER BEHEH FINAL FORM	[2376 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB5B, 0x0021 };
    uint32_t const ces[9] = { 0x2376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_295)
{
    // FB5A 0021;	
    // (‎‎ﭚ‎‎) ARABIC LETTER BEHEH ISOLATED FORM	[2376 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB5A, 0x0021 };
    uint32_t const ces[9] = { 0x2376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_296)
{
    // 0680 003F;	
    // (‎‎ڀ‎‎) ARABIC LETTER BEHEH	[2376 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0680, 0x003F };
    uint32_t const ces[9] = { 0x2376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_297)
{
    // FB5C 003F;	
    // (‎‎ﭜ‎‎) ARABIC LETTER BEHEH INITIAL FORM	[2376 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB5C, 0x003F };
    uint32_t const ces[9] = { 0x2376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_298)
{
    // FB5D 003F;	
    // (‎‎ﭝ‎‎) ARABIC LETTER BEHEH MEDIAL FORM	[2376 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB5D, 0x003F };
    uint32_t const ces[9] = { 0x2376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_299)
{
    // FB5B 003F;	
    // (‎‎ﭛ‎‎) ARABIC LETTER BEHEH FINAL FORM	[2376 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB5B, 0x003F };
    uint32_t const ces[9] = { 0x2376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_300)
{
    // FB5A 003F;	
    // (‎‎ﭚ‎‎) ARABIC LETTER BEHEH ISOLATED FORM	[2376 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB5A, 0x003F };
    uint32_t const ces[9] = { 0x2376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_301)
{
    // 0680 0061;	
    // (‎‎ڀ‎‎) ARABIC LETTER BEHEH	[2376 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0680, 0x0061 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_302)
{
    // 0680 0041;	
    // (‎‎ڀ‎‎) ARABIC LETTER BEHEH	[2376 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0680, 0x0041 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_303)
{
    // FB5C 0061;	
    // (‎‎ﭜ‎‎) ARABIC LETTER BEHEH INITIAL FORM	[2376 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB5C, 0x0061 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_304)
{
    // FB5C 0041;	
    // (‎‎ﭜ‎‎) ARABIC LETTER BEHEH INITIAL FORM	[2376 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB5C, 0x0041 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_305)
{
    // FB5D 0061;	
    // (‎‎ﭝ‎‎) ARABIC LETTER BEHEH MEDIAL FORM	[2376 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB5D, 0x0061 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_306)
{
    // FB5D 0041;	
    // (‎‎ﭝ‎‎) ARABIC LETTER BEHEH MEDIAL FORM	[2376 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB5D, 0x0041 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_307)
{
    // FB5B 0061;	
    // (‎‎ﭛ‎‎) ARABIC LETTER BEHEH FINAL FORM	[2376 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB5B, 0x0061 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_308)
{
    // FB5B 0041;	
    // (‎‎ﭛ‎‎) ARABIC LETTER BEHEH FINAL FORM	[2376 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB5B, 0x0041 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_309)
{
    // FB5A 0061;	
    // (‎‎ﭚ‎‎) ARABIC LETTER BEHEH ISOLATED FORM	[2376 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB5A, 0x0061 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_310)
{
    // FB5A 0041;	
    // (‎‎ﭚ‎‎) ARABIC LETTER BEHEH ISOLATED FORM	[2376 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB5A, 0x0041 };
    uint32_t const ces[9] = { 0x2376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_311)
{
    // 0680 0062;	
    // (‎‎ڀ‎‎) ARABIC LETTER BEHEH	[2376 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0680, 0x0062 };
    uint32_t const ces[9] = { 0x2376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_312)
{
    // FB5C 0062;	
    // (‎‎ﭜ‎‎) ARABIC LETTER BEHEH INITIAL FORM	[2376 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB5C, 0x0062 };
    uint32_t const ces[9] = { 0x2376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_313)
{
    // FB5D 0062;	
    // (‎‎ﭝ‎‎) ARABIC LETTER BEHEH MEDIAL FORM	[2376 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB5D, 0x0062 };
    uint32_t const ces[9] = { 0x2376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_314)
{
    // FB5B 0062;	
    // (‎‎ﭛ‎‎) ARABIC LETTER BEHEH FINAL FORM	[2376 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB5B, 0x0062 };
    uint32_t const ces[9] = { 0x2376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_315)
{
    // FB5A 0062;	
    // (‎‎ﭚ‎‎) ARABIC LETTER BEHEH ISOLATED FORM	[2376 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB5A, 0x0062 };
    uint32_t const ces[9] = { 0x2376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_316)
{
    // 0750 0021;	
    // (‎‎ݐ‎‎) ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW	[2377 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0750, 0x0021 };
    uint32_t const ces[9] = { 0x2377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_317)
{
    // 0750 003F;	
    // (‎‎ݐ‎‎) ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW	[2377 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0750, 0x003F };
    uint32_t const ces[9] = { 0x2377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_318)
{
    // 0750 0061;	
    // (‎‎ݐ‎‎) ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW	[2377 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0750, 0x0061 };
    uint32_t const ces[9] = { 0x2377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_319)
{
    // 0750 0041;	
    // (‎‎ݐ‎‎) ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW	[2377 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0750, 0x0041 };
    uint32_t const ces[9] = { 0x2377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_320)
{
    // 0750 0062;	
    // (‎‎ݐ‎‎) ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW	[2377 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0750, 0x0062 };
    uint32_t const ces[9] = { 0x2377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_321)
{
    // 0751 0021;	
    // (‎‎ݑ‎‎) ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE	[2378 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0751, 0x0021 };
    uint32_t const ces[9] = { 0x2378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_322)
{
    // 0751 003F;	
    // (‎‎ݑ‎‎) ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE	[2378 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0751, 0x003F };
    uint32_t const ces[9] = { 0x2378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_323)
{
    // 0751 0061;	
    // (‎‎ݑ‎‎) ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE	[2378 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0751, 0x0061 };
    uint32_t const ces[9] = { 0x2378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_324)
{
    // 0751 0041;	
    // (‎‎ݑ‎‎) ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE	[2378 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0751, 0x0041 };
    uint32_t const ces[9] = { 0x2378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_325)
{
    // 0751 0062;	
    // (‎‎ݑ‎‎) ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE	[2378 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0751, 0x0062 };
    uint32_t const ces[9] = { 0x2378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_326)
{
    // 0752 0021;	
    // (‎‎ݒ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW	[2379 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0752, 0x0021 };
    uint32_t const ces[9] = { 0x2379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_327)
{
    // 0752 003F;	
    // (‎‎ݒ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW	[2379 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0752, 0x003F };
    uint32_t const ces[9] = { 0x2379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_328)
{
    // 0752 0061;	
    // (‎‎ݒ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW	[2379 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0752, 0x0061 };
    uint32_t const ces[9] = { 0x2379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_329)
{
    // 0752 0041;	
    // (‎‎ݒ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW	[2379 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0752, 0x0041 };
    uint32_t const ces[9] = { 0x2379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_330)
{
    // 0752 0062;	
    // (‎‎ݒ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW	[2379 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0752, 0x0062 };
    uint32_t const ces[9] = { 0x2379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_331)
{
    // 0753 0021;	
    // (‎‎ݓ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE	[237A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0753, 0x0021 };
    uint32_t const ces[9] = { 0x237A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_332)
{
    // 0753 003F;	
    // (‎‎ݓ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE	[237A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0753, 0x003F };
    uint32_t const ces[9] = { 0x237A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_333)
{
    // 0753 0061;	
    // (‎‎ݓ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE	[237A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0753, 0x0061 };
    uint32_t const ces[9] = { 0x237A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_334)
{
    // 0753 0041;	
    // (‎‎ݓ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE	[237A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0753, 0x0041 };
    uint32_t const ces[9] = { 0x237A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_335)
{
    // 0753 0062;	
    // (‎‎ݓ‎‎) ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE	[237A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0753, 0x0062 };
    uint32_t const ces[9] = { 0x237A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_336)
{
    // 0754 0021;	
    // (‎‎ݔ‎‎) ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE	[237B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0754, 0x0021 };
    uint32_t const ces[9] = { 0x237B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_337)
{
    // 0754 003F;	
    // (‎‎ݔ‎‎) ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE	[237B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0754, 0x003F };
    uint32_t const ces[9] = { 0x237B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_338)
{
    // 0754 0061;	
    // (‎‎ݔ‎‎) ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE	[237B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0754, 0x0061 };
    uint32_t const ces[9] = { 0x237B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_339)
{
    // 0754 0041;	
    // (‎‎ݔ‎‎) ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE	[237B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0754, 0x0041 };
    uint32_t const ces[9] = { 0x237B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_340)
{
    // 0754 0062;	
    // (‎‎ݔ‎‎) ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE	[237B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0754, 0x0062 };
    uint32_t const ces[9] = { 0x237B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_341)
{
    // 0755 0021;	
    // (‎‎ݕ‎‎) ARABIC LETTER BEH WITH INVERTED SMALL V BELOW	[237C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0755, 0x0021 };
    uint32_t const ces[9] = { 0x237C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_342)
{
    // 0755 003F;	
    // (‎‎ݕ‎‎) ARABIC LETTER BEH WITH INVERTED SMALL V BELOW	[237C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0755, 0x003F };
    uint32_t const ces[9] = { 0x237C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_343)
{
    // 0755 0061;	
    // (‎‎ݕ‎‎) ARABIC LETTER BEH WITH INVERTED SMALL V BELOW	[237C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0755, 0x0061 };
    uint32_t const ces[9] = { 0x237C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_344)
{
    // 0755 0041;	
    // (‎‎ݕ‎‎) ARABIC LETTER BEH WITH INVERTED SMALL V BELOW	[237C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0755, 0x0041 };
    uint32_t const ces[9] = { 0x237C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_345)
{
    // 0755 0062;	
    // (‎‎ݕ‎‎) ARABIC LETTER BEH WITH INVERTED SMALL V BELOW	[237C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0755, 0x0062 };
    uint32_t const ces[9] = { 0x237C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_346)
{
    // 08A0 0021;	
    // (‎‎ࢠ‎‎) ARABIC LETTER BEH WITH SMALL V BELOW	[237D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A0, 0x0021 };
    uint32_t const ces[9] = { 0x237D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_347)
{
    // 08A0 003F;	
    // (‎‎ࢠ‎‎) ARABIC LETTER BEH WITH SMALL V BELOW	[237D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A0, 0x003F };
    uint32_t const ces[9] = { 0x237D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_348)
{
    // 08A0 0061;	
    // (‎‎ࢠ‎‎) ARABIC LETTER BEH WITH SMALL V BELOW	[237D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A0, 0x0061 };
    uint32_t const ces[9] = { 0x237D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_349)
{
    // 08A0 0041;	
    // (‎‎ࢠ‎‎) ARABIC LETTER BEH WITH SMALL V BELOW	[237D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A0, 0x0041 };
    uint32_t const ces[9] = { 0x237D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_350)
{
    // 08A0 0062;	
    // (‎‎ࢠ‎‎) ARABIC LETTER BEH WITH SMALL V BELOW	[237D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A0, 0x0062 };
    uint32_t const ces[9] = { 0x237D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_351)
{
    // 0756 0021;	
    // (‎‎ݖ‎‎) ARABIC LETTER BEH WITH SMALL V	[237E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0756, 0x0021 };
    uint32_t const ces[9] = { 0x237E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_352)
{
    // 0756 003F;	
    // (‎‎ݖ‎‎) ARABIC LETTER BEH WITH SMALL V	[237E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0756, 0x003F };
    uint32_t const ces[9] = { 0x237E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_353)
{
    // 0756 0061;	
    // (‎‎ݖ‎‎) ARABIC LETTER BEH WITH SMALL V	[237E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0756, 0x0061 };
    uint32_t const ces[9] = { 0x237E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_354)
{
    // 0756 0041;	
    // (‎‎ݖ‎‎) ARABIC LETTER BEH WITH SMALL V	[237E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0756, 0x0041 };
    uint32_t const ces[9] = { 0x237E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_355)
{
    // 0756 0062;	
    // (‎‎ݖ‎‎) ARABIC LETTER BEH WITH SMALL V	[237E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0756, 0x0062 };
    uint32_t const ces[9] = { 0x237E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_356)
{
    // 08A1 0021;	
    // (‎‎ࢡ‎‎) ARABIC LETTER BEH WITH HAMZA ABOVE	[237F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A1, 0x0021 };
    uint32_t const ces[9] = { 0x237F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_357)
{
    // 08A1 003F;	
    // (‎‎ࢡ‎‎) ARABIC LETTER BEH WITH HAMZA ABOVE	[237F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A1, 0x003F };
    uint32_t const ces[9] = { 0x237F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_358)
{
    // 08A1 0061;	
    // (‎‎ࢡ‎‎) ARABIC LETTER BEH WITH HAMZA ABOVE	[237F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A1, 0x0061 };
    uint32_t const ces[9] = { 0x237F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_359)
{
    // 08A1 0041;	
    // (‎‎ࢡ‎‎) ARABIC LETTER BEH WITH HAMZA ABOVE	[237F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A1, 0x0041 };
    uint32_t const ces[9] = { 0x237F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_360)
{
    // 08A1 0062;	
    // (‎‎ࢡ‎‎) ARABIC LETTER BEH WITH HAMZA ABOVE	[237F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A1, 0x0062 };
    uint32_t const ces[9] = { 0x237F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_361)
{
    // 08B6 0021;	
    // (‎‎ࢶ‎‎) ARABIC LETTER BEH WITH SMALL MEEM ABOVE	[2380 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B6, 0x0021 };
    uint32_t const ces[9] = { 0x2380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_362)
{
    // 08B6 003F;	
    // (‎‎ࢶ‎‎) ARABIC LETTER BEH WITH SMALL MEEM ABOVE	[2380 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B6, 0x003F };
    uint32_t const ces[9] = { 0x2380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_363)
{
    // 08B6 0061;	
    // (‎‎ࢶ‎‎) ARABIC LETTER BEH WITH SMALL MEEM ABOVE	[2380 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B6, 0x0061 };
    uint32_t const ces[9] = { 0x2380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_364)
{
    // 08B6 0041;	
    // (‎‎ࢶ‎‎) ARABIC LETTER BEH WITH SMALL MEEM ABOVE	[2380 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08B6, 0x0041 };
    uint32_t const ces[9] = { 0x2380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_365)
{
    // 08B6 0062;	
    // (‎‎ࢶ‎‎) ARABIC LETTER BEH WITH SMALL MEEM ABOVE	[2380 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B6, 0x0062 };
    uint32_t const ces[9] = { 0x2380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_366)
{
    // 08B7 0021;	
    // (‎‎ࢷ‎‎) ARABIC LETTER PEH WITH SMALL MEEM ABOVE	[2381 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B7, 0x0021 };
    uint32_t const ces[9] = { 0x2381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_367)
{
    // 08B7 003F;	
    // (‎‎ࢷ‎‎) ARABIC LETTER PEH WITH SMALL MEEM ABOVE	[2381 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B7, 0x003F };
    uint32_t const ces[9] = { 0x2381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_368)
{
    // 08B7 0061;	
    // (‎‎ࢷ‎‎) ARABIC LETTER PEH WITH SMALL MEEM ABOVE	[2381 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B7, 0x0061 };
    uint32_t const ces[9] = { 0x2381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_369)
{
    // 08B7 0041;	
    // (‎‎ࢷ‎‎) ARABIC LETTER PEH WITH SMALL MEEM ABOVE	[2381 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08B7, 0x0041 };
    uint32_t const ces[9] = { 0x2381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_370)
{
    // 08B7 0062;	
    // (‎‎ࢷ‎‎) ARABIC LETTER PEH WITH SMALL MEEM ABOVE	[2381 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B7, 0x0062 };
    uint32_t const ces[9] = { 0x2381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_371)
{
    // 0629 0021;	
    // (‎‎ة‎‎) ARABIC LETTER TEH MARBUTA	[2382 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0629, 0x0021 };
    uint32_t const ces[9] = { 0x2382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_372)
{
    // FE94 0021;	
    // (‎‎ﺔ‎‎) ARABIC LETTER TEH MARBUTA FINAL FORM	[2382 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE94, 0x0021 };
    uint32_t const ces[9] = { 0x2382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_373)
{
    // FE93 0021;	
    // (‎‎ﺓ‎‎) ARABIC LETTER TEH MARBUTA ISOLATED FORM	[2382 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE93, 0x0021 };
    uint32_t const ces[9] = { 0x2382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_374)
{
    // 0629 003F;	
    // (‎‎ة‎‎) ARABIC LETTER TEH MARBUTA	[2382 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0629, 0x003F };
    uint32_t const ces[9] = { 0x2382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_375)
{
    // FE94 003F;	
    // (‎‎ﺔ‎‎) ARABIC LETTER TEH MARBUTA FINAL FORM	[2382 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE94, 0x003F };
    uint32_t const ces[9] = { 0x2382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_376)
{
    // FE93 003F;	
    // (‎‎ﺓ‎‎) ARABIC LETTER TEH MARBUTA ISOLATED FORM	[2382 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE93, 0x003F };
    uint32_t const ces[9] = { 0x2382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_377)
{
    // 0629 0061;	
    // (‎‎ة‎‎) ARABIC LETTER TEH MARBUTA	[2382 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0629, 0x0061 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_378)
{
    // 0629 0041;	
    // (‎‎ة‎‎) ARABIC LETTER TEH MARBUTA	[2382 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0629, 0x0041 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_379)
{
    // FE94 0061;	
    // (‎‎ﺔ‎‎) ARABIC LETTER TEH MARBUTA FINAL FORM	[2382 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE94, 0x0061 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_380)
{
    // FE94 0041;	
    // (‎‎ﺔ‎‎) ARABIC LETTER TEH MARBUTA FINAL FORM	[2382 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE94, 0x0041 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_381)
{
    // FE93 0061;	
    // (‎‎ﺓ‎‎) ARABIC LETTER TEH MARBUTA ISOLATED FORM	[2382 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE93, 0x0061 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_382)
{
    // FE93 0041;	
    // (‎‎ﺓ‎‎) ARABIC LETTER TEH MARBUTA ISOLATED FORM	[2382 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE93, 0x0041 };
    uint32_t const ces[9] = { 0x2382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_383)
{
    // 0629 0062;	
    // (‎‎ة‎‎) ARABIC LETTER TEH MARBUTA	[2382 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0629, 0x0062 };
    uint32_t const ces[9] = { 0x2382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_384)
{
    // FE94 0062;	
    // (‎‎ﺔ‎‎) ARABIC LETTER TEH MARBUTA FINAL FORM	[2382 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE94, 0x0062 };
    uint32_t const ces[9] = { 0x2382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_385)
{
    // FE93 0062;	
    // (‎‎ﺓ‎‎) ARABIC LETTER TEH MARBUTA ISOLATED FORM	[2382 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE93, 0x0062 };
    uint32_t const ces[9] = { 0x2382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_386)
{
    // 062A 0021;	
    // (‎‎ت‎‎) ARABIC LETTER TEH	[2383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062A, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_387)
{
    // 1EE15 0021;	
    // (‎‎𞸕‎‎) ARABIC MATHEMATICAL TEH	[2383 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE15, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_388)
{
    // 1EE35 0021;	
    // (‎‎𞸵‎‎) ARABIC MATHEMATICAL INITIAL TEH	[2383 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE35, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_389)
{
    // 1EE75 0021;	
    // (‎‎𞹵‎‎) ARABIC MATHEMATICAL STRETCHED TEH	[2383 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE75, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_390)
{
    // 1EE95 0021;	
    // (‎‎𞺕‎‎) ARABIC MATHEMATICAL LOOPED TEH	[2383 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE95, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_391)
{
    // 1EEB5 0021;	
    // (‎‎𞺵‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TEH	[2383 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB5, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_392)
{
    // FE97 0021;	
    // (‎‎ﺗ‎‎) ARABIC LETTER TEH INITIAL FORM	[2383 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE97, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_393)
{
    // FE98 0021;	
    // (‎‎ﺘ‎‎) ARABIC LETTER TEH MEDIAL FORM	[2383 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE98, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_394)
{
    // FE96 0021;	
    // (‎‎ﺖ‎‎) ARABIC LETTER TEH FINAL FORM	[2383 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE96, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_395)
{
    // FE95 0021;	
    // (‎‎ﺕ‎‎) ARABIC LETTER TEH ISOLATED FORM	[2383 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE95, 0x0021 };
    uint32_t const ces[9] = { 0x2383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_396)
{
    // 062A 003F;	
    // (‎‎ت‎‎) ARABIC LETTER TEH	[2383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062A, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_397)
{
    // 1EE15 003F;	
    // (‎‎𞸕‎‎) ARABIC MATHEMATICAL TEH	[2383 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE15, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_398)
{
    // 1EE35 003F;	
    // (‎‎𞸵‎‎) ARABIC MATHEMATICAL INITIAL TEH	[2383 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE35, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_399)
{
    // 1EE75 003F;	
    // (‎‎𞹵‎‎) ARABIC MATHEMATICAL STRETCHED TEH	[2383 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE75, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_400)
{
    // 1EE95 003F;	
    // (‎‎𞺕‎‎) ARABIC MATHEMATICAL LOOPED TEH	[2383 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE95, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_401)
{
    // 1EEB5 003F;	
    // (‎‎𞺵‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TEH	[2383 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB5, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_402)
{
    // FE97 003F;	
    // (‎‎ﺗ‎‎) ARABIC LETTER TEH INITIAL FORM	[2383 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE97, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_403)
{
    // FE98 003F;	
    // (‎‎ﺘ‎‎) ARABIC LETTER TEH MEDIAL FORM	[2383 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE98, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_404)
{
    // FE96 003F;	
    // (‎‎ﺖ‎‎) ARABIC LETTER TEH FINAL FORM	[2383 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE96, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_405)
{
    // FE95 003F;	
    // (‎‎ﺕ‎‎) ARABIC LETTER TEH ISOLATED FORM	[2383 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE95, 0x003F };
    uint32_t const ces[9] = { 0x2383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_406)
{
    // 062A 0061;	
    // (‎‎ت‎‎) ARABIC LETTER TEH	[2383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062A, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_407)
{
    // 062A 0041;	
    // (‎‎ت‎‎) ARABIC LETTER TEH	[2383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x062A, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_408)
{
    // 1EE15 0061;	
    // (‎‎𞸕‎‎) ARABIC MATHEMATICAL TEH	[2383 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE15, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_409)
{
    // 1EE35 0061;	
    // (‎‎𞸵‎‎) ARABIC MATHEMATICAL INITIAL TEH	[2383 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE35, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_410)
{
    // 1EE75 0061;	
    // (‎‎𞹵‎‎) ARABIC MATHEMATICAL STRETCHED TEH	[2383 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE75, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_411)
{
    // 1EE95 0061;	
    // (‎‎𞺕‎‎) ARABIC MATHEMATICAL LOOPED TEH	[2383 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE95, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_412)
{
    // 1EEB5 0061;	
    // (‎‎𞺵‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TEH	[2383 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB5, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_413)
{
    // 1EE15 0041;	
    // (‎‎𞸕‎‎) ARABIC MATHEMATICAL TEH	[2383 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE15, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_414)
{
    // 1EE35 0041;	
    // (‎‎𞸵‎‎) ARABIC MATHEMATICAL INITIAL TEH	[2383 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE35, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_415)
{
    // 1EE75 0041;	
    // (‎‎𞹵‎‎) ARABIC MATHEMATICAL STRETCHED TEH	[2383 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE75, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_416)
{
    // 1EE95 0041;	
    // (‎‎𞺕‎‎) ARABIC MATHEMATICAL LOOPED TEH	[2383 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE95, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_417)
{
    // 1EEB5 0041;	
    // (‎‎𞺵‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TEH	[2383 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB5, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_418)
{
    // FE97 0061;	
    // (‎‎ﺗ‎‎) ARABIC LETTER TEH INITIAL FORM	[2383 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE97, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_419)
{
    // FE97 0041;	
    // (‎‎ﺗ‎‎) ARABIC LETTER TEH INITIAL FORM	[2383 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFE97, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_420)
{
    // FE98 0061;	
    // (‎‎ﺘ‎‎) ARABIC LETTER TEH MEDIAL FORM	[2383 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE98, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_421)
{
    // FE98 0041;	
    // (‎‎ﺘ‎‎) ARABIC LETTER TEH MEDIAL FORM	[2383 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE98, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_422)
{
    // FE96 0061;	
    // (‎‎ﺖ‎‎) ARABIC LETTER TEH FINAL FORM	[2383 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE96, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_423)
{
    // FE96 0041;	
    // (‎‎ﺖ‎‎) ARABIC LETTER TEH FINAL FORM	[2383 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE96, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_424)
{
    // FE95 0061;	
    // (‎‎ﺕ‎‎) ARABIC LETTER TEH ISOLATED FORM	[2383 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE95, 0x0061 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_425)
{
    // FE95 0041;	
    // (‎‎ﺕ‎‎) ARABIC LETTER TEH ISOLATED FORM	[2383 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE95, 0x0041 };
    uint32_t const ces[9] = { 0x2383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_426)
{
    // 062A 0062;	
    // (‎‎ت‎‎) ARABIC LETTER TEH	[2383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062A, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_427)
{
    // 1EE15 0062;	
    // (‎‎𞸕‎‎) ARABIC MATHEMATICAL TEH	[2383 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE15, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_428)
{
    // 1EE35 0062;	
    // (‎‎𞸵‎‎) ARABIC MATHEMATICAL INITIAL TEH	[2383 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE35, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_429)
{
    // 1EE75 0062;	
    // (‎‎𞹵‎‎) ARABIC MATHEMATICAL STRETCHED TEH	[2383 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE75, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_430)
{
    // 1EE95 0062;	
    // (‎‎𞺕‎‎) ARABIC MATHEMATICAL LOOPED TEH	[2383 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE95, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_431)
{
    // 1EEB5 0062;	
    // (‎‎𞺵‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TEH	[2383 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB5, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_432)
{
    // FE97 0062;	
    // (‎‎ﺗ‎‎) ARABIC LETTER TEH INITIAL FORM	[2383 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE97, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_433)
{
    // FE98 0062;	
    // (‎‎ﺘ‎‎) ARABIC LETTER TEH MEDIAL FORM	[2383 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE98, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_434)
{
    // FE96 0062;	
    // (‎‎ﺖ‎‎) ARABIC LETTER TEH FINAL FORM	[2383 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE96, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_435)
{
    // FE95 0062;	
    // (‎‎ﺕ‎‎) ARABIC LETTER TEH ISOLATED FORM	[2383 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE95, 0x0062 };
    uint32_t const ces[9] = { 0x2383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_436)
{
    // FCA1 0021;	
    // (‎‎ﲡ‎‎) ARABIC LIGATURE TEH WITH JEEM INITIAL FORM	[2383 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA1, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_437)
{
    // FC0B 0021;	
    // (‎‎ﰋ‎‎) ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM	[2383 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0B, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_438)
{
    // FCA1 003F;	
    // (‎‎ﲡ‎‎) ARABIC LIGATURE TEH WITH JEEM INITIAL FORM	[2383 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA1, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_439)
{
    // FC0B 003F;	
    // (‎‎ﰋ‎‎) ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM	[2383 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0B, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_440)
{
    // FCA1 0061;	
    // (‎‎ﲡ‎‎) ARABIC LIGATURE TEH WITH JEEM INITIAL FORM	[2383 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA1, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_441)
{
    // FCA1 0041;	
    // (‎‎ﲡ‎‎) ARABIC LIGATURE TEH WITH JEEM INITIAL FORM	[2383 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCA1, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_442)
{
    // FC0B 0061;	
    // (‎‎ﰋ‎‎) ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM	[2383 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0B, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_443)
{
    // FC0B 0041;	
    // (‎‎ﰋ‎‎) ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM	[2383 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC0B, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_444)
{
    // FCA1 0062;	
    // (‎‎ﲡ‎‎) ARABIC LIGATURE TEH WITH JEEM INITIAL FORM	[2383 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA1, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_445)
{
    // FC0B 0062;	
    // (‎‎ﰋ‎‎) ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM	[2383 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0B, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_446)
{
    // FD50 0021;	
    // (‎‎ﵐ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM	[2383 238B 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD50, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_447)
{
    // FD50 003F;	
    // (‎‎ﵐ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM	[2383 238B 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD50, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_448)
{
    // FD50 0061;	
    // (‎‎ﵐ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM	[2383 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD50, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_449)
{
    // FD50 0041;	
    // (‎‎ﵐ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM	[2383 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD50, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_450)
{
    // FD50 0062;	
    // (‎‎ﵐ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM	[2383 238B 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD50, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_451)
{
    // FDA0 0021;	
    // (‎‎ﶠ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM	[2383 238B 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA0, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_452)
{
    // FDA0 003F;	
    // (‎‎ﶠ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM	[2383 238B 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA0, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_453)
{
    // FDA0 0061;	
    // (‎‎ﶠ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM	[2383 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA0, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_454)
{
    // FDA0 0041;	
    // (‎‎ﶠ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM	[2383 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDA0, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_455)
{
    // FDA0 0062;	
    // (‎‎ﶠ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM	[2383 238B 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA0, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_456)
{
    // FD9F 0021;	
    // (‎‎ﶟ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM	[2383 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9F, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_457)
{
    // FD9F 003F;	
    // (‎‎ﶟ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM	[2383 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9F, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_458)
{
    // FD9F 0061;	
    // (‎‎ﶟ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM	[2383 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9F, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_459)
{
    // FD9F 0041;	
    // (‎‎ﶟ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM	[2383 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD9F, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_460)
{
    // FD9F 0062;	
    // (‎‎ﶟ‎‎) ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM	[2383 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9F, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_461)
{
    // FCA2 0021;	
    // (‎‎ﲢ‎‎) ARABIC LIGATURE TEH WITH HAH INITIAL FORM	[2383 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA2, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_462)
{
    // FC0C 0021;	
    // (‎‎ﰌ‎‎) ARABIC LIGATURE TEH WITH HAH ISOLATED FORM	[2383 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0C, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_463)
{
    // FCA2 003F;	
    // (‎‎ﲢ‎‎) ARABIC LIGATURE TEH WITH HAH INITIAL FORM	[2383 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA2, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_464)
{
    // FC0C 003F;	
    // (‎‎ﰌ‎‎) ARABIC LIGATURE TEH WITH HAH ISOLATED FORM	[2383 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0C, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_465)
{
    // FCA2 0061;	
    // (‎‎ﲢ‎‎) ARABIC LIGATURE TEH WITH HAH INITIAL FORM	[2383 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA2, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_466)
{
    // FCA2 0041;	
    // (‎‎ﲢ‎‎) ARABIC LIGATURE TEH WITH HAH INITIAL FORM	[2383 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCA2, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_467)
{
    // FC0C 0061;	
    // (‎‎ﰌ‎‎) ARABIC LIGATURE TEH WITH HAH ISOLATED FORM	[2383 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0C, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_468)
{
    // FC0C 0041;	
    // (‎‎ﰌ‎‎) ARABIC LIGATURE TEH WITH HAH ISOLATED FORM	[2383 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC0C, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_469)
{
    // FCA2 0062;	
    // (‎‎ﲢ‎‎) ARABIC LIGATURE TEH WITH HAH INITIAL FORM	[2383 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA2, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_470)
{
    // FC0C 0062;	
    // (‎‎ﰌ‎‎) ARABIC LIGATURE TEH WITH HAH ISOLATED FORM	[2383 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0C, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_471)
{
    // FD52 0021;	
    // (‎‎ﵒ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM	[2383 2392 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD52, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_472)
{
    // FD51 0021;	
    // (‎‎ﵑ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM	[2383 2392 238B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD51, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_473)
{
    // FD52 003F;	
    // (‎‎ﵒ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM	[2383 2392 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD52, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_474)
{
    // FD51 003F;	
    // (‎‎ﵑ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM	[2383 2392 238B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD51, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_475)
{
    // FD52 0061;	
    // (‎‎ﵒ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM	[2383 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD52, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_476)
{
    // FD52 0041;	
    // (‎‎ﵒ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM	[2383 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD52, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_477)
{
    // FD51 0061;	
    // (‎‎ﵑ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM	[2383 2392 238B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD51, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_478)
{
    // FD51 0041;	
    // (‎‎ﵑ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM	[2383 2392 238B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD51, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_479)
{
    // FD52 0062;	
    // (‎‎ﵒ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM	[2383 2392 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD52, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_480)
{
    // FD51 0062;	
    // (‎‎ﵑ‎‎) ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM	[2383 2392 238B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD51, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_481)
{
    // FD53 0021;	
    // (‎‎ﵓ‎‎) ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM	[2383 2392 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD53, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_482)
{
    // FD53 003F;	
    // (‎‎ﵓ‎‎) ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM	[2383 2392 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD53, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_483)
{
    // FD53 0061;	
    // (‎‎ﵓ‎‎) ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM	[2383 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD53, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_484)
{
    // FD53 0041;	
    // (‎‎ﵓ‎‎) ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM	[2383 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD53, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_485)
{
    // FD53 0062;	
    // (‎‎ﵓ‎‎) ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM	[2383 2392 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD53, 0x0062 };
    uint32_t const ces[15] = { 0x2383, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_486)
{
    // FCA3 0021;	
    // (‎‎ﲣ‎‎) ARABIC LIGATURE TEH WITH KHAH INITIAL FORM	[2383 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA3, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_487)
{
    // FC0D 0021;	
    // (‎‎ﰍ‎‎) ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM	[2383 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0D, 0x0021 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_488)
{
    // FCA3 003F;	
    // (‎‎ﲣ‎‎) ARABIC LIGATURE TEH WITH KHAH INITIAL FORM	[2383 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA3, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_489)
{
    // FC0D 003F;	
    // (‎‎ﰍ‎‎) ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM	[2383 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0D, 0x003F };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_490)
{
    // FCA3 0061;	
    // (‎‎ﲣ‎‎) ARABIC LIGATURE TEH WITH KHAH INITIAL FORM	[2383 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA3, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_491)
{
    // FCA3 0041;	
    // (‎‎ﲣ‎‎) ARABIC LIGATURE TEH WITH KHAH INITIAL FORM	[2383 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCA3, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_492)
{
    // FC0D 0061;	
    // (‎‎ﰍ‎‎) ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM	[2383 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0D, 0x0061 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_493)
{
    // FC0D 0041;	
    // (‎‎ﰍ‎‎) ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM	[2383 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC0D, 0x0041 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_494)
{
    // FCA3 0062;	
    // (‎‎ﲣ‎‎) ARABIC LIGATURE TEH WITH KHAH INITIAL FORM	[2383 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA3, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_495)
{
    // FC0D 0062;	
    // (‎‎ﰍ‎‎) ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM	[2383 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC0D, 0x0062 };
    uint32_t const ces[12] = { 0x2383, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_496)
{
    // FD54 0021;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD54, 0x0021 };
    uint32_t const ces[15] = { 0x2383, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_497)
{
    // FD54 003F;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD54, 0x003F };
    uint32_t const ces[15] = { 0x2383, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_498)
{
    // FD54 0061;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD54, 0x0061 };
    uint32_t const ces[15] = { 0x2383, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_148_499)
{
    // FD54 0041;	
    // (‎‎ﵔ‎‎) ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM	[2383 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD54, 0x0041 };
    uint32_t const ces[15] = { 0x2383, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

