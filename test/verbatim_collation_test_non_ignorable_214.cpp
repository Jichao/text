// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_214_000)
{
    // A9B6 0061;	
    // (ꦶ) JAVANESE VOWEL SIGN WULU	[33E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B6, 0x0061 };
    uint32_t const ces[9] = { 0x33E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_001)
{
    // A9B6 0041;	
    // (ꦶ) JAVANESE VOWEL SIGN WULU	[33E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9B6, 0x0041 };
    uint32_t const ces[9] = { 0x33E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_002)
{
    // A9B6 0062;	
    // (ꦶ) JAVANESE VOWEL SIGN WULU	[33E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B6, 0x0062 };
    uint32_t const ces[9] = { 0x33E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_003)
{
    // A9B7 0021;	
    // (ꦷ) JAVANESE VOWEL SIGN WULU MELIK	[33E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B7, 0x0021 };
    uint32_t const ces[9] = { 0x33E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_004)
{
    // A9B7 003F;	
    // (ꦷ) JAVANESE VOWEL SIGN WULU MELIK	[33E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B7, 0x003F };
    uint32_t const ces[9] = { 0x33E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_005)
{
    // A9B7 0061;	
    // (ꦷ) JAVANESE VOWEL SIGN WULU MELIK	[33E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B7, 0x0061 };
    uint32_t const ces[9] = { 0x33E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_006)
{
    // A9B7 0041;	
    // (ꦷ) JAVANESE VOWEL SIGN WULU MELIK	[33E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9B7, 0x0041 };
    uint32_t const ces[9] = { 0x33E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_007)
{
    // A9B7 0062;	
    // (ꦷ) JAVANESE VOWEL SIGN WULU MELIK	[33E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B7, 0x0062 };
    uint32_t const ces[9] = { 0x33E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_008)
{
    // A9B8 0021;	
    // (ꦸ) JAVANESE VOWEL SIGN SUKU	[33E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B8, 0x0021 };
    uint32_t const ces[9] = { 0x33E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_009)
{
    // A9B8 003F;	
    // (ꦸ) JAVANESE VOWEL SIGN SUKU	[33E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B8, 0x003F };
    uint32_t const ces[9] = { 0x33E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_010)
{
    // A9B8 0061;	
    // (ꦸ) JAVANESE VOWEL SIGN SUKU	[33E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B8, 0x0061 };
    uint32_t const ces[9] = { 0x33E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_011)
{
    // A9B8 0041;	
    // (ꦸ) JAVANESE VOWEL SIGN SUKU	[33E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9B8, 0x0041 };
    uint32_t const ces[9] = { 0x33E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_012)
{
    // A9B8 0062;	
    // (ꦸ) JAVANESE VOWEL SIGN SUKU	[33E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B8, 0x0062 };
    uint32_t const ces[9] = { 0x33E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_013)
{
    // A9B9 0021;	
    // (ꦹ) JAVANESE VOWEL SIGN SUKU MENDUT	[33E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B9, 0x0021 };
    uint32_t const ces[9] = { 0x33E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_014)
{
    // A9B9 003F;	
    // (ꦹ) JAVANESE VOWEL SIGN SUKU MENDUT	[33E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B9, 0x003F };
    uint32_t const ces[9] = { 0x33E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_015)
{
    // A9B9 0061;	
    // (ꦹ) JAVANESE VOWEL SIGN SUKU MENDUT	[33E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B9, 0x0061 };
    uint32_t const ces[9] = { 0x33E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_016)
{
    // A9B9 0041;	
    // (ꦹ) JAVANESE VOWEL SIGN SUKU MENDUT	[33E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9B9, 0x0041 };
    uint32_t const ces[9] = { 0x33E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_017)
{
    // A9B9 0062;	
    // (ꦹ) JAVANESE VOWEL SIGN SUKU MENDUT	[33E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B9, 0x0062 };
    uint32_t const ces[9] = { 0x33E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_018)
{
    // A9BD 0021;	
    // (ꦽ) JAVANESE CONSONANT SIGN KERET	[33EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BD, 0x0021 };
    uint32_t const ces[9] = { 0x33EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_019)
{
    // A9BD 003F;	
    // (ꦽ) JAVANESE CONSONANT SIGN KERET	[33EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BD, 0x003F };
    uint32_t const ces[9] = { 0x33EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_020)
{
    // A9BD 0061;	
    // (ꦽ) JAVANESE CONSONANT SIGN KERET	[33EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BD, 0x0061 };
    uint32_t const ces[9] = { 0x33EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_021)
{
    // A9BD 0041;	
    // (ꦽ) JAVANESE CONSONANT SIGN KERET	[33EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9BD, 0x0041 };
    uint32_t const ces[9] = { 0x33EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_022)
{
    // A9BD 0062;	
    // (ꦽ) JAVANESE CONSONANT SIGN KERET	[33EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BD, 0x0062 };
    uint32_t const ces[9] = { 0x33EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_023)
{
    // A9BA 0021;	
    // (ꦺ) JAVANESE VOWEL SIGN TALING	[33EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BA, 0x0021 };
    uint32_t const ces[9] = { 0x33EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_024)
{
    // A9BA 003F;	
    // (ꦺ) JAVANESE VOWEL SIGN TALING	[33EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BA, 0x003F };
    uint32_t const ces[9] = { 0x33EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_025)
{
    // A9BA 0061;	
    // (ꦺ) JAVANESE VOWEL SIGN TALING	[33EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BA, 0x0061 };
    uint32_t const ces[9] = { 0x33EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_026)
{
    // A9BA 0041;	
    // (ꦺ) JAVANESE VOWEL SIGN TALING	[33EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9BA, 0x0041 };
    uint32_t const ces[9] = { 0x33EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_027)
{
    // A9BA 0062;	
    // (ꦺ) JAVANESE VOWEL SIGN TALING	[33EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BA, 0x0062 };
    uint32_t const ces[9] = { 0x33EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_028)
{
    // A9BB 0021;	
    // (ꦻ) JAVANESE VOWEL SIGN DIRGA MURE	[33EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BB, 0x0021 };
    uint32_t const ces[9] = { 0x33EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_029)
{
    // A9BB 003F;	
    // (ꦻ) JAVANESE VOWEL SIGN DIRGA MURE	[33EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BB, 0x003F };
    uint32_t const ces[9] = { 0x33EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_030)
{
    // A9BB 0061;	
    // (ꦻ) JAVANESE VOWEL SIGN DIRGA MURE	[33EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BB, 0x0061 };
    uint32_t const ces[9] = { 0x33EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_031)
{
    // A9BB 0041;	
    // (ꦻ) JAVANESE VOWEL SIGN DIRGA MURE	[33EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9BB, 0x0041 };
    uint32_t const ces[9] = { 0x33EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_032)
{
    // A9BB 0062;	
    // (ꦻ) JAVANESE VOWEL SIGN DIRGA MURE	[33EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9BB, 0x0062 };
    uint32_t const ces[9] = { 0x33EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_033)
{
    // A9B5 0021;	
    // (ꦵ) JAVANESE VOWEL SIGN TOLONG	[33ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B5, 0x0021 };
    uint32_t const ces[9] = { 0x33ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_034)
{
    // A9B5 003F;	
    // (ꦵ) JAVANESE VOWEL SIGN TOLONG	[33ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B5, 0x003F };
    uint32_t const ces[9] = { 0x33ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_035)
{
    // A9B5 0061;	
    // (ꦵ) JAVANESE VOWEL SIGN TOLONG	[33ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B5, 0x0061 };
    uint32_t const ces[9] = { 0x33ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_036)
{
    // A9B5 0041;	
    // (ꦵ) JAVANESE VOWEL SIGN TOLONG	[33ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9B5, 0x0041 };
    uint32_t const ces[9] = { 0x33ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_037)
{
    // A9B5 0062;	
    // (ꦵ) JAVANESE VOWEL SIGN TOLONG	[33ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B5, 0x0062 };
    uint32_t const ces[9] = { 0x33ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_038)
{
    // 0334 A9C0;	
    // (꧀) JAVANESE PANGKON	[33EE | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA9C0 };
    uint32_t const ces[8] = { 0x33EE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_039)
{
    // A9C0 0334;	
    // (꧀) JAVANESE PANGKON	[33EE | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C0, 0x0334 };
    uint32_t const ces[8] = { 0x33EE, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_040)
{
    // A9C0 0021;	
    // (꧀) JAVANESE PANGKON	[33EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C0, 0x0021 };
    uint32_t const ces[9] = { 0x33EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_041)
{
    // A9C0 003F;	
    // (꧀) JAVANESE PANGKON	[33EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C0, 0x003F };
    uint32_t const ces[9] = { 0x33EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_042)
{
    // A9C0 0061;	
    // (꧀) JAVANESE PANGKON	[33EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C0, 0x0061 };
    uint32_t const ces[9] = { 0x33EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_043)
{
    // A9C0 0041;	
    // (꧀) JAVANESE PANGKON	[33EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9C0, 0x0041 };
    uint32_t const ces[9] = { 0x33EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_044)
{
    // A9C0 0062;	
    // (꧀) JAVANESE PANGKON	[33EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9C0, 0x0062 };
    uint32_t const ces[9] = { 0x33EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_045)
{
    // 1880 0021;	
    // (ᢀ) MONGOLIAN LETTER ALI GALI ANUSVARA ONE	[33EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1880, 0x0021 };
    uint32_t const ces[9] = { 0x33EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_046)
{
    // 1880 003F;	
    // (ᢀ) MONGOLIAN LETTER ALI GALI ANUSVARA ONE	[33EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1880, 0x003F };
    uint32_t const ces[9] = { 0x33EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_047)
{
    // 1880 0061;	
    // (ᢀ) MONGOLIAN LETTER ALI GALI ANUSVARA ONE	[33EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1880, 0x0061 };
    uint32_t const ces[9] = { 0x33EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_048)
{
    // 1880 0041;	
    // (ᢀ) MONGOLIAN LETTER ALI GALI ANUSVARA ONE	[33EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1880, 0x0041 };
    uint32_t const ces[9] = { 0x33EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_049)
{
    // 1880 0062;	
    // (ᢀ) MONGOLIAN LETTER ALI GALI ANUSVARA ONE	[33EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1880, 0x0062 };
    uint32_t const ces[9] = { 0x33EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_050)
{
    // 1881 0021;	
    // (ᢁ) MONGOLIAN LETTER ALI GALI VISARGA ONE	[33F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1881, 0x0021 };
    uint32_t const ces[9] = { 0x33F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_051)
{
    // 1881 003F;	
    // (ᢁ) MONGOLIAN LETTER ALI GALI VISARGA ONE	[33F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1881, 0x003F };
    uint32_t const ces[9] = { 0x33F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_052)
{
    // 1881 0061;	
    // (ᢁ) MONGOLIAN LETTER ALI GALI VISARGA ONE	[33F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1881, 0x0061 };
    uint32_t const ces[9] = { 0x33F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_053)
{
    // 1881 0041;	
    // (ᢁ) MONGOLIAN LETTER ALI GALI VISARGA ONE	[33F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1881, 0x0041 };
    uint32_t const ces[9] = { 0x33F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_054)
{
    // 1881 0062;	
    // (ᢁ) MONGOLIAN LETTER ALI GALI VISARGA ONE	[33F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1881, 0x0062 };
    uint32_t const ces[9] = { 0x33F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_055)
{
    // 1882 0021;	
    // (ᢂ) MONGOLIAN LETTER ALI GALI DAMARU	[33F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1882, 0x0021 };
    uint32_t const ces[9] = { 0x33F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_056)
{
    // 1882 003F;	
    // (ᢂ) MONGOLIAN LETTER ALI GALI DAMARU	[33F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1882, 0x003F };
    uint32_t const ces[9] = { 0x33F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_057)
{
    // 1882 0061;	
    // (ᢂ) MONGOLIAN LETTER ALI GALI DAMARU	[33F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1882, 0x0061 };
    uint32_t const ces[9] = { 0x33F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_058)
{
    // 1882 0041;	
    // (ᢂ) MONGOLIAN LETTER ALI GALI DAMARU	[33F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1882, 0x0041 };
    uint32_t const ces[9] = { 0x33F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_059)
{
    // 1882 0062;	
    // (ᢂ) MONGOLIAN LETTER ALI GALI DAMARU	[33F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1882, 0x0062 };
    uint32_t const ces[9] = { 0x33F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_060)
{
    // 1883 0021;	
    // (ᢃ) MONGOLIAN LETTER ALI GALI UBADAMA	[33F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1883, 0x0021 };
    uint32_t const ces[9] = { 0x33F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_061)
{
    // 1883 003F;	
    // (ᢃ) MONGOLIAN LETTER ALI GALI UBADAMA	[33F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1883, 0x003F };
    uint32_t const ces[9] = { 0x33F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_062)
{
    // 1883 0061;	
    // (ᢃ) MONGOLIAN LETTER ALI GALI UBADAMA	[33F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1883, 0x0061 };
    uint32_t const ces[9] = { 0x33F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_063)
{
    // 1883 0041;	
    // (ᢃ) MONGOLIAN LETTER ALI GALI UBADAMA	[33F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1883, 0x0041 };
    uint32_t const ces[9] = { 0x33F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_064)
{
    // 1883 0062;	
    // (ᢃ) MONGOLIAN LETTER ALI GALI UBADAMA	[33F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1883, 0x0062 };
    uint32_t const ces[9] = { 0x33F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_065)
{
    // 1884 0021;	
    // (ᢄ) MONGOLIAN LETTER ALI GALI INVERTED UBADAMA	[33F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1884, 0x0021 };
    uint32_t const ces[9] = { 0x33F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_066)
{
    // 1884 003F;	
    // (ᢄ) MONGOLIAN LETTER ALI GALI INVERTED UBADAMA	[33F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1884, 0x003F };
    uint32_t const ces[9] = { 0x33F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_067)
{
    // 1884 0061;	
    // (ᢄ) MONGOLIAN LETTER ALI GALI INVERTED UBADAMA	[33F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1884, 0x0061 };
    uint32_t const ces[9] = { 0x33F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_068)
{
    // 1884 0041;	
    // (ᢄ) MONGOLIAN LETTER ALI GALI INVERTED UBADAMA	[33F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1884, 0x0041 };
    uint32_t const ces[9] = { 0x33F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_069)
{
    // 1884 0062;	
    // (ᢄ) MONGOLIAN LETTER ALI GALI INVERTED UBADAMA	[33F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1884, 0x0062 };
    uint32_t const ces[9] = { 0x33F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_070)
{
    // 1885 0021;	
    // (ᢅ) MONGOLIAN LETTER ALI GALI BALUDA	[33F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1885, 0x0021 };
    uint32_t const ces[9] = { 0x33F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_071)
{
    // 1885 003F;	
    // (ᢅ) MONGOLIAN LETTER ALI GALI BALUDA	[33F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1885, 0x003F };
    uint32_t const ces[9] = { 0x33F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_072)
{
    // 1885 0061;	
    // (ᢅ) MONGOLIAN LETTER ALI GALI BALUDA	[33F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1885, 0x0061 };
    uint32_t const ces[9] = { 0x33F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_073)
{
    // 1885 0041;	
    // (ᢅ) MONGOLIAN LETTER ALI GALI BALUDA	[33F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1885, 0x0041 };
    uint32_t const ces[9] = { 0x33F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_074)
{
    // 1885 0062;	
    // (ᢅ) MONGOLIAN LETTER ALI GALI BALUDA	[33F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1885, 0x0062 };
    uint32_t const ces[9] = { 0x33F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_075)
{
    // 1886 0021;	
    // (ᢆ) MONGOLIAN LETTER ALI GALI THREE BALUDA	[33F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1886, 0x0021 };
    uint32_t const ces[9] = { 0x33F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_076)
{
    // 1886 003F;	
    // (ᢆ) MONGOLIAN LETTER ALI GALI THREE BALUDA	[33F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1886, 0x003F };
    uint32_t const ces[9] = { 0x33F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_077)
{
    // 1886 0061;	
    // (ᢆ) MONGOLIAN LETTER ALI GALI THREE BALUDA	[33F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1886, 0x0061 };
    uint32_t const ces[9] = { 0x33F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_078)
{
    // 1886 0041;	
    // (ᢆ) MONGOLIAN LETTER ALI GALI THREE BALUDA	[33F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1886, 0x0041 };
    uint32_t const ces[9] = { 0x33F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_079)
{
    // 1886 0062;	
    // (ᢆ) MONGOLIAN LETTER ALI GALI THREE BALUDA	[33F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1886, 0x0062 };
    uint32_t const ces[9] = { 0x33F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_080)
{
    // 1843 0021;	
    // (ᡃ) MONGOLIAN LETTER TODO LONG VOWEL SIGN	[33F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1843, 0x0021 };
    uint32_t const ces[9] = { 0x33F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_081)
{
    // 1843 003F;	
    // (ᡃ) MONGOLIAN LETTER TODO LONG VOWEL SIGN	[33F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1843, 0x003F };
    uint32_t const ces[9] = { 0x33F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_082)
{
    // 1843 0061;	
    // (ᡃ) MONGOLIAN LETTER TODO LONG VOWEL SIGN	[33F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1843, 0x0061 };
    uint32_t const ces[9] = { 0x33F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_083)
{
    // 1843 0041;	
    // (ᡃ) MONGOLIAN LETTER TODO LONG VOWEL SIGN	[33F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1843, 0x0041 };
    uint32_t const ces[9] = { 0x33F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_084)
{
    // 1843 0062;	
    // (ᡃ) MONGOLIAN LETTER TODO LONG VOWEL SIGN	[33F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1843, 0x0062 };
    uint32_t const ces[9] = { 0x33F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_085)
{
    // 1820 0021;	
    // (ᠠ) MONGOLIAN LETTER A	[33F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1820, 0x0021 };
    uint32_t const ces[9] = { 0x33F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_086)
{
    // 1820 003F;	
    // (ᠠ) MONGOLIAN LETTER A	[33F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1820, 0x003F };
    uint32_t const ces[9] = { 0x33F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_087)
{
    // 1820 0061;	
    // (ᠠ) MONGOLIAN LETTER A	[33F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1820, 0x0061 };
    uint32_t const ces[9] = { 0x33F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_088)
{
    // 1820 0041;	
    // (ᠠ) MONGOLIAN LETTER A	[33F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1820, 0x0041 };
    uint32_t const ces[9] = { 0x33F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_089)
{
    // 1820 0062;	
    // (ᠠ) MONGOLIAN LETTER A	[33F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1820, 0x0062 };
    uint32_t const ces[9] = { 0x33F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_090)
{
    // 1887 0021;	
    // (ᢇ) MONGOLIAN LETTER ALI GALI A	[33F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1887, 0x0021 };
    uint32_t const ces[9] = { 0x33F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_091)
{
    // 1887 003F;	
    // (ᢇ) MONGOLIAN LETTER ALI GALI A	[33F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1887, 0x003F };
    uint32_t const ces[9] = { 0x33F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_092)
{
    // 1887 0061;	
    // (ᢇ) MONGOLIAN LETTER ALI GALI A	[33F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1887, 0x0061 };
    uint32_t const ces[9] = { 0x33F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_093)
{
    // 1887 0041;	
    // (ᢇ) MONGOLIAN LETTER ALI GALI A	[33F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1887, 0x0041 };
    uint32_t const ces[9] = { 0x33F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_094)
{
    // 1887 0062;	
    // (ᢇ) MONGOLIAN LETTER ALI GALI A	[33F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1887, 0x0062 };
    uint32_t const ces[9] = { 0x33F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_095)
{
    // 1821 0021;	
    // (ᠡ) MONGOLIAN LETTER E	[33F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1821, 0x0021 };
    uint32_t const ces[9] = { 0x33F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_096)
{
    // 1821 003F;	
    // (ᠡ) MONGOLIAN LETTER E	[33F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1821, 0x003F };
    uint32_t const ces[9] = { 0x33F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_097)
{
    // 1821 0061;	
    // (ᠡ) MONGOLIAN LETTER E	[33F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1821, 0x0061 };
    uint32_t const ces[9] = { 0x33F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_098)
{
    // 1821 0041;	
    // (ᠡ) MONGOLIAN LETTER E	[33F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1821, 0x0041 };
    uint32_t const ces[9] = { 0x33F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_099)
{
    // 1821 0062;	
    // (ᠡ) MONGOLIAN LETTER E	[33F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1821, 0x0062 };
    uint32_t const ces[9] = { 0x33F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_100)
{
    // 1844 0021;	
    // (ᡄ) MONGOLIAN LETTER TODO E	[33FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1844, 0x0021 };
    uint32_t const ces[9] = { 0x33FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_101)
{
    // 1844 003F;	
    // (ᡄ) MONGOLIAN LETTER TODO E	[33FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1844, 0x003F };
    uint32_t const ces[9] = { 0x33FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_102)
{
    // 1844 0061;	
    // (ᡄ) MONGOLIAN LETTER TODO E	[33FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1844, 0x0061 };
    uint32_t const ces[9] = { 0x33FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_103)
{
    // 1844 0041;	
    // (ᡄ) MONGOLIAN LETTER TODO E	[33FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1844, 0x0041 };
    uint32_t const ces[9] = { 0x33FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_104)
{
    // 1844 0062;	
    // (ᡄ) MONGOLIAN LETTER TODO E	[33FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1844, 0x0062 };
    uint32_t const ces[9] = { 0x33FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_105)
{
    // 185D 0021;	
    // (ᡝ) MONGOLIAN LETTER SIBE E	[33FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185D, 0x0021 };
    uint32_t const ces[9] = { 0x33FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_106)
{
    // 185D 003F;	
    // (ᡝ) MONGOLIAN LETTER SIBE E	[33FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185D, 0x003F };
    uint32_t const ces[9] = { 0x33FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_107)
{
    // 185D 0061;	
    // (ᡝ) MONGOLIAN LETTER SIBE E	[33FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185D, 0x0061 };
    uint32_t const ces[9] = { 0x33FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_108)
{
    // 185D 0041;	
    // (ᡝ) MONGOLIAN LETTER SIBE E	[33FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x185D, 0x0041 };
    uint32_t const ces[9] = { 0x33FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_109)
{
    // 185D 0062;	
    // (ᡝ) MONGOLIAN LETTER SIBE E	[33FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185D, 0x0062 };
    uint32_t const ces[9] = { 0x33FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_110)
{
    // 1822 0021;	
    // (ᠢ) MONGOLIAN LETTER I	[33FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1822, 0x0021 };
    uint32_t const ces[9] = { 0x33FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_111)
{
    // 1822 003F;	
    // (ᠢ) MONGOLIAN LETTER I	[33FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1822, 0x003F };
    uint32_t const ces[9] = { 0x33FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_112)
{
    // 1822 0061;	
    // (ᠢ) MONGOLIAN LETTER I	[33FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1822, 0x0061 };
    uint32_t const ces[9] = { 0x33FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_113)
{
    // 1822 0041;	
    // (ᠢ) MONGOLIAN LETTER I	[33FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1822, 0x0041 };
    uint32_t const ces[9] = { 0x33FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_114)
{
    // 1822 0062;	
    // (ᠢ) MONGOLIAN LETTER I	[33FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1822, 0x0062 };
    uint32_t const ces[9] = { 0x33FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_115)
{
    // 1845 0021;	
    // (ᡅ) MONGOLIAN LETTER TODO I	[33FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1845, 0x0021 };
    uint32_t const ces[9] = { 0x33FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_116)
{
    // 1845 003F;	
    // (ᡅ) MONGOLIAN LETTER TODO I	[33FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1845, 0x003F };
    uint32_t const ces[9] = { 0x33FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_117)
{
    // 1845 0061;	
    // (ᡅ) MONGOLIAN LETTER TODO I	[33FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1845, 0x0061 };
    uint32_t const ces[9] = { 0x33FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_118)
{
    // 1845 0041;	
    // (ᡅ) MONGOLIAN LETTER TODO I	[33FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1845, 0x0041 };
    uint32_t const ces[9] = { 0x33FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_119)
{
    // 1845 0062;	
    // (ᡅ) MONGOLIAN LETTER TODO I	[33FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1845, 0x0062 };
    uint32_t const ces[9] = { 0x33FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_120)
{
    // 185E 0021;	
    // (ᡞ) MONGOLIAN LETTER SIBE I	[33FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185E, 0x0021 };
    uint32_t const ces[9] = { 0x33FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_121)
{
    // 185E 003F;	
    // (ᡞ) MONGOLIAN LETTER SIBE I	[33FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185E, 0x003F };
    uint32_t const ces[9] = { 0x33FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_122)
{
    // 185E 0061;	
    // (ᡞ) MONGOLIAN LETTER SIBE I	[33FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185E, 0x0061 };
    uint32_t const ces[9] = { 0x33FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_123)
{
    // 185E 0041;	
    // (ᡞ) MONGOLIAN LETTER SIBE I	[33FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x185E, 0x0041 };
    uint32_t const ces[9] = { 0x33FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_124)
{
    // 185E 0062;	
    // (ᡞ) MONGOLIAN LETTER SIBE I	[33FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185E, 0x0062 };
    uint32_t const ces[9] = { 0x33FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_125)
{
    // 1873 0021;	
    // (ᡳ) MONGOLIAN LETTER MANCHU I	[33FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1873, 0x0021 };
    uint32_t const ces[9] = { 0x33FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_126)
{
    // 1873 003F;	
    // (ᡳ) MONGOLIAN LETTER MANCHU I	[33FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1873, 0x003F };
    uint32_t const ces[9] = { 0x33FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_127)
{
    // 1873 0061;	
    // (ᡳ) MONGOLIAN LETTER MANCHU I	[33FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1873, 0x0061 };
    uint32_t const ces[9] = { 0x33FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_128)
{
    // 1873 0041;	
    // (ᡳ) MONGOLIAN LETTER MANCHU I	[33FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1873, 0x0041 };
    uint32_t const ces[9] = { 0x33FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_129)
{
    // 1873 0062;	
    // (ᡳ) MONGOLIAN LETTER MANCHU I	[33FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1873, 0x0062 };
    uint32_t const ces[9] = { 0x33FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_130)
{
    // 1888 0021;	
    // (ᢈ) MONGOLIAN LETTER ALI GALI I	[3400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1888, 0x0021 };
    uint32_t const ces[9] = { 0x3400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_131)
{
    // 1888 003F;	
    // (ᢈ) MONGOLIAN LETTER ALI GALI I	[3400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1888, 0x003F };
    uint32_t const ces[9] = { 0x3400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_132)
{
    // 1888 0061;	
    // (ᢈ) MONGOLIAN LETTER ALI GALI I	[3400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1888, 0x0061 };
    uint32_t const ces[9] = { 0x3400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_133)
{
    // 1888 0041;	
    // (ᢈ) MONGOLIAN LETTER ALI GALI I	[3400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1888, 0x0041 };
    uint32_t const ces[9] = { 0x3400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_134)
{
    // 1888 0062;	
    // (ᢈ) MONGOLIAN LETTER ALI GALI I	[3400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1888, 0x0062 };
    uint32_t const ces[9] = { 0x3400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_135)
{
    // 185F 0021;	
    // (ᡟ) MONGOLIAN LETTER SIBE IY	[3401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185F, 0x0021 };
    uint32_t const ces[9] = { 0x3401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_136)
{
    // 185F 003F;	
    // (ᡟ) MONGOLIAN LETTER SIBE IY	[3401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185F, 0x003F };
    uint32_t const ces[9] = { 0x3401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_137)
{
    // 185F 0061;	
    // (ᡟ) MONGOLIAN LETTER SIBE IY	[3401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185F, 0x0061 };
    uint32_t const ces[9] = { 0x3401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_138)
{
    // 185F 0041;	
    // (ᡟ) MONGOLIAN LETTER SIBE IY	[3401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x185F, 0x0041 };
    uint32_t const ces[9] = { 0x3401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_139)
{
    // 185F 0062;	
    // (ᡟ) MONGOLIAN LETTER SIBE IY	[3401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185F, 0x0062 };
    uint32_t const ces[9] = { 0x3401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_140)
{
    // 1823 0021;	
    // (ᠣ) MONGOLIAN LETTER O	[3402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1823, 0x0021 };
    uint32_t const ces[9] = { 0x3402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_141)
{
    // 1823 003F;	
    // (ᠣ) MONGOLIAN LETTER O	[3402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1823, 0x003F };
    uint32_t const ces[9] = { 0x3402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_142)
{
    // 1823 0061;	
    // (ᠣ) MONGOLIAN LETTER O	[3402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1823, 0x0061 };
    uint32_t const ces[9] = { 0x3402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_143)
{
    // 1823 0041;	
    // (ᠣ) MONGOLIAN LETTER O	[3402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1823, 0x0041 };
    uint32_t const ces[9] = { 0x3402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_144)
{
    // 1823 0062;	
    // (ᠣ) MONGOLIAN LETTER O	[3402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1823, 0x0062 };
    uint32_t const ces[9] = { 0x3402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_145)
{
    // 1846 0021;	
    // (ᡆ) MONGOLIAN LETTER TODO O	[3403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1846, 0x0021 };
    uint32_t const ces[9] = { 0x3403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_146)
{
    // 1846 003F;	
    // (ᡆ) MONGOLIAN LETTER TODO O	[3403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1846, 0x003F };
    uint32_t const ces[9] = { 0x3403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_147)
{
    // 1846 0061;	
    // (ᡆ) MONGOLIAN LETTER TODO O	[3403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1846, 0x0061 };
    uint32_t const ces[9] = { 0x3403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_148)
{
    // 1846 0041;	
    // (ᡆ) MONGOLIAN LETTER TODO O	[3403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1846, 0x0041 };
    uint32_t const ces[9] = { 0x3403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_149)
{
    // 1846 0062;	
    // (ᡆ) MONGOLIAN LETTER TODO O	[3403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1846, 0x0062 };
    uint32_t const ces[9] = { 0x3403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_150)
{
    // 1824 0021;	
    // (ᠤ) MONGOLIAN LETTER U	[3404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1824, 0x0021 };
    uint32_t const ces[9] = { 0x3404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_151)
{
    // 1824 003F;	
    // (ᠤ) MONGOLIAN LETTER U	[3404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1824, 0x003F };
    uint32_t const ces[9] = { 0x3404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_152)
{
    // 1824 0061;	
    // (ᠤ) MONGOLIAN LETTER U	[3404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1824, 0x0061 };
    uint32_t const ces[9] = { 0x3404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_153)
{
    // 1824 0041;	
    // (ᠤ) MONGOLIAN LETTER U	[3404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1824, 0x0041 };
    uint32_t const ces[9] = { 0x3404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_154)
{
    // 1824 0062;	
    // (ᠤ) MONGOLIAN LETTER U	[3404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1824, 0x0062 };
    uint32_t const ces[9] = { 0x3404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_155)
{
    // 1847 0021;	
    // (ᡇ) MONGOLIAN LETTER TODO U	[3405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1847, 0x0021 };
    uint32_t const ces[9] = { 0x3405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_156)
{
    // 1847 003F;	
    // (ᡇ) MONGOLIAN LETTER TODO U	[3405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1847, 0x003F };
    uint32_t const ces[9] = { 0x3405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_157)
{
    // 1847 0061;	
    // (ᡇ) MONGOLIAN LETTER TODO U	[3405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1847, 0x0061 };
    uint32_t const ces[9] = { 0x3405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_158)
{
    // 1847 0041;	
    // (ᡇ) MONGOLIAN LETTER TODO U	[3405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1847, 0x0041 };
    uint32_t const ces[9] = { 0x3405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_159)
{
    // 1847 0062;	
    // (ᡇ) MONGOLIAN LETTER TODO U	[3405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1847, 0x0062 };
    uint32_t const ces[9] = { 0x3405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_160)
{
    // 1861 0021;	
    // (ᡡ) MONGOLIAN LETTER SIBE U	[3406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1861, 0x0021 };
    uint32_t const ces[9] = { 0x3406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_161)
{
    // 1861 003F;	
    // (ᡡ) MONGOLIAN LETTER SIBE U	[3406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1861, 0x003F };
    uint32_t const ces[9] = { 0x3406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_162)
{
    // 1861 0061;	
    // (ᡡ) MONGOLIAN LETTER SIBE U	[3406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1861, 0x0061 };
    uint32_t const ces[9] = { 0x3406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_163)
{
    // 1861 0041;	
    // (ᡡ) MONGOLIAN LETTER SIBE U	[3406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1861, 0x0041 };
    uint32_t const ces[9] = { 0x3406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_164)
{
    // 1861 0062;	
    // (ᡡ) MONGOLIAN LETTER SIBE U	[3406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1861, 0x0062 };
    uint32_t const ces[9] = { 0x3406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_165)
{
    // 1825 0021;	
    // (ᠥ) MONGOLIAN LETTER OE	[3407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1825, 0x0021 };
    uint32_t const ces[9] = { 0x3407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_166)
{
    // 1825 003F;	
    // (ᠥ) MONGOLIAN LETTER OE	[3407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1825, 0x003F };
    uint32_t const ces[9] = { 0x3407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_167)
{
    // 1825 0061;	
    // (ᠥ) MONGOLIAN LETTER OE	[3407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1825, 0x0061 };
    uint32_t const ces[9] = { 0x3407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_168)
{
    // 1825 0041;	
    // (ᠥ) MONGOLIAN LETTER OE	[3407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1825, 0x0041 };
    uint32_t const ces[9] = { 0x3407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_169)
{
    // 1825 0062;	
    // (ᠥ) MONGOLIAN LETTER OE	[3407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1825, 0x0062 };
    uint32_t const ces[9] = { 0x3407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_170)
{
    // 1848 0021;	
    // (ᡈ) MONGOLIAN LETTER TODO OE	[3408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1848, 0x0021 };
    uint32_t const ces[9] = { 0x3408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_171)
{
    // 1848 003F;	
    // (ᡈ) MONGOLIAN LETTER TODO OE	[3408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1848, 0x003F };
    uint32_t const ces[9] = { 0x3408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_172)
{
    // 1848 0061;	
    // (ᡈ) MONGOLIAN LETTER TODO OE	[3408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1848, 0x0061 };
    uint32_t const ces[9] = { 0x3408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_173)
{
    // 1848 0041;	
    // (ᡈ) MONGOLIAN LETTER TODO OE	[3408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1848, 0x0041 };
    uint32_t const ces[9] = { 0x3408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_174)
{
    // 1848 0062;	
    // (ᡈ) MONGOLIAN LETTER TODO OE	[3408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1848, 0x0062 };
    uint32_t const ces[9] = { 0x3408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_175)
{
    // 1826 0021;	
    // (ᠦ) MONGOLIAN LETTER UE	[3409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1826, 0x0021 };
    uint32_t const ces[9] = { 0x3409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_176)
{
    // 1826 003F;	
    // (ᠦ) MONGOLIAN LETTER UE	[3409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1826, 0x003F };
    uint32_t const ces[9] = { 0x3409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_177)
{
    // 1826 0061;	
    // (ᠦ) MONGOLIAN LETTER UE	[3409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1826, 0x0061 };
    uint32_t const ces[9] = { 0x3409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_178)
{
    // 1826 0041;	
    // (ᠦ) MONGOLIAN LETTER UE	[3409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1826, 0x0041 };
    uint32_t const ces[9] = { 0x3409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_179)
{
    // 1826 0062;	
    // (ᠦ) MONGOLIAN LETTER UE	[3409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1826, 0x0062 };
    uint32_t const ces[9] = { 0x3409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_180)
{
    // 1849 0021;	
    // (ᡉ) MONGOLIAN LETTER TODO UE	[340A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1849, 0x0021 };
    uint32_t const ces[9] = { 0x340A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_181)
{
    // 1849 003F;	
    // (ᡉ) MONGOLIAN LETTER TODO UE	[340A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1849, 0x003F };
    uint32_t const ces[9] = { 0x340A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_182)
{
    // 1849 0061;	
    // (ᡉ) MONGOLIAN LETTER TODO UE	[340A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1849, 0x0061 };
    uint32_t const ces[9] = { 0x340A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_183)
{
    // 1849 0041;	
    // (ᡉ) MONGOLIAN LETTER TODO UE	[340A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1849, 0x0041 };
    uint32_t const ces[9] = { 0x340A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_184)
{
    // 1849 0062;	
    // (ᡉ) MONGOLIAN LETTER TODO UE	[340A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1849, 0x0062 };
    uint32_t const ces[9] = { 0x340A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_185)
{
    // 1860 0021;	
    // (ᡠ) MONGOLIAN LETTER SIBE UE	[340B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1860, 0x0021 };
    uint32_t const ces[9] = { 0x340B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_186)
{
    // 1860 003F;	
    // (ᡠ) MONGOLIAN LETTER SIBE UE	[340B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1860, 0x003F };
    uint32_t const ces[9] = { 0x340B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_187)
{
    // 1860 0061;	
    // (ᡠ) MONGOLIAN LETTER SIBE UE	[340B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1860, 0x0061 };
    uint32_t const ces[9] = { 0x340B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_188)
{
    // 1860 0041;	
    // (ᡠ) MONGOLIAN LETTER SIBE UE	[340B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1860, 0x0041 };
    uint32_t const ces[9] = { 0x340B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_189)
{
    // 1860 0062;	
    // (ᡠ) MONGOLIAN LETTER SIBE UE	[340B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1860, 0x0062 };
    uint32_t const ces[9] = { 0x340B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_190)
{
    // 1827 0021;	
    // (ᠧ) MONGOLIAN LETTER EE	[340C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1827, 0x0021 };
    uint32_t const ces[9] = { 0x340C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_191)
{
    // 1827 003F;	
    // (ᠧ) MONGOLIAN LETTER EE	[340C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1827, 0x003F };
    uint32_t const ces[9] = { 0x340C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_192)
{
    // 1827 0061;	
    // (ᠧ) MONGOLIAN LETTER EE	[340C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1827, 0x0061 };
    uint32_t const ces[9] = { 0x340C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_193)
{
    // 1827 0041;	
    // (ᠧ) MONGOLIAN LETTER EE	[340C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1827, 0x0041 };
    uint32_t const ces[9] = { 0x340C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_194)
{
    // 1827 0062;	
    // (ᠧ) MONGOLIAN LETTER EE	[340C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1827, 0x0062 };
    uint32_t const ces[9] = { 0x340C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_195)
{
    // 1828 0021;	
    // (ᠨ) MONGOLIAN LETTER NA	[340D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1828, 0x0021 };
    uint32_t const ces[9] = { 0x340D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_196)
{
    // 1828 003F;	
    // (ᠨ) MONGOLIAN LETTER NA	[340D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1828, 0x003F };
    uint32_t const ces[9] = { 0x340D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_197)
{
    // 1828 0061;	
    // (ᠨ) MONGOLIAN LETTER NA	[340D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1828, 0x0061 };
    uint32_t const ces[9] = { 0x340D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_198)
{
    // 1828 0041;	
    // (ᠨ) MONGOLIAN LETTER NA	[340D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1828, 0x0041 };
    uint32_t const ces[9] = { 0x340D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_199)
{
    // 1828 0062;	
    // (ᠨ) MONGOLIAN LETTER NA	[340D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1828, 0x0062 };
    uint32_t const ces[9] = { 0x340D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_200)
{
    // 1829 0021;	
    // (ᠩ) MONGOLIAN LETTER ANG	[340E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1829, 0x0021 };
    uint32_t const ces[9] = { 0x340E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_201)
{
    // 1829 003F;	
    // (ᠩ) MONGOLIAN LETTER ANG	[340E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1829, 0x003F };
    uint32_t const ces[9] = { 0x340E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_202)
{
    // 1829 0061;	
    // (ᠩ) MONGOLIAN LETTER ANG	[340E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1829, 0x0061 };
    uint32_t const ces[9] = { 0x340E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_203)
{
    // 1829 0041;	
    // (ᠩ) MONGOLIAN LETTER ANG	[340E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1829, 0x0041 };
    uint32_t const ces[9] = { 0x340E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_204)
{
    // 1829 0062;	
    // (ᠩ) MONGOLIAN LETTER ANG	[340E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1829, 0x0062 };
    uint32_t const ces[9] = { 0x340E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_205)
{
    // 184A 0021;	
    // (ᡊ) MONGOLIAN LETTER TODO ANG	[340F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184A, 0x0021 };
    uint32_t const ces[9] = { 0x340F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_206)
{
    // 184A 003F;	
    // (ᡊ) MONGOLIAN LETTER TODO ANG	[340F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184A, 0x003F };
    uint32_t const ces[9] = { 0x340F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_207)
{
    // 184A 0061;	
    // (ᡊ) MONGOLIAN LETTER TODO ANG	[340F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184A, 0x0061 };
    uint32_t const ces[9] = { 0x340F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_208)
{
    // 184A 0041;	
    // (ᡊ) MONGOLIAN LETTER TODO ANG	[340F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184A, 0x0041 };
    uint32_t const ces[9] = { 0x340F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_209)
{
    // 184A 0062;	
    // (ᡊ) MONGOLIAN LETTER TODO ANG	[340F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184A, 0x0062 };
    uint32_t const ces[9] = { 0x340F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_210)
{
    // 1862 0021;	
    // (ᡢ) MONGOLIAN LETTER SIBE ANG	[3410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1862, 0x0021 };
    uint32_t const ces[9] = { 0x3410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_211)
{
    // 1862 003F;	
    // (ᡢ) MONGOLIAN LETTER SIBE ANG	[3410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1862, 0x003F };
    uint32_t const ces[9] = { 0x3410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_212)
{
    // 1862 0061;	
    // (ᡢ) MONGOLIAN LETTER SIBE ANG	[3410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1862, 0x0061 };
    uint32_t const ces[9] = { 0x3410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_213)
{
    // 1862 0041;	
    // (ᡢ) MONGOLIAN LETTER SIBE ANG	[3410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1862, 0x0041 };
    uint32_t const ces[9] = { 0x3410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_214)
{
    // 1862 0062;	
    // (ᡢ) MONGOLIAN LETTER SIBE ANG	[3410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1862, 0x0062 };
    uint32_t const ces[9] = { 0x3410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_215)
{
    // 188A 0021;	
    // (ᢊ) MONGOLIAN LETTER ALI GALI NGA	[3411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188A, 0x0021 };
    uint32_t const ces[9] = { 0x3411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_216)
{
    // 188A 003F;	
    // (ᢊ) MONGOLIAN LETTER ALI GALI NGA	[3411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188A, 0x003F };
    uint32_t const ces[9] = { 0x3411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_217)
{
    // 188A 0061;	
    // (ᢊ) MONGOLIAN LETTER ALI GALI NGA	[3411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188A, 0x0061 };
    uint32_t const ces[9] = { 0x3411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_218)
{
    // 188A 0041;	
    // (ᢊ) MONGOLIAN LETTER ALI GALI NGA	[3411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x188A, 0x0041 };
    uint32_t const ces[9] = { 0x3411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_219)
{
    // 188A 0062;	
    // (ᢊ) MONGOLIAN LETTER ALI GALI NGA	[3411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188A, 0x0062 };
    uint32_t const ces[9] = { 0x3411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_220)
{
    // 189B 0021;	
    // (ᢛ) MONGOLIAN LETTER MANCHU ALI GALI NGA	[3412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189B, 0x0021 };
    uint32_t const ces[9] = { 0x3412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_221)
{
    // 189B 003F;	
    // (ᢛ) MONGOLIAN LETTER MANCHU ALI GALI NGA	[3412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189B, 0x003F };
    uint32_t const ces[9] = { 0x3412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_222)
{
    // 189B 0061;	
    // (ᢛ) MONGOLIAN LETTER MANCHU ALI GALI NGA	[3412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189B, 0x0061 };
    uint32_t const ces[9] = { 0x3412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_223)
{
    // 189B 0041;	
    // (ᢛ) MONGOLIAN LETTER MANCHU ALI GALI NGA	[3412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x189B, 0x0041 };
    uint32_t const ces[9] = { 0x3412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_224)
{
    // 189B 0062;	
    // (ᢛ) MONGOLIAN LETTER MANCHU ALI GALI NGA	[3412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189B, 0x0062 };
    uint32_t const ces[9] = { 0x3412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_225)
{
    // 182A 0021;	
    // (ᠪ) MONGOLIAN LETTER BA	[3413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182A, 0x0021 };
    uint32_t const ces[9] = { 0x3413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_226)
{
    // 182A 003F;	
    // (ᠪ) MONGOLIAN LETTER BA	[3413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182A, 0x003F };
    uint32_t const ces[9] = { 0x3413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_227)
{
    // 182A 0061;	
    // (ᠪ) MONGOLIAN LETTER BA	[3413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182A, 0x0061 };
    uint32_t const ces[9] = { 0x3413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_228)
{
    // 182A 0041;	
    // (ᠪ) MONGOLIAN LETTER BA	[3413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182A, 0x0041 };
    uint32_t const ces[9] = { 0x3413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_229)
{
    // 182A 0062;	
    // (ᠪ) MONGOLIAN LETTER BA	[3413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182A, 0x0062 };
    uint32_t const ces[9] = { 0x3413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_230)
{
    // 184B 0021;	
    // (ᡋ) MONGOLIAN LETTER TODO BA	[3414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184B, 0x0021 };
    uint32_t const ces[9] = { 0x3414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_231)
{
    // 184B 003F;	
    // (ᡋ) MONGOLIAN LETTER TODO BA	[3414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184B, 0x003F };
    uint32_t const ces[9] = { 0x3414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_232)
{
    // 184B 0061;	
    // (ᡋ) MONGOLIAN LETTER TODO BA	[3414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184B, 0x0061 };
    uint32_t const ces[9] = { 0x3414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_233)
{
    // 184B 0041;	
    // (ᡋ) MONGOLIAN LETTER TODO BA	[3414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184B, 0x0041 };
    uint32_t const ces[9] = { 0x3414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_234)
{
    // 184B 0062;	
    // (ᡋ) MONGOLIAN LETTER TODO BA	[3414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184B, 0x0062 };
    uint32_t const ces[9] = { 0x3414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_235)
{
    // 182B 0021;	
    // (ᠫ) MONGOLIAN LETTER PA	[3415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182B, 0x0021 };
    uint32_t const ces[9] = { 0x3415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_236)
{
    // 182B 003F;	
    // (ᠫ) MONGOLIAN LETTER PA	[3415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182B, 0x003F };
    uint32_t const ces[9] = { 0x3415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_237)
{
    // 182B 0061;	
    // (ᠫ) MONGOLIAN LETTER PA	[3415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182B, 0x0061 };
    uint32_t const ces[9] = { 0x3415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_238)
{
    // 182B 0041;	
    // (ᠫ) MONGOLIAN LETTER PA	[3415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182B, 0x0041 };
    uint32_t const ces[9] = { 0x3415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_239)
{
    // 182B 0062;	
    // (ᠫ) MONGOLIAN LETTER PA	[3415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182B, 0x0062 };
    uint32_t const ces[9] = { 0x3415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_240)
{
    // 184C 0021;	
    // (ᡌ) MONGOLIAN LETTER TODO PA	[3416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184C, 0x0021 };
    uint32_t const ces[9] = { 0x3416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_241)
{
    // 184C 003F;	
    // (ᡌ) MONGOLIAN LETTER TODO PA	[3416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184C, 0x003F };
    uint32_t const ces[9] = { 0x3416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_242)
{
    // 184C 0061;	
    // (ᡌ) MONGOLIAN LETTER TODO PA	[3416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184C, 0x0061 };
    uint32_t const ces[9] = { 0x3416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_243)
{
    // 184C 0041;	
    // (ᡌ) MONGOLIAN LETTER TODO PA	[3416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184C, 0x0041 };
    uint32_t const ces[9] = { 0x3416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_244)
{
    // 184C 0062;	
    // (ᡌ) MONGOLIAN LETTER TODO PA	[3416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184C, 0x0062 };
    uint32_t const ces[9] = { 0x3416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_245)
{
    // 1866 0021;	
    // (ᡦ) MONGOLIAN LETTER SIBE PA	[3417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1866, 0x0021 };
    uint32_t const ces[9] = { 0x3417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_246)
{
    // 1866 003F;	
    // (ᡦ) MONGOLIAN LETTER SIBE PA	[3417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1866, 0x003F };
    uint32_t const ces[9] = { 0x3417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_247)
{
    // 1866 0061;	
    // (ᡦ) MONGOLIAN LETTER SIBE PA	[3417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1866, 0x0061 };
    uint32_t const ces[9] = { 0x3417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_248)
{
    // 1866 0041;	
    // (ᡦ) MONGOLIAN LETTER SIBE PA	[3417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1866, 0x0041 };
    uint32_t const ces[9] = { 0x3417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_249)
{
    // 1866 0062;	
    // (ᡦ) MONGOLIAN LETTER SIBE PA	[3417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1866, 0x0062 };
    uint32_t const ces[9] = { 0x3417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_250)
{
    // 182C 0021;	
    // (ᠬ) MONGOLIAN LETTER QA	[3418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182C, 0x0021 };
    uint32_t const ces[9] = { 0x3418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_251)
{
    // 182C 003F;	
    // (ᠬ) MONGOLIAN LETTER QA	[3418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182C, 0x003F };
    uint32_t const ces[9] = { 0x3418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_252)
{
    // 182C 0061;	
    // (ᠬ) MONGOLIAN LETTER QA	[3418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182C, 0x0061 };
    uint32_t const ces[9] = { 0x3418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_253)
{
    // 182C 0041;	
    // (ᠬ) MONGOLIAN LETTER QA	[3418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182C, 0x0041 };
    uint32_t const ces[9] = { 0x3418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_254)
{
    // 182C 0062;	
    // (ᠬ) MONGOLIAN LETTER QA	[3418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182C, 0x0062 };
    uint32_t const ces[9] = { 0x3418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_255)
{
    // 184D 0021;	
    // (ᡍ) MONGOLIAN LETTER TODO QA	[3419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184D, 0x0021 };
    uint32_t const ces[9] = { 0x3419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_256)
{
    // 184D 003F;	
    // (ᡍ) MONGOLIAN LETTER TODO QA	[3419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184D, 0x003F };
    uint32_t const ces[9] = { 0x3419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_257)
{
    // 184D 0061;	
    // (ᡍ) MONGOLIAN LETTER TODO QA	[3419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184D, 0x0061 };
    uint32_t const ces[9] = { 0x3419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_258)
{
    // 184D 0041;	
    // (ᡍ) MONGOLIAN LETTER TODO QA	[3419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184D, 0x0041 };
    uint32_t const ces[9] = { 0x3419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_259)
{
    // 184D 0062;	
    // (ᡍ) MONGOLIAN LETTER TODO QA	[3419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184D, 0x0062 };
    uint32_t const ces[9] = { 0x3419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_260)
{
    // 182D 0021;	
    // (ᠭ) MONGOLIAN LETTER GA	[341A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182D, 0x0021 };
    uint32_t const ces[9] = { 0x341A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_261)
{
    // 182D 003F;	
    // (ᠭ) MONGOLIAN LETTER GA	[341A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182D, 0x003F };
    uint32_t const ces[9] = { 0x341A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_262)
{
    // 182D 0061;	
    // (ᠭ) MONGOLIAN LETTER GA	[341A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182D, 0x0061 };
    uint32_t const ces[9] = { 0x341A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_263)
{
    // 182D 0041;	
    // (ᠭ) MONGOLIAN LETTER GA	[341A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182D, 0x0041 };
    uint32_t const ces[9] = { 0x341A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_264)
{
    // 182D 0062;	
    // (ᠭ) MONGOLIAN LETTER GA	[341A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182D, 0x0062 };
    uint32_t const ces[9] = { 0x341A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_265)
{
    // 184E 0021;	
    // (ᡎ) MONGOLIAN LETTER TODO GA	[341B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184E, 0x0021 };
    uint32_t const ces[9] = { 0x341B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_266)
{
    // 184E 003F;	
    // (ᡎ) MONGOLIAN LETTER TODO GA	[341B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184E, 0x003F };
    uint32_t const ces[9] = { 0x341B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_267)
{
    // 184E 0061;	
    // (ᡎ) MONGOLIAN LETTER TODO GA	[341B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184E, 0x0061 };
    uint32_t const ces[9] = { 0x341B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_268)
{
    // 184E 0041;	
    // (ᡎ) MONGOLIAN LETTER TODO GA	[341B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184E, 0x0041 };
    uint32_t const ces[9] = { 0x341B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_269)
{
    // 184E 0062;	
    // (ᡎ) MONGOLIAN LETTER TODO GA	[341B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184E, 0x0062 };
    uint32_t const ces[9] = { 0x341B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_270)
{
    // 1864 0021;	
    // (ᡤ) MONGOLIAN LETTER SIBE GA	[341C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1864, 0x0021 };
    uint32_t const ces[9] = { 0x341C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_271)
{
    // 1864 003F;	
    // (ᡤ) MONGOLIAN LETTER SIBE GA	[341C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1864, 0x003F };
    uint32_t const ces[9] = { 0x341C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_272)
{
    // 1864 0061;	
    // (ᡤ) MONGOLIAN LETTER SIBE GA	[341C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1864, 0x0061 };
    uint32_t const ces[9] = { 0x341C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_273)
{
    // 1864 0041;	
    // (ᡤ) MONGOLIAN LETTER SIBE GA	[341C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1864, 0x0041 };
    uint32_t const ces[9] = { 0x341C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_274)
{
    // 1864 0062;	
    // (ᡤ) MONGOLIAN LETTER SIBE GA	[341C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1864, 0x0062 };
    uint32_t const ces[9] = { 0x341C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_275)
{
    // 189A 0021;	
    // (ᢚ) MONGOLIAN LETTER MANCHU ALI GALI GHA	[341D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189A, 0x0021 };
    uint32_t const ces[9] = { 0x341D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_276)
{
    // 189A 003F;	
    // (ᢚ) MONGOLIAN LETTER MANCHU ALI GALI GHA	[341D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189A, 0x003F };
    uint32_t const ces[9] = { 0x341D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_277)
{
    // 189A 0061;	
    // (ᢚ) MONGOLIAN LETTER MANCHU ALI GALI GHA	[341D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189A, 0x0061 };
    uint32_t const ces[9] = { 0x341D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_278)
{
    // 189A 0041;	
    // (ᢚ) MONGOLIAN LETTER MANCHU ALI GALI GHA	[341D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x189A, 0x0041 };
    uint32_t const ces[9] = { 0x341D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_279)
{
    // 189A 0062;	
    // (ᢚ) MONGOLIAN LETTER MANCHU ALI GALI GHA	[341D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189A, 0x0062 };
    uint32_t const ces[9] = { 0x341D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_280)
{
    // 1865 0021;	
    // (ᡥ) MONGOLIAN LETTER SIBE HA	[341E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1865, 0x0021 };
    uint32_t const ces[9] = { 0x341E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_281)
{
    // 1865 003F;	
    // (ᡥ) MONGOLIAN LETTER SIBE HA	[341E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1865, 0x003F };
    uint32_t const ces[9] = { 0x341E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_282)
{
    // 1865 0061;	
    // (ᡥ) MONGOLIAN LETTER SIBE HA	[341E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1865, 0x0061 };
    uint32_t const ces[9] = { 0x341E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_283)
{
    // 1865 0041;	
    // (ᡥ) MONGOLIAN LETTER SIBE HA	[341E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1865, 0x0041 };
    uint32_t const ces[9] = { 0x341E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_284)
{
    // 1865 0062;	
    // (ᡥ) MONGOLIAN LETTER SIBE HA	[341E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1865, 0x0062 };
    uint32_t const ces[9] = { 0x341E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_285)
{
    // 182E 0021;	
    // (ᠮ) MONGOLIAN LETTER MA	[341F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182E, 0x0021 };
    uint32_t const ces[9] = { 0x341F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_286)
{
    // 182E 003F;	
    // (ᠮ) MONGOLIAN LETTER MA	[341F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182E, 0x003F };
    uint32_t const ces[9] = { 0x341F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_287)
{
    // 182E 0061;	
    // (ᠮ) MONGOLIAN LETTER MA	[341F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182E, 0x0061 };
    uint32_t const ces[9] = { 0x341F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_288)
{
    // 182E 0041;	
    // (ᠮ) MONGOLIAN LETTER MA	[341F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182E, 0x0041 };
    uint32_t const ces[9] = { 0x341F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_289)
{
    // 182E 0062;	
    // (ᠮ) MONGOLIAN LETTER MA	[341F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182E, 0x0062 };
    uint32_t const ces[9] = { 0x341F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_290)
{
    // 184F 0021;	
    // (ᡏ) MONGOLIAN LETTER TODO MA	[3420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184F, 0x0021 };
    uint32_t const ces[9] = { 0x3420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_291)
{
    // 184F 003F;	
    // (ᡏ) MONGOLIAN LETTER TODO MA	[3420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184F, 0x003F };
    uint32_t const ces[9] = { 0x3420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_292)
{
    // 184F 0061;	
    // (ᡏ) MONGOLIAN LETTER TODO MA	[3420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184F, 0x0061 };
    uint32_t const ces[9] = { 0x3420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_293)
{
    // 184F 0041;	
    // (ᡏ) MONGOLIAN LETTER TODO MA	[3420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x184F, 0x0041 };
    uint32_t const ces[9] = { 0x3420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_294)
{
    // 184F 0062;	
    // (ᡏ) MONGOLIAN LETTER TODO MA	[3420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x184F, 0x0062 };
    uint32_t const ces[9] = { 0x3420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_295)
{
    // 182F 0021;	
    // (ᠯ) MONGOLIAN LETTER LA	[3421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182F, 0x0021 };
    uint32_t const ces[9] = { 0x3421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_296)
{
    // 182F 003F;	
    // (ᠯ) MONGOLIAN LETTER LA	[3421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182F, 0x003F };
    uint32_t const ces[9] = { 0x3421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_297)
{
    // 182F 0061;	
    // (ᠯ) MONGOLIAN LETTER LA	[3421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182F, 0x0061 };
    uint32_t const ces[9] = { 0x3421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_298)
{
    // 182F 0041;	
    // (ᠯ) MONGOLIAN LETTER LA	[3421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x182F, 0x0041 };
    uint32_t const ces[9] = { 0x3421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_299)
{
    // 182F 0062;	
    // (ᠯ) MONGOLIAN LETTER LA	[3421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x182F, 0x0062 };
    uint32_t const ces[9] = { 0x3421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_300)
{
    // 1830 0021;	
    // (ᠰ) MONGOLIAN LETTER SA	[3422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1830, 0x0021 };
    uint32_t const ces[9] = { 0x3422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_301)
{
    // 1830 003F;	
    // (ᠰ) MONGOLIAN LETTER SA	[3422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1830, 0x003F };
    uint32_t const ces[9] = { 0x3422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_302)
{
    // 1830 0061;	
    // (ᠰ) MONGOLIAN LETTER SA	[3422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1830, 0x0061 };
    uint32_t const ces[9] = { 0x3422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_303)
{
    // 1830 0041;	
    // (ᠰ) MONGOLIAN LETTER SA	[3422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1830, 0x0041 };
    uint32_t const ces[9] = { 0x3422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_304)
{
    // 1830 0062;	
    // (ᠰ) MONGOLIAN LETTER SA	[3422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1830, 0x0062 };
    uint32_t const ces[9] = { 0x3422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_305)
{
    // 1831 0021;	
    // (ᠱ) MONGOLIAN LETTER SHA	[3423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1831, 0x0021 };
    uint32_t const ces[9] = { 0x3423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_306)
{
    // 1831 003F;	
    // (ᠱ) MONGOLIAN LETTER SHA	[3423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1831, 0x003F };
    uint32_t const ces[9] = { 0x3423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_307)
{
    // 1831 0061;	
    // (ᠱ) MONGOLIAN LETTER SHA	[3423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1831, 0x0061 };
    uint32_t const ces[9] = { 0x3423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_308)
{
    // 1831 0041;	
    // (ᠱ) MONGOLIAN LETTER SHA	[3423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1831, 0x0041 };
    uint32_t const ces[9] = { 0x3423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_309)
{
    // 1831 0062;	
    // (ᠱ) MONGOLIAN LETTER SHA	[3423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1831, 0x0062 };
    uint32_t const ces[9] = { 0x3423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_310)
{
    // 1867 0021;	
    // (ᡧ) MONGOLIAN LETTER SIBE SHA	[3424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1867, 0x0021 };
    uint32_t const ces[9] = { 0x3424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_311)
{
    // 1867 003F;	
    // (ᡧ) MONGOLIAN LETTER SIBE SHA	[3424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1867, 0x003F };
    uint32_t const ces[9] = { 0x3424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_312)
{
    // 1867 0061;	
    // (ᡧ) MONGOLIAN LETTER SIBE SHA	[3424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1867, 0x0061 };
    uint32_t const ces[9] = { 0x3424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_313)
{
    // 1867 0041;	
    // (ᡧ) MONGOLIAN LETTER SIBE SHA	[3424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1867, 0x0041 };
    uint32_t const ces[9] = { 0x3424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_314)
{
    // 1867 0062;	
    // (ᡧ) MONGOLIAN LETTER SIBE SHA	[3424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1867, 0x0062 };
    uint32_t const ces[9] = { 0x3424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_315)
{
    // 189C 0021;	
    // (ᢜ) MONGOLIAN LETTER MANCHU ALI GALI CA	[3425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189C, 0x0021 };
    uint32_t const ces[9] = { 0x3425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_316)
{
    // 189C 003F;	
    // (ᢜ) MONGOLIAN LETTER MANCHU ALI GALI CA	[3425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189C, 0x003F };
    uint32_t const ces[9] = { 0x3425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_317)
{
    // 189C 0061;	
    // (ᢜ) MONGOLIAN LETTER MANCHU ALI GALI CA	[3425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189C, 0x0061 };
    uint32_t const ces[9] = { 0x3425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_318)
{
    // 189C 0041;	
    // (ᢜ) MONGOLIAN LETTER MANCHU ALI GALI CA	[3425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x189C, 0x0041 };
    uint32_t const ces[9] = { 0x3425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_319)
{
    // 189C 0062;	
    // (ᢜ) MONGOLIAN LETTER MANCHU ALI GALI CA	[3425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189C, 0x0062 };
    uint32_t const ces[9] = { 0x3425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_320)
{
    // 189D 0021;	
    // (ᢝ) MONGOLIAN LETTER MANCHU ALI GALI JHA	[3426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189D, 0x0021 };
    uint32_t const ces[9] = { 0x3426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_321)
{
    // 189D 003F;	
    // (ᢝ) MONGOLIAN LETTER MANCHU ALI GALI JHA	[3426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189D, 0x003F };
    uint32_t const ces[9] = { 0x3426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_322)
{
    // 189D 0061;	
    // (ᢝ) MONGOLIAN LETTER MANCHU ALI GALI JHA	[3426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189D, 0x0061 };
    uint32_t const ces[9] = { 0x3426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_323)
{
    // 189D 0041;	
    // (ᢝ) MONGOLIAN LETTER MANCHU ALI GALI JHA	[3426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x189D, 0x0041 };
    uint32_t const ces[9] = { 0x3426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_324)
{
    // 189D 0062;	
    // (ᢝ) MONGOLIAN LETTER MANCHU ALI GALI JHA	[3426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x189D, 0x0062 };
    uint32_t const ces[9] = { 0x3426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_325)
{
    // 18A2 0021;	
    // (ᢢ) MONGOLIAN LETTER MANCHU ALI GALI SSA	[3427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A2, 0x0021 };
    uint32_t const ces[9] = { 0x3427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_326)
{
    // 18A2 003F;	
    // (ᢢ) MONGOLIAN LETTER MANCHU ALI GALI SSA	[3427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A2, 0x003F };
    uint32_t const ces[9] = { 0x3427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_327)
{
    // 18A2 0061;	
    // (ᢢ) MONGOLIAN LETTER MANCHU ALI GALI SSA	[3427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A2, 0x0061 };
    uint32_t const ces[9] = { 0x3427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_328)
{
    // 18A2 0041;	
    // (ᢢ) MONGOLIAN LETTER MANCHU ALI GALI SSA	[3427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18A2, 0x0041 };
    uint32_t const ces[9] = { 0x3427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_329)
{
    // 18A2 0062;	
    // (ᢢ) MONGOLIAN LETTER MANCHU ALI GALI SSA	[3427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A2, 0x0062 };
    uint32_t const ces[9] = { 0x3427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_330)
{
    // 18A4 0021;	
    // (ᢤ) MONGOLIAN LETTER MANCHU ALI GALI ZHA	[3428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A4, 0x0021 };
    uint32_t const ces[9] = { 0x3428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_331)
{
    // 18A4 003F;	
    // (ᢤ) MONGOLIAN LETTER MANCHU ALI GALI ZHA	[3428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A4, 0x003F };
    uint32_t const ces[9] = { 0x3428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_332)
{
    // 18A4 0061;	
    // (ᢤ) MONGOLIAN LETTER MANCHU ALI GALI ZHA	[3428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A4, 0x0061 };
    uint32_t const ces[9] = { 0x3428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_333)
{
    // 18A4 0041;	
    // (ᢤ) MONGOLIAN LETTER MANCHU ALI GALI ZHA	[3428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18A4, 0x0041 };
    uint32_t const ces[9] = { 0x3428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_334)
{
    // 18A4 0062;	
    // (ᢤ) MONGOLIAN LETTER MANCHU ALI GALI ZHA	[3428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A4, 0x0062 };
    uint32_t const ces[9] = { 0x3428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_335)
{
    // 18A5 0021;	
    // (ᢥ) MONGOLIAN LETTER MANCHU ALI GALI ZA	[3429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A5, 0x0021 };
    uint32_t const ces[9] = { 0x3429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_336)
{
    // 18A5 003F;	
    // (ᢥ) MONGOLIAN LETTER MANCHU ALI GALI ZA	[3429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A5, 0x003F };
    uint32_t const ces[9] = { 0x3429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_337)
{
    // 18A5 0061;	
    // (ᢥ) MONGOLIAN LETTER MANCHU ALI GALI ZA	[3429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A5, 0x0061 };
    uint32_t const ces[9] = { 0x3429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_338)
{
    // 18A5 0041;	
    // (ᢥ) MONGOLIAN LETTER MANCHU ALI GALI ZA	[3429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18A5, 0x0041 };
    uint32_t const ces[9] = { 0x3429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_339)
{
    // 18A5 0062;	
    // (ᢥ) MONGOLIAN LETTER MANCHU ALI GALI ZA	[3429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18A5, 0x0062 };
    uint32_t const ces[9] = { 0x3429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_340)
{
    // 1832 0021;	
    // (ᠲ) MONGOLIAN LETTER TA	[342A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1832, 0x0021 };
    uint32_t const ces[9] = { 0x342A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_341)
{
    // 1832 003F;	
    // (ᠲ) MONGOLIAN LETTER TA	[342A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1832, 0x003F };
    uint32_t const ces[9] = { 0x342A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_342)
{
    // 1832 0061;	
    // (ᠲ) MONGOLIAN LETTER TA	[342A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1832, 0x0061 };
    uint32_t const ces[9] = { 0x342A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_343)
{
    // 1832 0041;	
    // (ᠲ) MONGOLIAN LETTER TA	[342A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1832, 0x0041 };
    uint32_t const ces[9] = { 0x342A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_344)
{
    // 1832 0062;	
    // (ᠲ) MONGOLIAN LETTER TA	[342A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1832, 0x0062 };
    uint32_t const ces[9] = { 0x342A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_345)
{
    // 1850 0021;	
    // (ᡐ) MONGOLIAN LETTER TODO TA	[342B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1850, 0x0021 };
    uint32_t const ces[9] = { 0x342B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_346)
{
    // 1850 003F;	
    // (ᡐ) MONGOLIAN LETTER TODO TA	[342B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1850, 0x003F };
    uint32_t const ces[9] = { 0x342B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_347)
{
    // 1850 0061;	
    // (ᡐ) MONGOLIAN LETTER TODO TA	[342B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1850, 0x0061 };
    uint32_t const ces[9] = { 0x342B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_348)
{
    // 1850 0041;	
    // (ᡐ) MONGOLIAN LETTER TODO TA	[342B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1850, 0x0041 };
    uint32_t const ces[9] = { 0x342B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_349)
{
    // 1850 0062;	
    // (ᡐ) MONGOLIAN LETTER TODO TA	[342B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1850, 0x0062 };
    uint32_t const ces[9] = { 0x342B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_350)
{
    // 1868 0021;	
    // (ᡨ) MONGOLIAN LETTER SIBE TA	[342C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1868, 0x0021 };
    uint32_t const ces[9] = { 0x342C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_351)
{
    // 1868 003F;	
    // (ᡨ) MONGOLIAN LETTER SIBE TA	[342C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1868, 0x003F };
    uint32_t const ces[9] = { 0x342C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_352)
{
    // 1868 0061;	
    // (ᡨ) MONGOLIAN LETTER SIBE TA	[342C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1868, 0x0061 };
    uint32_t const ces[9] = { 0x342C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_353)
{
    // 1868 0041;	
    // (ᡨ) MONGOLIAN LETTER SIBE TA	[342C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1868, 0x0041 };
    uint32_t const ces[9] = { 0x342C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_354)
{
    // 1868 0062;	
    // (ᡨ) MONGOLIAN LETTER SIBE TA	[342C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1868, 0x0062 };
    uint32_t const ces[9] = { 0x342C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_355)
{
    // 1833 0021;	
    // (ᠳ) MONGOLIAN LETTER DA	[342D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1833, 0x0021 };
    uint32_t const ces[9] = { 0x342D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_356)
{
    // 1833 003F;	
    // (ᠳ) MONGOLIAN LETTER DA	[342D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1833, 0x003F };
    uint32_t const ces[9] = { 0x342D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_357)
{
    // 1833 0061;	
    // (ᠳ) MONGOLIAN LETTER DA	[342D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1833, 0x0061 };
    uint32_t const ces[9] = { 0x342D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_358)
{
    // 1833 0041;	
    // (ᠳ) MONGOLIAN LETTER DA	[342D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1833, 0x0041 };
    uint32_t const ces[9] = { 0x342D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_359)
{
    // 1833 0062;	
    // (ᠳ) MONGOLIAN LETTER DA	[342D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1833, 0x0062 };
    uint32_t const ces[9] = { 0x342D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_360)
{
    // 1851 0021;	
    // (ᡑ) MONGOLIAN LETTER TODO DA	[342E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1851, 0x0021 };
    uint32_t const ces[9] = { 0x342E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_361)
{
    // 1851 003F;	
    // (ᡑ) MONGOLIAN LETTER TODO DA	[342E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1851, 0x003F };
    uint32_t const ces[9] = { 0x342E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_362)
{
    // 1851 0061;	
    // (ᡑ) MONGOLIAN LETTER TODO DA	[342E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1851, 0x0061 };
    uint32_t const ces[9] = { 0x342E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_363)
{
    // 1851 0041;	
    // (ᡑ) MONGOLIAN LETTER TODO DA	[342E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1851, 0x0041 };
    uint32_t const ces[9] = { 0x342E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_364)
{
    // 1851 0062;	
    // (ᡑ) MONGOLIAN LETTER TODO DA	[342E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1851, 0x0062 };
    uint32_t const ces[9] = { 0x342E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_365)
{
    // 1869 0021;	
    // (ᡩ) MONGOLIAN LETTER SIBE DA	[342F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1869, 0x0021 };
    uint32_t const ces[9] = { 0x342F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_366)
{
    // 1869 003F;	
    // (ᡩ) MONGOLIAN LETTER SIBE DA	[342F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1869, 0x003F };
    uint32_t const ces[9] = { 0x342F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_367)
{
    // 1869 0061;	
    // (ᡩ) MONGOLIAN LETTER SIBE DA	[342F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1869, 0x0061 };
    uint32_t const ces[9] = { 0x342F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_368)
{
    // 1869 0041;	
    // (ᡩ) MONGOLIAN LETTER SIBE DA	[342F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1869, 0x0041 };
    uint32_t const ces[9] = { 0x342F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_369)
{
    // 1869 0062;	
    // (ᡩ) MONGOLIAN LETTER SIBE DA	[342F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1869, 0x0062 };
    uint32_t const ces[9] = { 0x342F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_370)
{
    // 1834 0021;	
    // (ᠴ) MONGOLIAN LETTER CHA	[3430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1834, 0x0021 };
    uint32_t const ces[9] = { 0x3430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_371)
{
    // 1834 003F;	
    // (ᠴ) MONGOLIAN LETTER CHA	[3430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1834, 0x003F };
    uint32_t const ces[9] = { 0x3430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_372)
{
    // 1834 0061;	
    // (ᠴ) MONGOLIAN LETTER CHA	[3430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1834, 0x0061 };
    uint32_t const ces[9] = { 0x3430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_373)
{
    // 1834 0041;	
    // (ᠴ) MONGOLIAN LETTER CHA	[3430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1834, 0x0041 };
    uint32_t const ces[9] = { 0x3430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_374)
{
    // 1834 0062;	
    // (ᠴ) MONGOLIAN LETTER CHA	[3430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1834, 0x0062 };
    uint32_t const ces[9] = { 0x3430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_375)
{
    // 1852 0021;	
    // (ᡒ) MONGOLIAN LETTER TODO CHA	[3431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1852, 0x0021 };
    uint32_t const ces[9] = { 0x3431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_376)
{
    // 1852 003F;	
    // (ᡒ) MONGOLIAN LETTER TODO CHA	[3431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1852, 0x003F };
    uint32_t const ces[9] = { 0x3431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_377)
{
    // 1852 0061;	
    // (ᡒ) MONGOLIAN LETTER TODO CHA	[3431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1852, 0x0061 };
    uint32_t const ces[9] = { 0x3431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_378)
{
    // 1852 0041;	
    // (ᡒ) MONGOLIAN LETTER TODO CHA	[3431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1852, 0x0041 };
    uint32_t const ces[9] = { 0x3431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_379)
{
    // 1852 0062;	
    // (ᡒ) MONGOLIAN LETTER TODO CHA	[3431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1852, 0x0062 };
    uint32_t const ces[9] = { 0x3431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_380)
{
    // 1871 0021;	
    // (ᡱ) MONGOLIAN LETTER SIBE CHA	[3432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1871, 0x0021 };
    uint32_t const ces[9] = { 0x3432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_381)
{
    // 1871 003F;	
    // (ᡱ) MONGOLIAN LETTER SIBE CHA	[3432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1871, 0x003F };
    uint32_t const ces[9] = { 0x3432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_382)
{
    // 1871 0061;	
    // (ᡱ) MONGOLIAN LETTER SIBE CHA	[3432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1871, 0x0061 };
    uint32_t const ces[9] = { 0x3432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_383)
{
    // 1871 0041;	
    // (ᡱ) MONGOLIAN LETTER SIBE CHA	[3432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1871, 0x0041 };
    uint32_t const ces[9] = { 0x3432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_384)
{
    // 1871 0062;	
    // (ᡱ) MONGOLIAN LETTER SIBE CHA	[3432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1871, 0x0062 };
    uint32_t const ces[9] = { 0x3432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_385)
{
    // 185C 0021;	
    // (ᡜ) MONGOLIAN LETTER TODO DZA	[3433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185C, 0x0021 };
    uint32_t const ces[9] = { 0x3433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_386)
{
    // 185C 003F;	
    // (ᡜ) MONGOLIAN LETTER TODO DZA	[3433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185C, 0x003F };
    uint32_t const ces[9] = { 0x3433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_387)
{
    // 185C 0061;	
    // (ᡜ) MONGOLIAN LETTER TODO DZA	[3433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185C, 0x0061 };
    uint32_t const ces[9] = { 0x3433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_388)
{
    // 185C 0041;	
    // (ᡜ) MONGOLIAN LETTER TODO DZA	[3433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x185C, 0x0041 };
    uint32_t const ces[9] = { 0x3433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_389)
{
    // 185C 0062;	
    // (ᡜ) MONGOLIAN LETTER TODO DZA	[3433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x185C, 0x0062 };
    uint32_t const ces[9] = { 0x3433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_390)
{
    // 188B 0021;	
    // (ᢋ) MONGOLIAN LETTER ALI GALI CA	[3434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188B, 0x0021 };
    uint32_t const ces[9] = { 0x3434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_391)
{
    // 188B 003F;	
    // (ᢋ) MONGOLIAN LETTER ALI GALI CA	[3434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188B, 0x003F };
    uint32_t const ces[9] = { 0x3434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_392)
{
    // 188B 0061;	
    // (ᢋ) MONGOLIAN LETTER ALI GALI CA	[3434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188B, 0x0061 };
    uint32_t const ces[9] = { 0x3434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_393)
{
    // 188B 0041;	
    // (ᢋ) MONGOLIAN LETTER ALI GALI CA	[3434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x188B, 0x0041 };
    uint32_t const ces[9] = { 0x3434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_394)
{
    // 188B 0062;	
    // (ᢋ) MONGOLIAN LETTER ALI GALI CA	[3434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x188B, 0x0062 };
    uint32_t const ces[9] = { 0x3434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_395)
{
    // 1835 0021;	
    // (ᠵ) MONGOLIAN LETTER JA	[3435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1835, 0x0021 };
    uint32_t const ces[9] = { 0x3435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_396)
{
    // 1835 003F;	
    // (ᠵ) MONGOLIAN LETTER JA	[3435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1835, 0x003F };
    uint32_t const ces[9] = { 0x3435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_397)
{
    // 1835 0061;	
    // (ᠵ) MONGOLIAN LETTER JA	[3435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1835, 0x0061 };
    uint32_t const ces[9] = { 0x3435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_398)
{
    // 1835 0041;	
    // (ᠵ) MONGOLIAN LETTER JA	[3435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1835, 0x0041 };
    uint32_t const ces[9] = { 0x3435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_399)
{
    // 1835 0062;	
    // (ᠵ) MONGOLIAN LETTER JA	[3435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1835, 0x0062 };
    uint32_t const ces[9] = { 0x3435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_400)
{
    // 1853 0021;	
    // (ᡓ) MONGOLIAN LETTER TODO JA	[3436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1853, 0x0021 };
    uint32_t const ces[9] = { 0x3436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_401)
{
    // 1853 003F;	
    // (ᡓ) MONGOLIAN LETTER TODO JA	[3436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1853, 0x003F };
    uint32_t const ces[9] = { 0x3436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_402)
{
    // 1853 0061;	
    // (ᡓ) MONGOLIAN LETTER TODO JA	[3436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1853, 0x0061 };
    uint32_t const ces[9] = { 0x3436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_403)
{
    // 1853 0041;	
    // (ᡓ) MONGOLIAN LETTER TODO JA	[3436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1853, 0x0041 };
    uint32_t const ces[9] = { 0x3436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_404)
{
    // 1853 0062;	
    // (ᡓ) MONGOLIAN LETTER TODO JA	[3436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1853, 0x0062 };
    uint32_t const ces[9] = { 0x3436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_405)
{
    // 186A 0021;	
    // (ᡪ) MONGOLIAN LETTER SIBE JA	[3437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186A, 0x0021 };
    uint32_t const ces[9] = { 0x3437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_406)
{
    // 186A 003F;	
    // (ᡪ) MONGOLIAN LETTER SIBE JA	[3437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186A, 0x003F };
    uint32_t const ces[9] = { 0x3437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_407)
{
    // 186A 0061;	
    // (ᡪ) MONGOLIAN LETTER SIBE JA	[3437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186A, 0x0061 };
    uint32_t const ces[9] = { 0x3437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_408)
{
    // 186A 0041;	
    // (ᡪ) MONGOLIAN LETTER SIBE JA	[3437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x186A, 0x0041 };
    uint32_t const ces[9] = { 0x3437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_409)
{
    // 186A 0062;	
    // (ᡪ) MONGOLIAN LETTER SIBE JA	[3437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186A, 0x0062 };
    uint32_t const ces[9] = { 0x3437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_410)
{
    // 1877 0021;	
    // (ᡷ) MONGOLIAN LETTER MANCHU ZHA	[3438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1877, 0x0021 };
    uint32_t const ces[9] = { 0x3438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_411)
{
    // 1877 003F;	
    // (ᡷ) MONGOLIAN LETTER MANCHU ZHA	[3438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1877, 0x003F };
    uint32_t const ces[9] = { 0x3438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_412)
{
    // 1877 0061;	
    // (ᡷ) MONGOLIAN LETTER MANCHU ZHA	[3438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1877, 0x0061 };
    uint32_t const ces[9] = { 0x3438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_413)
{
    // 1877 0041;	
    // (ᡷ) MONGOLIAN LETTER MANCHU ZHA	[3438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1877, 0x0041 };
    uint32_t const ces[9] = { 0x3438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_414)
{
    // 1877 0062;	
    // (ᡷ) MONGOLIAN LETTER MANCHU ZHA	[3438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1877, 0x0062 };
    uint32_t const ces[9] = { 0x3438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_415)
{
    // 1836 0021;	
    // (ᠶ) MONGOLIAN LETTER YA	[3439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1836, 0x0021 };
    uint32_t const ces[9] = { 0x3439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_416)
{
    // 1836 003F;	
    // (ᠶ) MONGOLIAN LETTER YA	[3439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1836, 0x003F };
    uint32_t const ces[9] = { 0x3439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_417)
{
    // 1836 0061;	
    // (ᠶ) MONGOLIAN LETTER YA	[3439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1836, 0x0061 };
    uint32_t const ces[9] = { 0x3439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_418)
{
    // 1836 0041;	
    // (ᠶ) MONGOLIAN LETTER YA	[3439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1836, 0x0041 };
    uint32_t const ces[9] = { 0x3439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_419)
{
    // 1836 0062;	
    // (ᠶ) MONGOLIAN LETTER YA	[3439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1836, 0x0062 };
    uint32_t const ces[9] = { 0x3439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_420)
{
    // 1855 0021;	
    // (ᡕ) MONGOLIAN LETTER TODO YA	[343A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1855, 0x0021 };
    uint32_t const ces[9] = { 0x343A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_421)
{
    // 1855 003F;	
    // (ᡕ) MONGOLIAN LETTER TODO YA	[343A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1855, 0x003F };
    uint32_t const ces[9] = { 0x343A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_422)
{
    // 1855 0061;	
    // (ᡕ) MONGOLIAN LETTER TODO YA	[343A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1855, 0x0061 };
    uint32_t const ces[9] = { 0x343A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_423)
{
    // 1855 0041;	
    // (ᡕ) MONGOLIAN LETTER TODO YA	[343A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1855, 0x0041 };
    uint32_t const ces[9] = { 0x343A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_424)
{
    // 1855 0062;	
    // (ᡕ) MONGOLIAN LETTER TODO YA	[343A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1855, 0x0062 };
    uint32_t const ces[9] = { 0x343A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_425)
{
    // 1872 0021;	
    // (ᡲ) MONGOLIAN LETTER SIBE ZHA	[343B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1872, 0x0021 };
    uint32_t const ces[9] = { 0x343B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_426)
{
    // 1872 003F;	
    // (ᡲ) MONGOLIAN LETTER SIBE ZHA	[343B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1872, 0x003F };
    uint32_t const ces[9] = { 0x343B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_427)
{
    // 1872 0061;	
    // (ᡲ) MONGOLIAN LETTER SIBE ZHA	[343B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1872, 0x0061 };
    uint32_t const ces[9] = { 0x343B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_428)
{
    // 1872 0041;	
    // (ᡲ) MONGOLIAN LETTER SIBE ZHA	[343B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1872, 0x0041 };
    uint32_t const ces[9] = { 0x343B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_429)
{
    // 1872 0062;	
    // (ᡲ) MONGOLIAN LETTER SIBE ZHA	[343B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1872, 0x0062 };
    uint32_t const ces[9] = { 0x343B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_430)
{
    // 1837 0021;	
    // (ᠷ) MONGOLIAN LETTER RA	[343C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1837, 0x0021 };
    uint32_t const ces[9] = { 0x343C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_431)
{
    // 1837 003F;	
    // (ᠷ) MONGOLIAN LETTER RA	[343C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1837, 0x003F };
    uint32_t const ces[9] = { 0x343C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_432)
{
    // 1837 0061;	
    // (ᠷ) MONGOLIAN LETTER RA	[343C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1837, 0x0061 };
    uint32_t const ces[9] = { 0x343C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_433)
{
    // 1837 0041;	
    // (ᠷ) MONGOLIAN LETTER RA	[343C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1837, 0x0041 };
    uint32_t const ces[9] = { 0x343C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_434)
{
    // 1837 0062;	
    // (ᠷ) MONGOLIAN LETTER RA	[343C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1837, 0x0062 };
    uint32_t const ces[9] = { 0x343C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_435)
{
    // 1875 0021;	
    // (ᡵ) MONGOLIAN LETTER MANCHU RA	[343D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1875, 0x0021 };
    uint32_t const ces[9] = { 0x343D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_436)
{
    // 1875 003F;	
    // (ᡵ) MONGOLIAN LETTER MANCHU RA	[343D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1875, 0x003F };
    uint32_t const ces[9] = { 0x343D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_437)
{
    // 1875 0061;	
    // (ᡵ) MONGOLIAN LETTER MANCHU RA	[343D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1875, 0x0061 };
    uint32_t const ces[9] = { 0x343D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_438)
{
    // 1875 0041;	
    // (ᡵ) MONGOLIAN LETTER MANCHU RA	[343D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1875, 0x0041 };
    uint32_t const ces[9] = { 0x343D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_439)
{
    // 1875 0062;	
    // (ᡵ) MONGOLIAN LETTER MANCHU RA	[343D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1875, 0x0062 };
    uint32_t const ces[9] = { 0x343D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_440)
{
    // 1838 0021;	
    // (ᠸ) MONGOLIAN LETTER WA	[343E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1838, 0x0021 };
    uint32_t const ces[9] = { 0x343E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_441)
{
    // 1838 003F;	
    // (ᠸ) MONGOLIAN LETTER WA	[343E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1838, 0x003F };
    uint32_t const ces[9] = { 0x343E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_442)
{
    // 1838 0061;	
    // (ᠸ) MONGOLIAN LETTER WA	[343E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1838, 0x0061 };
    uint32_t const ces[9] = { 0x343E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_443)
{
    // 1838 0041;	
    // (ᠸ) MONGOLIAN LETTER WA	[343E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1838, 0x0041 };
    uint32_t const ces[9] = { 0x343E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_444)
{
    // 1838 0062;	
    // (ᠸ) MONGOLIAN LETTER WA	[343E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1838, 0x0062 };
    uint32_t const ces[9] = { 0x343E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_445)
{
    // 1856 0021;	
    // (ᡖ) MONGOLIAN LETTER TODO WA	[343F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1856, 0x0021 };
    uint32_t const ces[9] = { 0x343F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_446)
{
    // 1856 003F;	
    // (ᡖ) MONGOLIAN LETTER TODO WA	[343F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1856, 0x003F };
    uint32_t const ces[9] = { 0x343F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_447)
{
    // 1856 0061;	
    // (ᡖ) MONGOLIAN LETTER TODO WA	[343F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1856, 0x0061 };
    uint32_t const ces[9] = { 0x343F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_448)
{
    // 1856 0041;	
    // (ᡖ) MONGOLIAN LETTER TODO WA	[343F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1856, 0x0041 };
    uint32_t const ces[9] = { 0x343F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_449)
{
    // 1856 0062;	
    // (ᡖ) MONGOLIAN LETTER TODO WA	[343F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1856, 0x0062 };
    uint32_t const ces[9] = { 0x343F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_450)
{
    // 1839 0021;	
    // (ᠹ) MONGOLIAN LETTER FA	[3440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1839, 0x0021 };
    uint32_t const ces[9] = { 0x3440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_451)
{
    // 1839 003F;	
    // (ᠹ) MONGOLIAN LETTER FA	[3440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1839, 0x003F };
    uint32_t const ces[9] = { 0x3440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_452)
{
    // 1839 0061;	
    // (ᠹ) MONGOLIAN LETTER FA	[3440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1839, 0x0061 };
    uint32_t const ces[9] = { 0x3440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_453)
{
    // 1839 0041;	
    // (ᠹ) MONGOLIAN LETTER FA	[3440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1839, 0x0041 };
    uint32_t const ces[9] = { 0x3440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_454)
{
    // 1839 0062;	
    // (ᠹ) MONGOLIAN LETTER FA	[3440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1839, 0x0062 };
    uint32_t const ces[9] = { 0x3440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_455)
{
    // 186B 0021;	
    // (ᡫ) MONGOLIAN LETTER SIBE FA	[3441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186B, 0x0021 };
    uint32_t const ces[9] = { 0x3441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_456)
{
    // 186B 003F;	
    // (ᡫ) MONGOLIAN LETTER SIBE FA	[3441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186B, 0x003F };
    uint32_t const ces[9] = { 0x3441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_457)
{
    // 186B 0061;	
    // (ᡫ) MONGOLIAN LETTER SIBE FA	[3441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186B, 0x0061 };
    uint32_t const ces[9] = { 0x3441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_458)
{
    // 186B 0041;	
    // (ᡫ) MONGOLIAN LETTER SIBE FA	[3441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x186B, 0x0041 };
    uint32_t const ces[9] = { 0x3441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_459)
{
    // 186B 0062;	
    // (ᡫ) MONGOLIAN LETTER SIBE FA	[3441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x186B, 0x0062 };
    uint32_t const ces[9] = { 0x3441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_460)
{
    // 1876 0021;	
    // (ᡶ) MONGOLIAN LETTER MANCHU FA	[3442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1876, 0x0021 };
    uint32_t const ces[9] = { 0x3442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_461)
{
    // 1876 003F;	
    // (ᡶ) MONGOLIAN LETTER MANCHU FA	[3442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1876, 0x003F };
    uint32_t const ces[9] = { 0x3442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_462)
{
    // 1876 0061;	
    // (ᡶ) MONGOLIAN LETTER MANCHU FA	[3442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1876, 0x0061 };
    uint32_t const ces[9] = { 0x3442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_463)
{
    // 1876 0041;	
    // (ᡶ) MONGOLIAN LETTER MANCHU FA	[3442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1876, 0x0041 };
    uint32_t const ces[9] = { 0x3442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_464)
{
    // 1876 0062;	
    // (ᡶ) MONGOLIAN LETTER MANCHU FA	[3442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1876, 0x0062 };
    uint32_t const ces[9] = { 0x3442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_465)
{
    // 183A 0021;	
    // (ᠺ) MONGOLIAN LETTER KA	[3443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183A, 0x0021 };
    uint32_t const ces[9] = { 0x3443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_466)
{
    // 183A 003F;	
    // (ᠺ) MONGOLIAN LETTER KA	[3443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183A, 0x003F };
    uint32_t const ces[9] = { 0x3443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_467)
{
    // 183A 0061;	
    // (ᠺ) MONGOLIAN LETTER KA	[3443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183A, 0x0061 };
    uint32_t const ces[9] = { 0x3443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_468)
{
    // 183A 0041;	
    // (ᠺ) MONGOLIAN LETTER KA	[3443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x183A, 0x0041 };
    uint32_t const ces[9] = { 0x3443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_469)
{
    // 183A 0062;	
    // (ᠺ) MONGOLIAN LETTER KA	[3443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183A, 0x0062 };
    uint32_t const ces[9] = { 0x3443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_470)
{
    // 1857 0021;	
    // (ᡗ) MONGOLIAN LETTER TODO KA	[3444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1857, 0x0021 };
    uint32_t const ces[9] = { 0x3444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_471)
{
    // 1857 003F;	
    // (ᡗ) MONGOLIAN LETTER TODO KA	[3444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1857, 0x003F };
    uint32_t const ces[9] = { 0x3444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_472)
{
    // 1857 0061;	
    // (ᡗ) MONGOLIAN LETTER TODO KA	[3444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1857, 0x0061 };
    uint32_t const ces[9] = { 0x3444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_473)
{
    // 1857 0041;	
    // (ᡗ) MONGOLIAN LETTER TODO KA	[3444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1857, 0x0041 };
    uint32_t const ces[9] = { 0x3444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_474)
{
    // 1857 0062;	
    // (ᡗ) MONGOLIAN LETTER TODO KA	[3444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1857, 0x0062 };
    uint32_t const ces[9] = { 0x3444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_475)
{
    // 1863 0021;	
    // (ᡣ) MONGOLIAN LETTER SIBE KA	[3445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1863, 0x0021 };
    uint32_t const ces[9] = { 0x3445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_476)
{
    // 1863 003F;	
    // (ᡣ) MONGOLIAN LETTER SIBE KA	[3445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1863, 0x003F };
    uint32_t const ces[9] = { 0x3445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_477)
{
    // 1863 0061;	
    // (ᡣ) MONGOLIAN LETTER SIBE KA	[3445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1863, 0x0061 };
    uint32_t const ces[9] = { 0x3445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_478)
{
    // 1863 0041;	
    // (ᡣ) MONGOLIAN LETTER SIBE KA	[3445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1863, 0x0041 };
    uint32_t const ces[9] = { 0x3445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_479)
{
    // 1863 0062;	
    // (ᡣ) MONGOLIAN LETTER SIBE KA	[3445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1863, 0x0062 };
    uint32_t const ces[9] = { 0x3445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_480)
{
    // 1874 0021;	
    // (ᡴ) MONGOLIAN LETTER MANCHU KA	[3446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1874, 0x0021 };
    uint32_t const ces[9] = { 0x3446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_481)
{
    // 1874 003F;	
    // (ᡴ) MONGOLIAN LETTER MANCHU KA	[3446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1874, 0x003F };
    uint32_t const ces[9] = { 0x3446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_482)
{
    // 1874 0061;	
    // (ᡴ) MONGOLIAN LETTER MANCHU KA	[3446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1874, 0x0061 };
    uint32_t const ces[9] = { 0x3446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_483)
{
    // 1874 0041;	
    // (ᡴ) MONGOLIAN LETTER MANCHU KA	[3446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1874, 0x0041 };
    uint32_t const ces[9] = { 0x3446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_484)
{
    // 1874 0062;	
    // (ᡴ) MONGOLIAN LETTER MANCHU KA	[3446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1874, 0x0062 };
    uint32_t const ces[9] = { 0x3446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_485)
{
    // 1889 0021;	
    // (ᢉ) MONGOLIAN LETTER ALI GALI KA	[3447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1889, 0x0021 };
    uint32_t const ces[9] = { 0x3447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_486)
{
    // 1889 003F;	
    // (ᢉ) MONGOLIAN LETTER ALI GALI KA	[3447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1889, 0x003F };
    uint32_t const ces[9] = { 0x3447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_487)
{
    // 1889 0061;	
    // (ᢉ) MONGOLIAN LETTER ALI GALI KA	[3447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1889, 0x0061 };
    uint32_t const ces[9] = { 0x3447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_488)
{
    // 1889 0041;	
    // (ᢉ) MONGOLIAN LETTER ALI GALI KA	[3447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1889, 0x0041 };
    uint32_t const ces[9] = { 0x3447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_489)
{
    // 1889 0062;	
    // (ᢉ) MONGOLIAN LETTER ALI GALI KA	[3447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1889, 0x0062 };
    uint32_t const ces[9] = { 0x3447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_490)
{
    // 183B 0021;	
    // (ᠻ) MONGOLIAN LETTER KHA	[3448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183B, 0x0021 };
    uint32_t const ces[9] = { 0x3448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_491)
{
    // 183B 003F;	
    // (ᠻ) MONGOLIAN LETTER KHA	[3448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183B, 0x003F };
    uint32_t const ces[9] = { 0x3448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_492)
{
    // 183B 0061;	
    // (ᠻ) MONGOLIAN LETTER KHA	[3448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183B, 0x0061 };
    uint32_t const ces[9] = { 0x3448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_493)
{
    // 183B 0041;	
    // (ᠻ) MONGOLIAN LETTER KHA	[3448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x183B, 0x0041 };
    uint32_t const ces[9] = { 0x3448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_494)
{
    // 183B 0062;	
    // (ᠻ) MONGOLIAN LETTER KHA	[3448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183B, 0x0062 };
    uint32_t const ces[9] = { 0x3448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_495)
{
    // 183C 0021;	
    // (ᠼ) MONGOLIAN LETTER TSA	[3449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183C, 0x0021 };
    uint32_t const ces[9] = { 0x3449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_496)
{
    // 183C 003F;	
    // (ᠼ) MONGOLIAN LETTER TSA	[3449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183C, 0x003F };
    uint32_t const ces[9] = { 0x3449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_497)
{
    // 183C 0061;	
    // (ᠼ) MONGOLIAN LETTER TSA	[3449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183C, 0x0061 };
    uint32_t const ces[9] = { 0x3449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_498)
{
    // 183C 0041;	
    // (ᠼ) MONGOLIAN LETTER TSA	[3449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x183C, 0x0041 };
    uint32_t const ces[9] = { 0x3449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_214_499)
{
    // 183C 0062;	
    // (ᠼ) MONGOLIAN LETTER TSA	[3449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x183C, 0x0062 };
    uint32_t const ces[9] = { 0x3449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

