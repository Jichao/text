// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_392_000)
{
    // 4D3A 003F;	
    // (䴺) CJK UNIFIED IDEOGRAPH-4D3A	[FB80 CD3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_001)
{
    // 4D3A 0061;	
    // (䴺) CJK UNIFIED IDEOGRAPH-4D3A	[FB80 CD3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_002)
{
    // 4D3A 0041;	
    // (䴺) CJK UNIFIED IDEOGRAPH-4D3A	[FB80 CD3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_003)
{
    // 4D3A 0062;	
    // (䴺) CJK UNIFIED IDEOGRAPH-4D3A	[FB80 CD3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_004)
{
    // 4D3B 0021;	
    // (䴻) CJK UNIFIED IDEOGRAPH-4D3B	[FB80 CD3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_005)
{
    // 4D3B 003F;	
    // (䴻) CJK UNIFIED IDEOGRAPH-4D3B	[FB80 CD3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_006)
{
    // 4D3B 0061;	
    // (䴻) CJK UNIFIED IDEOGRAPH-4D3B	[FB80 CD3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_007)
{
    // 4D3B 0041;	
    // (䴻) CJK UNIFIED IDEOGRAPH-4D3B	[FB80 CD3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_008)
{
    // 4D3B 0062;	
    // (䴻) CJK UNIFIED IDEOGRAPH-4D3B	[FB80 CD3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_009)
{
    // 4D3C 0021;	
    // (䴼) CJK UNIFIED IDEOGRAPH-4D3C	[FB80 CD3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_010)
{
    // 4D3C 003F;	
    // (䴼) CJK UNIFIED IDEOGRAPH-4D3C	[FB80 CD3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_011)
{
    // 4D3C 0061;	
    // (䴼) CJK UNIFIED IDEOGRAPH-4D3C	[FB80 CD3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_012)
{
    // 4D3C 0041;	
    // (䴼) CJK UNIFIED IDEOGRAPH-4D3C	[FB80 CD3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_013)
{
    // 4D3C 0062;	
    // (䴼) CJK UNIFIED IDEOGRAPH-4D3C	[FB80 CD3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_014)
{
    // 4D3D 0021;	
    // (䴽) CJK UNIFIED IDEOGRAPH-4D3D	[FB80 CD3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_015)
{
    // 4D3D 003F;	
    // (䴽) CJK UNIFIED IDEOGRAPH-4D3D	[FB80 CD3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_016)
{
    // 4D3D 0061;	
    // (䴽) CJK UNIFIED IDEOGRAPH-4D3D	[FB80 CD3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_017)
{
    // 4D3D 0041;	
    // (䴽) CJK UNIFIED IDEOGRAPH-4D3D	[FB80 CD3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_018)
{
    // 4D3D 0062;	
    // (䴽) CJK UNIFIED IDEOGRAPH-4D3D	[FB80 CD3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_019)
{
    // 4D3E 0021;	
    // (䴾) CJK UNIFIED IDEOGRAPH-4D3E	[FB80 CD3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_020)
{
    // 4D3E 003F;	
    // (䴾) CJK UNIFIED IDEOGRAPH-4D3E	[FB80 CD3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_021)
{
    // 4D3E 0061;	
    // (䴾) CJK UNIFIED IDEOGRAPH-4D3E	[FB80 CD3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_022)
{
    // 4D3E 0041;	
    // (䴾) CJK UNIFIED IDEOGRAPH-4D3E	[FB80 CD3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_023)
{
    // 4D3E 0062;	
    // (䴾) CJK UNIFIED IDEOGRAPH-4D3E	[FB80 CD3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_024)
{
    // 4D3F 0021;	
    // (䴿) CJK UNIFIED IDEOGRAPH-4D3F	[FB80 CD3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_025)
{
    // 4D3F 003F;	
    // (䴿) CJK UNIFIED IDEOGRAPH-4D3F	[FB80 CD3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_026)
{
    // 4D3F 0061;	
    // (䴿) CJK UNIFIED IDEOGRAPH-4D3F	[FB80 CD3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_027)
{
    // 4D3F 0041;	
    // (䴿) CJK UNIFIED IDEOGRAPH-4D3F	[FB80 CD3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_028)
{
    // 4D3F 0062;	
    // (䴿) CJK UNIFIED IDEOGRAPH-4D3F	[FB80 CD3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_029)
{
    // 4D40 0021;	
    // (䵀) CJK UNIFIED IDEOGRAPH-4D40	[FB80 CD40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_030)
{
    // 4D40 003F;	
    // (䵀) CJK UNIFIED IDEOGRAPH-4D40	[FB80 CD40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_031)
{
    // 4D40 0061;	
    // (䵀) CJK UNIFIED IDEOGRAPH-4D40	[FB80 CD40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_032)
{
    // 4D40 0041;	
    // (䵀) CJK UNIFIED IDEOGRAPH-4D40	[FB80 CD40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_033)
{
    // 4D40 0062;	
    // (䵀) CJK UNIFIED IDEOGRAPH-4D40	[FB80 CD40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_034)
{
    // 4D41 0021;	
    // (䵁) CJK UNIFIED IDEOGRAPH-4D41	[FB80 CD41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_035)
{
    // 4D41 003F;	
    // (䵁) CJK UNIFIED IDEOGRAPH-4D41	[FB80 CD41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_036)
{
    // 4D41 0061;	
    // (䵁) CJK UNIFIED IDEOGRAPH-4D41	[FB80 CD41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_037)
{
    // 4D41 0041;	
    // (䵁) CJK UNIFIED IDEOGRAPH-4D41	[FB80 CD41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_038)
{
    // 4D41 0062;	
    // (䵁) CJK UNIFIED IDEOGRAPH-4D41	[FB80 CD41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_039)
{
    // 4D42 0021;	
    // (䵂) CJK UNIFIED IDEOGRAPH-4D42	[FB80 CD42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_040)
{
    // 4D42 003F;	
    // (䵂) CJK UNIFIED IDEOGRAPH-4D42	[FB80 CD42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_041)
{
    // 4D42 0061;	
    // (䵂) CJK UNIFIED IDEOGRAPH-4D42	[FB80 CD42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_042)
{
    // 4D42 0041;	
    // (䵂) CJK UNIFIED IDEOGRAPH-4D42	[FB80 CD42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_043)
{
    // 4D42 0062;	
    // (䵂) CJK UNIFIED IDEOGRAPH-4D42	[FB80 CD42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_044)
{
    // 4D43 0021;	
    // (䵃) CJK UNIFIED IDEOGRAPH-4D43	[FB80 CD43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_045)
{
    // 4D43 003F;	
    // (䵃) CJK UNIFIED IDEOGRAPH-4D43	[FB80 CD43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_046)
{
    // 4D43 0061;	
    // (䵃) CJK UNIFIED IDEOGRAPH-4D43	[FB80 CD43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_047)
{
    // 4D43 0041;	
    // (䵃) CJK UNIFIED IDEOGRAPH-4D43	[FB80 CD43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_048)
{
    // 4D43 0062;	
    // (䵃) CJK UNIFIED IDEOGRAPH-4D43	[FB80 CD43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_049)
{
    // 4D44 0021;	
    // (䵄) CJK UNIFIED IDEOGRAPH-4D44	[FB80 CD44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_050)
{
    // 4D44 003F;	
    // (䵄) CJK UNIFIED IDEOGRAPH-4D44	[FB80 CD44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_051)
{
    // 4D44 0061;	
    // (䵄) CJK UNIFIED IDEOGRAPH-4D44	[FB80 CD44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_052)
{
    // 4D44 0041;	
    // (䵄) CJK UNIFIED IDEOGRAPH-4D44	[FB80 CD44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_053)
{
    // 4D44 0062;	
    // (䵄) CJK UNIFIED IDEOGRAPH-4D44	[FB80 CD44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_054)
{
    // 4D45 0021;	
    // (䵅) CJK UNIFIED IDEOGRAPH-4D45	[FB80 CD45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_055)
{
    // 4D45 003F;	
    // (䵅) CJK UNIFIED IDEOGRAPH-4D45	[FB80 CD45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_056)
{
    // 4D45 0061;	
    // (䵅) CJK UNIFIED IDEOGRAPH-4D45	[FB80 CD45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_057)
{
    // 4D45 0041;	
    // (䵅) CJK UNIFIED IDEOGRAPH-4D45	[FB80 CD45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_058)
{
    // 4D45 0062;	
    // (䵅) CJK UNIFIED IDEOGRAPH-4D45	[FB80 CD45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_059)
{
    // 4D46 0021;	
    // (䵆) CJK UNIFIED IDEOGRAPH-4D46	[FB80 CD46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_060)
{
    // 4D46 003F;	
    // (䵆) CJK UNIFIED IDEOGRAPH-4D46	[FB80 CD46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_061)
{
    // 4D46 0061;	
    // (䵆) CJK UNIFIED IDEOGRAPH-4D46	[FB80 CD46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_062)
{
    // 4D46 0041;	
    // (䵆) CJK UNIFIED IDEOGRAPH-4D46	[FB80 CD46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_063)
{
    // 4D46 0062;	
    // (䵆) CJK UNIFIED IDEOGRAPH-4D46	[FB80 CD46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_064)
{
    // 4D47 0021;	
    // (䵇) CJK UNIFIED IDEOGRAPH-4D47	[FB80 CD47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_065)
{
    // 4D47 003F;	
    // (䵇) CJK UNIFIED IDEOGRAPH-4D47	[FB80 CD47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_066)
{
    // 4D47 0061;	
    // (䵇) CJK UNIFIED IDEOGRAPH-4D47	[FB80 CD47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_067)
{
    // 4D47 0041;	
    // (䵇) CJK UNIFIED IDEOGRAPH-4D47	[FB80 CD47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_068)
{
    // 4D47 0062;	
    // (䵇) CJK UNIFIED IDEOGRAPH-4D47	[FB80 CD47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_069)
{
    // 4D48 0021;	
    // (䵈) CJK UNIFIED IDEOGRAPH-4D48	[FB80 CD48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_070)
{
    // 4D48 003F;	
    // (䵈) CJK UNIFIED IDEOGRAPH-4D48	[FB80 CD48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_071)
{
    // 4D48 0061;	
    // (䵈) CJK UNIFIED IDEOGRAPH-4D48	[FB80 CD48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_072)
{
    // 4D48 0041;	
    // (䵈) CJK UNIFIED IDEOGRAPH-4D48	[FB80 CD48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_073)
{
    // 4D48 0062;	
    // (䵈) CJK UNIFIED IDEOGRAPH-4D48	[FB80 CD48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_074)
{
    // 4D49 0021;	
    // (䵉) CJK UNIFIED IDEOGRAPH-4D49	[FB80 CD49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_075)
{
    // 4D49 003F;	
    // (䵉) CJK UNIFIED IDEOGRAPH-4D49	[FB80 CD49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_076)
{
    // 4D49 0061;	
    // (䵉) CJK UNIFIED IDEOGRAPH-4D49	[FB80 CD49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_077)
{
    // 4D49 0041;	
    // (䵉) CJK UNIFIED IDEOGRAPH-4D49	[FB80 CD49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_078)
{
    // 4D49 0062;	
    // (䵉) CJK UNIFIED IDEOGRAPH-4D49	[FB80 CD49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_079)
{
    // 4D4A 0021;	
    // (䵊) CJK UNIFIED IDEOGRAPH-4D4A	[FB80 CD4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_080)
{
    // 4D4A 003F;	
    // (䵊) CJK UNIFIED IDEOGRAPH-4D4A	[FB80 CD4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_081)
{
    // 4D4A 0061;	
    // (䵊) CJK UNIFIED IDEOGRAPH-4D4A	[FB80 CD4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_082)
{
    // 4D4A 0041;	
    // (䵊) CJK UNIFIED IDEOGRAPH-4D4A	[FB80 CD4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_083)
{
    // 4D4A 0062;	
    // (䵊) CJK UNIFIED IDEOGRAPH-4D4A	[FB80 CD4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_084)
{
    // 4D4B 0021;	
    // (䵋) CJK UNIFIED IDEOGRAPH-4D4B	[FB80 CD4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_085)
{
    // 4D4B 003F;	
    // (䵋) CJK UNIFIED IDEOGRAPH-4D4B	[FB80 CD4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_086)
{
    // 4D4B 0061;	
    // (䵋) CJK UNIFIED IDEOGRAPH-4D4B	[FB80 CD4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_087)
{
    // 4D4B 0041;	
    // (䵋) CJK UNIFIED IDEOGRAPH-4D4B	[FB80 CD4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_088)
{
    // 4D4B 0062;	
    // (䵋) CJK UNIFIED IDEOGRAPH-4D4B	[FB80 CD4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_089)
{
    // 4D4C 0021;	
    // (䵌) CJK UNIFIED IDEOGRAPH-4D4C	[FB80 CD4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_090)
{
    // 4D4C 003F;	
    // (䵌) CJK UNIFIED IDEOGRAPH-4D4C	[FB80 CD4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_091)
{
    // 4D4C 0061;	
    // (䵌) CJK UNIFIED IDEOGRAPH-4D4C	[FB80 CD4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_092)
{
    // 4D4C 0041;	
    // (䵌) CJK UNIFIED IDEOGRAPH-4D4C	[FB80 CD4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_093)
{
    // 4D4C 0062;	
    // (䵌) CJK UNIFIED IDEOGRAPH-4D4C	[FB80 CD4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_094)
{
    // 4D4D 0021;	
    // (䵍) CJK UNIFIED IDEOGRAPH-4D4D	[FB80 CD4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_095)
{
    // 4D4D 003F;	
    // (䵍) CJK UNIFIED IDEOGRAPH-4D4D	[FB80 CD4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_096)
{
    // 4D4D 0061;	
    // (䵍) CJK UNIFIED IDEOGRAPH-4D4D	[FB80 CD4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_097)
{
    // 4D4D 0041;	
    // (䵍) CJK UNIFIED IDEOGRAPH-4D4D	[FB80 CD4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_098)
{
    // 4D4D 0062;	
    // (䵍) CJK UNIFIED IDEOGRAPH-4D4D	[FB80 CD4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_099)
{
    // 4D4E 0021;	
    // (䵎) CJK UNIFIED IDEOGRAPH-4D4E	[FB80 CD4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_100)
{
    // 4D4E 003F;	
    // (䵎) CJK UNIFIED IDEOGRAPH-4D4E	[FB80 CD4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_101)
{
    // 4D4E 0061;	
    // (䵎) CJK UNIFIED IDEOGRAPH-4D4E	[FB80 CD4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_102)
{
    // 4D4E 0041;	
    // (䵎) CJK UNIFIED IDEOGRAPH-4D4E	[FB80 CD4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_103)
{
    // 4D4E 0062;	
    // (䵎) CJK UNIFIED IDEOGRAPH-4D4E	[FB80 CD4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_104)
{
    // 4D4F 0021;	
    // (䵏) CJK UNIFIED IDEOGRAPH-4D4F	[FB80 CD4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_105)
{
    // 4D4F 003F;	
    // (䵏) CJK UNIFIED IDEOGRAPH-4D4F	[FB80 CD4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_106)
{
    // 4D4F 0061;	
    // (䵏) CJK UNIFIED IDEOGRAPH-4D4F	[FB80 CD4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_107)
{
    // 4D4F 0041;	
    // (䵏) CJK UNIFIED IDEOGRAPH-4D4F	[FB80 CD4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_108)
{
    // 4D4F 0062;	
    // (䵏) CJK UNIFIED IDEOGRAPH-4D4F	[FB80 CD4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_109)
{
    // 4D50 0021;	
    // (䵐) CJK UNIFIED IDEOGRAPH-4D50	[FB80 CD50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_110)
{
    // 4D50 003F;	
    // (䵐) CJK UNIFIED IDEOGRAPH-4D50	[FB80 CD50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_111)
{
    // 4D50 0061;	
    // (䵐) CJK UNIFIED IDEOGRAPH-4D50	[FB80 CD50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_112)
{
    // 4D50 0041;	
    // (䵐) CJK UNIFIED IDEOGRAPH-4D50	[FB80 CD50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_113)
{
    // 4D50 0062;	
    // (䵐) CJK UNIFIED IDEOGRAPH-4D50	[FB80 CD50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_114)
{
    // 4D51 0021;	
    // (䵑) CJK UNIFIED IDEOGRAPH-4D51	[FB80 CD51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_115)
{
    // 4D51 003F;	
    // (䵑) CJK UNIFIED IDEOGRAPH-4D51	[FB80 CD51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_116)
{
    // 4D51 0061;	
    // (䵑) CJK UNIFIED IDEOGRAPH-4D51	[FB80 CD51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_117)
{
    // 4D51 0041;	
    // (䵑) CJK UNIFIED IDEOGRAPH-4D51	[FB80 CD51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_118)
{
    // 4D51 0062;	
    // (䵑) CJK UNIFIED IDEOGRAPH-4D51	[FB80 CD51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_119)
{
    // 4D52 0021;	
    // (䵒) CJK UNIFIED IDEOGRAPH-4D52	[FB80 CD52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_120)
{
    // 4D52 003F;	
    // (䵒) CJK UNIFIED IDEOGRAPH-4D52	[FB80 CD52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_121)
{
    // 4D52 0061;	
    // (䵒) CJK UNIFIED IDEOGRAPH-4D52	[FB80 CD52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_122)
{
    // 4D52 0041;	
    // (䵒) CJK UNIFIED IDEOGRAPH-4D52	[FB80 CD52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_123)
{
    // 4D52 0062;	
    // (䵒) CJK UNIFIED IDEOGRAPH-4D52	[FB80 CD52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_124)
{
    // 4D53 0021;	
    // (䵓) CJK UNIFIED IDEOGRAPH-4D53	[FB80 CD53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_125)
{
    // 4D53 003F;	
    // (䵓) CJK UNIFIED IDEOGRAPH-4D53	[FB80 CD53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_126)
{
    // 4D53 0061;	
    // (䵓) CJK UNIFIED IDEOGRAPH-4D53	[FB80 CD53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_127)
{
    // 4D53 0041;	
    // (䵓) CJK UNIFIED IDEOGRAPH-4D53	[FB80 CD53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_128)
{
    // 4D53 0062;	
    // (䵓) CJK UNIFIED IDEOGRAPH-4D53	[FB80 CD53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_129)
{
    // 4D54 0021;	
    // (䵔) CJK UNIFIED IDEOGRAPH-4D54	[FB80 CD54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_130)
{
    // 4D54 003F;	
    // (䵔) CJK UNIFIED IDEOGRAPH-4D54	[FB80 CD54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_131)
{
    // 4D54 0061;	
    // (䵔) CJK UNIFIED IDEOGRAPH-4D54	[FB80 CD54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_132)
{
    // 4D54 0041;	
    // (䵔) CJK UNIFIED IDEOGRAPH-4D54	[FB80 CD54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_133)
{
    // 4D54 0062;	
    // (䵔) CJK UNIFIED IDEOGRAPH-4D54	[FB80 CD54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_134)
{
    // 4D55 0021;	
    // (䵕) CJK UNIFIED IDEOGRAPH-4D55	[FB80 CD55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_135)
{
    // 4D55 003F;	
    // (䵕) CJK UNIFIED IDEOGRAPH-4D55	[FB80 CD55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_136)
{
    // 4D55 0061;	
    // (䵕) CJK UNIFIED IDEOGRAPH-4D55	[FB80 CD55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_137)
{
    // 4D55 0041;	
    // (䵕) CJK UNIFIED IDEOGRAPH-4D55	[FB80 CD55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_138)
{
    // 4D55 0062;	
    // (䵕) CJK UNIFIED IDEOGRAPH-4D55	[FB80 CD55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_139)
{
    // 4D56 0021;	
    // (䵖) CJK UNIFIED IDEOGRAPH-4D56	[FB80 CD56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_140)
{
    // 2FA16 0021;	
    // (䵖) CJK COMPATIBILITY IDEOGRAPH-2FA16	[FB80 CD56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_141)
{
    // 4D56 003F;	
    // (䵖) CJK UNIFIED IDEOGRAPH-4D56	[FB80 CD56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_142)
{
    // 2FA16 003F;	
    // (䵖) CJK COMPATIBILITY IDEOGRAPH-2FA16	[FB80 CD56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_143)
{
    // 4D56 0061;	
    // (䵖) CJK UNIFIED IDEOGRAPH-4D56	[FB80 CD56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_144)
{
    // 2FA16 0061;	
    // (䵖) CJK COMPATIBILITY IDEOGRAPH-2FA16	[FB80 CD56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_145)
{
    // 4D56 0041;	
    // (䵖) CJK UNIFIED IDEOGRAPH-4D56	[FB80 CD56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_146)
{
    // 2FA16 0041;	
    // (䵖) CJK COMPATIBILITY IDEOGRAPH-2FA16	[FB80 CD56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_147)
{
    // 4D56 0062;	
    // (䵖) CJK UNIFIED IDEOGRAPH-4D56	[FB80 CD56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_148)
{
    // 2FA16 0062;	
    // (䵖) CJK COMPATIBILITY IDEOGRAPH-2FA16	[FB80 CD56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_149)
{
    // 4D57 0021;	
    // (䵗) CJK UNIFIED IDEOGRAPH-4D57	[FB80 CD57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_150)
{
    // 4D57 003F;	
    // (䵗) CJK UNIFIED IDEOGRAPH-4D57	[FB80 CD57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_151)
{
    // 4D57 0061;	
    // (䵗) CJK UNIFIED IDEOGRAPH-4D57	[FB80 CD57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_152)
{
    // 4D57 0041;	
    // (䵗) CJK UNIFIED IDEOGRAPH-4D57	[FB80 CD57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_153)
{
    // 4D57 0062;	
    // (䵗) CJK UNIFIED IDEOGRAPH-4D57	[FB80 CD57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_154)
{
    // 4D58 0021;	
    // (䵘) CJK UNIFIED IDEOGRAPH-4D58	[FB80 CD58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_155)
{
    // 4D58 003F;	
    // (䵘) CJK UNIFIED IDEOGRAPH-4D58	[FB80 CD58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_156)
{
    // 4D58 0061;	
    // (䵘) CJK UNIFIED IDEOGRAPH-4D58	[FB80 CD58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_157)
{
    // 4D58 0041;	
    // (䵘) CJK UNIFIED IDEOGRAPH-4D58	[FB80 CD58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_158)
{
    // 4D58 0062;	
    // (䵘) CJK UNIFIED IDEOGRAPH-4D58	[FB80 CD58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_159)
{
    // 4D59 0021;	
    // (䵙) CJK UNIFIED IDEOGRAPH-4D59	[FB80 CD59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_160)
{
    // 4D59 003F;	
    // (䵙) CJK UNIFIED IDEOGRAPH-4D59	[FB80 CD59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_161)
{
    // 4D59 0061;	
    // (䵙) CJK UNIFIED IDEOGRAPH-4D59	[FB80 CD59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_162)
{
    // 4D59 0041;	
    // (䵙) CJK UNIFIED IDEOGRAPH-4D59	[FB80 CD59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_163)
{
    // 4D59 0062;	
    // (䵙) CJK UNIFIED IDEOGRAPH-4D59	[FB80 CD59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_164)
{
    // 4D5A 0021;	
    // (䵚) CJK UNIFIED IDEOGRAPH-4D5A	[FB80 CD5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_165)
{
    // 4D5A 003F;	
    // (䵚) CJK UNIFIED IDEOGRAPH-4D5A	[FB80 CD5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_166)
{
    // 4D5A 0061;	
    // (䵚) CJK UNIFIED IDEOGRAPH-4D5A	[FB80 CD5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_167)
{
    // 4D5A 0041;	
    // (䵚) CJK UNIFIED IDEOGRAPH-4D5A	[FB80 CD5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_168)
{
    // 4D5A 0062;	
    // (䵚) CJK UNIFIED IDEOGRAPH-4D5A	[FB80 CD5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_169)
{
    // 4D5B 0021;	
    // (䵛) CJK UNIFIED IDEOGRAPH-4D5B	[FB80 CD5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_170)
{
    // 4D5B 003F;	
    // (䵛) CJK UNIFIED IDEOGRAPH-4D5B	[FB80 CD5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_171)
{
    // 4D5B 0061;	
    // (䵛) CJK UNIFIED IDEOGRAPH-4D5B	[FB80 CD5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_172)
{
    // 4D5B 0041;	
    // (䵛) CJK UNIFIED IDEOGRAPH-4D5B	[FB80 CD5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_173)
{
    // 4D5B 0062;	
    // (䵛) CJK UNIFIED IDEOGRAPH-4D5B	[FB80 CD5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_174)
{
    // 4D5C 0021;	
    // (䵜) CJK UNIFIED IDEOGRAPH-4D5C	[FB80 CD5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_175)
{
    // 4D5C 003F;	
    // (䵜) CJK UNIFIED IDEOGRAPH-4D5C	[FB80 CD5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_176)
{
    // 4D5C 0061;	
    // (䵜) CJK UNIFIED IDEOGRAPH-4D5C	[FB80 CD5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_177)
{
    // 4D5C 0041;	
    // (䵜) CJK UNIFIED IDEOGRAPH-4D5C	[FB80 CD5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_178)
{
    // 4D5C 0062;	
    // (䵜) CJK UNIFIED IDEOGRAPH-4D5C	[FB80 CD5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_179)
{
    // 4D5D 0021;	
    // (䵝) CJK UNIFIED IDEOGRAPH-4D5D	[FB80 CD5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_180)
{
    // 4D5D 003F;	
    // (䵝) CJK UNIFIED IDEOGRAPH-4D5D	[FB80 CD5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_181)
{
    // 4D5D 0061;	
    // (䵝) CJK UNIFIED IDEOGRAPH-4D5D	[FB80 CD5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_182)
{
    // 4D5D 0041;	
    // (䵝) CJK UNIFIED IDEOGRAPH-4D5D	[FB80 CD5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_183)
{
    // 4D5D 0062;	
    // (䵝) CJK UNIFIED IDEOGRAPH-4D5D	[FB80 CD5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_184)
{
    // 4D5E 0021;	
    // (䵞) CJK UNIFIED IDEOGRAPH-4D5E	[FB80 CD5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_185)
{
    // 4D5E 003F;	
    // (䵞) CJK UNIFIED IDEOGRAPH-4D5E	[FB80 CD5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_186)
{
    // 4D5E 0061;	
    // (䵞) CJK UNIFIED IDEOGRAPH-4D5E	[FB80 CD5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_187)
{
    // 4D5E 0041;	
    // (䵞) CJK UNIFIED IDEOGRAPH-4D5E	[FB80 CD5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_188)
{
    // 4D5E 0062;	
    // (䵞) CJK UNIFIED IDEOGRAPH-4D5E	[FB80 CD5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_189)
{
    // 4D5F 0021;	
    // (䵟) CJK UNIFIED IDEOGRAPH-4D5F	[FB80 CD5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_190)
{
    // 4D5F 003F;	
    // (䵟) CJK UNIFIED IDEOGRAPH-4D5F	[FB80 CD5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_191)
{
    // 4D5F 0061;	
    // (䵟) CJK UNIFIED IDEOGRAPH-4D5F	[FB80 CD5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_192)
{
    // 4D5F 0041;	
    // (䵟) CJK UNIFIED IDEOGRAPH-4D5F	[FB80 CD5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_193)
{
    // 4D5F 0062;	
    // (䵟) CJK UNIFIED IDEOGRAPH-4D5F	[FB80 CD5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_194)
{
    // 4D60 0021;	
    // (䵠) CJK UNIFIED IDEOGRAPH-4D60	[FB80 CD60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_195)
{
    // 4D60 003F;	
    // (䵠) CJK UNIFIED IDEOGRAPH-4D60	[FB80 CD60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_196)
{
    // 4D60 0061;	
    // (䵠) CJK UNIFIED IDEOGRAPH-4D60	[FB80 CD60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_197)
{
    // 4D60 0041;	
    // (䵠) CJK UNIFIED IDEOGRAPH-4D60	[FB80 CD60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_198)
{
    // 4D60 0062;	
    // (䵠) CJK UNIFIED IDEOGRAPH-4D60	[FB80 CD60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_199)
{
    // 4D61 0021;	
    // (䵡) CJK UNIFIED IDEOGRAPH-4D61	[FB80 CD61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_200)
{
    // 4D61 003F;	
    // (䵡) CJK UNIFIED IDEOGRAPH-4D61	[FB80 CD61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_201)
{
    // 4D61 0061;	
    // (䵡) CJK UNIFIED IDEOGRAPH-4D61	[FB80 CD61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_202)
{
    // 4D61 0041;	
    // (䵡) CJK UNIFIED IDEOGRAPH-4D61	[FB80 CD61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_203)
{
    // 4D61 0062;	
    // (䵡) CJK UNIFIED IDEOGRAPH-4D61	[FB80 CD61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_204)
{
    // 4D62 0021;	
    // (䵢) CJK UNIFIED IDEOGRAPH-4D62	[FB80 CD62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_205)
{
    // 4D62 003F;	
    // (䵢) CJK UNIFIED IDEOGRAPH-4D62	[FB80 CD62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_206)
{
    // 4D62 0061;	
    // (䵢) CJK UNIFIED IDEOGRAPH-4D62	[FB80 CD62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_207)
{
    // 4D62 0041;	
    // (䵢) CJK UNIFIED IDEOGRAPH-4D62	[FB80 CD62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_208)
{
    // 4D62 0062;	
    // (䵢) CJK UNIFIED IDEOGRAPH-4D62	[FB80 CD62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_209)
{
    // 4D63 0021;	
    // (䵣) CJK UNIFIED IDEOGRAPH-4D63	[FB80 CD63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_210)
{
    // 4D63 003F;	
    // (䵣) CJK UNIFIED IDEOGRAPH-4D63	[FB80 CD63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_211)
{
    // 4D63 0061;	
    // (䵣) CJK UNIFIED IDEOGRAPH-4D63	[FB80 CD63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_212)
{
    // 4D63 0041;	
    // (䵣) CJK UNIFIED IDEOGRAPH-4D63	[FB80 CD63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_213)
{
    // 4D63 0062;	
    // (䵣) CJK UNIFIED IDEOGRAPH-4D63	[FB80 CD63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_214)
{
    // 4D64 0021;	
    // (䵤) CJK UNIFIED IDEOGRAPH-4D64	[FB80 CD64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_215)
{
    // 4D64 003F;	
    // (䵤) CJK UNIFIED IDEOGRAPH-4D64	[FB80 CD64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_216)
{
    // 4D64 0061;	
    // (䵤) CJK UNIFIED IDEOGRAPH-4D64	[FB80 CD64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_217)
{
    // 4D64 0041;	
    // (䵤) CJK UNIFIED IDEOGRAPH-4D64	[FB80 CD64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_218)
{
    // 4D64 0062;	
    // (䵤) CJK UNIFIED IDEOGRAPH-4D64	[FB80 CD64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_219)
{
    // 4D65 0021;	
    // (䵥) CJK UNIFIED IDEOGRAPH-4D65	[FB80 CD65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_220)
{
    // 4D65 003F;	
    // (䵥) CJK UNIFIED IDEOGRAPH-4D65	[FB80 CD65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_221)
{
    // 4D65 0061;	
    // (䵥) CJK UNIFIED IDEOGRAPH-4D65	[FB80 CD65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_222)
{
    // 4D65 0041;	
    // (䵥) CJK UNIFIED IDEOGRAPH-4D65	[FB80 CD65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_223)
{
    // 4D65 0062;	
    // (䵥) CJK UNIFIED IDEOGRAPH-4D65	[FB80 CD65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_224)
{
    // 4D66 0021;	
    // (䵦) CJK UNIFIED IDEOGRAPH-4D66	[FB80 CD66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_225)
{
    // 4D66 003F;	
    // (䵦) CJK UNIFIED IDEOGRAPH-4D66	[FB80 CD66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_226)
{
    // 4D66 0061;	
    // (䵦) CJK UNIFIED IDEOGRAPH-4D66	[FB80 CD66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_227)
{
    // 4D66 0041;	
    // (䵦) CJK UNIFIED IDEOGRAPH-4D66	[FB80 CD66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_228)
{
    // 4D66 0062;	
    // (䵦) CJK UNIFIED IDEOGRAPH-4D66	[FB80 CD66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_229)
{
    // 4D67 0021;	
    // (䵧) CJK UNIFIED IDEOGRAPH-4D67	[FB80 CD67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_230)
{
    // 4D67 003F;	
    // (䵧) CJK UNIFIED IDEOGRAPH-4D67	[FB80 CD67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_231)
{
    // 4D67 0061;	
    // (䵧) CJK UNIFIED IDEOGRAPH-4D67	[FB80 CD67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_232)
{
    // 4D67 0041;	
    // (䵧) CJK UNIFIED IDEOGRAPH-4D67	[FB80 CD67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_233)
{
    // 4D67 0062;	
    // (䵧) CJK UNIFIED IDEOGRAPH-4D67	[FB80 CD67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_234)
{
    // 4D68 0021;	
    // (䵨) CJK UNIFIED IDEOGRAPH-4D68	[FB80 CD68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_235)
{
    // 4D68 003F;	
    // (䵨) CJK UNIFIED IDEOGRAPH-4D68	[FB80 CD68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_236)
{
    // 4D68 0061;	
    // (䵨) CJK UNIFIED IDEOGRAPH-4D68	[FB80 CD68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_237)
{
    // 4D68 0041;	
    // (䵨) CJK UNIFIED IDEOGRAPH-4D68	[FB80 CD68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_238)
{
    // 4D68 0062;	
    // (䵨) CJK UNIFIED IDEOGRAPH-4D68	[FB80 CD68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_239)
{
    // 4D69 0021;	
    // (䵩) CJK UNIFIED IDEOGRAPH-4D69	[FB80 CD69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_240)
{
    // 4D69 003F;	
    // (䵩) CJK UNIFIED IDEOGRAPH-4D69	[FB80 CD69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_241)
{
    // 4D69 0061;	
    // (䵩) CJK UNIFIED IDEOGRAPH-4D69	[FB80 CD69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_242)
{
    // 4D69 0041;	
    // (䵩) CJK UNIFIED IDEOGRAPH-4D69	[FB80 CD69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_243)
{
    // 4D69 0062;	
    // (䵩) CJK UNIFIED IDEOGRAPH-4D69	[FB80 CD69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_244)
{
    // 4D6A 0021;	
    // (䵪) CJK UNIFIED IDEOGRAPH-4D6A	[FB80 CD6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_245)
{
    // 4D6A 003F;	
    // (䵪) CJK UNIFIED IDEOGRAPH-4D6A	[FB80 CD6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_246)
{
    // 4D6A 0061;	
    // (䵪) CJK UNIFIED IDEOGRAPH-4D6A	[FB80 CD6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_247)
{
    // 4D6A 0041;	
    // (䵪) CJK UNIFIED IDEOGRAPH-4D6A	[FB80 CD6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_248)
{
    // 4D6A 0062;	
    // (䵪) CJK UNIFIED IDEOGRAPH-4D6A	[FB80 CD6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_249)
{
    // 4D6B 0021;	
    // (䵫) CJK UNIFIED IDEOGRAPH-4D6B	[FB80 CD6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_250)
{
    // 4D6B 003F;	
    // (䵫) CJK UNIFIED IDEOGRAPH-4D6B	[FB80 CD6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_251)
{
    // 4D6B 0061;	
    // (䵫) CJK UNIFIED IDEOGRAPH-4D6B	[FB80 CD6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_252)
{
    // 4D6B 0041;	
    // (䵫) CJK UNIFIED IDEOGRAPH-4D6B	[FB80 CD6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_253)
{
    // 4D6B 0062;	
    // (䵫) CJK UNIFIED IDEOGRAPH-4D6B	[FB80 CD6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_254)
{
    // 4D6C 0021;	
    // (䵬) CJK UNIFIED IDEOGRAPH-4D6C	[FB80 CD6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_255)
{
    // 4D6C 003F;	
    // (䵬) CJK UNIFIED IDEOGRAPH-4D6C	[FB80 CD6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_256)
{
    // 4D6C 0061;	
    // (䵬) CJK UNIFIED IDEOGRAPH-4D6C	[FB80 CD6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_257)
{
    // 4D6C 0041;	
    // (䵬) CJK UNIFIED IDEOGRAPH-4D6C	[FB80 CD6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_258)
{
    // 4D6C 0062;	
    // (䵬) CJK UNIFIED IDEOGRAPH-4D6C	[FB80 CD6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_259)
{
    // 4D6D 0021;	
    // (䵭) CJK UNIFIED IDEOGRAPH-4D6D	[FB80 CD6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_260)
{
    // 4D6D 003F;	
    // (䵭) CJK UNIFIED IDEOGRAPH-4D6D	[FB80 CD6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_261)
{
    // 4D6D 0061;	
    // (䵭) CJK UNIFIED IDEOGRAPH-4D6D	[FB80 CD6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_262)
{
    // 4D6D 0041;	
    // (䵭) CJK UNIFIED IDEOGRAPH-4D6D	[FB80 CD6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_263)
{
    // 4D6D 0062;	
    // (䵭) CJK UNIFIED IDEOGRAPH-4D6D	[FB80 CD6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_264)
{
    // 4D6E 0021;	
    // (䵮) CJK UNIFIED IDEOGRAPH-4D6E	[FB80 CD6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_265)
{
    // 4D6E 003F;	
    // (䵮) CJK UNIFIED IDEOGRAPH-4D6E	[FB80 CD6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_266)
{
    // 4D6E 0061;	
    // (䵮) CJK UNIFIED IDEOGRAPH-4D6E	[FB80 CD6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_267)
{
    // 4D6E 0041;	
    // (䵮) CJK UNIFIED IDEOGRAPH-4D6E	[FB80 CD6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_268)
{
    // 4D6E 0062;	
    // (䵮) CJK UNIFIED IDEOGRAPH-4D6E	[FB80 CD6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_269)
{
    // 4D6F 0021;	
    // (䵯) CJK UNIFIED IDEOGRAPH-4D6F	[FB80 CD6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_270)
{
    // 4D6F 003F;	
    // (䵯) CJK UNIFIED IDEOGRAPH-4D6F	[FB80 CD6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_271)
{
    // 4D6F 0061;	
    // (䵯) CJK UNIFIED IDEOGRAPH-4D6F	[FB80 CD6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_272)
{
    // 4D6F 0041;	
    // (䵯) CJK UNIFIED IDEOGRAPH-4D6F	[FB80 CD6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_273)
{
    // 4D6F 0062;	
    // (䵯) CJK UNIFIED IDEOGRAPH-4D6F	[FB80 CD6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_274)
{
    // 4D70 0021;	
    // (䵰) CJK UNIFIED IDEOGRAPH-4D70	[FB80 CD70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_275)
{
    // 4D70 003F;	
    // (䵰) CJK UNIFIED IDEOGRAPH-4D70	[FB80 CD70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_276)
{
    // 4D70 0061;	
    // (䵰) CJK UNIFIED IDEOGRAPH-4D70	[FB80 CD70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_277)
{
    // 4D70 0041;	
    // (䵰) CJK UNIFIED IDEOGRAPH-4D70	[FB80 CD70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_278)
{
    // 4D70 0062;	
    // (䵰) CJK UNIFIED IDEOGRAPH-4D70	[FB80 CD70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_279)
{
    // 4D71 0021;	
    // (䵱) CJK UNIFIED IDEOGRAPH-4D71	[FB80 CD71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_280)
{
    // 4D71 003F;	
    // (䵱) CJK UNIFIED IDEOGRAPH-4D71	[FB80 CD71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_281)
{
    // 4D71 0061;	
    // (䵱) CJK UNIFIED IDEOGRAPH-4D71	[FB80 CD71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_282)
{
    // 4D71 0041;	
    // (䵱) CJK UNIFIED IDEOGRAPH-4D71	[FB80 CD71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_283)
{
    // 4D71 0062;	
    // (䵱) CJK UNIFIED IDEOGRAPH-4D71	[FB80 CD71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_284)
{
    // 4D72 0021;	
    // (䵲) CJK UNIFIED IDEOGRAPH-4D72	[FB80 CD72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_285)
{
    // 4D72 003F;	
    // (䵲) CJK UNIFIED IDEOGRAPH-4D72	[FB80 CD72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_286)
{
    // 4D72 0061;	
    // (䵲) CJK UNIFIED IDEOGRAPH-4D72	[FB80 CD72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_287)
{
    // 4D72 0041;	
    // (䵲) CJK UNIFIED IDEOGRAPH-4D72	[FB80 CD72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_288)
{
    // 4D72 0062;	
    // (䵲) CJK UNIFIED IDEOGRAPH-4D72	[FB80 CD72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_289)
{
    // 4D73 0021;	
    // (䵳) CJK UNIFIED IDEOGRAPH-4D73	[FB80 CD73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_290)
{
    // 4D73 003F;	
    // (䵳) CJK UNIFIED IDEOGRAPH-4D73	[FB80 CD73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_291)
{
    // 4D73 0061;	
    // (䵳) CJK UNIFIED IDEOGRAPH-4D73	[FB80 CD73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_292)
{
    // 4D73 0041;	
    // (䵳) CJK UNIFIED IDEOGRAPH-4D73	[FB80 CD73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_293)
{
    // 4D73 0062;	
    // (䵳) CJK UNIFIED IDEOGRAPH-4D73	[FB80 CD73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_294)
{
    // 4D74 0021;	
    // (䵴) CJK UNIFIED IDEOGRAPH-4D74	[FB80 CD74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_295)
{
    // 4D74 003F;	
    // (䵴) CJK UNIFIED IDEOGRAPH-4D74	[FB80 CD74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_296)
{
    // 4D74 0061;	
    // (䵴) CJK UNIFIED IDEOGRAPH-4D74	[FB80 CD74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_297)
{
    // 4D74 0041;	
    // (䵴) CJK UNIFIED IDEOGRAPH-4D74	[FB80 CD74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_298)
{
    // 4D74 0062;	
    // (䵴) CJK UNIFIED IDEOGRAPH-4D74	[FB80 CD74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_299)
{
    // 4D75 0021;	
    // (䵵) CJK UNIFIED IDEOGRAPH-4D75	[FB80 CD75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_300)
{
    // 4D75 003F;	
    // (䵵) CJK UNIFIED IDEOGRAPH-4D75	[FB80 CD75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_301)
{
    // 4D75 0061;	
    // (䵵) CJK UNIFIED IDEOGRAPH-4D75	[FB80 CD75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_302)
{
    // 4D75 0041;	
    // (䵵) CJK UNIFIED IDEOGRAPH-4D75	[FB80 CD75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_303)
{
    // 4D75 0062;	
    // (䵵) CJK UNIFIED IDEOGRAPH-4D75	[FB80 CD75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_304)
{
    // 4D76 0021;	
    // (䵶) CJK UNIFIED IDEOGRAPH-4D76	[FB80 CD76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_305)
{
    // 4D76 003F;	
    // (䵶) CJK UNIFIED IDEOGRAPH-4D76	[FB80 CD76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_306)
{
    // 4D76 0061;	
    // (䵶) CJK UNIFIED IDEOGRAPH-4D76	[FB80 CD76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_307)
{
    // 4D76 0041;	
    // (䵶) CJK UNIFIED IDEOGRAPH-4D76	[FB80 CD76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_308)
{
    // 4D76 0062;	
    // (䵶) CJK UNIFIED IDEOGRAPH-4D76	[FB80 CD76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_309)
{
    // 4D77 0021;	
    // (䵷) CJK UNIFIED IDEOGRAPH-4D77	[FB80 CD77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_310)
{
    // 4D77 003F;	
    // (䵷) CJK UNIFIED IDEOGRAPH-4D77	[FB80 CD77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_311)
{
    // 4D77 0061;	
    // (䵷) CJK UNIFIED IDEOGRAPH-4D77	[FB80 CD77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_312)
{
    // 4D77 0041;	
    // (䵷) CJK UNIFIED IDEOGRAPH-4D77	[FB80 CD77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_313)
{
    // 4D77 0062;	
    // (䵷) CJK UNIFIED IDEOGRAPH-4D77	[FB80 CD77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_314)
{
    // 4D78 0021;	
    // (䵸) CJK UNIFIED IDEOGRAPH-4D78	[FB80 CD78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_315)
{
    // 4D78 003F;	
    // (䵸) CJK UNIFIED IDEOGRAPH-4D78	[FB80 CD78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_316)
{
    // 4D78 0061;	
    // (䵸) CJK UNIFIED IDEOGRAPH-4D78	[FB80 CD78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_317)
{
    // 4D78 0041;	
    // (䵸) CJK UNIFIED IDEOGRAPH-4D78	[FB80 CD78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_318)
{
    // 4D78 0062;	
    // (䵸) CJK UNIFIED IDEOGRAPH-4D78	[FB80 CD78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_319)
{
    // 4D79 0021;	
    // (䵹) CJK UNIFIED IDEOGRAPH-4D79	[FB80 CD79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_320)
{
    // 4D79 003F;	
    // (䵹) CJK UNIFIED IDEOGRAPH-4D79	[FB80 CD79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_321)
{
    // 4D79 0061;	
    // (䵹) CJK UNIFIED IDEOGRAPH-4D79	[FB80 CD79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_322)
{
    // 4D79 0041;	
    // (䵹) CJK UNIFIED IDEOGRAPH-4D79	[FB80 CD79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_323)
{
    // 4D79 0062;	
    // (䵹) CJK UNIFIED IDEOGRAPH-4D79	[FB80 CD79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_324)
{
    // 4D7A 0021;	
    // (䵺) CJK UNIFIED IDEOGRAPH-4D7A	[FB80 CD7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_325)
{
    // 4D7A 003F;	
    // (䵺) CJK UNIFIED IDEOGRAPH-4D7A	[FB80 CD7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_326)
{
    // 4D7A 0061;	
    // (䵺) CJK UNIFIED IDEOGRAPH-4D7A	[FB80 CD7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_327)
{
    // 4D7A 0041;	
    // (䵺) CJK UNIFIED IDEOGRAPH-4D7A	[FB80 CD7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_328)
{
    // 4D7A 0062;	
    // (䵺) CJK UNIFIED IDEOGRAPH-4D7A	[FB80 CD7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_329)
{
    // 4D7B 0021;	
    // (䵻) CJK UNIFIED IDEOGRAPH-4D7B	[FB80 CD7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_330)
{
    // 4D7B 003F;	
    // (䵻) CJK UNIFIED IDEOGRAPH-4D7B	[FB80 CD7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_331)
{
    // 4D7B 0061;	
    // (䵻) CJK UNIFIED IDEOGRAPH-4D7B	[FB80 CD7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_332)
{
    // 4D7B 0041;	
    // (䵻) CJK UNIFIED IDEOGRAPH-4D7B	[FB80 CD7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_333)
{
    // 4D7B 0062;	
    // (䵻) CJK UNIFIED IDEOGRAPH-4D7B	[FB80 CD7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_334)
{
    // 4D7C 0021;	
    // (䵼) CJK UNIFIED IDEOGRAPH-4D7C	[FB80 CD7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_335)
{
    // 4D7C 003F;	
    // (䵼) CJK UNIFIED IDEOGRAPH-4D7C	[FB80 CD7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_336)
{
    // 4D7C 0061;	
    // (䵼) CJK UNIFIED IDEOGRAPH-4D7C	[FB80 CD7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_337)
{
    // 4D7C 0041;	
    // (䵼) CJK UNIFIED IDEOGRAPH-4D7C	[FB80 CD7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_338)
{
    // 4D7C 0062;	
    // (䵼) CJK UNIFIED IDEOGRAPH-4D7C	[FB80 CD7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_339)
{
    // 4D7D 0021;	
    // (䵽) CJK UNIFIED IDEOGRAPH-4D7D	[FB80 CD7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_340)
{
    // 4D7D 003F;	
    // (䵽) CJK UNIFIED IDEOGRAPH-4D7D	[FB80 CD7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_341)
{
    // 4D7D 0061;	
    // (䵽) CJK UNIFIED IDEOGRAPH-4D7D	[FB80 CD7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_342)
{
    // 4D7D 0041;	
    // (䵽) CJK UNIFIED IDEOGRAPH-4D7D	[FB80 CD7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_343)
{
    // 4D7D 0062;	
    // (䵽) CJK UNIFIED IDEOGRAPH-4D7D	[FB80 CD7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_344)
{
    // 4D7E 0021;	
    // (䵾) CJK UNIFIED IDEOGRAPH-4D7E	[FB80 CD7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_345)
{
    // 4D7E 003F;	
    // (䵾) CJK UNIFIED IDEOGRAPH-4D7E	[FB80 CD7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_346)
{
    // 4D7E 0061;	
    // (䵾) CJK UNIFIED IDEOGRAPH-4D7E	[FB80 CD7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_347)
{
    // 4D7E 0041;	
    // (䵾) CJK UNIFIED IDEOGRAPH-4D7E	[FB80 CD7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_348)
{
    // 4D7E 0062;	
    // (䵾) CJK UNIFIED IDEOGRAPH-4D7E	[FB80 CD7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_349)
{
    // 4D7F 0021;	
    // (䵿) CJK UNIFIED IDEOGRAPH-4D7F	[FB80 CD7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_350)
{
    // 4D7F 003F;	
    // (䵿) CJK UNIFIED IDEOGRAPH-4D7F	[FB80 CD7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_351)
{
    // 4D7F 0061;	
    // (䵿) CJK UNIFIED IDEOGRAPH-4D7F	[FB80 CD7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_352)
{
    // 4D7F 0041;	
    // (䵿) CJK UNIFIED IDEOGRAPH-4D7F	[FB80 CD7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_353)
{
    // 4D7F 0062;	
    // (䵿) CJK UNIFIED IDEOGRAPH-4D7F	[FB80 CD7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_354)
{
    // 4D80 0021;	
    // (䶀) CJK UNIFIED IDEOGRAPH-4D80	[FB80 CD80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_355)
{
    // 4D80 003F;	
    // (䶀) CJK UNIFIED IDEOGRAPH-4D80	[FB80 CD80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_356)
{
    // 4D80 0061;	
    // (䶀) CJK UNIFIED IDEOGRAPH-4D80	[FB80 CD80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_357)
{
    // 4D80 0041;	
    // (䶀) CJK UNIFIED IDEOGRAPH-4D80	[FB80 CD80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_358)
{
    // 4D80 0062;	
    // (䶀) CJK UNIFIED IDEOGRAPH-4D80	[FB80 CD80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_359)
{
    // 4D81 0021;	
    // (䶁) CJK UNIFIED IDEOGRAPH-4D81	[FB80 CD81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_360)
{
    // 4D81 003F;	
    // (䶁) CJK UNIFIED IDEOGRAPH-4D81	[FB80 CD81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_361)
{
    // 4D81 0061;	
    // (䶁) CJK UNIFIED IDEOGRAPH-4D81	[FB80 CD81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_362)
{
    // 4D81 0041;	
    // (䶁) CJK UNIFIED IDEOGRAPH-4D81	[FB80 CD81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_363)
{
    // 4D81 0062;	
    // (䶁) CJK UNIFIED IDEOGRAPH-4D81	[FB80 CD81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_364)
{
    // 4D82 0021;	
    // (䶂) CJK UNIFIED IDEOGRAPH-4D82	[FB80 CD82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_365)
{
    // 4D82 003F;	
    // (䶂) CJK UNIFIED IDEOGRAPH-4D82	[FB80 CD82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_366)
{
    // 4D82 0061;	
    // (䶂) CJK UNIFIED IDEOGRAPH-4D82	[FB80 CD82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_367)
{
    // 4D82 0041;	
    // (䶂) CJK UNIFIED IDEOGRAPH-4D82	[FB80 CD82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_368)
{
    // 4D82 0062;	
    // (䶂) CJK UNIFIED IDEOGRAPH-4D82	[FB80 CD82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_369)
{
    // 4D83 0021;	
    // (䶃) CJK UNIFIED IDEOGRAPH-4D83	[FB80 CD83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_370)
{
    // 4D83 003F;	
    // (䶃) CJK UNIFIED IDEOGRAPH-4D83	[FB80 CD83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_371)
{
    // 4D83 0061;	
    // (䶃) CJK UNIFIED IDEOGRAPH-4D83	[FB80 CD83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_372)
{
    // 4D83 0041;	
    // (䶃) CJK UNIFIED IDEOGRAPH-4D83	[FB80 CD83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_373)
{
    // 4D83 0062;	
    // (䶃) CJK UNIFIED IDEOGRAPH-4D83	[FB80 CD83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_374)
{
    // 4D84 0021;	
    // (䶄) CJK UNIFIED IDEOGRAPH-4D84	[FB80 CD84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_375)
{
    // 4D84 003F;	
    // (䶄) CJK UNIFIED IDEOGRAPH-4D84	[FB80 CD84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_376)
{
    // 4D84 0061;	
    // (䶄) CJK UNIFIED IDEOGRAPH-4D84	[FB80 CD84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_377)
{
    // 4D84 0041;	
    // (䶄) CJK UNIFIED IDEOGRAPH-4D84	[FB80 CD84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_378)
{
    // 4D84 0062;	
    // (䶄) CJK UNIFIED IDEOGRAPH-4D84	[FB80 CD84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_379)
{
    // 4D85 0021;	
    // (䶅) CJK UNIFIED IDEOGRAPH-4D85	[FB80 CD85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_380)
{
    // 4D85 003F;	
    // (䶅) CJK UNIFIED IDEOGRAPH-4D85	[FB80 CD85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_381)
{
    // 4D85 0061;	
    // (䶅) CJK UNIFIED IDEOGRAPH-4D85	[FB80 CD85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_382)
{
    // 4D85 0041;	
    // (䶅) CJK UNIFIED IDEOGRAPH-4D85	[FB80 CD85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_383)
{
    // 4D85 0062;	
    // (䶅) CJK UNIFIED IDEOGRAPH-4D85	[FB80 CD85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_384)
{
    // 4D86 0021;	
    // (䶆) CJK UNIFIED IDEOGRAPH-4D86	[FB80 CD86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_385)
{
    // 4D86 003F;	
    // (䶆) CJK UNIFIED IDEOGRAPH-4D86	[FB80 CD86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_386)
{
    // 4D86 0061;	
    // (䶆) CJK UNIFIED IDEOGRAPH-4D86	[FB80 CD86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_387)
{
    // 4D86 0041;	
    // (䶆) CJK UNIFIED IDEOGRAPH-4D86	[FB80 CD86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_388)
{
    // 4D86 0062;	
    // (䶆) CJK UNIFIED IDEOGRAPH-4D86	[FB80 CD86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_389)
{
    // 4D87 0021;	
    // (䶇) CJK UNIFIED IDEOGRAPH-4D87	[FB80 CD87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_390)
{
    // 4D87 003F;	
    // (䶇) CJK UNIFIED IDEOGRAPH-4D87	[FB80 CD87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_391)
{
    // 4D87 0061;	
    // (䶇) CJK UNIFIED IDEOGRAPH-4D87	[FB80 CD87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_392)
{
    // 4D87 0041;	
    // (䶇) CJK UNIFIED IDEOGRAPH-4D87	[FB80 CD87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_393)
{
    // 4D87 0062;	
    // (䶇) CJK UNIFIED IDEOGRAPH-4D87	[FB80 CD87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_394)
{
    // 4D88 0021;	
    // (䶈) CJK UNIFIED IDEOGRAPH-4D88	[FB80 CD88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_395)
{
    // 4D88 003F;	
    // (䶈) CJK UNIFIED IDEOGRAPH-4D88	[FB80 CD88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_396)
{
    // 4D88 0061;	
    // (䶈) CJK UNIFIED IDEOGRAPH-4D88	[FB80 CD88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_397)
{
    // 4D88 0041;	
    // (䶈) CJK UNIFIED IDEOGRAPH-4D88	[FB80 CD88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_398)
{
    // 4D88 0062;	
    // (䶈) CJK UNIFIED IDEOGRAPH-4D88	[FB80 CD88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_399)
{
    // 4D89 0021;	
    // (䶉) CJK UNIFIED IDEOGRAPH-4D89	[FB80 CD89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_400)
{
    // 4D89 003F;	
    // (䶉) CJK UNIFIED IDEOGRAPH-4D89	[FB80 CD89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_401)
{
    // 4D89 0061;	
    // (䶉) CJK UNIFIED IDEOGRAPH-4D89	[FB80 CD89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_402)
{
    // 4D89 0041;	
    // (䶉) CJK UNIFIED IDEOGRAPH-4D89	[FB80 CD89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_403)
{
    // 4D89 0062;	
    // (䶉) CJK UNIFIED IDEOGRAPH-4D89	[FB80 CD89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_404)
{
    // 4D8A 0021;	
    // (䶊) CJK UNIFIED IDEOGRAPH-4D8A	[FB80 CD8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_405)
{
    // 4D8A 003F;	
    // (䶊) CJK UNIFIED IDEOGRAPH-4D8A	[FB80 CD8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_406)
{
    // 4D8A 0061;	
    // (䶊) CJK UNIFIED IDEOGRAPH-4D8A	[FB80 CD8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_407)
{
    // 4D8A 0041;	
    // (䶊) CJK UNIFIED IDEOGRAPH-4D8A	[FB80 CD8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_408)
{
    // 4D8A 0062;	
    // (䶊) CJK UNIFIED IDEOGRAPH-4D8A	[FB80 CD8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_409)
{
    // 4D8B 0021;	
    // (䶋) CJK UNIFIED IDEOGRAPH-4D8B	[FB80 CD8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_410)
{
    // 4D8B 003F;	
    // (䶋) CJK UNIFIED IDEOGRAPH-4D8B	[FB80 CD8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_411)
{
    // 4D8B 0061;	
    // (䶋) CJK UNIFIED IDEOGRAPH-4D8B	[FB80 CD8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_412)
{
    // 4D8B 0041;	
    // (䶋) CJK UNIFIED IDEOGRAPH-4D8B	[FB80 CD8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_413)
{
    // 4D8B 0062;	
    // (䶋) CJK UNIFIED IDEOGRAPH-4D8B	[FB80 CD8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_414)
{
    // 4D8C 0021;	
    // (䶌) CJK UNIFIED IDEOGRAPH-4D8C	[FB80 CD8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_415)
{
    // 4D8C 003F;	
    // (䶌) CJK UNIFIED IDEOGRAPH-4D8C	[FB80 CD8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_416)
{
    // 4D8C 0061;	
    // (䶌) CJK UNIFIED IDEOGRAPH-4D8C	[FB80 CD8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_417)
{
    // 4D8C 0041;	
    // (䶌) CJK UNIFIED IDEOGRAPH-4D8C	[FB80 CD8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_418)
{
    // 4D8C 0062;	
    // (䶌) CJK UNIFIED IDEOGRAPH-4D8C	[FB80 CD8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_419)
{
    // 4D8D 0021;	
    // (䶍) CJK UNIFIED IDEOGRAPH-4D8D	[FB80 CD8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_420)
{
    // 4D8D 003F;	
    // (䶍) CJK UNIFIED IDEOGRAPH-4D8D	[FB80 CD8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_421)
{
    // 4D8D 0061;	
    // (䶍) CJK UNIFIED IDEOGRAPH-4D8D	[FB80 CD8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_422)
{
    // 4D8D 0041;	
    // (䶍) CJK UNIFIED IDEOGRAPH-4D8D	[FB80 CD8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_423)
{
    // 4D8D 0062;	
    // (䶍) CJK UNIFIED IDEOGRAPH-4D8D	[FB80 CD8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_424)
{
    // 4D8E 0021;	
    // (䶎) CJK UNIFIED IDEOGRAPH-4D8E	[FB80 CD8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_425)
{
    // 4D8E 003F;	
    // (䶎) CJK UNIFIED IDEOGRAPH-4D8E	[FB80 CD8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_426)
{
    // 4D8E 0061;	
    // (䶎) CJK UNIFIED IDEOGRAPH-4D8E	[FB80 CD8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_427)
{
    // 4D8E 0041;	
    // (䶎) CJK UNIFIED IDEOGRAPH-4D8E	[FB80 CD8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_428)
{
    // 4D8E 0062;	
    // (䶎) CJK UNIFIED IDEOGRAPH-4D8E	[FB80 CD8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_429)
{
    // 4D8F 0021;	
    // (䶏) CJK UNIFIED IDEOGRAPH-4D8F	[FB80 CD8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_430)
{
    // 4D8F 003F;	
    // (䶏) CJK UNIFIED IDEOGRAPH-4D8F	[FB80 CD8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_431)
{
    // 4D8F 0061;	
    // (䶏) CJK UNIFIED IDEOGRAPH-4D8F	[FB80 CD8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_432)
{
    // 4D8F 0041;	
    // (䶏) CJK UNIFIED IDEOGRAPH-4D8F	[FB80 CD8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_433)
{
    // 4D8F 0062;	
    // (䶏) CJK UNIFIED IDEOGRAPH-4D8F	[FB80 CD8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_434)
{
    // 4D90 0021;	
    // (䶐) CJK UNIFIED IDEOGRAPH-4D90	[FB80 CD90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_435)
{
    // 4D90 003F;	
    // (䶐) CJK UNIFIED IDEOGRAPH-4D90	[FB80 CD90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_436)
{
    // 4D90 0061;	
    // (䶐) CJK UNIFIED IDEOGRAPH-4D90	[FB80 CD90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_437)
{
    // 4D90 0041;	
    // (䶐) CJK UNIFIED IDEOGRAPH-4D90	[FB80 CD90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_438)
{
    // 4D90 0062;	
    // (䶐) CJK UNIFIED IDEOGRAPH-4D90	[FB80 CD90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_439)
{
    // 4D91 0021;	
    // (䶑) CJK UNIFIED IDEOGRAPH-4D91	[FB80 CD91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_440)
{
    // 4D91 003F;	
    // (䶑) CJK UNIFIED IDEOGRAPH-4D91	[FB80 CD91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_441)
{
    // 4D91 0061;	
    // (䶑) CJK UNIFIED IDEOGRAPH-4D91	[FB80 CD91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_442)
{
    // 4D91 0041;	
    // (䶑) CJK UNIFIED IDEOGRAPH-4D91	[FB80 CD91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_443)
{
    // 4D91 0062;	
    // (䶑) CJK UNIFIED IDEOGRAPH-4D91	[FB80 CD91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_444)
{
    // 4D92 0021;	
    // (䶒) CJK UNIFIED IDEOGRAPH-4D92	[FB80 CD92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_445)
{
    // 4D92 003F;	
    // (䶒) CJK UNIFIED IDEOGRAPH-4D92	[FB80 CD92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_446)
{
    // 4D92 0061;	
    // (䶒) CJK UNIFIED IDEOGRAPH-4D92	[FB80 CD92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_447)
{
    // 4D92 0041;	
    // (䶒) CJK UNIFIED IDEOGRAPH-4D92	[FB80 CD92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_448)
{
    // 4D92 0062;	
    // (䶒) CJK UNIFIED IDEOGRAPH-4D92	[FB80 CD92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_449)
{
    // 4D93 0021;	
    // (䶓) CJK UNIFIED IDEOGRAPH-4D93	[FB80 CD93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_450)
{
    // 4D93 003F;	
    // (䶓) CJK UNIFIED IDEOGRAPH-4D93	[FB80 CD93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_451)
{
    // 4D93 0061;	
    // (䶓) CJK UNIFIED IDEOGRAPH-4D93	[FB80 CD93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_452)
{
    // 4D93 0041;	
    // (䶓) CJK UNIFIED IDEOGRAPH-4D93	[FB80 CD93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_453)
{
    // 4D93 0062;	
    // (䶓) CJK UNIFIED IDEOGRAPH-4D93	[FB80 CD93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_454)
{
    // 4D94 0021;	
    // (䶔) CJK UNIFIED IDEOGRAPH-4D94	[FB80 CD94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_455)
{
    // 4D94 003F;	
    // (䶔) CJK UNIFIED IDEOGRAPH-4D94	[FB80 CD94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_456)
{
    // 4D94 0061;	
    // (䶔) CJK UNIFIED IDEOGRAPH-4D94	[FB80 CD94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_457)
{
    // 4D94 0041;	
    // (䶔) CJK UNIFIED IDEOGRAPH-4D94	[FB80 CD94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_458)
{
    // 4D94 0062;	
    // (䶔) CJK UNIFIED IDEOGRAPH-4D94	[FB80 CD94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_459)
{
    // 4D95 0021;	
    // (䶕) CJK UNIFIED IDEOGRAPH-4D95	[FB80 CD95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_460)
{
    // 4D95 003F;	
    // (䶕) CJK UNIFIED IDEOGRAPH-4D95	[FB80 CD95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_461)
{
    // 4D95 0061;	
    // (䶕) CJK UNIFIED IDEOGRAPH-4D95	[FB80 CD95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_462)
{
    // 4D95 0041;	
    // (䶕) CJK UNIFIED IDEOGRAPH-4D95	[FB80 CD95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_463)
{
    // 4D95 0062;	
    // (䶕) CJK UNIFIED IDEOGRAPH-4D95	[FB80 CD95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_464)
{
    // 4D96 0021;	
    // (䶖) CJK UNIFIED IDEOGRAPH-4D96	[FB80 CD96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_465)
{
    // 4D96 003F;	
    // (䶖) CJK UNIFIED IDEOGRAPH-4D96	[FB80 CD96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_466)
{
    // 4D96 0061;	
    // (䶖) CJK UNIFIED IDEOGRAPH-4D96	[FB80 CD96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_467)
{
    // 4D96 0041;	
    // (䶖) CJK UNIFIED IDEOGRAPH-4D96	[FB80 CD96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_468)
{
    // 4D96 0062;	
    // (䶖) CJK UNIFIED IDEOGRAPH-4D96	[FB80 CD96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_469)
{
    // 4D97 0021;	
    // (䶗) CJK UNIFIED IDEOGRAPH-4D97	[FB80 CD97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_470)
{
    // 4D97 003F;	
    // (䶗) CJK UNIFIED IDEOGRAPH-4D97	[FB80 CD97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_471)
{
    // 4D97 0061;	
    // (䶗) CJK UNIFIED IDEOGRAPH-4D97	[FB80 CD97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_472)
{
    // 4D97 0041;	
    // (䶗) CJK UNIFIED IDEOGRAPH-4D97	[FB80 CD97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_473)
{
    // 4D97 0062;	
    // (䶗) CJK UNIFIED IDEOGRAPH-4D97	[FB80 CD97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_474)
{
    // 4D98 0021;	
    // (䶘) CJK UNIFIED IDEOGRAPH-4D98	[FB80 CD98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_475)
{
    // 4D98 003F;	
    // (䶘) CJK UNIFIED IDEOGRAPH-4D98	[FB80 CD98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_476)
{
    // 4D98 0061;	
    // (䶘) CJK UNIFIED IDEOGRAPH-4D98	[FB80 CD98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_477)
{
    // 4D98 0041;	
    // (䶘) CJK UNIFIED IDEOGRAPH-4D98	[FB80 CD98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_478)
{
    // 4D98 0062;	
    // (䶘) CJK UNIFIED IDEOGRAPH-4D98	[FB80 CD98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_479)
{
    // 4D99 0021;	
    // (䶙) CJK UNIFIED IDEOGRAPH-4D99	[FB80 CD99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_480)
{
    // 4D99 003F;	
    // (䶙) CJK UNIFIED IDEOGRAPH-4D99	[FB80 CD99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_481)
{
    // 4D99 0061;	
    // (䶙) CJK UNIFIED IDEOGRAPH-4D99	[FB80 CD99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_482)
{
    // 4D99 0041;	
    // (䶙) CJK UNIFIED IDEOGRAPH-4D99	[FB80 CD99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_483)
{
    // 4D99 0062;	
    // (䶙) CJK UNIFIED IDEOGRAPH-4D99	[FB80 CD99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_484)
{
    // 4D9A 0021;	
    // (䶚) CJK UNIFIED IDEOGRAPH-4D9A	[FB80 CD9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_485)
{
    // 4D9A 003F;	
    // (䶚) CJK UNIFIED IDEOGRAPH-4D9A	[FB80 CD9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_486)
{
    // 4D9A 0061;	
    // (䶚) CJK UNIFIED IDEOGRAPH-4D9A	[FB80 CD9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_487)
{
    // 4D9A 0041;	
    // (䶚) CJK UNIFIED IDEOGRAPH-4D9A	[FB80 CD9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_488)
{
    // 4D9A 0062;	
    // (䶚) CJK UNIFIED IDEOGRAPH-4D9A	[FB80 CD9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_489)
{
    // 4D9B 0021;	
    // (䶛) CJK UNIFIED IDEOGRAPH-4D9B	[FB80 CD9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_490)
{
    // 4D9B 003F;	
    // (䶛) CJK UNIFIED IDEOGRAPH-4D9B	[FB80 CD9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_491)
{
    // 4D9B 0061;	
    // (䶛) CJK UNIFIED IDEOGRAPH-4D9B	[FB80 CD9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_492)
{
    // 4D9B 0041;	
    // (䶛) CJK UNIFIED IDEOGRAPH-4D9B	[FB80 CD9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_493)
{
    // 4D9B 0062;	
    // (䶛) CJK UNIFIED IDEOGRAPH-4D9B	[FB80 CD9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_494)
{
    // 4D9C 0021;	
    // (䶜) CJK UNIFIED IDEOGRAPH-4D9C	[FB80 CD9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_495)
{
    // 4D9C 003F;	
    // (䶜) CJK UNIFIED IDEOGRAPH-4D9C	[FB80 CD9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_496)
{
    // 4D9C 0061;	
    // (䶜) CJK UNIFIED IDEOGRAPH-4D9C	[FB80 CD9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_497)
{
    // 4D9C 0041;	
    // (䶜) CJK UNIFIED IDEOGRAPH-4D9C	[FB80 CD9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_498)
{
    // 4D9C 0062;	
    // (䶜) CJK UNIFIED IDEOGRAPH-4D9C	[FB80 CD9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_392_499)
{
    // 4D9D 0021;	
    // (䶝) CJK UNIFIED IDEOGRAPH-4D9D	[FB80 CD9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

