// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_085_000)
{
    // 2083 003F;	
    // (₃) SUBSCRIPT THREE	[1CA6 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2083, 0x003F };
    uint32_t const ces[9] = { 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_001)
{
    // 248A 0021;	
    // (⒊) DIGIT THREE FULL STOP	[1CA6 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248A, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_002)
{
    // 248A 003F;	
    // (⒊) DIGIT THREE FULL STOP	[1CA6 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248A, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_003)
{
    // 248A 0061;	
    // (⒊) DIGIT THREE FULL STOP	[1CA6 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248A, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_004)
{
    // 248A 0041;	
    // (⒊) DIGIT THREE FULL STOP	[1CA6 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x248A, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_005)
{
    // 248A 0062;	
    // (⒊) DIGIT THREE FULL STOP	[1CA6 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248A, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_006)
{
    // 00BE 0021;	
    // (¾) VULGAR FRACTION THREE QUARTERS	[1CA6 063C 1CA7 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x00BE, 0x0021 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_007)
{
    // 00BE 003F;	
    // (¾) VULGAR FRACTION THREE QUARTERS	[1CA6 063C 1CA7 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x00BE, 0x003F };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_008)
{
    // 00BE 0061;	
    // (¾) VULGAR FRACTION THREE QUARTERS	[1CA6 063C 1CA7 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x00BE, 0x0061 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_009)
{
    // 00BE 0041;	
    // (¾) VULGAR FRACTION THREE QUARTERS	[1CA6 063C 1CA7 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x00BE, 0x0041 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_010)
{
    // 00BE 0062;	
    // (¾) VULGAR FRACTION THREE QUARTERS	[1CA6 063C 1CA7 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x00BE, 0x0062 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_011)
{
    // 2157 0021;	
    // (⅗) VULGAR FRACTION THREE FIFTHS	[1CA6 063C 1CA8 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2157, 0x0021 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_012)
{
    // 2157 003F;	
    // (⅗) VULGAR FRACTION THREE FIFTHS	[1CA6 063C 1CA8 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2157, 0x003F };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_013)
{
    // 2157 0061;	
    // (⅗) VULGAR FRACTION THREE FIFTHS	[1CA6 063C 1CA8 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2157, 0x0061 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_014)
{
    // 2157 0041;	
    // (⅗) VULGAR FRACTION THREE FIFTHS	[1CA6 063C 1CA8 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x2157, 0x0041 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_015)
{
    // 2157 0062;	
    // (⅗) VULGAR FRACTION THREE FIFTHS	[1CA6 063C 1CA8 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2157, 0x0062 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_016)
{
    // 215C 0021;	
    // (⅜) VULGAR FRACTION THREE EIGHTHS	[1CA6 063C 1CAB 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215C, 0x0021 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_017)
{
    // 215C 003F;	
    // (⅜) VULGAR FRACTION THREE EIGHTHS	[1CA6 063C 1CAB 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215C, 0x003F };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_018)
{
    // 215C 0061;	
    // (⅜) VULGAR FRACTION THREE EIGHTHS	[1CA6 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215C, 0x0061 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_019)
{
    // 215C 0041;	
    // (⅜) VULGAR FRACTION THREE EIGHTHS	[1CA6 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x215C, 0x0041 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_020)
{
    // 215C 0062;	
    // (⅜) VULGAR FRACTION THREE EIGHTHS	[1CA6 063C 1CAB 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215C, 0x0062 };
    uint32_t const ces[15] = { 0x1CA6, 0x063C, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_021)
{
    // 324A 0021;	
    // (㉊) CIRCLED NUMBER THIRTY ON BLACK SQUARE	[1CA6 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324A, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_022)
{
    // 325A 0021;	
    // (㉚) CIRCLED NUMBER THIRTY	[1CA6 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325A, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_023)
{
    // 324A 003F;	
    // (㉊) CIRCLED NUMBER THIRTY ON BLACK SQUARE	[1CA6 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324A, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_024)
{
    // 325A 003F;	
    // (㉚) CIRCLED NUMBER THIRTY	[1CA6 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325A, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_025)
{
    // 324A 0061;	
    // (㉊) CIRCLED NUMBER THIRTY ON BLACK SQUARE	[1CA6 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324A, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_026)
{
    // 325A 0061;	
    // (㉚) CIRCLED NUMBER THIRTY	[1CA6 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325A, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_027)
{
    // 324A 0041;	
    // (㉊) CIRCLED NUMBER THIRTY ON BLACK SQUARE	[1CA6 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x324A, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_028)
{
    // 325A 0041;	
    // (㉚) CIRCLED NUMBER THIRTY	[1CA6 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325A, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_029)
{
    // 324A 0062;	
    // (㉊) CIRCLED NUMBER THIRTY ON BLACK SQUARE	[1CA6 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324A, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_030)
{
    // 325A 0062;	
    // (㉚) CIRCLED NUMBER THIRTY	[1CA6 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325A, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_031)
{
    // 33FD 0021;	
    // (㏽) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY	[1CA6 1CA3 FB40 E5E5 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FD, 0x0021 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA3, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_032)
{
    // 33FD 003F;	
    // (㏽) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY	[1CA6 1CA3 FB40 E5E5 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FD, 0x003F };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA3, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_033)
{
    // 33FD 0061;	
    // (㏽) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY	[1CA6 1CA3 FB40 E5E5 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FD, 0x0061 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA3, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_034)
{
    // 33FD 0041;	
    // (㏽) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY	[1CA6 1CA3 FB40 E5E5 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33FD, 0x0041 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA3, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_035)
{
    // 33FD 0062;	
    // (㏽) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY	[1CA6 1CA3 FB40 E5E5 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FD, 0x0062 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA3, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_036)
{
    // 325B 0021;	
    // (㉛) CIRCLED NUMBER THIRTY ONE	[1CA6 1CA4 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325B, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_037)
{
    // 325B 003F;	
    // (㉛) CIRCLED NUMBER THIRTY ONE	[1CA6 1CA4 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325B, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_038)
{
    // 325B 0061;	
    // (㉛) CIRCLED NUMBER THIRTY ONE	[1CA6 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325B, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_039)
{
    // 325B 0041;	
    // (㉛) CIRCLED NUMBER THIRTY ONE	[1CA6 1CA4 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325B, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_040)
{
    // 325B 0062;	
    // (㉛) CIRCLED NUMBER THIRTY ONE	[1CA6 1CA4 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325B, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_041)
{
    // 33FE 0021;	
    // (㏾) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE	[1CA6 1CA4 FB40 E5E5 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FE, 0x0021 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA4, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_042)
{
    // 33FE 003F;	
    // (㏾) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE	[1CA6 1CA4 FB40 E5E5 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FE, 0x003F };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA4, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_043)
{
    // 33FE 0061;	
    // (㏾) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE	[1CA6 1CA4 FB40 E5E5 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FE, 0x0061 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA4, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_044)
{
    // 33FE 0041;	
    // (㏾) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE	[1CA6 1CA4 FB40 E5E5 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33FE, 0x0041 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA4, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_045)
{
    // 33FE 0062;	
    // (㏾) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE	[1CA6 1CA4 FB40 E5E5 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33FE, 0x0062 };
    uint32_t const ces[16] = { 0x1CA6, 0x1CA4, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_046)
{
    // 325C 0021;	
    // (㉜) CIRCLED NUMBER THIRTY TWO	[1CA6 1CA5 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325C, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_047)
{
    // 325C 003F;	
    // (㉜) CIRCLED NUMBER THIRTY TWO	[1CA6 1CA5 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325C, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_048)
{
    // 325C 0061;	
    // (㉜) CIRCLED NUMBER THIRTY TWO	[1CA6 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325C, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_049)
{
    // 325C 0041;	
    // (㉜) CIRCLED NUMBER THIRTY TWO	[1CA6 1CA5 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325C, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_050)
{
    // 325C 0062;	
    // (㉜) CIRCLED NUMBER THIRTY TWO	[1CA6 1CA5 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325C, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_051)
{
    // 325D 0021;	
    // (㉝) CIRCLED NUMBER THIRTY THREE	[1CA6 1CA6 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325D, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_052)
{
    // 325D 003F;	
    // (㉝) CIRCLED NUMBER THIRTY THREE	[1CA6 1CA6 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325D, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_053)
{
    // 325D 0061;	
    // (㉝) CIRCLED NUMBER THIRTY THREE	[1CA6 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325D, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_054)
{
    // 325D 0041;	
    // (㉝) CIRCLED NUMBER THIRTY THREE	[1CA6 1CA6 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325D, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_055)
{
    // 325D 0062;	
    // (㉝) CIRCLED NUMBER THIRTY THREE	[1CA6 1CA6 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325D, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_056)
{
    // 325E 0021;	
    // (㉞) CIRCLED NUMBER THIRTY FOUR	[1CA6 1CA7 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325E, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_057)
{
    // 325E 003F;	
    // (㉞) CIRCLED NUMBER THIRTY FOUR	[1CA6 1CA7 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325E, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_058)
{
    // 325E 0061;	
    // (㉞) CIRCLED NUMBER THIRTY FOUR	[1CA6 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325E, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_059)
{
    // 325E 0041;	
    // (㉞) CIRCLED NUMBER THIRTY FOUR	[1CA6 1CA7 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325E, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_060)
{
    // 325E 0062;	
    // (㉞) CIRCLED NUMBER THIRTY FOUR	[1CA6 1CA7 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325E, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_061)
{
    // 325F 0021;	
    // (㉟) CIRCLED NUMBER THIRTY FIVE	[1CA6 1CA8 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325F, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_062)
{
    // 325F 003F;	
    // (㉟) CIRCLED NUMBER THIRTY FIVE	[1CA6 1CA8 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325F, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_063)
{
    // 325F 0061;	
    // (㉟) CIRCLED NUMBER THIRTY FIVE	[1CA6 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325F, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_064)
{
    // 325F 0041;	
    // (㉟) CIRCLED NUMBER THIRTY FIVE	[1CA6 1CA8 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x325F, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_065)
{
    // 325F 0062;	
    // (㉟) CIRCLED NUMBER THIRTY FIVE	[1CA6 1CA8 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x325F, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_066)
{
    // 32B1 0021;	
    // (㊱) CIRCLED NUMBER THIRTY SIX	[1CA6 1CA9 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B1, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_067)
{
    // 32B1 003F;	
    // (㊱) CIRCLED NUMBER THIRTY SIX	[1CA6 1CA9 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B1, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_068)
{
    // 32B1 0061;	
    // (㊱) CIRCLED NUMBER THIRTY SIX	[1CA6 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B1, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_069)
{
    // 32B1 0041;	
    // (㊱) CIRCLED NUMBER THIRTY SIX	[1CA6 1CA9 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x32B1, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_070)
{
    // 32B1 0062;	
    // (㊱) CIRCLED NUMBER THIRTY SIX	[1CA6 1CA9 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B1, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_071)
{
    // 32B2 0021;	
    // (㊲) CIRCLED NUMBER THIRTY SEVEN	[1CA6 1CAA 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B2, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_072)
{
    // 32B2 003F;	
    // (㊲) CIRCLED NUMBER THIRTY SEVEN	[1CA6 1CAA 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B2, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_073)
{
    // 32B2 0061;	
    // (㊲) CIRCLED NUMBER THIRTY SEVEN	[1CA6 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B2, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_074)
{
    // 32B2 0041;	
    // (㊲) CIRCLED NUMBER THIRTY SEVEN	[1CA6 1CAA 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x32B2, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_075)
{
    // 32B2 0062;	
    // (㊲) CIRCLED NUMBER THIRTY SEVEN	[1CA6 1CAA 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B2, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_076)
{
    // 32B3 0021;	
    // (㊳) CIRCLED NUMBER THIRTY EIGHT	[1CA6 1CAB 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B3, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_077)
{
    // 32B3 003F;	
    // (㊳) CIRCLED NUMBER THIRTY EIGHT	[1CA6 1CAB 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B3, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_078)
{
    // 32B3 0061;	
    // (㊳) CIRCLED NUMBER THIRTY EIGHT	[1CA6 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B3, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_079)
{
    // 32B3 0041;	
    // (㊳) CIRCLED NUMBER THIRTY EIGHT	[1CA6 1CAB 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x32B3, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_080)
{
    // 32B3 0062;	
    // (㊳) CIRCLED NUMBER THIRTY EIGHT	[1CA6 1CAB 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B3, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_081)
{
    // 32B4 0021;	
    // (㊴) CIRCLED NUMBER THIRTY NINE	[1CA6 1CAC 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B4, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_082)
{
    // 32B4 003F;	
    // (㊴) CIRCLED NUMBER THIRTY NINE	[1CA6 1CAC 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B4, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_083)
{
    // 32B4 0061;	
    // (㊴) CIRCLED NUMBER THIRTY NINE	[1CA6 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B4, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_084)
{
    // 32B4 0041;	
    // (㊴) CIRCLED NUMBER THIRTY NINE	[1CA6 1CAC 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x32B4, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_085)
{
    // 32B4 0062;	
    // (㊴) CIRCLED NUMBER THIRTY NINE	[1CA6 1CAC 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32B4, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_086)
{
    // 0033 0061;	
    // (3) DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0033, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_087)
{
    // 0663 0061;	
    // (‎٣‎) ARABIC-INDIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0663, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_088)
{
    // 06F3 0061;	
    // (۳) EXTENDED ARABIC-INDIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_089)
{
    // 07C3 0061;	
    // (‎‎߃‎‎) NKO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_090)
{
    // 0969 0061;	
    // (३) DEVANAGARI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0969, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_091)
{
    // 09E9 0061;	
    // (৩) BENGALI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_092)
{
    // 0A69 0061;	
    // (੩) GURMUKHI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A69, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_093)
{
    // 0AE9 0061;	
    // (૩) GUJARATI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_094)
{
    // 0B69 0061;	
    // (୩) ORIYA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B69, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_095)
{
    // 0BE9 0061;	
    // (௩) TAMIL DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_096)
{
    // 0C69 0061;	
    // (౩) TELUGU DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C69, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_097)
{
    // 0C7B 0061;	
    // (౻) TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_098)
{
    // 0C7E 0061;	
    // (౾) TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_099)
{
    // 0CE9 0061;	
    // (೩) KANNADA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_100)
{
    // 0D69 0061;	
    // (൩) MALAYALAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D69, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_101)
{
    // 0DE9 0061;	
    // (෩) SINHALA LITH DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_102)
{
    // 0E53 0061;	
    // (๓) THAI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_103)
{
    // 0ED3 0061;	
    // (໓) LAO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_104)
{
    // 0F23 0061;	
    // (༣) TIBETAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F23, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_105)
{
    // 1043 0061;	
    // (၃) MYANMAR DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1043, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_106)
{
    // 1093 0061;	
    // (႓) MYANMAR SHAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1093, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_107)
{
    // 136B 0061;	
    // (፫) ETHIOPIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_108)
{
    // 17E3 0061;	
    // (៣) KHMER DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_109)
{
    // 17F3 0061;	
    // (៳) KHMER SYMBOL LEK ATTAK BEI	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_110)
{
    // 1813 0061;	
    // (᠓) MONGOLIAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1813, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_111)
{
    // 1949 0061;	
    // (᥉) LIMBU DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1949, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_112)
{
    // 19D3 0061;	
    // (᧓) NEW TAI LUE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_113)
{
    // 1A83 0061;	
    // (᪃) TAI THAM HORA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A83, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_114)
{
    // 1A93 0061;	
    // (᪓) TAI THAM THAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A93, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_115)
{
    // 1B53 0061;	
    // (᭓) BALINESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_116)
{
    // 1BB3 0061;	
    // (᮳) SUNDANESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_117)
{
    // 1C43 0061;	
    // (᱃) LEPCHA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C43, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_118)
{
    // 1C53 0061;	
    // (᱓) OL CHIKI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_119)
{
    // 3023 0061;	
    // (〣) HANGZHOU NUMERAL THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3023, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_120)
{
    // A623 0061;	
    // (꘣) VAI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA623, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_121)
{
    // A8D3 0061;	
    // (꣓) SAURASHTRA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_122)
{
    // A903 0061;	
    // (꤃) KAYAH LI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA903, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_123)
{
    // A9D3 0061;	
    // (꧓) JAVANESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_124)
{
    // A9F3 0061;	
    // (꧳) MYANMAR TAI LAING DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_125)
{
    // AA53 0061;	
    // (꩓) CHAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_126)
{
    // ABF3 0061;	
    // (꯳) MEETEI MAYEK DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_127)
{
    // 10109 0061;	
    // (𐄉) AEGEAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10109, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_128)
{
    // 102E3 0061;	
    // (𐋣) COPTIC EPACT DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_129)
{
    // 104A3 0061;	
    // (𐒣) OSMANYA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_130)
{
    // 1085A 0061;	
    // (‎‎𐡚‎‎) IMPERIAL ARAMAIC NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_131)
{
    // 1087B 0061;	
    // (‎‎𐡻‎‎) PALMYRENE NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_132)
{
    // 108A9 0061;	
    // (‎‎𐢩‎‎) NABATAEAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_133)
{
    // 1091B 0061;	
    // (‎‎𐤛‎‎) PHOENICIAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_134)
{
    // 109C2 0061;	
    // (‎‎𐧂‎‎) MEROITIC CURSIVE NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C2, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_135)
{
    // 10A42 0061;	
    // (‎‎𐩂‎‎) KHAROSHTHI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A42, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_136)
{
    // 10B5A 0061;	
    // (‎‎𐭚‎‎) INSCRIPTIONAL PARTHIAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B5A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_137)
{
    // 10B7A 0061;	
    // (‎‎𐭺‎‎) INSCRIPTIONAL PAHLAVI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B7A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_138)
{
    // 10BAB 0061;	
    // (‎‎𐮫‎‎) PSALTER PAHLAVI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_139)
{
    // 10E62 0061;	
    // (‎𐹢‎) RUMI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E62, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_140)
{
    // 11054 0061;	
    // (𑁔) BRAHMI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11054, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_141)
{
    // 11069 0061;	
    // (𑁩) BRAHMI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11069, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_142)
{
    // 110F3 0061;	
    // (𑃳) SORA SOMPENG DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_143)
{
    // 11139 0061;	
    // (𑄹) CHAKMA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11139, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_144)
{
    // 111D3 0061;	
    // (𑇓) SHARADA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_145)
{
    // 111E3 0061;	
    // (𑇣) SINHALA ARCHAIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_146)
{
    // 112F3 0061;	
    // (𑋳) KHUDAWADI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_147)
{
    // 11453 0061;	
    // (𑑓) NEWA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11453, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_148)
{
    // 114D3 0061;	
    // (𑓓) TIRHUTA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_149)
{
    // 11653 0061;	
    // (𑙓) MODI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11653, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_150)
{
    // 116C3 0061;	
    // (𑛃) TAKRI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_151)
{
    // 11733 0061;	
    // (𑜳) AHOM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11733, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_152)
{
    // 118E3 0061;	
    // (𑣣) WARANG CITI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_153)
{
    // 11C53 0061;	
    // (𑱓) BHAIKSUKI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_154)
{
    // 11C5C 0061;	
    // (𑱜) BHAIKSUKI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_155)
{
    // 11D53 0061;	
    // (𑵓) MASARAM GONDI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_156)
{
    // 12401 0061;	
    // (𒐁) CUNEIFORM NUMERIC SIGN THREE ASH	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12401, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_157)
{
    // 12408 0061;	
    // (𒐈) CUNEIFORM NUMERIC SIGN THREE DISH	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12408, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_158)
{
    // 12417 0061;	
    // (𒐗) CUNEIFORM NUMERIC SIGN THREE GESH2	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12417, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_159)
{
    // 12420 0061;	
    // (𒐠) CUNEIFORM NUMERIC SIGN THREE GESHU	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12420, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_160)
{
    // 12424 0061;	
    // (𒐤) CUNEIFORM NUMERIC SIGN THREE SHAR2	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12424, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_161)
{
    // 12425 0061;	
    // (𒐥) CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12425, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_162)
{
    // 1242E 0061;	
    // (𒐮) CUNEIFORM NUMERIC SIGN THREE SHARU	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_163)
{
    // 1242F 0061;	
    // (𒐯) CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_164)
{
    // 12436 0061;	
    // (𒐶) CUNEIFORM NUMERIC SIGN THREE BURU	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12436, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_165)
{
    // 12437 0061;	
    // (𒐷) CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12437, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_166)
{
    // 1243A 0061;	
    // (𒐺) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_167)
{
    // 1243B 0061;	
    // (𒐻) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_168)
{
    // 1244B 0061;	
    // (𒑋) CUNEIFORM NUMERIC SIGN THREE ASH TENU	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_169)
{
    // 12451 0061;	
    // (𒑑) CUNEIFORM NUMERIC SIGN THREE BAN2	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12451, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_170)
{
    // 12457 0061;	
    // (𒑗) CUNEIFORM NUMERIC SIGN NIGIDAESH	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12457, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_171)
{
    // 16A63 0061;	
    // (𖩣) MRO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A63, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_172)
{
    // 16B53 0061;	
    // (𖭓) PAHAWH HMONG DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B53, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_173)
{
    // 1D362 0061;	
    // (𝍢) COUNTING ROD UNIT DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D362, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_174)
{
    // 1E8C9 0061;	
    // (‎‎𞣉‎‎) MENDE KIKAKUI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_175)
{
    // 1E953 0061;	
    // (‎‎𞥓‎‎) ADLAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E953, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_176)
{
    // 0033 0041;	
    // (3) DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0033, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_177)
{
    // 0663 0041;	
    // (‎٣‎) ARABIC-INDIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0663, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_178)
{
    // 06F3 0041;	
    // (۳) EXTENDED ARABIC-INDIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_179)
{
    // 07C3 0041;	
    // (‎‎߃‎‎) NKO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_180)
{
    // 0969 0041;	
    // (३) DEVANAGARI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0969, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_181)
{
    // 09E9 0041;	
    // (৩) BENGALI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_182)
{
    // 0A69 0041;	
    // (੩) GURMUKHI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A69, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_183)
{
    // 0AE9 0041;	
    // (૩) GUJARATI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_184)
{
    // 0B69 0041;	
    // (୩) ORIYA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B69, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_185)
{
    // 0BE9 0041;	
    // (௩) TAMIL DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BE9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_186)
{
    // 0C69 0041;	
    // (౩) TELUGU DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C69, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_187)
{
    // 0C7B 0041;	
    // (౻) TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C7B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_188)
{
    // 0C7E 0041;	
    // (౾) TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C7E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_189)
{
    // 0CE9 0041;	
    // (೩) KANNADA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CE9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_190)
{
    // 0D69 0041;	
    // (൩) MALAYALAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D69, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_191)
{
    // 0DE9 0041;	
    // (෩) SINHALA LITH DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DE9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_192)
{
    // 0E53 0041;	
    // (๓) THAI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_193)
{
    // 0ED3 0041;	
    // (໓) LAO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_194)
{
    // 0F23 0041;	
    // (༣) TIBETAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F23, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_195)
{
    // 1043 0041;	
    // (၃) MYANMAR DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1043, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_196)
{
    // 1093 0041;	
    // (႓) MYANMAR SHAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1093, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_197)
{
    // 136B 0041;	
    // (፫) ETHIOPIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x136B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_198)
{
    // 17E3 0041;	
    // (៣) KHMER DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_199)
{
    // 17F3 0041;	
    // (៳) KHMER SYMBOL LEK ATTAK BEI	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_200)
{
    // 1813 0041;	
    // (᠓) MONGOLIAN DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1813, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_201)
{
    // 1949 0041;	
    // (᥉) LIMBU DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1949, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_202)
{
    // 19D3 0041;	
    // (᧓) NEW TAI LUE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_203)
{
    // 1A83 0041;	
    // (᪃) TAI THAM HORA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A83, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_204)
{
    // 1A93 0041;	
    // (᪓) TAI THAM THAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A93, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_205)
{
    // 1B53 0041;	
    // (᭓) BALINESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_206)
{
    // 1BB3 0041;	
    // (᮳) SUNDANESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_207)
{
    // 1C43 0041;	
    // (᱃) LEPCHA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C43, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_208)
{
    // 1C53 0041;	
    // (᱓) OL CHIKI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_209)
{
    // 3023 0041;	
    // (〣) HANGZHOU NUMERAL THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3023, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_210)
{
    // A623 0041;	
    // (꘣) VAI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA623, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_211)
{
    // A8D3 0041;	
    // (꣓) SAURASHTRA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_212)
{
    // A903 0041;	
    // (꤃) KAYAH LI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA903, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_213)
{
    // A9D3 0041;	
    // (꧓) JAVANESE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_214)
{
    // A9F3 0041;	
    // (꧳) MYANMAR TAI LAING DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_215)
{
    // AA53 0041;	
    // (꩓) CHAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_216)
{
    // ABF3 0041;	
    // (꯳) MEETEI MAYEK DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_217)
{
    // 10109 0041;	
    // (𐄉) AEGEAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10109, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_218)
{
    // 102E3 0041;	
    // (𐋣) COPTIC EPACT DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_219)
{
    // 104A3 0041;	
    // (𐒣) OSMANYA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_220)
{
    // 1085A 0041;	
    // (‎‎𐡚‎‎) IMPERIAL ARAMAIC NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1085A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_221)
{
    // 1087B 0041;	
    // (‎‎𐡻‎‎) PALMYRENE NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1087B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_222)
{
    // 108A9 0041;	
    // (‎‎𐢩‎‎) NABATAEAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108A9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_223)
{
    // 1091B 0041;	
    // (‎‎𐤛‎‎) PHOENICIAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1091B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_224)
{
    // 109C2 0041;	
    // (‎‎𐧂‎‎) MEROITIC CURSIVE NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C2, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_225)
{
    // 10A42 0041;	
    // (‎‎𐩂‎‎) KHAROSHTHI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A42, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_226)
{
    // 10B5A 0041;	
    // (‎‎𐭚‎‎) INSCRIPTIONAL PARTHIAN NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B5A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_227)
{
    // 10B7A 0041;	
    // (‎‎𐭺‎‎) INSCRIPTIONAL PAHLAVI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B7A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_228)
{
    // 10BAB 0041;	
    // (‎‎𐮫‎‎) PSALTER PAHLAVI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10BAB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_229)
{
    // 10E62 0041;	
    // (‎𐹢‎) RUMI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E62, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_230)
{
    // 11054 0041;	
    // (𑁔) BRAHMI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11054, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_231)
{
    // 11069 0041;	
    // (𑁩) BRAHMI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11069, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_232)
{
    // 110F3 0041;	
    // (𑃳) SORA SOMPENG DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_233)
{
    // 11139 0041;	
    // (𑄹) CHAKMA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11139, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_234)
{
    // 111D3 0041;	
    // (𑇓) SHARADA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_235)
{
    // 111E3 0041;	
    // (𑇣) SINHALA ARCHAIC DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_236)
{
    // 112F3 0041;	
    // (𑋳) KHUDAWADI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_237)
{
    // 11453 0041;	
    // (𑑓) NEWA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11453, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_238)
{
    // 114D3 0041;	
    // (𑓓) TIRHUTA DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_239)
{
    // 11653 0041;	
    // (𑙓) MODI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11653, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_240)
{
    // 116C3 0041;	
    // (𑛃) TAKRI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_241)
{
    // 11733 0041;	
    // (𑜳) AHOM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11733, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_242)
{
    // 118E3 0041;	
    // (𑣣) WARANG CITI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_243)
{
    // 11C53 0041;	
    // (𑱓) BHAIKSUKI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_244)
{
    // 11C5C 0041;	
    // (𑱜) BHAIKSUKI NUMBER THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C5C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_245)
{
    // 11D53 0041;	
    // (𑵓) MASARAM GONDI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_246)
{
    // 12401 0041;	
    // (𒐁) CUNEIFORM NUMERIC SIGN THREE ASH	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12401, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_247)
{
    // 12408 0041;	
    // (𒐈) CUNEIFORM NUMERIC SIGN THREE DISH	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12408, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_248)
{
    // 12417 0041;	
    // (𒐗) CUNEIFORM NUMERIC SIGN THREE GESH2	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12417, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_249)
{
    // 12420 0041;	
    // (𒐠) CUNEIFORM NUMERIC SIGN THREE GESHU	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12420, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_250)
{
    // 12424 0041;	
    // (𒐤) CUNEIFORM NUMERIC SIGN THREE SHAR2	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12424, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_251)
{
    // 12425 0041;	
    // (𒐥) CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12425, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_252)
{
    // 1242E 0041;	
    // (𒐮) CUNEIFORM NUMERIC SIGN THREE SHARU	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_253)
{
    // 1242F 0041;	
    // (𒐯) CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_254)
{
    // 12436 0041;	
    // (𒐶) CUNEIFORM NUMERIC SIGN THREE BURU	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12436, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_255)
{
    // 12437 0041;	
    // (𒐷) CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12437, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_256)
{
    // 1243A 0041;	
    // (𒐺) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1243A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_257)
{
    // 1243B 0041;	
    // (𒐻) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1243B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_258)
{
    // 1244B 0041;	
    // (𒑋) CUNEIFORM NUMERIC SIGN THREE ASH TENU	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1244B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_259)
{
    // 12451 0041;	
    // (𒑑) CUNEIFORM NUMERIC SIGN THREE BAN2	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12451, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_260)
{
    // 12457 0041;	
    // (𒑗) CUNEIFORM NUMERIC SIGN NIGIDAESH	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12457, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_261)
{
    // 16A63 0041;	
    // (𖩣) MRO DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A63, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_262)
{
    // 16B53 0041;	
    // (𖭓) PAHAWH HMONG DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B53, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_263)
{
    // 1D362 0041;	
    // (𝍢) COUNTING ROD UNIT DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D362, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_264)
{
    // 1E8C9 0041;	
    // (‎‎𞣉‎‎) MENDE KIKAKUI DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8C9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_265)
{
    // 1E953 0041;	
    // (‎‎𞥓‎‎) ADLAM DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E953, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_266)
{
    // FF13 0061;	
    // (３) FULLWIDTH DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF13, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_267)
{
    // FF13 0041;	
    // (３) FULLWIDTH DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF13, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_268)
{
    // 0F2C 0061;	
    // (༬) TIBETAN DIGIT HALF THREE	[1CA6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_269)
{
    // 0F2C 0041;	
    // (༬) TIBETAN DIGIT HALF THREE	[1CA6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F2C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_270)
{
    // 1D7D1 0061;	
    // (𝟑) MATHEMATICAL BOLD DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D1, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_271)
{
    // 1D7DB 0061;	
    // (𝟛) MATHEMATICAL DOUBLE-STRUCK DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_272)
{
    // 1D7E5 0061;	
    // (𝟥) MATHEMATICAL SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_273)
{
    // 1D7EF 0061;	
    // (𝟯) MATHEMATICAL SANS-SERIF BOLD DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EF, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_274)
{
    // 1D7F9 0061;	
    // (𝟹) MATHEMATICAL MONOSPACE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_275)
{
    // 1D7D1 0041;	
    // (𝟑) MATHEMATICAL BOLD DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D1, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_276)
{
    // 1D7DB 0041;	
    // (𝟛) MATHEMATICAL DOUBLE-STRUCK DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7DB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_277)
{
    // 1D7E5 0041;	
    // (𝟥) MATHEMATICAL SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_278)
{
    // 1D7EF 0041;	
    // (𝟯) MATHEMATICAL SANS-SERIF BOLD DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7EF, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_279)
{
    // 1D7F9 0041;	
    // (𝟹) MATHEMATICAL MONOSPACE DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_280)
{
    // 2462 0061;	
    // (③) CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2462, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_281)
{
    // 24F7 0061;	
    // (⓷) DOUBLE CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F7, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_282)
{
    // 2778 0061;	
    // (❸) DINGBAT NEGATIVE CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2778, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_283)
{
    // 2782 0061;	
    // (➂) DINGBAT CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2782, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_284)
{
    // 278C 0061;	
    // (➌) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278C, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_285)
{
    // 2462 0041;	
    // (③) CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2462, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_286)
{
    // 24F7 0041;	
    // (⓷) DOUBLE CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24F7, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_287)
{
    // 2778 0041;	
    // (❸) DINGBAT NEGATIVE CIRCLED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2778, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_288)
{
    // 2782 0041;	
    // (➂) DINGBAT CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2782, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_289)
{
    // 278C 0041;	
    // (➌) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x278C, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_290)
{
    // 00B3 0061;	
    // (³) SUPERSCRIPT THREE	[1CA6 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_291)
{
    // 00B3 0041;	
    // (³) SUPERSCRIPT THREE	[1CA6 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x00B3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_292)
{
    // 2083 0061;	
    // (₃) SUBSCRIPT THREE	[1CA6 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2083, 0x0061 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_293)
{
    // 2083 0041;	
    // (₃) SUBSCRIPT THREE	[1CA6 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2083, 0x0041 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_294)
{
    // 0033 0062;	
    // (3) DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0033, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_295)
{
    // 0663 0062;	
    // (‎٣‎) ARABIC-INDIC DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0663, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_296)
{
    // 06F3 0062;	
    // (۳) EXTENDED ARABIC-INDIC DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_297)
{
    // 07C3 0062;	
    // (‎‎߃‎‎) NKO DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_298)
{
    // 0969 0062;	
    // (३) DEVANAGARI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0969, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_299)
{
    // 09E9 0062;	
    // (৩) BENGALI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_300)
{
    // 0A69 0062;	
    // (੩) GURMUKHI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A69, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_301)
{
    // 0AE9 0062;	
    // (૩) GUJARATI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_302)
{
    // 0B69 0062;	
    // (୩) ORIYA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B69, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_303)
{
    // 0BE9 0062;	
    // (௩) TAMIL DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_304)
{
    // 0C69 0062;	
    // (౩) TELUGU DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C69, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_305)
{
    // 0C7B 0062;	
    // (౻) TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_306)
{
    // 0C7E 0062;	
    // (౾) TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C7E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_307)
{
    // 0CE9 0062;	
    // (೩) KANNADA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_308)
{
    // 0D69 0062;	
    // (൩) MALAYALAM DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D69, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_309)
{
    // 0DE9 0062;	
    // (෩) SINHALA LITH DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_310)
{
    // 0E53 0062;	
    // (๓) THAI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_311)
{
    // 0ED3 0062;	
    // (໓) LAO DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_312)
{
    // 0F23 0062;	
    // (༣) TIBETAN DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F23, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_313)
{
    // 1043 0062;	
    // (၃) MYANMAR DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1043, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_314)
{
    // 1093 0062;	
    // (႓) MYANMAR SHAN DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1093, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_315)
{
    // 136B 0062;	
    // (፫) ETHIOPIC DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_316)
{
    // 17E3 0062;	
    // (៣) KHMER DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_317)
{
    // 17F3 0062;	
    // (៳) KHMER SYMBOL LEK ATTAK BEI	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_318)
{
    // 1813 0062;	
    // (᠓) MONGOLIAN DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1813, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_319)
{
    // 1949 0062;	
    // (᥉) LIMBU DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1949, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_320)
{
    // 19D3 0062;	
    // (᧓) NEW TAI LUE DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_321)
{
    // 1A83 0062;	
    // (᪃) TAI THAM HORA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A83, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_322)
{
    // 1A93 0062;	
    // (᪓) TAI THAM THAM DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A93, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_323)
{
    // 1B53 0062;	
    // (᭓) BALINESE DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_324)
{
    // 1BB3 0062;	
    // (᮳) SUNDANESE DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_325)
{
    // 1C43 0062;	
    // (᱃) LEPCHA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C43, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_326)
{
    // 1C53 0062;	
    // (᱓) OL CHIKI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_327)
{
    // 3023 0062;	
    // (〣) HANGZHOU NUMERAL THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3023, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_328)
{
    // A623 0062;	
    // (꘣) VAI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA623, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_329)
{
    // A8D3 0062;	
    // (꣓) SAURASHTRA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_330)
{
    // A903 0062;	
    // (꤃) KAYAH LI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA903, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_331)
{
    // A9D3 0062;	
    // (꧓) JAVANESE DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_332)
{
    // A9F3 0062;	
    // (꧳) MYANMAR TAI LAING DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_333)
{
    // AA53 0062;	
    // (꩓) CHAM DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_334)
{
    // ABF3 0062;	
    // (꯳) MEETEI MAYEK DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_335)
{
    // 10109 0062;	
    // (𐄉) AEGEAN NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10109, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_336)
{
    // 102E3 0062;	
    // (𐋣) COPTIC EPACT DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_337)
{
    // 104A3 0062;	
    // (𐒣) OSMANYA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_338)
{
    // 1085A 0062;	
    // (‎‎𐡚‎‎) IMPERIAL ARAMAIC NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_339)
{
    // 1087B 0062;	
    // (‎‎𐡻‎‎) PALMYRENE NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_340)
{
    // 108A9 0062;	
    // (‎‎𐢩‎‎) NABATAEAN NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_341)
{
    // 1091B 0062;	
    // (‎‎𐤛‎‎) PHOENICIAN NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1091B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_342)
{
    // 109C2 0062;	
    // (‎‎𐧂‎‎) MEROITIC CURSIVE NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C2, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_343)
{
    // 10A42 0062;	
    // (‎‎𐩂‎‎) KHAROSHTHI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A42, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_344)
{
    // 10B5A 0062;	
    // (‎‎𐭚‎‎) INSCRIPTIONAL PARTHIAN NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B5A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_345)
{
    // 10B7A 0062;	
    // (‎‎𐭺‎‎) INSCRIPTIONAL PAHLAVI NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B7A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_346)
{
    // 10BAB 0062;	
    // (‎‎𐮫‎‎) PSALTER PAHLAVI NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_347)
{
    // 10E62 0062;	
    // (‎𐹢‎) RUMI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E62, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_348)
{
    // 11054 0062;	
    // (𑁔) BRAHMI NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11054, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_349)
{
    // 11069 0062;	
    // (𑁩) BRAHMI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11069, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_350)
{
    // 110F3 0062;	
    // (𑃳) SORA SOMPENG DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_351)
{
    // 11139 0062;	
    // (𑄹) CHAKMA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11139, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_352)
{
    // 111D3 0062;	
    // (𑇓) SHARADA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_353)
{
    // 111E3 0062;	
    // (𑇣) SINHALA ARCHAIC DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_354)
{
    // 112F3 0062;	
    // (𑋳) KHUDAWADI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_355)
{
    // 11453 0062;	
    // (𑑓) NEWA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11453, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_356)
{
    // 114D3 0062;	
    // (𑓓) TIRHUTA DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_357)
{
    // 11653 0062;	
    // (𑙓) MODI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11653, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_358)
{
    // 116C3 0062;	
    // (𑛃) TAKRI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_359)
{
    // 11733 0062;	
    // (𑜳) AHOM DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11733, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_360)
{
    // 118E3 0062;	
    // (𑣣) WARANG CITI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_361)
{
    // 11C53 0062;	
    // (𑱓) BHAIKSUKI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_362)
{
    // 11C5C 0062;	
    // (𑱜) BHAIKSUKI NUMBER THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_363)
{
    // 11D53 0062;	
    // (𑵓) MASARAM GONDI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_364)
{
    // 12401 0062;	
    // (𒐁) CUNEIFORM NUMERIC SIGN THREE ASH	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12401, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_365)
{
    // 12408 0062;	
    // (𒐈) CUNEIFORM NUMERIC SIGN THREE DISH	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12408, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_366)
{
    // 12417 0062;	
    // (𒐗) CUNEIFORM NUMERIC SIGN THREE GESH2	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12417, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_367)
{
    // 12420 0062;	
    // (𒐠) CUNEIFORM NUMERIC SIGN THREE GESHU	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12420, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_368)
{
    // 12424 0062;	
    // (𒐤) CUNEIFORM NUMERIC SIGN THREE SHAR2	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12424, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_369)
{
    // 12425 0062;	
    // (𒐥) CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12425, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_370)
{
    // 1242E 0062;	
    // (𒐮) CUNEIFORM NUMERIC SIGN THREE SHARU	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242E, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_371)
{
    // 1242F 0062;	
    // (𒐯) CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242F, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_372)
{
    // 12436 0062;	
    // (𒐶) CUNEIFORM NUMERIC SIGN THREE BURU	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12436, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_373)
{
    // 12437 0062;	
    // (𒐷) CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12437, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_374)
{
    // 1243A 0062;	
    // (𒐺) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243A, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_375)
{
    // 1243B 0062;	
    // (𒐻) CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_376)
{
    // 1244B 0062;	
    // (𒑋) CUNEIFORM NUMERIC SIGN THREE ASH TENU	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_377)
{
    // 12451 0062;	
    // (𒑑) CUNEIFORM NUMERIC SIGN THREE BAN2	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12451, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_378)
{
    // 12457 0062;	
    // (𒑗) CUNEIFORM NUMERIC SIGN NIGIDAESH	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12457, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_379)
{
    // 16A63 0062;	
    // (𖩣) MRO DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A63, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_380)
{
    // 16B53 0062;	
    // (𖭓) PAHAWH HMONG DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B53, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_381)
{
    // 1D362 0062;	
    // (𝍢) COUNTING ROD UNIT DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D362, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_382)
{
    // 1E8C9 0062;	
    // (‎‎𞣉‎‎) MENDE KIKAKUI DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_383)
{
    // 1E953 0062;	
    // (‎‎𞥓‎‎) ADLAM DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E953, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_384)
{
    // FF13 0062;	
    // (３) FULLWIDTH DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF13, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_385)
{
    // 0F2C 0062;	
    // (༬) TIBETAN DIGIT HALF THREE	[1CA6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_386)
{
    // 1D7D1 0062;	
    // (𝟑) MATHEMATICAL BOLD DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D1, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_387)
{
    // 1D7DB 0062;	
    // (𝟛) MATHEMATICAL DOUBLE-STRUCK DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_388)
{
    // 1D7E5 0062;	
    // (𝟥) MATHEMATICAL SANS-SERIF DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_389)
{
    // 1D7EF 0062;	
    // (𝟯) MATHEMATICAL SANS-SERIF BOLD DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EF, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_390)
{
    // 1D7F9 0062;	
    // (𝟹) MATHEMATICAL MONOSPACE DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_391)
{
    // 2462 0062;	
    // (③) CIRCLED DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2462, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_392)
{
    // 24F7 0062;	
    // (⓷) DOUBLE CIRCLED DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F7, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_393)
{
    // 2778 0062;	
    // (❸) DINGBAT NEGATIVE CIRCLED DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2778, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_394)
{
    // 2782 0062;	
    // (➂) DINGBAT CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2782, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_395)
{
    // 278C 0062;	
    // (➌) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278C, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_396)
{
    // 00B3 0062;	
    // (³) SUPERSCRIPT THREE	[1CA6 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00B3, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_397)
{
    // 2083 0062;	
    // (₃) SUBSCRIPT THREE	[1CA6 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2083, 0x0062 };
    uint32_t const ces[9] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_398)
{
    // 1F19B 0021;	
    // (🆛) SQUARED THREE D	[1CA6 1CF5 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19B, 0x0021 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_399)
{
    // 1F19B 003F;	
    // (🆛) SQUARED THREE D	[1CA6 1CF5 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19B, 0x003F };
    uint32_t const ces[12] = { 0x1CA6, 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_400)
{
    // 1F19B 0061;	
    // (🆛) SQUARED THREE D	[1CA6 1CF5 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19B, 0x0061 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_401)
{
    // 1F19B 0041;	
    // (🆛) SQUARED THREE D	[1CA6 1CF5 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x1F19B, 0x0041 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_402)
{
    // 1F19B 0062;	
    // (🆛) SQUARED THREE D	[1CA6 1CF5 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19B, 0x0062 };
    uint32_t const ces[12] = { 0x1CA6, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_403)
{
    // 33E2 0021;	
    // (㏢) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE	[1CA6 FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E2, 0x0021 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_404)
{
    // 33E2 003F;	
    // (㏢) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE	[1CA6 FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E2, 0x003F };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_405)
{
    // 33E2 0061;	
    // (㏢) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE	[1CA6 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E2, 0x0061 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_406)
{
    // 33E2 0041;	
    // (㏢) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE	[1CA6 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E2, 0x0041 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_407)
{
    // 33E2 0062;	
    // (㏢) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE	[1CA6 FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E2, 0x0062 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_408)
{
    // 32C2 0021;	
    // (㋂) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH	[1CA6 FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C2, 0x0021 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_409)
{
    // 32C2 003F;	
    // (㋂) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH	[1CA6 FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C2, 0x003F };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_410)
{
    // 32C2 0061;	
    // (㋂) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH	[1CA6 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C2, 0x0061 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_411)
{
    // 32C2 0041;	
    // (㋂) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH	[1CA6 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C2, 0x0041 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_412)
{
    // 32C2 0062;	
    // (㋂) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH	[1CA6 FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C2, 0x0062 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_413)
{
    // 335B 0021;	
    // (㍛) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE	[1CA6 FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335B, 0x0021 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_414)
{
    // 335B 003F;	
    // (㍛) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE	[1CA6 FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335B, 0x003F };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_415)
{
    // 335B 0061;	
    // (㍛) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE	[1CA6 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335B, 0x0061 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_416)
{
    // 335B 0041;	
    // (㍛) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE	[1CA6 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335B, 0x0041 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_417)
{
    // 335B 0062;	
    // (㍛) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE	[1CA6 FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335B, 0x0062 };
    uint32_t const ces[13] = { 0x1CA6, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_418)
{
    // 1F105 0021;	
    // (🄅) DIGIT FOUR COMMA	[1CA7 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F105, 0x0021 };
    uint32_t const ces[12] = { 0x1CA7, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_419)
{
    // 1F105 003F;	
    // (🄅) DIGIT FOUR COMMA	[1CA7 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F105, 0x003F };
    uint32_t const ces[12] = { 0x1CA7, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_420)
{
    // 1F105 0061;	
    // (🄅) DIGIT FOUR COMMA	[1CA7 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F105, 0x0061 };
    uint32_t const ces[12] = { 0x1CA7, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_421)
{
    // 1F105 0041;	
    // (🄅) DIGIT FOUR COMMA	[1CA7 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F105, 0x0041 };
    uint32_t const ces[12] = { 0x1CA7, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_422)
{
    // 1F105 0062;	
    // (🄅) DIGIT FOUR COMMA	[1CA7 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F105, 0x0062 };
    uint32_t const ces[12] = { 0x1CA7, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_423)
{
    // 0034 0021;	
    // (4) DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0034, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_424)
{
    // 0664 0021;	
    // (‎٤‎) ARABIC-INDIC DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0664, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_425)
{
    // 06F4 0021;	
    // (۴) EXTENDED ARABIC-INDIC DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_426)
{
    // 07C4 0021;	
    // (‎‎߄‎‎) NKO DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_427)
{
    // 096A 0021;	
    // (४) DEVANAGARI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_428)
{
    // 09EA 0021;	
    // (৪) BENGALI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_429)
{
    // 0A6A 0021;	
    // (੪) GURMUKHI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_430)
{
    // 0AEA 0021;	
    // (૪) GUJARATI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_431)
{
    // 0B6A 0021;	
    // (୪) ORIYA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_432)
{
    // 0BEA 0021;	
    // (௪) TAMIL DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_433)
{
    // 0C6A 0021;	
    // (౪) TELUGU DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_434)
{
    // 0CEA 0021;	
    // (೪) KANNADA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_435)
{
    // 0D6A 0021;	
    // (൪) MALAYALAM DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_436)
{
    // 0DEA 0021;	
    // (෪) SINHALA LITH DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_437)
{
    // 0E54 0021;	
    // (๔) THAI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_438)
{
    // 0ED4 0021;	
    // (໔) LAO DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_439)
{
    // 0F24 0021;	
    // (༤) TIBETAN DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F24, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_440)
{
    // 1044 0021;	
    // (၄) MYANMAR DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1044, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_441)
{
    // 1094 0021;	
    // (႔) MYANMAR SHAN DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1094, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_442)
{
    // 136C 0021;	
    // (፬) ETHIOPIC DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_443)
{
    // 17E4 0021;	
    // (៤) KHMER DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_444)
{
    // 17F4 0021;	
    // (៴) KHMER SYMBOL LEK ATTAK BUON	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_445)
{
    // 1814 0021;	
    // (᠔) MONGOLIAN DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1814, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_446)
{
    // 194A 0021;	
    // (᥊) LIMBU DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_447)
{
    // 19D4 0021;	
    // (᧔) NEW TAI LUE DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_448)
{
    // 1A84 0021;	
    // (᪄) TAI THAM HORA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A84, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_449)
{
    // 1A94 0021;	
    // (᪔) TAI THAM THAM DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A94, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_450)
{
    // 1B54 0021;	
    // (᭔) BALINESE DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_451)
{
    // 1BB4 0021;	
    // (᮴) SUNDANESE DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_452)
{
    // 1C44 0021;	
    // (᱄) LEPCHA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C44, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_453)
{
    // 1C54 0021;	
    // (᱔) OL CHIKI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_454)
{
    // 3024 0021;	
    // (〤) HANGZHOU NUMERAL FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3024, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_455)
{
    // A624 0021;	
    // (꘤) VAI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA624, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_456)
{
    // A8D4 0021;	
    // (꣔) SAURASHTRA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_457)
{
    // A904 0021;	
    // (꤄) KAYAH LI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA904, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_458)
{
    // A9D4 0021;	
    // (꧔) JAVANESE DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_459)
{
    // A9F4 0021;	
    // (꧴) MYANMAR TAI LAING DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_460)
{
    // AA54 0021;	
    // (꩔) CHAM DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_461)
{
    // ABF4 0021;	
    // (꯴) MEETEI MAYEK DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_462)
{
    // 1010A 0021;	
    // (𐄊) AEGEAN NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_463)
{
    // 102E4 0021;	
    // (𐋤) COPTIC EPACT DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_464)
{
    // 104A4 0021;	
    // (𐒤) OSMANYA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_465)
{
    // 1087C 0021;	
    // (‎‎𐡼‎‎) PALMYRENE NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_466)
{
    // 108AA 0021;	
    // (‎‎𐢪‎‎) NABATAEAN NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_467)
{
    // 108AB 0021;	
    // (‎‎𐢫‎‎) NABATAEAN CRUCIFORM NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_468)
{
    // 109C3 0021;	
    // (‎‎𐧃‎‎) MEROITIC CURSIVE NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_469)
{
    // 10A43 0021;	
    // (‎‎𐩃‎‎) KHAROSHTHI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A43, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_470)
{
    // 10B5B 0021;	
    // (‎‎𐭛‎‎) INSCRIPTIONAL PARTHIAN NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B5B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_471)
{
    // 10B7B 0021;	
    // (‎‎𐭻‎‎) INSCRIPTIONAL PAHLAVI NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B7B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_472)
{
    // 10BAC 0021;	
    // (‎‎𐮬‎‎) PSALTER PAHLAVI NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10BAC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_473)
{
    // 10E63 0021;	
    // (‎𐹣‎) RUMI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E63, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_474)
{
    // 11055 0021;	
    // (𑁕) BRAHMI NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11055, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_475)
{
    // 1106A 0021;	
    // (𑁪) BRAHMI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_476)
{
    // 110F4 0021;	
    // (𑃴) SORA SOMPENG DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_477)
{
    // 1113A 0021;	
    // (𑄺) CHAKMA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_478)
{
    // 111D4 0021;	
    // (𑇔) SHARADA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_479)
{
    // 111E4 0021;	
    // (𑇤) SINHALA ARCHAIC DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_480)
{
    // 112F4 0021;	
    // (𑋴) KHUDAWADI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_481)
{
    // 11454 0021;	
    // (𑑔) NEWA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11454, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_482)
{
    // 114D4 0021;	
    // (𑓔) TIRHUTA DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_483)
{
    // 11654 0021;	
    // (𑙔) MODI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11654, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_484)
{
    // 116C4 0021;	
    // (𑛄) TAKRI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_485)
{
    // 11734 0021;	
    // (𑜴) AHOM DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11734, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_486)
{
    // 118E4 0021;	
    // (𑣤) WARANG CITI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_487)
{
    // 11C54 0021;	
    // (𑱔) BHAIKSUKI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_488)
{
    // 11C5D 0021;	
    // (𑱝) BHAIKSUKI NUMBER FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5D, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_489)
{
    // 11D54 0021;	
    // (𑵔) MASARAM GONDI DIGIT FOUR	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D54, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_490)
{
    // 12402 0021;	
    // (𒐂) CUNEIFORM NUMERIC SIGN FOUR ASH	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12402, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_491)
{
    // 12409 0021;	
    // (𒐉) CUNEIFORM NUMERIC SIGN FOUR DISH	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12409, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_492)
{
    // 1240F 0021;	
    // (𒐏) CUNEIFORM NUMERIC SIGN FOUR U	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_493)
{
    // 12418 0021;	
    // (𒐘) CUNEIFORM NUMERIC SIGN FOUR GESH2	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12418, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_494)
{
    // 12421 0021;	
    // (𒐡) CUNEIFORM NUMERIC SIGN FOUR GESHU	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12421, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_495)
{
    // 12426 0021;	
    // (𒐦) CUNEIFORM NUMERIC SIGN FOUR SHAR2	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12426, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_496)
{
    // 12430 0021;	
    // (𒐰) CUNEIFORM NUMERIC SIGN FOUR SHARU	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12430, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_497)
{
    // 12438 0021;	
    // (𒐸) CUNEIFORM NUMERIC SIGN FOUR BURU	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12438, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_498)
{
    // 1243C 0021;	
    // (𒐼) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_085_499)
{
    // 1243D 0021;	
    // (𒐽) CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4	[1CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243D, 0x0021 };
    uint32_t const ces[9] = { 0x1CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

