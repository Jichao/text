// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_006_000)
{
    // 0386  ; [.201F.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH TONOS

    uint32_t const cps[1] = { 0x386 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_001)
{
    // 0387  ; [*028C.0020.0002] 
    // GREEK ANO TELEIA

    uint32_t const cps[1] = { 0x387 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_002)
{
    // 0388  ; [.2024.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH TONOS

    uint32_t const cps[1] = { 0x388 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_003)
{
    // 0389  ; [.202A.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ETA WITH TONOS

    uint32_t const cps[1] = { 0x389 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_004)
{
    // 038A  ; [.202C.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER IOTA WITH TONOS

    uint32_t const cps[1] = { 0x38a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_005)
{
    // 038C  ; [.2034.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH TONOS

    uint32_t const cps[1] = { 0x38c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_006)
{
    // 038E  ; [.2042.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH TONOS

    uint32_t const cps[1] = { 0x38e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_007)
{
    // 038F  ; [.2047.0020.0008][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH TONOS

    uint32_t const cps[1] = { 0x38f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_008)
{
    // 0390  ; [.202C.0020.0002][.0000.002B.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS

    uint32_t const cps[1] = { 0x390 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_006_009)
{
    // 0391  ; [.201F.0020.0008] 
    // GREEK CAPITAL LETTER ALPHA

    uint32_t const cps[1] = { 0x391 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_010)
{
    // 0392  ; [.2020.0020.0008] 
    // GREEK CAPITAL LETTER BETA

    uint32_t const cps[1] = { 0x392 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_011)
{
    // 0393  ; [.2021.0020.0008] 
    // GREEK CAPITAL LETTER GAMMA

    uint32_t const cps[1] = { 0x393 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_012)
{
    // 0394  ; [.2023.0020.0008] 
    // GREEK CAPITAL LETTER DELTA

    uint32_t const cps[1] = { 0x394 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_013)
{
    // 0395  ; [.2024.0020.0008] 
    // GREEK CAPITAL LETTER EPSILON

    uint32_t const cps[1] = { 0x395 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_014)
{
    // 0396  ; [.2028.0020.0008] 
    // GREEK CAPITAL LETTER ZETA

    uint32_t const cps[1] = { 0x396 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_015)
{
    // 0397  ; [.202A.0020.0008] 
    // GREEK CAPITAL LETTER ETA

    uint32_t const cps[1] = { 0x397 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_016)
{
    // 0398  ; [.202B.0020.0008] 
    // GREEK CAPITAL LETTER THETA

    uint32_t const cps[1] = { 0x398 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_017)
{
    // 0399  ; [.202C.0020.0008] 
    // GREEK CAPITAL LETTER IOTA

    uint32_t const cps[1] = { 0x399 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_018)
{
    // 039A  ; [.202E.0020.0008] 
    // GREEK CAPITAL LETTER KAPPA

    uint32_t const cps[1] = { 0x39a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_019)
{
    // 039B  ; [.202F.0020.0008] 
    // GREEK CAPITAL LETTER LAMDA

    uint32_t const cps[1] = { 0x39b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_020)
{
    // 039C  ; [.2031.0020.0008] 
    // GREEK CAPITAL LETTER MU

    uint32_t const cps[1] = { 0x39c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_021)
{
    // 039D  ; [.2032.0020.0008] 
    // GREEK CAPITAL LETTER NU

    uint32_t const cps[1] = { 0x39d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_022)
{
    // 039E  ; [.2033.0020.0008] 
    // GREEK CAPITAL LETTER XI

    uint32_t const cps[1] = { 0x39e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_023)
{
    // 039F  ; [.2034.0020.0008] 
    // GREEK CAPITAL LETTER OMICRON

    uint32_t const cps[1] = { 0x39f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_024)
{
    // 03A0  ; [.2035.0020.0008] 
    // GREEK CAPITAL LETTER PI

    uint32_t const cps[1] = { 0x3a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_025)
{
    // 03A1  ; [.203A.0020.0008] 
    // GREEK CAPITAL LETTER RHO

    uint32_t const cps[1] = { 0x3a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_026)
{
    // 03A3  ; [.203D.0020.0008] 
    // GREEK CAPITAL LETTER SIGMA

    uint32_t const cps[1] = { 0x3a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_027)
{
    // 03A4  ; [.2041.0020.0008] 
    // GREEK CAPITAL LETTER TAU

    uint32_t const cps[1] = { 0x3a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_028)
{
    // 03A5  ; [.2042.0020.0008] 
    // GREEK CAPITAL LETTER UPSILON

    uint32_t const cps[1] = { 0x3a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_029)
{
    // 03A6  ; [.2043.0020.0008] 
    // GREEK CAPITAL LETTER PHI

    uint32_t const cps[1] = { 0x3a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_030)
{
    // 03A7  ; [.2044.0020.0008] 
    // GREEK CAPITAL LETTER CHI

    uint32_t const cps[1] = { 0x3a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_031)
{
    // 03A8  ; [.2045.0020.0008] 
    // GREEK CAPITAL LETTER PSI

    uint32_t const cps[1] = { 0x3a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_032)
{
    // 03A9  ; [.2047.0020.0008] 
    // GREEK CAPITAL LETTER OMEGA

    uint32_t const cps[1] = { 0x3a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_033)
{
    // 03AA  ; [.202C.0020.0008][.0000.002B.0002] 
    // GREEK CAPITAL LETTER IOTA WITH DIALYTIKA

    uint32_t const cps[1] = { 0x3aa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_034)
{
    // 03AB  ; [.2042.0020.0008][.0000.002B.0002] 
    // GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA

    uint32_t const cps[1] = { 0x3ab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_035)
{
    // 03AC  ; [.201F.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ALPHA WITH TONOS

    uint32_t const cps[1] = { 0x3ac };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_036)
{
    // 03AD  ; [.2024.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER EPSILON WITH TONOS

    uint32_t const cps[1] = { 0x3ad };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_037)
{
    // 03AE  ; [.202A.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ETA WITH TONOS

    uint32_t const cps[1] = { 0x3ae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_038)
{
    // 03AF  ; [.202C.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH TONOS

    uint32_t const cps[1] = { 0x3af };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_039)
{
    // 03B0  ; [.2042.0020.0002][.0000.002B.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS

    uint32_t const cps[1] = { 0x3b0 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_006_040)
{
    // 03B1  ; [.201F.0020.0002] 
    // GREEK SMALL LETTER ALPHA

    uint32_t const cps[1] = { 0x3b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_041)
{
    // 03B2  ; [.2020.0020.0002] 
    // GREEK SMALL LETTER BETA

    uint32_t const cps[1] = { 0x3b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_042)
{
    // 03B3  ; [.2021.0020.0002] 
    // GREEK SMALL LETTER GAMMA

    uint32_t const cps[1] = { 0x3b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_043)
{
    // 03B4  ; [.2023.0020.0002] 
    // GREEK SMALL LETTER DELTA

    uint32_t const cps[1] = { 0x3b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_044)
{
    // 03B5  ; [.2024.0020.0002] 
    // GREEK SMALL LETTER EPSILON

    uint32_t const cps[1] = { 0x3b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_045)
{
    // 03B6  ; [.2028.0020.0002] 
    // GREEK SMALL LETTER ZETA

    uint32_t const cps[1] = { 0x3b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_046)
{
    // 03B7  ; [.202A.0020.0002] 
    // GREEK SMALL LETTER ETA

    uint32_t const cps[1] = { 0x3b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_047)
{
    // 03B8  ; [.202B.0020.0002] 
    // GREEK SMALL LETTER THETA

    uint32_t const cps[1] = { 0x3b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_048)
{
    // 03B9  ; [.202C.0020.0002] 
    // GREEK SMALL LETTER IOTA

    uint32_t const cps[1] = { 0x3b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_049)
{
    // 03BA  ; [.202E.0020.0002] 
    // GREEK SMALL LETTER KAPPA

    uint32_t const cps[1] = { 0x3ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_050)
{
    // 03BB  ; [.202F.0020.0002] 
    // GREEK SMALL LETTER LAMDA

    uint32_t const cps[1] = { 0x3bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_051)
{
    // 03BC  ; [.2031.0020.0002] 
    // GREEK SMALL LETTER MU

    uint32_t const cps[1] = { 0x3bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_052)
{
    // 03BD  ; [.2032.0020.0002] 
    // GREEK SMALL LETTER NU

    uint32_t const cps[1] = { 0x3bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_053)
{
    // 03BE  ; [.2033.0020.0002] 
    // GREEK SMALL LETTER XI

    uint32_t const cps[1] = { 0x3be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_054)
{
    // 03BF  ; [.2034.0020.0002] 
    // GREEK SMALL LETTER OMICRON

    uint32_t const cps[1] = { 0x3bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_055)
{
    // 03C0  ; [.2035.0020.0002] 
    // GREEK SMALL LETTER PI

    uint32_t const cps[1] = { 0x3c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_056)
{
    // 03C1  ; [.203A.0020.0002] 
    // GREEK SMALL LETTER RHO

    uint32_t const cps[1] = { 0x3c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_057)
{
    // 03C2  ; [.203D.0020.0019] 
    // GREEK SMALL LETTER FINAL SIGMA

    uint32_t const cps[1] = { 0x3c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_058)
{
    // 03C3  ; [.203D.0020.0002] 
    // GREEK SMALL LETTER SIGMA

    uint32_t const cps[1] = { 0x3c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_059)
{
    // 03C4  ; [.2041.0020.0002] 
    // GREEK SMALL LETTER TAU

    uint32_t const cps[1] = { 0x3c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_060)
{
    // 03C5  ; [.2042.0020.0002] 
    // GREEK SMALL LETTER UPSILON

    uint32_t const cps[1] = { 0x3c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_061)
{
    // 03C6  ; [.2043.0020.0002] 
    // GREEK SMALL LETTER PHI

    uint32_t const cps[1] = { 0x3c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_062)
{
    // 03C7  ; [.2044.0020.0002] 
    // GREEK SMALL LETTER CHI

    uint32_t const cps[1] = { 0x3c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_063)
{
    // 03C8  ; [.2045.0020.0002] 
    // GREEK SMALL LETTER PSI

    uint32_t const cps[1] = { 0x3c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_064)
{
    // 03C9  ; [.2047.0020.0002] 
    // GREEK SMALL LETTER OMEGA

    uint32_t const cps[1] = { 0x3c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_065)
{
    // 03CA  ; [.202C.0020.0002][.0000.002B.0002] 
    // GREEK SMALL LETTER IOTA WITH DIALYTIKA

    uint32_t const cps[1] = { 0x3ca };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_066)
{
    // 03CB  ; [.2042.0020.0002][.0000.002B.0002] 
    // GREEK SMALL LETTER UPSILON WITH DIALYTIKA

    uint32_t const cps[1] = { 0x3cb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_067)
{
    // 03CC  ; [.2034.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMICRON WITH TONOS

    uint32_t const cps[1] = { 0x3cc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_068)
{
    // 03CD  ; [.2042.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH TONOS

    uint32_t const cps[1] = { 0x3cd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_069)
{
    // 03CE  ; [.2047.0020.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMEGA WITH TONOS

    uint32_t const cps[1] = { 0x3ce };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_070)
{
    // 03CF  ; [.202E.0020.000A][.201F.0020.0004][.202C.0020.0004] 
    // GREEK CAPITAL KAI SYMBOL

    uint32_t const cps[1] = { 0x3cf };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_006_071)
{
    // 03D0  ; [.2020.0020.0004] 
    // GREEK BETA SYMBOL

    uint32_t const cps[1] = { 0x3d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_072)
{
    // 03D1  ; [.202B.0020.0004] 
    // GREEK THETA SYMBOL

    uint32_t const cps[1] = { 0x3d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_073)
{
    // 03D2  ; [.2042.0020.000A] 
    // GREEK UPSILON WITH HOOK SYMBOL

    uint32_t const cps[1] = { 0x3d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_074)
{
    // 03D3  ; [.2042.0020.000A][.0000.0024.0002] 
    // GREEK UPSILON WITH ACUTE AND HOOK SYMBOL

    uint32_t const cps[1] = { 0x3d3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_075)
{
    // 03D4  ; [.2042.0020.000A][.0000.002B.0002] 
    // GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL

    uint32_t const cps[1] = { 0x3d4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_076)
{
    // 03D5  ; [.2043.0020.0004] 
    // GREEK PHI SYMBOL

    uint32_t const cps[1] = { 0x3d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_077)
{
    // 03D6  ; [.2035.0020.0004] 
    // GREEK PI SYMBOL

    uint32_t const cps[1] = { 0x3d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_078)
{
    // 03D7  ; [.202E.0020.0004][.201F.0020.0004][.202C.0020.0004] 
    // GREEK KAI SYMBOL

    uint32_t const cps[1] = { 0x3d7 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_006_079)
{
    // 03D8  ; [.2039.0020.0008] 
    // GREEK LETTER ARCHAIC KOPPA

    uint32_t const cps[1] = { 0x3d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2039), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_080)
{
    // 03D9  ; [.2039.0020.0002] 
    // GREEK SMALL LETTER ARCHAIC KOPPA

    uint32_t const cps[1] = { 0x3d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2039), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_081)
{
    // 03DA  ; [.2027.0020.0008] 
    // GREEK LETTER STIGMA

    uint32_t const cps[1] = { 0x3da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2027), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_082)
{
    // 03DB  ; [.2027.0020.0002] 
    // GREEK SMALL LETTER STIGMA

    uint32_t const cps[1] = { 0x3db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2027), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_083)
{
    // 03DC  ; [.2025.0020.0008] 
    // GREEK LETTER DIGAMMA

    uint32_t const cps[1] = { 0x3dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2025), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_084)
{
    // 03DD  ; [.2025.0020.0002] 
    // GREEK SMALL LETTER DIGAMMA

    uint32_t const cps[1] = { 0x3dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2025), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_085)
{
    // 03DE  ; [.2038.0020.0008] 
    // GREEK LETTER KOPPA

    uint32_t const cps[1] = { 0x3de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2038), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_086)
{
    // 03DF  ; [.2038.0020.0002] 
    // GREEK SMALL LETTER KOPPA

    uint32_t const cps[1] = { 0x3df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2038), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_087)
{
    // 03E0  ; [.2049.0020.0008] 
    // GREEK LETTER SAMPI

    uint32_t const cps[1] = { 0x3e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2049), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_088)
{
    // 03E1  ; [.2049.0020.0002] 
    // GREEK SMALL LETTER SAMPI

    uint32_t const cps[1] = { 0x3e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2049), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_089)
{
    // 03E2  ; [.206B.0020.0008] 
    // COPTIC CAPITAL LETTER SHEI

    uint32_t const cps[1] = { 0x3e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_090)
{
    // 03E3  ; [.206B.0020.0002] 
    // COPTIC SMALL LETTER SHEI

    uint32_t const cps[1] = { 0x3e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x206b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_091)
{
    // 03E4  ; [.2070.0020.0008] 
    // COPTIC CAPITAL LETTER FEI

    uint32_t const cps[1] = { 0x3e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2070), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_092)
{
    // 03E5  ; [.2070.0020.0002] 
    // COPTIC SMALL LETTER FEI

    uint32_t const cps[1] = { 0x3e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2070), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_093)
{
    // 03E6  ; [.2071.0020.0008] 
    // COPTIC CAPITAL LETTER KHEI

    uint32_t const cps[1] = { 0x3e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2071), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_094)
{
    // 03E7  ; [.2071.0020.0002] 
    // COPTIC SMALL LETTER KHEI

    uint32_t const cps[1] = { 0x3e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2071), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_095)
{
    // 03E8  ; [.2074.0020.0008] 
    // COPTIC CAPITAL LETTER HORI

    uint32_t const cps[1] = { 0x3e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2074), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_096)
{
    // 03E9  ; [.2074.0020.0002] 
    // COPTIC SMALL LETTER HORI

    uint32_t const cps[1] = { 0x3e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2074), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_097)
{
    // 03EA  ; [.207B.0020.0008] 
    // COPTIC CAPITAL LETTER GANGIA

    uint32_t const cps[1] = { 0x3ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_098)
{
    // 03EB  ; [.207B.0020.0002] 
    // COPTIC SMALL LETTER GANGIA

    uint32_t const cps[1] = { 0x3eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_099)
{
    // 03EC  ; [.207E.0020.0008] 
    // COPTIC CAPITAL LETTER SHIMA

    uint32_t const cps[1] = { 0x3ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_100)
{
    // 03ED  ; [.207E.0020.0002] 
    // COPTIC SMALL LETTER SHIMA

    uint32_t const cps[1] = { 0x3ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_101)
{
    // 03EE  ; [.2082.0020.0008] 
    // COPTIC CAPITAL LETTER DEI

    uint32_t const cps[1] = { 0x3ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2082), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_102)
{
    // 03EF  ; [.2082.0020.0002] 
    // COPTIC SMALL LETTER DEI

    uint32_t const cps[1] = { 0x3ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2082), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_103)
{
    // 03F0  ; [.202E.0020.0004] 
    // GREEK KAPPA SYMBOL

    uint32_t const cps[1] = { 0x3f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_104)
{
    // 03F1  ; [.203A.0020.0004] 
    // GREEK RHO SYMBOL

    uint32_t const cps[1] = { 0x3f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_105)
{
    // 03F2  ; [.203D.0020.0004] 
    // GREEK LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x3f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_106)
{
    // 03F3  ; [.202D.0020.0002] 
    // GREEK LETTER YOT

    uint32_t const cps[1] = { 0x3f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_107)
{
    // 03F4  ; [.202B.0020.000A] 
    // GREEK CAPITAL THETA SYMBOL

    uint32_t const cps[1] = { 0x3f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_108)
{
    // 03F5  ; [.2024.0020.0004] 
    // GREEK LUNATE EPSILON SYMBOL

    uint32_t const cps[1] = { 0x3f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_109)
{
    // 03F6  ; [*0627.0020.0002] 
    // GREEK REVERSED LUNATE EPSILON SYMBOL

    uint32_t const cps[1] = { 0x3f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x627), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_110)
{
    // 03F7  ; [.204B.0020.0008] 
    // GREEK CAPITAL LETTER SHO

    uint32_t const cps[1] = { 0x3f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_111)
{
    // 03F8  ; [.204B.0020.0002] 
    // GREEK SMALL LETTER SHO

    uint32_t const cps[1] = { 0x3f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x204b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_112)
{
    // 03F9  ; [.203D.0020.000A] 
    // GREEK CAPITAL LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x3f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_113)
{
    // 03FA  ; [.2037.0020.0008] 
    // GREEK CAPITAL LETTER SAN

    uint32_t const cps[1] = { 0x3fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2037), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_114)
{
    // 03FB  ; [.2037.0020.0002] 
    // GREEK SMALL LETTER SAN

    uint32_t const cps[1] = { 0x3fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2037), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_115)
{
    // 03FC  ; [.203C.0020.0002] 
    // GREEK RHO WITH STROKE SYMBOL

    uint32_t const cps[1] = { 0x3fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_116)
{
    // 03FD  ; [.203F.0020.0008] 
    // GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x3fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_117)
{
    // 03FE  ; [.203E.0020.0008] 
    // GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x3fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_118)
{
    // 03FF  ; [.2040.0020.0008] 
    // GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL

    uint32_t const cps[1] = { 0x3ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2040), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_119)
{
    // 0400  ; [.20C0.0020.0008][.0000.0025.0002] 
    // CYRILLIC CAPITAL LETTER IE WITH GRAVE

    uint32_t const cps[1] = { 0x400 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_120)
{
    // 0401  ; [.20C0.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER IO

    uint32_t const cps[1] = { 0x401 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_121)
{
    // 0402  ; [.20B6.0020.0008] 
    // CYRILLIC CAPITAL LETTER DJE

    uint32_t const cps[1] = { 0x402 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_122)
{
    // 0403  ; [.209C.0020.0008][.0000.0024.0002] 
    // CYRILLIC CAPITAL LETTER GJE

    uint32_t const cps[1] = { 0x403 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_123)
{
    // 0404  ; [.20C4.0020.0008] 
    // CYRILLIC CAPITAL LETTER UKRAINIAN IE

    uint32_t const cps[1] = { 0x404 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20c4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_124)
{
    // 0405  ; [.20DA.0020.0008] 
    // CYRILLIC CAPITAL LETTER DZE

    uint32_t const cps[1] = { 0x405 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20da), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_125)
{
    // 0406  ; [.20EE.0020.0008] 
    // CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I

    uint32_t const cps[1] = { 0x406 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20ee), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_126)
{
    // 0407  ; [.20EE.0020.0008][.0000.002B.0002] 
    // CYRILLIC CAPITAL LETTER YI

    uint32_t const cps[1] = { 0x407 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20ee), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_127)
{
    // 0408  ; [.20F7.0020.0008] 
    // CYRILLIC CAPITAL LETTER JE

    uint32_t const cps[1] = { 0x408 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20f7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_128)
{
    // 0409  ; [.2122.0020.0008] 
    // CYRILLIC CAPITAL LETTER LJE

    uint32_t const cps[1] = { 0x409 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2122), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_129)
{
    // 040A  ; [.2148.0020.0008] 
    // CYRILLIC CAPITAL LETTER NJE

    uint32_t const cps[1] = { 0x40a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2148), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_130)
{
    // 040B  ; [.217F.0020.0008] 
    // CYRILLIC CAPITAL LETTER TSHE

    uint32_t const cps[1] = { 0x40b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x217f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_131)
{
    // 040C  ; [.20FC.0020.0008][.0000.0024.0002] 
    // CYRILLIC CAPITAL LETTER KJE

    uint32_t const cps[1] = { 0x40c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20fc), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_132)
{
    // 040D  ; [.20E6.0020.0008][.0000.0025.0002] 
    // CYRILLIC CAPITAL LETTER I WITH GRAVE

    uint32_t const cps[1] = { 0x40d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_133)
{
    // 040E  ; [.2183.0020.0008][.0000.0026.0002] 
    // CYRILLIC CAPITAL LETTER SHORT U

    uint32_t const cps[1] = { 0x40e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2183), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_006_134)
{
    // 040F  ; [.21E5.0020.0008] 
    // CYRILLIC CAPITAL LETTER DZHE

    uint32_t const cps[1] = { 0x40f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21e5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_135)
{
    // 0410  ; [.2088.0020.0008] 
    // CYRILLIC CAPITAL LETTER A

    uint32_t const cps[1] = { 0x410 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2088), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_136)
{
    // 0411  ; [.2094.0020.0008] 
    // CYRILLIC CAPITAL LETTER BE

    uint32_t const cps[1] = { 0x411 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2094), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_137)
{
    // 0412  ; [.2098.0020.0008] 
    // CYRILLIC CAPITAL LETTER VE

    uint32_t const cps[1] = { 0x412 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2098), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_138)
{
    // 0413  ; [.209C.0020.0008] 
    // CYRILLIC CAPITAL LETTER GHE

    uint32_t const cps[1] = { 0x413 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_139)
{
    // 0414  ; [.20B0.0020.0008] 
    // CYRILLIC CAPITAL LETTER DE

    uint32_t const cps[1] = { 0x414 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_140)
{
    // 0415  ; [.20C0.0020.0008] 
    // CYRILLIC CAPITAL LETTER IE

    uint32_t const cps[1] = { 0x415 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20c0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_141)
{
    // 0416  ; [.20C8.0020.0008] 
    // CYRILLIC CAPITAL LETTER ZHE

    uint32_t const cps[1] = { 0x416 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20c8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_142)
{
    // 0417  ; [.20D2.0020.0008] 
    // CYRILLIC CAPITAL LETTER ZE

    uint32_t const cps[1] = { 0x417 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d2), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_143)
{
    // 0418  ; [.20E6.0020.0008] 
    // CYRILLIC CAPITAL LETTER I

    uint32_t const cps[1] = { 0x418 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20e6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_144)
{
    // 0418 0306 ; [.20F3.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHORT I

    uint32_t const cps[1] = { 0x419 }; // Expands to the code points in the comment above.
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20f3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_145)
{
    // 0419  ; [.20F3.0020.0008] 
    // CYRILLIC CAPITAL LETTER SHORT I

    uint32_t const cps[1] = { 0x419 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20f3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_146)
{
    // 041A  ; [.20FC.0020.0008] 
    // CYRILLIC CAPITAL LETTER KA

    uint32_t const cps[1] = { 0x41a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20fc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_147)
{
    // 041B  ; [.2116.0020.0008] 
    // CYRILLIC CAPITAL LETTER EL

    uint32_t const cps[1] = { 0x41b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2116), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_148)
{
    // 041C  ; [.2129.0020.0008] 
    // CYRILLIC CAPITAL LETTER EM

    uint32_t const cps[1] = { 0x41c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2129), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_006_149)
{
    // 041D  ; [.2132.0020.0008] 
    // CYRILLIC CAPITAL LETTER EN

    uint32_t const cps[1] = { 0x41d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2132), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

