// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkd_010_000)
{
    // 3267;3267;3267;110B;110B; 
    // (㉧; ㉧; ㉧; ᄋ; ᄋ; ) CIRCLED HANGUL IEUNG
    {
        std::array<uint32_t, 1> const source = {{ 0x3267 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x110B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_001)
{
    // 3268;3268;3268;110C;110C; 
    // (㉨; ㉨; ㉨; ᄌ; ᄌ; ) CIRCLED HANGUL CIEUC
    {
        std::array<uint32_t, 1> const source = {{ 0x3268 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x110C }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_002)
{
    // 3269;3269;3269;110E;110E; 
    // (㉩; ㉩; ㉩; ᄎ; ᄎ; ) CIRCLED HANGUL CHIEUCH
    {
        std::array<uint32_t, 1> const source = {{ 0x3269 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x110E }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_003)
{
    // 326A;326A;326A;110F;110F; 
    // (㉪; ㉪; ㉪; ᄏ; ᄏ; ) CIRCLED HANGUL KHIEUKH
    {
        std::array<uint32_t, 1> const source = {{ 0x326A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x110F }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_004)
{
    // 326B;326B;326B;1110;1110; 
    // (㉫; ㉫; ㉫; ᄐ; ᄐ; ) CIRCLED HANGUL THIEUTH
    {
        std::array<uint32_t, 1> const source = {{ 0x326B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1110 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_005)
{
    // 326C;326C;326C;1111;1111; 
    // (㉬; ㉬; ㉬; ᄑ; ᄑ; ) CIRCLED HANGUL PHIEUPH
    {
        std::array<uint32_t, 1> const source = {{ 0x326C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1111 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_006)
{
    // 326D;326D;326D;1112;1112; 
    // (㉭; ㉭; ㉭; ᄒ; ᄒ; ) CIRCLED HANGUL HIEUH
    {
        std::array<uint32_t, 1> const source = {{ 0x326D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x1112 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_007)
{
    // 326E;326E;326E;AC00;1100 1161; 
    // (㉮; ㉮; ㉮; 가; 가; ) CIRCLED HANGUL KIYEOK A
    {
        std::array<uint32_t, 1> const source = {{ 0x326E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1100, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_008)
{
    // 326F;326F;326F;B098;1102 1161; 
    // (㉯; ㉯; ㉯; 나; 나; ) CIRCLED HANGUL NIEUN A
    {
        std::array<uint32_t, 1> const source = {{ 0x326F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1102, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_009)
{
    // 3270;3270;3270;B2E4;1103 1161; 
    // (㉰; ㉰; ㉰; 다; 다; ) CIRCLED HANGUL TIKEUT A
    {
        std::array<uint32_t, 1> const source = {{ 0x3270 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1103, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_010)
{
    // 3271;3271;3271;B77C;1105 1161; 
    // (㉱; ㉱; ㉱; 라; 라; ) CIRCLED HANGUL RIEUL A
    {
        std::array<uint32_t, 1> const source = {{ 0x3271 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1105, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_011)
{
    // 3272;3272;3272;B9C8;1106 1161; 
    // (㉲; ㉲; ㉲; 마; 마; ) CIRCLED HANGUL MIEUM A
    {
        std::array<uint32_t, 1> const source = {{ 0x3272 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1106, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_012)
{
    // 3273;3273;3273;BC14;1107 1161; 
    // (㉳; ㉳; ㉳; 바; 바; ) CIRCLED HANGUL PIEUP A
    {
        std::array<uint32_t, 1> const source = {{ 0x3273 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1107, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_013)
{
    // 3274;3274;3274;C0AC;1109 1161; 
    // (㉴; ㉴; ㉴; 사; 사; ) CIRCLED HANGUL SIOS A
    {
        std::array<uint32_t, 1> const source = {{ 0x3274 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1109, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_014)
{
    // 3275;3275;3275;C544;110B 1161; 
    // (㉵; ㉵; ㉵; 아; 아; ) CIRCLED HANGUL IEUNG A
    {
        std::array<uint32_t, 1> const source = {{ 0x3275 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110B, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_015)
{
    // 3276;3276;3276;C790;110C 1161; 
    // (㉶; ㉶; ㉶; 자; 자; ) CIRCLED HANGUL CIEUC A
    {
        std::array<uint32_t, 1> const source = {{ 0x3276 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110C, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_016)
{
    // 3277;3277;3277;CC28;110E 1161; 
    // (㉷; ㉷; ㉷; 차; 차; ) CIRCLED HANGUL CHIEUCH A
    {
        std::array<uint32_t, 1> const source = {{ 0x3277 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110E, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_017)
{
    // 3278;3278;3278;CE74;110F 1161; 
    // (㉸; ㉸; ㉸; 카; 카; ) CIRCLED HANGUL KHIEUKH A
    {
        std::array<uint32_t, 1> const source = {{ 0x3278 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110F, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_018)
{
    // 3279;3279;3279;D0C0;1110 1161; 
    // (㉹; ㉹; ㉹; 타; 타; ) CIRCLED HANGUL THIEUTH A
    {
        std::array<uint32_t, 1> const source = {{ 0x3279 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1110, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_019)
{
    // 327A;327A;327A;D30C;1111 1161; 
    // (㉺; ㉺; ㉺; 파; 파; ) CIRCLED HANGUL PHIEUPH A
    {
        std::array<uint32_t, 1> const source = {{ 0x327A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_020)
{
    // 327B;327B;327B;D558;1112 1161; 
    // (㉻; ㉻; ㉻; 하; 하; ) CIRCLED HANGUL HIEUH A
    {
        std::array<uint32_t, 1> const source = {{ 0x327B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1112, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_021)
{
    // 327C;327C;327C;CC38 ACE0;110E 1161 11B7 1100 1169; 
    // (㉼; ㉼; ㉼; 참고; 참고; ) CIRCLED KOREAN CHARACTER CHAMKO
    {
        std::array<uint32_t, 1> const source = {{ 0x327C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x110E, 0x1161, 0x11B7, 0x1100, 0x1169 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_022)
{
    // 327D;327D;327D;C8FC C758;110C 116E 110B 1174; 
    // (㉽; ㉽; ㉽; 주의; 주의; ) CIRCLED KOREAN CHARACTER JUEUI
    {
        std::array<uint32_t, 1> const source = {{ 0x327D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x110C, 0x116E, 0x110B, 0x1174 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_023)
{
    // 327E;327E;327E;C6B0;110B 116E; 
    // (㉾; ㉾; ㉾; 우; 우; ) CIRCLED HANGUL IEUNG U
    {
        std::array<uint32_t, 1> const source = {{ 0x327E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x110B, 0x116E }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_024)
{
    // 3280;3280;3280;4E00;4E00; 
    // (㊀; ㊀; ㊀; 一; 一; ) CIRCLED IDEOGRAPH ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x3280 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E00 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_025)
{
    // 3281;3281;3281;4E8C;4E8C; 
    // (㊁; ㊁; ㊁; 二; 二; ) CIRCLED IDEOGRAPH TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x3281 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E8C }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_026)
{
    // 3282;3282;3282;4E09;4E09; 
    // (㊂; ㊂; ㊂; 三; 三; ) CIRCLED IDEOGRAPH THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x3282 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E09 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_027)
{
    // 3283;3283;3283;56DB;56DB; 
    // (㊃; ㊃; ㊃; 四; 四; ) CIRCLED IDEOGRAPH FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x3283 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x56DB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_028)
{
    // 3284;3284;3284;4E94;4E94; 
    // (㊄; ㊄; ㊄; 五; 五; ) CIRCLED IDEOGRAPH FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x3284 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E94 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_029)
{
    // 3285;3285;3285;516D;516D; 
    // (㊅; ㊅; ㊅; 六; 六; ) CIRCLED IDEOGRAPH SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x3285 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x516D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_030)
{
    // 3286;3286;3286;4E03;4E03; 
    // (㊆; ㊆; ㊆; 七; 七; ) CIRCLED IDEOGRAPH SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x3286 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E03 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_031)
{
    // 3287;3287;3287;516B;516B; 
    // (㊇; ㊇; ㊇; 八; 八; ) CIRCLED IDEOGRAPH EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x3287 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x516B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_032)
{
    // 3288;3288;3288;4E5D;4E5D; 
    // (㊈; ㊈; ㊈; 九; 九; ) CIRCLED IDEOGRAPH NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x3288 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E5D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_033)
{
    // 3289;3289;3289;5341;5341; 
    // (㊉; ㊉; ㊉; 十; 十; ) CIRCLED IDEOGRAPH TEN
    {
        std::array<uint32_t, 1> const source = {{ 0x3289 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5341 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_034)
{
    // 328A;328A;328A;6708;6708; 
    // (㊊; ㊊; ㊊; 月; 月; ) CIRCLED IDEOGRAPH MOON
    {
        std::array<uint32_t, 1> const source = {{ 0x328A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_035)
{
    // 328B;328B;328B;706B;706B; 
    // (㊋; ㊋; ㊋; 火; 火; ) CIRCLED IDEOGRAPH FIRE
    {
        std::array<uint32_t, 1> const source = {{ 0x328B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x706B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_036)
{
    // 328C;328C;328C;6C34;6C34; 
    // (㊌; ㊌; ㊌; 水; 水; ) CIRCLED IDEOGRAPH WATER
    {
        std::array<uint32_t, 1> const source = {{ 0x328C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6C34 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_037)
{
    // 328D;328D;328D;6728;6728; 
    // (㊍; ㊍; ㊍; 木; 木; ) CIRCLED IDEOGRAPH WOOD
    {
        std::array<uint32_t, 1> const source = {{ 0x328D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6728 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_038)
{
    // 328E;328E;328E;91D1;91D1; 
    // (㊎; ㊎; ㊎; 金; 金; ) CIRCLED IDEOGRAPH METAL
    {
        std::array<uint32_t, 1> const source = {{ 0x328E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x91D1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_039)
{
    // 328F;328F;328F;571F;571F; 
    // (㊏; ㊏; ㊏; 土; 土; ) CIRCLED IDEOGRAPH EARTH
    {
        std::array<uint32_t, 1> const source = {{ 0x328F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x571F }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_040)
{
    // 3290;3290;3290;65E5;65E5; 
    // (㊐; ㊐; ㊐; 日; 日; ) CIRCLED IDEOGRAPH SUN
    {
        std::array<uint32_t, 1> const source = {{ 0x3290 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x65E5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_041)
{
    // 3291;3291;3291;682A;682A; 
    // (㊑; ㊑; ㊑; 株; 株; ) CIRCLED IDEOGRAPH STOCK
    {
        std::array<uint32_t, 1> const source = {{ 0x3291 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x682A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_042)
{
    // 3292;3292;3292;6709;6709; 
    // (㊒; ㊒; ㊒; 有; 有; ) CIRCLED IDEOGRAPH HAVE
    {
        std::array<uint32_t, 1> const source = {{ 0x3292 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6709 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_043)
{
    // 3293;3293;3293;793E;793E; 
    // (㊓; ㊓; ㊓; 社; 社; ) CIRCLED IDEOGRAPH SOCIETY
    {
        std::array<uint32_t, 1> const source = {{ 0x3293 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x793E }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_044)
{
    // 3294;3294;3294;540D;540D; 
    // (㊔; ㊔; ㊔; 名; 名; ) CIRCLED IDEOGRAPH NAME
    {
        std::array<uint32_t, 1> const source = {{ 0x3294 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x540D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_045)
{
    // 3295;3295;3295;7279;7279; 
    // (㊕; ㊕; ㊕; 特; 特; ) CIRCLED IDEOGRAPH SPECIAL
    {
        std::array<uint32_t, 1> const source = {{ 0x3295 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7279 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_046)
{
    // 3296;3296;3296;8CA1;8CA1; 
    // (㊖; ㊖; ㊖; 財; 財; ) CIRCLED IDEOGRAPH FINANCIAL
    {
        std::array<uint32_t, 1> const source = {{ 0x3296 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x8CA1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_047)
{
    // 3297;3297;3297;795D;795D; 
    // (㊗; ㊗; ㊗; 祝; 祝; ) CIRCLED IDEOGRAPH CONGRATULATION
    {
        std::array<uint32_t, 1> const source = {{ 0x3297 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x795D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_048)
{
    // 3298;3298;3298;52B4;52B4; 
    // (㊘; ㊘; ㊘; 労; 労; ) CIRCLED IDEOGRAPH LABOR
    {
        std::array<uint32_t, 1> const source = {{ 0x3298 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x52B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_049)
{
    // 3299;3299;3299;79D8;79D8; 
    // (㊙; ㊙; ㊙; 秘; 秘; ) CIRCLED IDEOGRAPH SECRET
    {
        std::array<uint32_t, 1> const source = {{ 0x3299 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x79D8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_050)
{
    // 329A;329A;329A;7537;7537; 
    // (㊚; ㊚; ㊚; 男; 男; ) CIRCLED IDEOGRAPH MALE
    {
        std::array<uint32_t, 1> const source = {{ 0x329A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7537 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_051)
{
    // 329B;329B;329B;5973;5973; 
    // (㊛; ㊛; ㊛; 女; 女; ) CIRCLED IDEOGRAPH FEMALE
    {
        std::array<uint32_t, 1> const source = {{ 0x329B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5973 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_052)
{
    // 329C;329C;329C;9069;9069; 
    // (㊜; ㊜; ㊜; 適; 適; ) CIRCLED IDEOGRAPH SUITABLE
    {
        std::array<uint32_t, 1> const source = {{ 0x329C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x9069 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_053)
{
    // 329D;329D;329D;512A;512A; 
    // (㊝; ㊝; ㊝; 優; 優; ) CIRCLED IDEOGRAPH EXCELLENT
    {
        std::array<uint32_t, 1> const source = {{ 0x329D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x512A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_054)
{
    // 329E;329E;329E;5370;5370; 
    // (㊞; ㊞; ㊞; 印; 印; ) CIRCLED IDEOGRAPH PRINT
    {
        std::array<uint32_t, 1> const source = {{ 0x329E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5370 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_055)
{
    // 329F;329F;329F;6CE8;6CE8; 
    // (㊟; ㊟; ㊟; 注; 注; ) CIRCLED IDEOGRAPH ATTENTION
    {
        std::array<uint32_t, 1> const source = {{ 0x329F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6CE8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_056)
{
    // 32A0;32A0;32A0;9805;9805; 
    // (㊠; ㊠; ㊠; 項; 項; ) CIRCLED IDEOGRAPH ITEM
    {
        std::array<uint32_t, 1> const source = {{ 0x32A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x9805 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_057)
{
    // 32A1;32A1;32A1;4F11;4F11; 
    // (㊡; ㊡; ㊡; 休; 休; ) CIRCLED IDEOGRAPH REST
    {
        std::array<uint32_t, 1> const source = {{ 0x32A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4F11 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_058)
{
    // 32A2;32A2;32A2;5199;5199; 
    // (㊢; ㊢; ㊢; 写; 写; ) CIRCLED IDEOGRAPH COPY
    {
        std::array<uint32_t, 1> const source = {{ 0x32A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5199 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_059)
{
    // 32A3;32A3;32A3;6B63;6B63; 
    // (㊣; ㊣; ㊣; 正; 正; ) CIRCLED IDEOGRAPH CORRECT
    {
        std::array<uint32_t, 1> const source = {{ 0x32A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6B63 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_060)
{
    // 32A4;32A4;32A4;4E0A;4E0A; 
    // (㊤; ㊤; ㊤; 上; 上; ) CIRCLED IDEOGRAPH HIGH
    {
        std::array<uint32_t, 1> const source = {{ 0x32A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E0A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_061)
{
    // 32A5;32A5;32A5;4E2D;4E2D; 
    // (㊥; ㊥; ㊥; 中; 中; ) CIRCLED IDEOGRAPH CENTRE
    {
        std::array<uint32_t, 1> const source = {{ 0x32A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E2D }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_062)
{
    // 32A6;32A6;32A6;4E0B;4E0B; 
    // (㊦; ㊦; ㊦; 下; 下; ) CIRCLED IDEOGRAPH LOW
    {
        std::array<uint32_t, 1> const source = {{ 0x32A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4E0B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_063)
{
    // 32A7;32A7;32A7;5DE6;5DE6; 
    // (㊧; ㊧; ㊧; 左; 左; ) CIRCLED IDEOGRAPH LEFT
    {
        std::array<uint32_t, 1> const source = {{ 0x32A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5DE6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_064)
{
    // 32A8;32A8;32A8;53F3;53F3; 
    // (㊨; ㊨; ㊨; 右; 右; ) CIRCLED IDEOGRAPH RIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x32A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x53F3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_065)
{
    // 32A9;32A9;32A9;533B;533B; 
    // (㊩; ㊩; ㊩; 医; 医; ) CIRCLED IDEOGRAPH MEDICINE
    {
        std::array<uint32_t, 1> const source = {{ 0x32A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x533B }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_066)
{
    // 32AA;32AA;32AA;5B97;5B97; 
    // (㊪; ㊪; ㊪; 宗; 宗; ) CIRCLED IDEOGRAPH RELIGION
    {
        std::array<uint32_t, 1> const source = {{ 0x32AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5B97 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_067)
{
    // 32AB;32AB;32AB;5B66;5B66; 
    // (㊫; ㊫; ㊫; 学; 学; ) CIRCLED IDEOGRAPH STUDY
    {
        std::array<uint32_t, 1> const source = {{ 0x32AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5B66 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_068)
{
    // 32AC;32AC;32AC;76E3;76E3; 
    // (㊬; ㊬; ㊬; 監; 監; ) CIRCLED IDEOGRAPH SUPERVISE
    {
        std::array<uint32_t, 1> const source = {{ 0x32AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x76E3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_069)
{
    // 32AD;32AD;32AD;4F01;4F01; 
    // (㊭; ㊭; ㊭; 企; 企; ) CIRCLED IDEOGRAPH ENTERPRISE
    {
        std::array<uint32_t, 1> const source = {{ 0x32AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4F01 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_070)
{
    // 32AE;32AE;32AE;8CC7;8CC7; 
    // (㊮; ㊮; ㊮; 資; 資; ) CIRCLED IDEOGRAPH RESOURCE
    {
        std::array<uint32_t, 1> const source = {{ 0x32AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x8CC7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_071)
{
    // 32AF;32AF;32AF;5354;5354; 
    // (㊯; ㊯; ㊯; 協; 協; ) CIRCLED IDEOGRAPH ALLIANCE
    {
        std::array<uint32_t, 1> const source = {{ 0x32AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5354 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_072)
{
    // 32B0;32B0;32B0;591C;591C; 
    // (㊰; ㊰; ㊰; 夜; 夜; ) CIRCLED IDEOGRAPH NIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x32B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x591C }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_073)
{
    // 32B1;32B1;32B1;0033 0036;0033 0036; 
    // (㊱; ㊱; ㊱; 36; 36; ) CIRCLED NUMBER THIRTY SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x32B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0033, 0x0036 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_074)
{
    // 32B2;32B2;32B2;0033 0037;0033 0037; 
    // (㊲; ㊲; ㊲; 37; 37; ) CIRCLED NUMBER THIRTY SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x32B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0033, 0x0037 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_075)
{
    // 32B3;32B3;32B3;0033 0038;0033 0038; 
    // (㊳; ㊳; ㊳; 38; 38; ) CIRCLED NUMBER THIRTY EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x32B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0033, 0x0038 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_076)
{
    // 32B4;32B4;32B4;0033 0039;0033 0039; 
    // (㊴; ㊴; ㊴; 39; 39; ) CIRCLED NUMBER THIRTY NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x32B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0033, 0x0039 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_077)
{
    // 32B5;32B5;32B5;0034 0030;0034 0030; 
    // (㊵; ㊵; ㊵; 40; 40; ) CIRCLED NUMBER FORTY
    {
        std::array<uint32_t, 1> const source = {{ 0x32B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0030 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_078)
{
    // 32B6;32B6;32B6;0034 0031;0034 0031; 
    // (㊶; ㊶; ㊶; 41; 41; ) CIRCLED NUMBER FORTY ONE
    {
        std::array<uint32_t, 1> const source = {{ 0x32B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0031 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_079)
{
    // 32B7;32B7;32B7;0034 0032;0034 0032; 
    // (㊷; ㊷; ㊷; 42; 42; ) CIRCLED NUMBER FORTY TWO
    {
        std::array<uint32_t, 1> const source = {{ 0x32B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0032 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_080)
{
    // 32B8;32B8;32B8;0034 0033;0034 0033; 
    // (㊸; ㊸; ㊸; 43; 43; ) CIRCLED NUMBER FORTY THREE
    {
        std::array<uint32_t, 1> const source = {{ 0x32B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0033 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_081)
{
    // 32B9;32B9;32B9;0034 0034;0034 0034; 
    // (㊹; ㊹; ㊹; 44; 44; ) CIRCLED NUMBER FORTY FOUR
    {
        std::array<uint32_t, 1> const source = {{ 0x32B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0034 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_082)
{
    // 32BA;32BA;32BA;0034 0035;0034 0035; 
    // (㊺; ㊺; ㊺; 45; 45; ) CIRCLED NUMBER FORTY FIVE
    {
        std::array<uint32_t, 1> const source = {{ 0x32BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0035 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_083)
{
    // 32BB;32BB;32BB;0034 0036;0034 0036; 
    // (㊻; ㊻; ㊻; 46; 46; ) CIRCLED NUMBER FORTY SIX
    {
        std::array<uint32_t, 1> const source = {{ 0x32BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0036 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_084)
{
    // 32BC;32BC;32BC;0034 0037;0034 0037; 
    // (㊼; ㊼; ㊼; 47; 47; ) CIRCLED NUMBER FORTY SEVEN
    {
        std::array<uint32_t, 1> const source = {{ 0x32BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0037 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_085)
{
    // 32BD;32BD;32BD;0034 0038;0034 0038; 
    // (㊽; ㊽; ㊽; 48; 48; ) CIRCLED NUMBER FORTY EIGHT
    {
        std::array<uint32_t, 1> const source = {{ 0x32BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0038 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_086)
{
    // 32BE;32BE;32BE;0034 0039;0034 0039; 
    // (㊾; ㊾; ㊾; 49; 49; ) CIRCLED NUMBER FORTY NINE
    {
        std::array<uint32_t, 1> const source = {{ 0x32BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x0039 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_087)
{
    // 32BF;32BF;32BF;0035 0030;0035 0030; 
    // (㊿; ㊿; ㊿; 50; 50; ) CIRCLED NUMBER FIFTY
    {
        std::array<uint32_t, 1> const source = {{ 0x32BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0035, 0x0030 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_088)
{
    // 32C0;32C0;32C0;0031 6708;0031 6708; 
    // (㋀; ㋀; ㋀; 1月; 1月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY
    {
        std::array<uint32_t, 1> const source = {{ 0x32C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0031, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_089)
{
    // 32C1;32C1;32C1;0032 6708;0032 6708; 
    // (㋁; ㋁; ㋁; 2月; 2月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY
    {
        std::array<uint32_t, 1> const source = {{ 0x32C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0032, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_090)
{
    // 32C2;32C2;32C2;0033 6708;0033 6708; 
    // (㋂; ㋂; ㋂; 3月; 3月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH
    {
        std::array<uint32_t, 1> const source = {{ 0x32C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0033, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_091)
{
    // 32C3;32C3;32C3;0034 6708;0034 6708; 
    // (㋃; ㋃; ㋃; 4月; 4月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL
    {
        std::array<uint32_t, 1> const source = {{ 0x32C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0034, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_092)
{
    // 32C4;32C4;32C4;0035 6708;0035 6708; 
    // (㋄; ㋄; ㋄; 5月; 5月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY
    {
        std::array<uint32_t, 1> const source = {{ 0x32C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0035, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_093)
{
    // 32C5;32C5;32C5;0036 6708;0036 6708; 
    // (㋅; ㋅; ㋅; 6月; 6月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE
    {
        std::array<uint32_t, 1> const source = {{ 0x32C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0036, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_094)
{
    // 32C6;32C6;32C6;0037 6708;0037 6708; 
    // (㋆; ㋆; ㋆; 7月; 7月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY
    {
        std::array<uint32_t, 1> const source = {{ 0x32C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0037, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_095)
{
    // 32C7;32C7;32C7;0038 6708;0038 6708; 
    // (㋇; ㋇; ㋇; 8月; 8月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST
    {
        std::array<uint32_t, 1> const source = {{ 0x32C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0038, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_096)
{
    // 32C8;32C8;32C8;0039 6708;0039 6708; 
    // (㋈; ㋈; ㋈; 9月; 9月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER
    {
        std::array<uint32_t, 1> const source = {{ 0x32C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0039, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_097)
{
    // 32C9;32C9;32C9;0031 0030 6708;0031 0030 6708; 
    // (㋉; ㋉; ㋉; 10月; 10月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR OCTOBER
    {
        std::array<uint32_t, 1> const source = {{ 0x32C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0031, 0x0030, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_098)
{
    // 32CA;32CA;32CA;0031 0031 6708;0031 0031 6708; 
    // (㋊; ㋊; ㋊; 11月; 11月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR NOVEMBER
    {
        std::array<uint32_t, 1> const source = {{ 0x32CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0031, 0x0031, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_099)
{
    // 32CB;32CB;32CB;0031 0032 6708;0031 0032 6708; 
    // (㋋; ㋋; ㋋; 12月; 12月; ) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DECEMBER
    {
        std::array<uint32_t, 1> const source = {{ 0x32CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0031, 0x0032, 0x6708 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_100)
{
    // 32CC;32CC;32CC;0048 0067;0048 0067; 
    // (㋌; ㋌; ㋌; Hg; Hg; ) SQUARE HG
    {
        std::array<uint32_t, 1> const source = {{ 0x32CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0048, 0x0067 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_101)
{
    // 32CD;32CD;32CD;0065 0072 0067;0065 0072 0067; 
    // (㋍; ㋍; ㋍; erg; erg; ) SQUARE ERG
    {
        std::array<uint32_t, 1> const source = {{ 0x32CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x0065, 0x0072, 0x0067 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_102)
{
    // 32CE;32CE;32CE;0065 0056;0065 0056; 
    // (㋎; ㋎; ㋎; eV; eV; ) SQUARE EV
    {
        std::array<uint32_t, 1> const source = {{ 0x32CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x0065, 0x0056 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_103)
{
    // 32CF;32CF;32CF;004C 0054 0044;004C 0054 0044; 
    // (㋏; ㋏; ㋏; LTD; LTD; ) LIMITED LIABILITY SIGN
    {
        std::array<uint32_t, 1> const source = {{ 0x32CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x004C, 0x0054, 0x0044 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_104)
{
    // 32D0;32D0;32D0;30A2;30A2; 
    // (㋐; ㋐; ㋐; ア; ア; ) CIRCLED KATAKANA A
    {
        std::array<uint32_t, 1> const source = {{ 0x32D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30A2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_105)
{
    // 32D1;32D1;32D1;30A4;30A4; 
    // (㋑; ㋑; ㋑; イ; イ; ) CIRCLED KATAKANA I
    {
        std::array<uint32_t, 1> const source = {{ 0x32D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30A4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_106)
{
    // 32D2;32D2;32D2;30A6;30A6; 
    // (㋒; ㋒; ㋒; ウ; ウ; ) CIRCLED KATAKANA U
    {
        std::array<uint32_t, 1> const source = {{ 0x32D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30A6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_107)
{
    // 32D3;32D3;32D3;30A8;30A8; 
    // (㋓; ㋓; ㋓; エ; エ; ) CIRCLED KATAKANA E
    {
        std::array<uint32_t, 1> const source = {{ 0x32D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_108)
{
    // 32D4;32D4;32D4;30AA;30AA; 
    // (㋔; ㋔; ㋔; オ; オ; ) CIRCLED KATAKANA O
    {
        std::array<uint32_t, 1> const source = {{ 0x32D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_109)
{
    // 32D5;32D5;32D5;30AB;30AB; 
    // (㋕; ㋕; ㋕; カ; カ; ) CIRCLED KATAKANA KA
    {
        std::array<uint32_t, 1> const source = {{ 0x32D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_110)
{
    // 32D6;32D6;32D6;30AD;30AD; 
    // (㋖; ㋖; ㋖; キ; キ; ) CIRCLED KATAKANA KI
    {
        std::array<uint32_t, 1> const source = {{ 0x32D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_111)
{
    // 32D7;32D7;32D7;30AF;30AF; 
    // (㋗; ㋗; ㋗; ク; ク; ) CIRCLED KATAKANA KU
    {
        std::array<uint32_t, 1> const source = {{ 0x32D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_112)
{
    // 32D8;32D8;32D8;30B1;30B1; 
    // (㋘; ㋘; ㋘; ケ; ケ; ) CIRCLED KATAKANA KE
    {
        std::array<uint32_t, 1> const source = {{ 0x32D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_113)
{
    // 32D9;32D9;32D9;30B3;30B3; 
    // (㋙; ㋙; ㋙; コ; コ; ) CIRCLED KATAKANA KO
    {
        std::array<uint32_t, 1> const source = {{ 0x32D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_114)
{
    // 32DA;32DA;32DA;30B5;30B5; 
    // (㋚; ㋚; ㋚; サ; サ; ) CIRCLED KATAKANA SA
    {
        std::array<uint32_t, 1> const source = {{ 0x32DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_115)
{
    // 32DB;32DB;32DB;30B7;30B7; 
    // (㋛; ㋛; ㋛; シ; シ; ) CIRCLED KATAKANA SI
    {
        std::array<uint32_t, 1> const source = {{ 0x32DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_116)
{
    // 32DC;32DC;32DC;30B9;30B9; 
    // (㋜; ㋜; ㋜; ス; ス; ) CIRCLED KATAKANA SU
    {
        std::array<uint32_t, 1> const source = {{ 0x32DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_117)
{
    // 32DD;32DD;32DD;30BB;30BB; 
    // (㋝; ㋝; ㋝; セ; セ; ) CIRCLED KATAKANA SE
    {
        std::array<uint32_t, 1> const source = {{ 0x32DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_118)
{
    // 32DE;32DE;32DE;30BD;30BD; 
    // (㋞; ㋞; ㋞; ソ; ソ; ) CIRCLED KATAKANA SO
    {
        std::array<uint32_t, 1> const source = {{ 0x32DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_119)
{
    // 32DF;32DF;32DF;30BF;30BF; 
    // (㋟; ㋟; ㋟; タ; タ; ) CIRCLED KATAKANA TA
    {
        std::array<uint32_t, 1> const source = {{ 0x32DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_120)
{
    // 32E0;32E0;32E0;30C1;30C1; 
    // (㋠; ㋠; ㋠; チ; チ; ) CIRCLED KATAKANA TI
    {
        std::array<uint32_t, 1> const source = {{ 0x32E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_121)
{
    // 32E1;32E1;32E1;30C4;30C4; 
    // (㋡; ㋡; ㋡; ツ; ツ; ) CIRCLED KATAKANA TU
    {
        std::array<uint32_t, 1> const source = {{ 0x32E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30C4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_122)
{
    // 32E2;32E2;32E2;30C6;30C6; 
    // (㋢; ㋢; ㋢; テ; テ; ) CIRCLED KATAKANA TE
    {
        std::array<uint32_t, 1> const source = {{ 0x32E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30C6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_123)
{
    // 32E3;32E3;32E3;30C8;30C8; 
    // (㋣; ㋣; ㋣; ト; ト; ) CIRCLED KATAKANA TO
    {
        std::array<uint32_t, 1> const source = {{ 0x32E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_124)
{
    // 32E4;32E4;32E4;30CA;30CA; 
    // (㋤; ㋤; ㋤; ナ; ナ; ) CIRCLED KATAKANA NA
    {
        std::array<uint32_t, 1> const source = {{ 0x32E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_125)
{
    // 32E5;32E5;32E5;30CB;30CB; 
    // (㋥; ㋥; ㋥; ニ; ニ; ) CIRCLED KATAKANA NI
    {
        std::array<uint32_t, 1> const source = {{ 0x32E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_126)
{
    // 32E6;32E6;32E6;30CC;30CC; 
    // (㋦; ㋦; ㋦; ヌ; ヌ; ) CIRCLED KATAKANA NU
    {
        std::array<uint32_t, 1> const source = {{ 0x32E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_127)
{
    // 32E7;32E7;32E7;30CD;30CD; 
    // (㋧; ㋧; ㋧; ネ; ネ; ) CIRCLED KATAKANA NE
    {
        std::array<uint32_t, 1> const source = {{ 0x32E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_128)
{
    // 32E8;32E8;32E8;30CE;30CE; 
    // (㋨; ㋨; ㋨; ノ; ノ; ) CIRCLED KATAKANA NO
    {
        std::array<uint32_t, 1> const source = {{ 0x32E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_129)
{
    // 32E9;32E9;32E9;30CF;30CF; 
    // (㋩; ㋩; ㋩; ハ; ハ; ) CIRCLED KATAKANA HA
    {
        std::array<uint32_t, 1> const source = {{ 0x32E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30CF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_130)
{
    // 32EA;32EA;32EA;30D2;30D2; 
    // (㋪; ㋪; ㋪; ヒ; ヒ; ) CIRCLED KATAKANA HI
    {
        std::array<uint32_t, 1> const source = {{ 0x32EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30D2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_131)
{
    // 32EB;32EB;32EB;30D5;30D5; 
    // (㋫; ㋫; ㋫; フ; フ; ) CIRCLED KATAKANA HU
    {
        std::array<uint32_t, 1> const source = {{ 0x32EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30D5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_132)
{
    // 32EC;32EC;32EC;30D8;30D8; 
    // (㋬; ㋬; ㋬; ヘ; ヘ; ) CIRCLED KATAKANA HE
    {
        std::array<uint32_t, 1> const source = {{ 0x32EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30D8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_133)
{
    // 32ED;32ED;32ED;30DB;30DB; 
    // (㋭; ㋭; ㋭; ホ; ホ; ) CIRCLED KATAKANA HO
    {
        std::array<uint32_t, 1> const source = {{ 0x32ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30DB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_134)
{
    // 32EE;32EE;32EE;30DE;30DE; 
    // (㋮; ㋮; ㋮; マ; マ; ) CIRCLED KATAKANA MA
    {
        std::array<uint32_t, 1> const source = {{ 0x32EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30DE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_135)
{
    // 32EF;32EF;32EF;30DF;30DF; 
    // (㋯; ㋯; ㋯; ミ; ミ; ) CIRCLED KATAKANA MI
    {
        std::array<uint32_t, 1> const source = {{ 0x32EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30DF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_136)
{
    // 32F0;32F0;32F0;30E0;30E0; 
    // (㋰; ㋰; ㋰; ム; ム; ) CIRCLED KATAKANA MU
    {
        std::array<uint32_t, 1> const source = {{ 0x32F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_137)
{
    // 32F1;32F1;32F1;30E1;30E1; 
    // (㋱; ㋱; ㋱; メ; メ; ) CIRCLED KATAKANA ME
    {
        std::array<uint32_t, 1> const source = {{ 0x32F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_138)
{
    // 32F2;32F2;32F2;30E2;30E2; 
    // (㋲; ㋲; ㋲; モ; モ; ) CIRCLED KATAKANA MO
    {
        std::array<uint32_t, 1> const source = {{ 0x32F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_139)
{
    // 32F3;32F3;32F3;30E4;30E4; 
    // (㋳; ㋳; ㋳; ヤ; ヤ; ) CIRCLED KATAKANA YA
    {
        std::array<uint32_t, 1> const source = {{ 0x32F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_140)
{
    // 32F4;32F4;32F4;30E6;30E6; 
    // (㋴; ㋴; ㋴; ユ; ユ; ) CIRCLED KATAKANA YU
    {
        std::array<uint32_t, 1> const source = {{ 0x32F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_141)
{
    // 32F5;32F5;32F5;30E8;30E8; 
    // (㋵; ㋵; ㋵; ヨ; ヨ; ) CIRCLED KATAKANA YO
    {
        std::array<uint32_t, 1> const source = {{ 0x32F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_142)
{
    // 32F6;32F6;32F6;30E9;30E9; 
    // (㋶; ㋶; ㋶; ラ; ラ; ) CIRCLED KATAKANA RA
    {
        std::array<uint32_t, 1> const source = {{ 0x32F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30E9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_143)
{
    // 32F7;32F7;32F7;30EA;30EA; 
    // (㋷; ㋷; ㋷; リ; リ; ) CIRCLED KATAKANA RI
    {
        std::array<uint32_t, 1> const source = {{ 0x32F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30EA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_144)
{
    // 32F8;32F8;32F8;30EB;30EB; 
    // (㋸; ㋸; ㋸; ル; ル; ) CIRCLED KATAKANA RU
    {
        std::array<uint32_t, 1> const source = {{ 0x32F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_145)
{
    // 32F9;32F9;32F9;30EC;30EC; 
    // (㋹; ㋹; ㋹; レ; レ; ) CIRCLED KATAKANA RE
    {
        std::array<uint32_t, 1> const source = {{ 0x32F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30EC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_146)
{
    // 32FA;32FA;32FA;30ED;30ED; 
    // (㋺; ㋺; ㋺; ロ; ロ; ) CIRCLED KATAKANA RO
    {
        std::array<uint32_t, 1> const source = {{ 0x32FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30ED }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_147)
{
    // 32FB;32FB;32FB;30EF;30EF; 
    // (㋻; ㋻; ㋻; ワ; ワ; ) CIRCLED KATAKANA WA
    {
        std::array<uint32_t, 1> const source = {{ 0x32FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30EF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_148)
{
    // 32FC;32FC;32FC;30F0;30F0; 
    // (㋼; ㋼; ㋼; ヰ; ヰ; ) CIRCLED KATAKANA WI
    {
        std::array<uint32_t, 1> const source = {{ 0x32FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30F0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_149)
{
    // 32FD;32FD;32FD;30F1;30F1; 
    // (㋽; ㋽; ㋽; ヱ; ヱ; ) CIRCLED KATAKANA WE
    {
        std::array<uint32_t, 1> const source = {{ 0x32FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30F1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_150)
{
    // 32FE;32FE;32FE;30F2;30F2; 
    // (㋾; ㋾; ㋾; ヲ; ヲ; ) CIRCLED KATAKANA WO
    {
        std::array<uint32_t, 1> const source = {{ 0x32FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x30F2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_151)
{
    // 3300;3300;3300;30A2 30D1 30FC 30C8;30A2 30CF 309A 30FC 30C8; 
    // (㌀; ㌀; ㌀; アパート; アハ◌゚ート; ) SQUARE APAATO
    {
        std::array<uint32_t, 1> const source = {{ 0x3300 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30A2, 0x30CF, 0x309A, 0x30FC, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_152)
{
    // 3301;3301;3301;30A2 30EB 30D5 30A1;30A2 30EB 30D5 30A1; 
    // (㌁; ㌁; ㌁; アルファ; アルファ; ) SQUARE ARUHUA
    {
        std::array<uint32_t, 1> const source = {{ 0x3301 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30A2, 0x30EB, 0x30D5, 0x30A1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_153)
{
    // 3302;3302;3302;30A2 30F3 30DA 30A2;30A2 30F3 30D8 309A 30A2; 
    // (㌂; ㌂; ㌂; アンペア; アンヘ◌゚ア; ) SQUARE ANPEA
    {
        std::array<uint32_t, 1> const source = {{ 0x3302 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30A2, 0x30F3, 0x30D8, 0x309A, 0x30A2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_154)
{
    // 3303;3303;3303;30A2 30FC 30EB;30A2 30FC 30EB; 
    // (㌃; ㌃; ㌃; アール; アール; ) SQUARE AARU
    {
        std::array<uint32_t, 1> const source = {{ 0x3303 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30A2, 0x30FC, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_155)
{
    // 3304;3304;3304;30A4 30CB 30F3 30B0;30A4 30CB 30F3 30AF 3099; 
    // (㌄; ㌄; ㌄; イニング; イニンク◌゙; ) SQUARE ININGU
    {
        std::array<uint32_t, 1> const source = {{ 0x3304 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30A4, 0x30CB, 0x30F3, 0x30AF, 0x3099 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_156)
{
    // 3305;3305;3305;30A4 30F3 30C1;30A4 30F3 30C1; 
    // (㌅; ㌅; ㌅; インチ; インチ; ) SQUARE INTI
    {
        std::array<uint32_t, 1> const source = {{ 0x3305 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30A4, 0x30F3, 0x30C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_157)
{
    // 3306;3306;3306;30A6 30A9 30F3;30A6 30A9 30F3; 
    // (㌆; ㌆; ㌆; ウォン; ウォン; ) SQUARE UON
    {
        std::array<uint32_t, 1> const source = {{ 0x3306 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30A6, 0x30A9, 0x30F3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_158)
{
    // 3307;3307;3307;30A8 30B9 30AF 30FC 30C9;30A8 30B9 30AF 30FC 30C8 3099; 
    // (㌇; ㌇; ㌇; エスクード; エスクート◌゙; ) SQUARE ESUKUUDO
    {
        std::array<uint32_t, 1> const source = {{ 0x3307 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30A8, 0x30B9, 0x30AF, 0x30FC, 0x30C8, 0x3099 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_159)
{
    // 3308;3308;3308;30A8 30FC 30AB 30FC;30A8 30FC 30AB 30FC; 
    // (㌈; ㌈; ㌈; エーカー; エーカー; ) SQUARE EEKAA
    {
        std::array<uint32_t, 1> const source = {{ 0x3308 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30A8, 0x30FC, 0x30AB, 0x30FC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_160)
{
    // 3309;3309;3309;30AA 30F3 30B9;30AA 30F3 30B9; 
    // (㌉; ㌉; ㌉; オンス; オンス; ) SQUARE ONSU
    {
        std::array<uint32_t, 1> const source = {{ 0x3309 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30AA, 0x30F3, 0x30B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_161)
{
    // 330A;330A;330A;30AA 30FC 30E0;30AA 30FC 30E0; 
    // (㌊; ㌊; ㌊; オーム; オーム; ) SQUARE OOMU
    {
        std::array<uint32_t, 1> const source = {{ 0x330A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30AA, 0x30FC, 0x30E0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_162)
{
    // 330B;330B;330B;30AB 30A4 30EA;30AB 30A4 30EA; 
    // (㌋; ㌋; ㌋; カイリ; カイリ; ) SQUARE KAIRI
    {
        std::array<uint32_t, 1> const source = {{ 0x330B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30AB, 0x30A4, 0x30EA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_163)
{
    // 330C;330C;330C;30AB 30E9 30C3 30C8;30AB 30E9 30C3 30C8; 
    // (㌌; ㌌; ㌌; カラット; カラット; ) SQUARE KARATTO
    {
        std::array<uint32_t, 1> const source = {{ 0x330C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AB, 0x30E9, 0x30C3, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_164)
{
    // 330D;330D;330D;30AB 30ED 30EA 30FC;30AB 30ED 30EA 30FC; 
    // (㌍; ㌍; ㌍; カロリー; カロリー; ) SQUARE KARORII
    {
        std::array<uint32_t, 1> const source = {{ 0x330D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AB, 0x30ED, 0x30EA, 0x30FC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_165)
{
    // 330E;330E;330E;30AC 30ED 30F3;30AB 3099 30ED 30F3; 
    // (㌎; ㌎; ㌎; ガロン; カ◌゙ロン; ) SQUARE GARON
    {
        std::array<uint32_t, 1> const source = {{ 0x330E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AB, 0x3099, 0x30ED, 0x30F3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_166)
{
    // 330F;330F;330F;30AC 30F3 30DE;30AB 3099 30F3 30DE; 
    // (㌏; ㌏; ㌏; ガンマ; カ◌゙ンマ; ) SQUARE GANMA
    {
        std::array<uint32_t, 1> const source = {{ 0x330F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AB, 0x3099, 0x30F3, 0x30DE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_167)
{
    // 3310;3310;3310;30AE 30AC;30AD 3099 30AB 3099; 
    // (㌐; ㌐; ㌐; ギガ; キ◌゙カ◌゙; ) SQUARE GIGA
    {
        std::array<uint32_t, 1> const source = {{ 0x3310 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AD, 0x3099, 0x30AB, 0x3099 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_168)
{
    // 3311;3311;3311;30AE 30CB 30FC;30AD 3099 30CB 30FC; 
    // (㌑; ㌑; ㌑; ギニー; キ◌゙ニー; ) SQUARE GINII
    {
        std::array<uint32_t, 1> const source = {{ 0x3311 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AD, 0x3099, 0x30CB, 0x30FC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_169)
{
    // 3312;3312;3312;30AD 30E5 30EA 30FC;30AD 30E5 30EA 30FC; 
    // (㌒; ㌒; ㌒; キュリー; キュリー; ) SQUARE KYURII
    {
        std::array<uint32_t, 1> const source = {{ 0x3312 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AD, 0x30E5, 0x30EA, 0x30FC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_170)
{
    // 3313;3313;3313;30AE 30EB 30C0 30FC;30AD 3099 30EB 30BF 3099 30FC; 
    // (㌓; ㌓; ㌓; ギルダー; キ◌゙ルタ◌゙ー; ) SQUARE GIRUDAA
    {
        std::array<uint32_t, 1> const source = {{ 0x3313 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30AD, 0x3099, 0x30EB, 0x30BF, 0x3099, 0x30FC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_171)
{
    // 3314;3314;3314;30AD 30ED;30AD 30ED; 
    // (㌔; ㌔; ㌔; キロ; キロ; ) SQUARE KIRO
    {
        std::array<uint32_t, 1> const source = {{ 0x3314 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x30AD, 0x30ED }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_172)
{
    // 3315;3315;3315;30AD 30ED 30B0 30E9 30E0;30AD 30ED 30AF 3099 30E9 30E0; 
    // (㌕; ㌕; ㌕; キログラム; キロク◌゙ラム; ) SQUARE KIROGURAMU
    {
        std::array<uint32_t, 1> const source = {{ 0x3315 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30AD, 0x30ED, 0x30AF, 0x3099, 0x30E9, 0x30E0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_173)
{
    // 3316;3316;3316;30AD 30ED 30E1 30FC 30C8 30EB;30AD 30ED 30E1 30FC 30C8 30EB; 
    // (㌖; ㌖; ㌖; キロメートル; キロメートル; ) SQUARE KIROMEETORU
    {
        std::array<uint32_t, 1> const source = {{ 0x3316 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30AD, 0x30ED, 0x30E1, 0x30FC, 0x30C8, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_174)
{
    // 3317;3317;3317;30AD 30ED 30EF 30C3 30C8;30AD 30ED 30EF 30C3 30C8; 
    // (㌗; ㌗; ㌗; キロワット; キロワット; ) SQUARE KIROWATTO
    {
        std::array<uint32_t, 1> const source = {{ 0x3317 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30AD, 0x30ED, 0x30EF, 0x30C3, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_175)
{
    // 3318;3318;3318;30B0 30E9 30E0;30AF 3099 30E9 30E0; 
    // (㌘; ㌘; ㌘; グラム; ク◌゙ラム; ) SQUARE GURAMU
    {
        std::array<uint32_t, 1> const source = {{ 0x3318 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AF, 0x3099, 0x30E9, 0x30E0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_176)
{
    // 3319;3319;3319;30B0 30E9 30E0 30C8 30F3;30AF 3099 30E9 30E0 30C8 30F3; 
    // (㌙; ㌙; ㌙; グラムトン; ク◌゙ラムトン; ) SQUARE GURAMUTON
    {
        std::array<uint32_t, 1> const source = {{ 0x3319 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30AF, 0x3099, 0x30E9, 0x30E0, 0x30C8, 0x30F3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_177)
{
    // 331A;331A;331A;30AF 30EB 30BC 30A4 30ED;30AF 30EB 30BB 3099 30A4 30ED; 
    // (㌚; ㌚; ㌚; クルゼイロ; クルセ◌゙イロ; ) SQUARE KURUZEIRO
    {
        std::array<uint32_t, 1> const source = {{ 0x331A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30AF, 0x30EB, 0x30BB, 0x3099, 0x30A4, 0x30ED }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_178)
{
    // 331B;331B;331B;30AF 30ED 30FC 30CD;30AF 30ED 30FC 30CD; 
    // (㌛; ㌛; ㌛; クローネ; クローネ; ) SQUARE KUROONE
    {
        std::array<uint32_t, 1> const source = {{ 0x331B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30AF, 0x30ED, 0x30FC, 0x30CD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_179)
{
    // 331C;331C;331C;30B1 30FC 30B9;30B1 30FC 30B9; 
    // (㌜; ㌜; ㌜; ケース; ケース; ) SQUARE KEESU
    {
        std::array<uint32_t, 1> const source = {{ 0x331C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30B1, 0x30FC, 0x30B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_180)
{
    // 331D;331D;331D;30B3 30EB 30CA;30B3 30EB 30CA; 
    // (㌝; ㌝; ㌝; コルナ; コルナ; ) SQUARE KORUNA
    {
        std::array<uint32_t, 1> const source = {{ 0x331D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30B3, 0x30EB, 0x30CA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_181)
{
    // 331E;331E;331E;30B3 30FC 30DD;30B3 30FC 30DB 309A; 
    // (㌞; ㌞; ㌞; コーポ; コーホ◌゚; ) SQUARE KOOPO
    {
        std::array<uint32_t, 1> const source = {{ 0x331E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30B3, 0x30FC, 0x30DB, 0x309A }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_182)
{
    // 331F;331F;331F;30B5 30A4 30AF 30EB;30B5 30A4 30AF 30EB; 
    // (㌟; ㌟; ㌟; サイクル; サイクル; ) SQUARE SAIKURU
    {
        std::array<uint32_t, 1> const source = {{ 0x331F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30B5, 0x30A4, 0x30AF, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_183)
{
    // 3320;3320;3320;30B5 30F3 30C1 30FC 30E0;30B5 30F3 30C1 30FC 30E0; 
    // (㌠; ㌠; ㌠; サンチーム; サンチーム; ) SQUARE SANTIIMU
    {
        std::array<uint32_t, 1> const source = {{ 0x3320 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30B5, 0x30F3, 0x30C1, 0x30FC, 0x30E0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_184)
{
    // 3321;3321;3321;30B7 30EA 30F3 30B0;30B7 30EA 30F3 30AF 3099; 
    // (㌡; ㌡; ㌡; シリング; シリンク◌゙; ) SQUARE SIRINGU
    {
        std::array<uint32_t, 1> const source = {{ 0x3321 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30B7, 0x30EA, 0x30F3, 0x30AF, 0x3099 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_185)
{
    // 3322;3322;3322;30BB 30F3 30C1;30BB 30F3 30C1; 
    // (㌢; ㌢; ㌢; センチ; センチ; ) SQUARE SENTI
    {
        std::array<uint32_t, 1> const source = {{ 0x3322 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30BB, 0x30F3, 0x30C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_186)
{
    // 3323;3323;3323;30BB 30F3 30C8;30BB 30F3 30C8; 
    // (㌣; ㌣; ㌣; セント; セント; ) SQUARE SENTO
    {
        std::array<uint32_t, 1> const source = {{ 0x3323 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30BB, 0x30F3, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_187)
{
    // 3324;3324;3324;30C0 30FC 30B9;30BF 3099 30FC 30B9; 
    // (㌤; ㌤; ㌤; ダース; タ◌゙ース; ) SQUARE DAASU
    {
        std::array<uint32_t, 1> const source = {{ 0x3324 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30BF, 0x3099, 0x30FC, 0x30B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_188)
{
    // 3325;3325;3325;30C7 30B7;30C6 3099 30B7; 
    // (㌥; ㌥; ㌥; デシ; テ◌゙シ; ) SQUARE DESI
    {
        std::array<uint32_t, 1> const source = {{ 0x3325 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30C6, 0x3099, 0x30B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_189)
{
    // 3326;3326;3326;30C9 30EB;30C8 3099 30EB; 
    // (㌦; ㌦; ㌦; ドル; ト◌゙ル; ) SQUARE DORU
    {
        std::array<uint32_t, 1> const source = {{ 0x3326 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30C8, 0x3099, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_190)
{
    // 3327;3327;3327;30C8 30F3;30C8 30F3; 
    // (㌧; ㌧; ㌧; トン; トン; ) SQUARE TON
    {
        std::array<uint32_t, 1> const source = {{ 0x3327 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x30C8, 0x30F3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_191)
{
    // 3328;3328;3328;30CA 30CE;30CA 30CE; 
    // (㌨; ㌨; ㌨; ナノ; ナノ; ) SQUARE NANO
    {
        std::array<uint32_t, 1> const source = {{ 0x3328 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x30CA, 0x30CE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_192)
{
    // 3329;3329;3329;30CE 30C3 30C8;30CE 30C3 30C8; 
    // (㌩; ㌩; ㌩; ノット; ノット; ) SQUARE NOTTO
    {
        std::array<uint32_t, 1> const source = {{ 0x3329 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30CE, 0x30C3, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_193)
{
    // 332A;332A;332A;30CF 30A4 30C4;30CF 30A4 30C4; 
    // (㌪; ㌪; ㌪; ハイツ; ハイツ; ) SQUARE HAITU
    {
        std::array<uint32_t, 1> const source = {{ 0x332A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30CF, 0x30A4, 0x30C4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_194)
{
    // 332B;332B;332B;30D1 30FC 30BB 30F3 30C8;30CF 309A 30FC 30BB 30F3 30C8; 
    // (㌫; ㌫; ㌫; パーセント; ハ◌゚ーセント; ) SQUARE PAASENTO
    {
        std::array<uint32_t, 1> const source = {{ 0x332B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30CF, 0x309A, 0x30FC, 0x30BB, 0x30F3, 0x30C8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_195)
{
    // 332C;332C;332C;30D1 30FC 30C4;30CF 309A 30FC 30C4; 
    // (㌬; ㌬; ㌬; パーツ; ハ◌゚ーツ; ) SQUARE PAATU
    {
        std::array<uint32_t, 1> const source = {{ 0x332C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30CF, 0x309A, 0x30FC, 0x30C4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_196)
{
    // 332D;332D;332D;30D0 30FC 30EC 30EB;30CF 3099 30FC 30EC 30EB; 
    // (㌭; ㌭; ㌭; バーレル; ハ◌゙ーレル; ) SQUARE BAARERU
    {
        std::array<uint32_t, 1> const source = {{ 0x332D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 5> const dest = {{ 0x30CF, 0x3099, 0x30FC, 0x30EC, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_197)
{
    // 332E;332E;332E;30D4 30A2 30B9 30C8 30EB;30D2 309A 30A2 30B9 30C8 30EB; 
    // (㌮; ㌮; ㌮; ピアストル; ヒ◌゚アストル; ) SQUARE PIASUTORU
    {
        std::array<uint32_t, 1> const source = {{ 0x332E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 6> const dest = {{ 0x30D2, 0x309A, 0x30A2, 0x30B9, 0x30C8, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_198)
{
    // 332F;332F;332F;30D4 30AF 30EB;30D2 309A 30AF 30EB; 
    // (㌯; ㌯; ㌯; ピクル; ヒ◌゚クル; ) SQUARE PIKURU
    {
        std::array<uint32_t, 1> const source = {{ 0x332F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 4> const dest = {{ 0x30D2, 0x309A, 0x30AF, 0x30EB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_010_199)
{
    // 3330;3330;3330;30D4 30B3;30D2 309A 30B3; 
    // (㌰; ㌰; ㌰; ピコ; ヒ◌゚コ; ) SQUARE PIKO
    {
        std::array<uint32_t, 1> const source = {{ 0x3330 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x30D2, 0x309A, 0x30B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


