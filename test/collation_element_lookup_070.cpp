// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_070_000)
{
    // 2AE1  ; [*0CC0.0020.0002] 
    // PERPENDICULAR WITH S

    uint32_t const cps[1] = { 0x2ae1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_001)
{
    // 2AE2  ; [*0CC1.0020.0002] 
    // VERTICAL BAR TRIPLE RIGHT TURNSTILE

    uint32_t const cps[1] = { 0x2ae2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_002)
{
    // 2AE3  ; [*0CC2.0020.0002] 
    // DOUBLE VERTICAL BAR LEFT TURNSTILE

    uint32_t const cps[1] = { 0x2ae3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_003)
{
    // 2AE4  ; [*0CC3.0020.0002] 
    // VERTICAL BAR DOUBLE LEFT TURNSTILE

    uint32_t const cps[1] = { 0x2ae4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_004)
{
    // 2AE5  ; [*0CC4.0020.0002] 
    // DOUBLE VERTICAL BAR DOUBLE LEFT TURNSTILE

    uint32_t const cps[1] = { 0x2ae5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_005)
{
    // 2AE6  ; [*0CC5.0020.0002] 
    // LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL

    uint32_t const cps[1] = { 0x2ae6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_006)
{
    // 2AE7  ; [*0CC6.0020.0002] 
    // SHORT DOWN TACK WITH OVERBAR

    uint32_t const cps[1] = { 0x2ae7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_007)
{
    // 2AE8  ; [*0CC7.0020.0002] 
    // SHORT UP TACK WITH UNDERBAR

    uint32_t const cps[1] = { 0x2ae8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_008)
{
    // 2AE9  ; [*0CC8.0020.0002] 
    // SHORT UP TACK ABOVE SHORT DOWN TACK

    uint32_t const cps[1] = { 0x2ae9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_009)
{
    // 2AEA  ; [*0CC9.0020.0002] 
    // DOUBLE DOWN TACK

    uint32_t const cps[1] = { 0x2aea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_010)
{
    // 2AEB  ; [*0CCA.0020.0002] 
    // DOUBLE UP TACK

    uint32_t const cps[1] = { 0x2aeb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_011)
{
    // 2AEC  ; [*0CCB.0020.0002] 
    // DOUBLE STROKE NOT SIGN

    uint32_t const cps[1] = { 0x2aec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xccb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_012)
{
    // 2AED  ; [*0CCC.0020.0002] 
    // REVERSED DOUBLE STROKE NOT SIGN

    uint32_t const cps[1] = { 0x2aed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xccc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_013)
{
    // 2AEE  ; [*0CCD.0020.0002] 
    // DOES NOT DIVIDE WITH REVERSED NEGATION SLASH

    uint32_t const cps[1] = { 0x2aee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xccd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_014)
{
    // 2AEF  ; [*0CCE.0020.0002] 
    // VERTICAL LINE WITH CIRCLE ABOVE

    uint32_t const cps[1] = { 0x2aef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_015)
{
    // 2AF0  ; [*0CCF.0020.0002] 
    // VERTICAL LINE WITH CIRCLE BELOW

    uint32_t const cps[1] = { 0x2af0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xccf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_016)
{
    // 2AF1  ; [*0CD0.0020.0002] 
    // DOWN TACK WITH CIRCLE BELOW

    uint32_t const cps[1] = { 0x2af1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_017)
{
    // 2AF2  ; [*0CD1.0020.0002] 
    // PARALLEL WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2af2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_018)
{
    // 2AF3  ; [*0CD2.0020.0002] 
    // PARALLEL WITH TILDE OPERATOR

    uint32_t const cps[1] = { 0x2af3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_019)
{
    // 2AF4  ; [*0CD3.0020.0002] 
    // TRIPLE VERTICAL BAR BINARY RELATION

    uint32_t const cps[1] = { 0x2af4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_020)
{
    // 2AF5  ; [*0CD4.0020.0002] 
    // TRIPLE VERTICAL BAR WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2af5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_021)
{
    // 2AF6  ; [*0CD5.0020.0002] 
    // TRIPLE COLON OPERATOR

    uint32_t const cps[1] = { 0x2af6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_022)
{
    // 2AF7  ; [*0CD6.0020.0002] 
    // TRIPLE NESTED LESS-THAN

    uint32_t const cps[1] = { 0x2af7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_023)
{
    // 2AF8  ; [*0CD7.0020.0002] 
    // TRIPLE NESTED GREATER-THAN

    uint32_t const cps[1] = { 0x2af8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_024)
{
    // 2AF9  ; [*0CD8.0020.0002] 
    // DOUBLE-LINE SLANTED LESS-THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2af9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_025)
{
    // 2AFA  ; [*0CD9.0020.0002] 
    // DOUBLE-LINE SLANTED GREATER-THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2afa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_026)
{
    // 2AFB  ; [*0CDA.0020.0002] 
    // TRIPLE SOLIDUS BINARY RELATION

    uint32_t const cps[1] = { 0x2afb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_027)
{
    // 2AFC  ; [*0CDB.0020.0002] 
    // LARGE TRIPLE VERTICAL BAR OPERATOR

    uint32_t const cps[1] = { 0x2afc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_028)
{
    // 2AFD  ; [*0CDC.0020.0002] 
    // DOUBLE SOLIDUS OPERATOR

    uint32_t const cps[1] = { 0x2afd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_029)
{
    // 2AFE  ; [*0CDD.0020.0002] 
    // WHITE VERTICAL BAR

    uint32_t const cps[1] = { 0x2afe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_030)
{
    // 2AFF  ; [*0CDE.0020.0002] 
    // N-ARY WHITE VERTICAL BAR

    uint32_t const cps[1] = { 0x2aff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_031)
{
    // 2B00  ; [*0CDF.0020.0002] 
    // NORTH EAST WHITE ARROW

    uint32_t const cps[1] = { 0x2b00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_032)
{
    // 2B01  ; [*0CE0.0020.0002] 
    // NORTH WEST WHITE ARROW

    uint32_t const cps[1] = { 0x2b01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_033)
{
    // 2B02  ; [*0CE1.0020.0002] 
    // SOUTH EAST WHITE ARROW

    uint32_t const cps[1] = { 0x2b02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_034)
{
    // 2B03  ; [*0CE2.0020.0002] 
    // SOUTH WEST WHITE ARROW

    uint32_t const cps[1] = { 0x2b03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_035)
{
    // 2B04  ; [*0CE3.0020.0002] 
    // LEFT RIGHT WHITE ARROW

    uint32_t const cps[1] = { 0x2b04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_036)
{
    // 2B05  ; [*0CE4.0020.0002] 
    // LEFTWARDS BLACK ARROW

    uint32_t const cps[1] = { 0x2b05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_037)
{
    // 2B06  ; [*0CE5.0020.0002] 
    // UPWARDS BLACK ARROW

    uint32_t const cps[1] = { 0x2b06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_038)
{
    // 2B07  ; [*0CE6.0020.0002] 
    // DOWNWARDS BLACK ARROW

    uint32_t const cps[1] = { 0x2b07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_039)
{
    // 2B08  ; [*0CE7.0020.0002] 
    // NORTH EAST BLACK ARROW

    uint32_t const cps[1] = { 0x2b08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_040)
{
    // 2B09  ; [*0CE8.0020.0002] 
    // NORTH WEST BLACK ARROW

    uint32_t const cps[1] = { 0x2b09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_041)
{
    // 2B0A  ; [*0CE9.0020.0002] 
    // SOUTH EAST BLACK ARROW

    uint32_t const cps[1] = { 0x2b0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xce9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_042)
{
    // 2B0B  ; [*0CEA.0020.0002] 
    // SOUTH WEST BLACK ARROW

    uint32_t const cps[1] = { 0x2b0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_043)
{
    // 2B0C  ; [*0CEB.0020.0002] 
    // LEFT RIGHT BLACK ARROW

    uint32_t const cps[1] = { 0x2b0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xceb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_044)
{
    // 2B0D  ; [*0CEC.0020.0002] 
    // UP DOWN BLACK ARROW

    uint32_t const cps[1] = { 0x2b0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_045)
{
    // 2B0E  ; [*0CED.0020.0002] 
    // RIGHTWARDS ARROW WITH TIP DOWNWARDS

    uint32_t const cps[1] = { 0x2b0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xced), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_046)
{
    // 2B0F  ; [*0CEE.0020.0002] 
    // RIGHTWARDS ARROW WITH TIP UPWARDS

    uint32_t const cps[1] = { 0x2b0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_047)
{
    // 2B10  ; [*0CEF.0020.0002] 
    // LEFTWARDS ARROW WITH TIP DOWNWARDS

    uint32_t const cps[1] = { 0x2b10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_048)
{
    // 2B11  ; [*0CF0.0020.0002] 
    // LEFTWARDS ARROW WITH TIP UPWARDS

    uint32_t const cps[1] = { 0x2b11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_049)
{
    // 2B12  ; [*0CF1.0020.0002] 
    // SQUARE WITH TOP HALF BLACK

    uint32_t const cps[1] = { 0x2b12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_050)
{
    // 2B13  ; [*0CF2.0020.0002] 
    // SQUARE WITH BOTTOM HALF BLACK

    uint32_t const cps[1] = { 0x2b13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_051)
{
    // 2B14  ; [*0CF3.0020.0002] 
    // SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK

    uint32_t const cps[1] = { 0x2b14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_052)
{
    // 2B15  ; [*0CF4.0020.0002] 
    // SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK

    uint32_t const cps[1] = { 0x2b15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_053)
{
    // 2B16  ; [*0CF5.0020.0002] 
    // DIAMOND WITH LEFT HALF BLACK

    uint32_t const cps[1] = { 0x2b16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_054)
{
    // 2B17  ; [*0CF6.0020.0002] 
    // DIAMOND WITH RIGHT HALF BLACK

    uint32_t const cps[1] = { 0x2b17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_055)
{
    // 2B18  ; [*0CF7.0020.0002] 
    // DIAMOND WITH TOP HALF BLACK

    uint32_t const cps[1] = { 0x2b18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_056)
{
    // 2B19  ; [*0CF8.0020.0002] 
    // DIAMOND WITH BOTTOM HALF BLACK

    uint32_t const cps[1] = { 0x2b19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_057)
{
    // 2B1A  ; [*0CF9.0020.0002] 
    // DOTTED SQUARE

    uint32_t const cps[1] = { 0x2b1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcf9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_058)
{
    // 2B1B  ; [*0CFA.0020.0002] 
    // BLACK LARGE SQUARE

    uint32_t const cps[1] = { 0x2b1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcfa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_059)
{
    // 2B1C  ; [*0CFB.0020.0002] 
    // WHITE LARGE SQUARE

    uint32_t const cps[1] = { 0x2b1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcfb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_060)
{
    // 2B1D  ; [*0CFC.0020.0002] 
    // BLACK VERY SMALL SQUARE

    uint32_t const cps[1] = { 0x2b1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcfc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_061)
{
    // 2B1E  ; [*0CFD.0020.0002] 
    // WHITE VERY SMALL SQUARE

    uint32_t const cps[1] = { 0x2b1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_062)
{
    // 2B1F  ; [*0CFE.0020.0002] 
    // BLACK PENTAGON

    uint32_t const cps[1] = { 0x2b1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcfe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_063)
{
    // 2B20  ; [*0CFF.0020.0002] 
    // WHITE PENTAGON

    uint32_t const cps[1] = { 0x2b20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_064)
{
    // 2B21  ; [*0D00.0020.0002] 
    // WHITE HEXAGON

    uint32_t const cps[1] = { 0x2b21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_065)
{
    // 2B22  ; [*0D01.0020.0002] 
    // BLACK HEXAGON

    uint32_t const cps[1] = { 0x2b22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_066)
{
    // 2B23  ; [*0D02.0020.0002] 
    // HORIZONTAL BLACK HEXAGON

    uint32_t const cps[1] = { 0x2b23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_067)
{
    // 2B24  ; [*0D03.0020.0002] 
    // BLACK LARGE CIRCLE

    uint32_t const cps[1] = { 0x2b24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_068)
{
    // 2B25  ; [*0D04.0020.0002] 
    // BLACK MEDIUM DIAMOND

    uint32_t const cps[1] = { 0x2b25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_069)
{
    // 2B26  ; [*0D05.0020.0002] 
    // WHITE MEDIUM DIAMOND

    uint32_t const cps[1] = { 0x2b26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_070)
{
    // 2B27  ; [*0D06.0020.0002] 
    // BLACK MEDIUM LOZENGE

    uint32_t const cps[1] = { 0x2b27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_071)
{
    // 2B28  ; [*0D07.0020.0002] 
    // WHITE MEDIUM LOZENGE

    uint32_t const cps[1] = { 0x2b28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_072)
{
    // 2B29  ; [*0D08.0020.0002] 
    // BLACK SMALL DIAMOND

    uint32_t const cps[1] = { 0x2b29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_073)
{
    // 2B2A  ; [*0D09.0020.0002] 
    // BLACK SMALL LOZENGE

    uint32_t const cps[1] = { 0x2b2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_074)
{
    // 2B2B  ; [*0D0A.0020.0002] 
    // WHITE SMALL LOZENGE

    uint32_t const cps[1] = { 0x2b2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_075)
{
    // 2B2C  ; [*0D0B.0020.0002] 
    // BLACK HORIZONTAL ELLIPSE

    uint32_t const cps[1] = { 0x2b2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_076)
{
    // 2B2D  ; [*0D0C.0020.0002] 
    // WHITE HORIZONTAL ELLIPSE

    uint32_t const cps[1] = { 0x2b2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_077)
{
    // 2B2E  ; [*0D0D.0020.0002] 
    // BLACK VERTICAL ELLIPSE

    uint32_t const cps[1] = { 0x2b2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_078)
{
    // 2B2F  ; [*0D0E.0020.0002] 
    // WHITE VERTICAL ELLIPSE

    uint32_t const cps[1] = { 0x2b2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_079)
{
    // 2B30  ; [*0D0F.0020.0002] 
    // LEFT ARROW WITH SMALL CIRCLE

    uint32_t const cps[1] = { 0x2b30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_080)
{
    // 2B31  ; [*0D10.0020.0002] 
    // THREE LEFTWARDS ARROWS

    uint32_t const cps[1] = { 0x2b31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_081)
{
    // 2B32  ; [*0D11.0020.0002] 
    // LEFT ARROW WITH CIRCLED PLUS

    uint32_t const cps[1] = { 0x2b32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_082)
{
    // 2B33  ; [*0D12.0020.0002] 
    // LONG LEFTWARDS SQUIGGLE ARROW

    uint32_t const cps[1] = { 0x2b33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_083)
{
    // 2B34  ; [*0D13.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_084)
{
    // 2B35  ; [*0D14.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_085)
{
    // 2B36  ; [*0D15.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW FROM BAR

    uint32_t const cps[1] = { 0x2b36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_086)
{
    // 2B37  ; [*0D16.0020.0002] 
    // LEFTWARDS TWO-HEADED TRIPLE DASH ARROW

    uint32_t const cps[1] = { 0x2b37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_087)
{
    // 2B38  ; [*0D17.0020.0002] 
    // LEFTWARDS ARROW WITH DOTTED STEM

    uint32_t const cps[1] = { 0x2b38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_088)
{
    // 2B39  ; [*0D18.0020.0002] 
    // LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_089)
{
    // 2B3A  ; [*0D19.0020.0002] 
    // LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_090)
{
    // 2B3B  ; [*0D1A.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH TAIL

    uint32_t const cps[1] = { 0x2b3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_091)
{
    // 2B3C  ; [*0D1B.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_092)
{
    // 2B3D  ; [*0D1C.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2b3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_093)
{
    // 2B3E  ; [*0D1D.0020.0002] 
    // LEFTWARDS ARROW THROUGH X

    uint32_t const cps[1] = { 0x2b3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_094)
{
    // 2B3F  ; [*0D1E.0020.0002] 
    // WAVE ARROW POINTING DIRECTLY LEFT

    uint32_t const cps[1] = { 0x2b3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_095)
{
    // 2B40  ; [*0D1F.0020.0002] 
    // EQUALS SIGN ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2b40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_096)
{
    // 2B41  ; [*0D20.0020.0002] 
    // REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2b41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_097)
{
    // 2B42  ; [*0D21.0020.0002] 
    // LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2b42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_098)
{
    // 2B43  ; [*0D22.0020.0002] 
    // RIGHTWARDS ARROW THROUGH GREATER-THAN

    uint32_t const cps[1] = { 0x2b43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_099)
{
    // 2B44  ; [*0D23.0020.0002] 
    // RIGHTWARDS ARROW THROUGH SUPERSET

    uint32_t const cps[1] = { 0x2b44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_100)
{
    // 2B45  ; [*0D24.0020.0002] 
    // LEFTWARDS QUADRUPLE ARROW

    uint32_t const cps[1] = { 0x2b45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_101)
{
    // 2B46  ; [*0D25.0020.0002] 
    // RIGHTWARDS QUADRUPLE ARROW

    uint32_t const cps[1] = { 0x2b46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_102)
{
    // 2B47  ; [*0D26.0020.0002] 
    // REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2b47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_103)
{
    // 2B48  ; [*0D27.0020.0002] 
    // RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2b48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_104)
{
    // 2B49  ; [*0D28.0020.0002] 
    // TILDE OPERATOR ABOVE LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2b49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_105)
{
    // 2B4A  ; [*0D29.0020.0002] 
    // LEFTWARDS ARROW ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2b4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_106)
{
    // 2B4B  ; [*0D2A.0020.0002] 
    // LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2b4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_107)
{
    // 2B4C  ; [*0D2B.0020.0002] 
    // RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2b4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_108)
{
    // 2B4D  ; [*0D2C.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW

    uint32_t const cps[1] = { 0x2b4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_109)
{
    // 2B4E  ; [*0D2D.0020.0002] 
    // SHORT SLANTED NORTH ARROW

    uint32_t const cps[1] = { 0x2b4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_110)
{
    // 2B4F  ; [*0D2E.0020.0002] 
    // SHORT BACKSLANTED SOUTH ARROW

    uint32_t const cps[1] = { 0x2b4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_111)
{
    // 2B50  ; [*0D2F.0020.0002] 
    // WHITE MEDIUM STAR

    uint32_t const cps[1] = { 0x2b50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_112)
{
    // 2B51  ; [*0D30.0020.0002] 
    // BLACK SMALL STAR

    uint32_t const cps[1] = { 0x2b51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_113)
{
    // 2B52  ; [*0D31.0020.0002] 
    // WHITE SMALL STAR

    uint32_t const cps[1] = { 0x2b52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_114)
{
    // 2B53  ; [*0D32.0020.0002] 
    // BLACK RIGHT-POINTING PENTAGON

    uint32_t const cps[1] = { 0x2b53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_115)
{
    // 2B54  ; [*0D33.0020.0002] 
    // WHITE RIGHT-POINTING PENTAGON

    uint32_t const cps[1] = { 0x2b54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_116)
{
    // 2B55  ; [*0D34.0020.0002] 
    // HEAVY LARGE CIRCLE

    uint32_t const cps[1] = { 0x2b55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_117)
{
    // 2B56  ; [*0D35.0020.0002] 
    // HEAVY OVAL WITH OVAL INSIDE

    uint32_t const cps[1] = { 0x2b56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_118)
{
    // 2B57  ; [*0D36.0020.0002] 
    // HEAVY CIRCLE WITH CIRCLE INSIDE

    uint32_t const cps[1] = { 0x2b57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_119)
{
    // 2B58  ; [*0D37.0020.0002] 
    // HEAVY CIRCLE

    uint32_t const cps[1] = { 0x2b58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_120)
{
    // 2B59  ; [*0D38.0020.0002] 
    // HEAVY CIRCLED SALTIRE

    uint32_t const cps[1] = { 0x2b59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_121)
{
    // 2B5A  ; [*0D39.0020.0002] 
    // SLANTED NORTH ARROW WITH HOOKED HEAD

    uint32_t const cps[1] = { 0x2b5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_122)
{
    // 2B5B  ; [*0D3A.0020.0002] 
    // BACKSLANTED SOUTH ARROW WITH HOOKED TAIL

    uint32_t const cps[1] = { 0x2b5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_123)
{
    // 2B5C  ; [*0D3B.0020.0002] 
    // SLANTED NORTH ARROW WITH HORIZONTAL TAIL

    uint32_t const cps[1] = { 0x2b5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_124)
{
    // 2B5D  ; [*0D3C.0020.0002] 
    // BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL

    uint32_t const cps[1] = { 0x2b5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_125)
{
    // 2B5E  ; [*0D3D.0020.0002] 
    // BENT ARROW POINTING DOWNWARDS THEN NORTH EAST

    uint32_t const cps[1] = { 0x2b5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_126)
{
    // 2B5F  ; [*0D3E.0020.0002] 
    // SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST

    uint32_t const cps[1] = { 0x2b5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_127)
{
    // 2B60  ; [*0D3F.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_128)
{
    // 2B61  ; [*0D40.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_129)
{
    // 2B62  ; [*0D41.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_130)
{
    // 2B63  ; [*0D42.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_131)
{
    // 2B64  ; [*0D43.0020.0002] 
    // LEFT RIGHT TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_132)
{
    // 2B65  ; [*0D44.0020.0002] 
    // UP DOWN TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_133)
{
    // 2B66  ; [*0D45.0020.0002] 
    // NORTH WEST TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_134)
{
    // 2B67  ; [*0D46.0020.0002] 
    // NORTH EAST TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_135)
{
    // 2B68  ; [*0D47.0020.0002] 
    // SOUTH EAST TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_136)
{
    // 2B69  ; [*0D48.0020.0002] 
    // SOUTH WEST TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_137)
{
    // 2B6A  ; [*0D49.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED DASHED ARROW

    uint32_t const cps[1] = { 0x2b6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_138)
{
    // 2B6B  ; [*0D4A.0020.0002] 
    // UPWARDS TRIANGLE-HEADED DASHED ARROW

    uint32_t const cps[1] = { 0x2b6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_139)
{
    // 2B6C  ; [*0D4B.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED DASHED ARROW

    uint32_t const cps[1] = { 0x2b6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_140)
{
    // 2B6D  ; [*0D4C.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED DASHED ARROW

    uint32_t const cps[1] = { 0x2b6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_141)
{
    // 2B6E  ; [*0D4D.0020.0002] 
    // CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW

    uint32_t const cps[1] = { 0x2b6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_142)
{
    // 2B6F  ; [*0D4E.0020.0002] 
    // ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW

    uint32_t const cps[1] = { 0x2b6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_143)
{
    // 2B70  ; [*0D4F.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_144)
{
    // 2B71  ; [*0D50.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_145)
{
    // 2B72  ; [*0D51.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_146)
{
    // 2B73  ; [*0D52.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_147)
{
    // 2B76  ; [*0D53.0020.0002] 
    // NORTH WEST TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_148)
{
    // 2B77  ; [*0D54.0020.0002] 
    // NORTH EAST TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_070_149)
{
    // 2B78  ; [*0D55.0020.0002] 
    // SOUTH EAST TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xd55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

