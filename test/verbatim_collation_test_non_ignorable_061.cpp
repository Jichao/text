// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_061_000)
{
    // 1F53F 0041;	
    // (🔿) UPPER RIGHT SHADOWED WHITE CIRCLE	[1506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53F, 0x0041 };
    uint32_t const ces[9] = { 0x1506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_001)
{
    // 1F53F 0062;	
    // (🔿) UPPER RIGHT SHADOWED WHITE CIRCLE	[1506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53F, 0x0062 };
    uint32_t const ces[9] = { 0x1506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_002)
{
    // 1F540 0021;	
    // (🕀) CIRCLED CROSS POMMEE	[1507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F540, 0x0021 };
    uint32_t const ces[9] = { 0x1507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_003)
{
    // 1F540 003F;	
    // (🕀) CIRCLED CROSS POMMEE	[1507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F540, 0x003F };
    uint32_t const ces[9] = { 0x1507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_004)
{
    // 1F540 0061;	
    // (🕀) CIRCLED CROSS POMMEE	[1507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F540, 0x0061 };
    uint32_t const ces[9] = { 0x1507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_005)
{
    // 1F540 0041;	
    // (🕀) CIRCLED CROSS POMMEE	[1507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F540, 0x0041 };
    uint32_t const ces[9] = { 0x1507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_006)
{
    // 1F540 0062;	
    // (🕀) CIRCLED CROSS POMMEE	[1507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F540, 0x0062 };
    uint32_t const ces[9] = { 0x1507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_007)
{
    // 1F541 0021;	
    // (🕁) CROSS POMMEE WITH HALF-CIRCLE BELOW	[1508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F541, 0x0021 };
    uint32_t const ces[9] = { 0x1508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_008)
{
    // 1F541 003F;	
    // (🕁) CROSS POMMEE WITH HALF-CIRCLE BELOW	[1508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F541, 0x003F };
    uint32_t const ces[9] = { 0x1508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_009)
{
    // 1F541 0061;	
    // (🕁) CROSS POMMEE WITH HALF-CIRCLE BELOW	[1508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F541, 0x0061 };
    uint32_t const ces[9] = { 0x1508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_010)
{
    // 1F541 0041;	
    // (🕁) CROSS POMMEE WITH HALF-CIRCLE BELOW	[1508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F541, 0x0041 };
    uint32_t const ces[9] = { 0x1508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_011)
{
    // 1F541 0062;	
    // (🕁) CROSS POMMEE WITH HALF-CIRCLE BELOW	[1508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F541, 0x0062 };
    uint32_t const ces[9] = { 0x1508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_012)
{
    // 1F542 0021;	
    // (🕂) CROSS POMMEE	[1509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F542, 0x0021 };
    uint32_t const ces[9] = { 0x1509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_013)
{
    // 1F542 003F;	
    // (🕂) CROSS POMMEE	[1509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F542, 0x003F };
    uint32_t const ces[9] = { 0x1509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_014)
{
    // 1F542 0061;	
    // (🕂) CROSS POMMEE	[1509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F542, 0x0061 };
    uint32_t const ces[9] = { 0x1509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_015)
{
    // 1F542 0041;	
    // (🕂) CROSS POMMEE	[1509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F542, 0x0041 };
    uint32_t const ces[9] = { 0x1509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_016)
{
    // 1F542 0062;	
    // (🕂) CROSS POMMEE	[1509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F542, 0x0062 };
    uint32_t const ces[9] = { 0x1509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_017)
{
    // 1F543 0021;	
    // (🕃) NOTCHED LEFT SEMICIRCLE WITH THREE DOTS	[150A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F543, 0x0021 };
    uint32_t const ces[9] = { 0x150A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_018)
{
    // 1F543 003F;	
    // (🕃) NOTCHED LEFT SEMICIRCLE WITH THREE DOTS	[150A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F543, 0x003F };
    uint32_t const ces[9] = { 0x150A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_019)
{
    // 1F543 0061;	
    // (🕃) NOTCHED LEFT SEMICIRCLE WITH THREE DOTS	[150A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F543, 0x0061 };
    uint32_t const ces[9] = { 0x150A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_020)
{
    // 1F543 0041;	
    // (🕃) NOTCHED LEFT SEMICIRCLE WITH THREE DOTS	[150A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F543, 0x0041 };
    uint32_t const ces[9] = { 0x150A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_021)
{
    // 1F543 0062;	
    // (🕃) NOTCHED LEFT SEMICIRCLE WITH THREE DOTS	[150A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F543, 0x0062 };
    uint32_t const ces[9] = { 0x150A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_022)
{
    // 1F544 0021;	
    // (🕄) NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS	[150B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F544, 0x0021 };
    uint32_t const ces[9] = { 0x150B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_023)
{
    // 1F544 003F;	
    // (🕄) NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS	[150B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F544, 0x003F };
    uint32_t const ces[9] = { 0x150B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_024)
{
    // 1F544 0061;	
    // (🕄) NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS	[150B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F544, 0x0061 };
    uint32_t const ces[9] = { 0x150B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_025)
{
    // 1F544 0041;	
    // (🕄) NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS	[150B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F544, 0x0041 };
    uint32_t const ces[9] = { 0x150B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_026)
{
    // 1F544 0062;	
    // (🕄) NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS	[150B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F544, 0x0062 };
    uint32_t const ces[9] = { 0x150B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_027)
{
    // 1F545 0021;	
    // (🕅) SYMBOL FOR MARKS CHAPTER	[150C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F545, 0x0021 };
    uint32_t const ces[9] = { 0x150C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_028)
{
    // 1F545 003F;	
    // (🕅) SYMBOL FOR MARKS CHAPTER	[150C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F545, 0x003F };
    uint32_t const ces[9] = { 0x150C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_029)
{
    // 1F545 0061;	
    // (🕅) SYMBOL FOR MARKS CHAPTER	[150C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F545, 0x0061 };
    uint32_t const ces[9] = { 0x150C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_030)
{
    // 1F545 0041;	
    // (🕅) SYMBOL FOR MARKS CHAPTER	[150C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F545, 0x0041 };
    uint32_t const ces[9] = { 0x150C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_031)
{
    // 1F545 0062;	
    // (🕅) SYMBOL FOR MARKS CHAPTER	[150C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F545, 0x0062 };
    uint32_t const ces[9] = { 0x150C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_032)
{
    // 1F546 0021;	
    // (🕆) WHITE LATIN CROSS	[150D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F546, 0x0021 };
    uint32_t const ces[9] = { 0x150D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_033)
{
    // 1F546 003F;	
    // (🕆) WHITE LATIN CROSS	[150D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F546, 0x003F };
    uint32_t const ces[9] = { 0x150D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_034)
{
    // 1F546 0061;	
    // (🕆) WHITE LATIN CROSS	[150D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F546, 0x0061 };
    uint32_t const ces[9] = { 0x150D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_035)
{
    // 1F546 0041;	
    // (🕆) WHITE LATIN CROSS	[150D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F546, 0x0041 };
    uint32_t const ces[9] = { 0x150D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_036)
{
    // 1F546 0062;	
    // (🕆) WHITE LATIN CROSS	[150D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F546, 0x0062 };
    uint32_t const ces[9] = { 0x150D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_037)
{
    // 1F547 0021;	
    // (🕇) HEAVY LATIN CROSS	[150E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F547, 0x0021 };
    uint32_t const ces[9] = { 0x150E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_038)
{
    // 1F547 003F;	
    // (🕇) HEAVY LATIN CROSS	[150E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F547, 0x003F };
    uint32_t const ces[9] = { 0x150E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_039)
{
    // 1F547 0061;	
    // (🕇) HEAVY LATIN CROSS	[150E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F547, 0x0061 };
    uint32_t const ces[9] = { 0x150E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_040)
{
    // 1F547 0041;	
    // (🕇) HEAVY LATIN CROSS	[150E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F547, 0x0041 };
    uint32_t const ces[9] = { 0x150E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_041)
{
    // 1F547 0062;	
    // (🕇) HEAVY LATIN CROSS	[150E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F547, 0x0062 };
    uint32_t const ces[9] = { 0x150E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_042)
{
    // 1F548 0021;	
    // (🕈) CELTIC CROSS	[150F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F548, 0x0021 };
    uint32_t const ces[9] = { 0x150F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_043)
{
    // 1F548 003F;	
    // (🕈) CELTIC CROSS	[150F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F548, 0x003F };
    uint32_t const ces[9] = { 0x150F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_044)
{
    // 1F548 0061;	
    // (🕈) CELTIC CROSS	[150F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F548, 0x0061 };
    uint32_t const ces[9] = { 0x150F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_045)
{
    // 1F548 0041;	
    // (🕈) CELTIC CROSS	[150F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F548, 0x0041 };
    uint32_t const ces[9] = { 0x150F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_046)
{
    // 1F548 0062;	
    // (🕈) CELTIC CROSS	[150F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F548, 0x0062 };
    uint32_t const ces[9] = { 0x150F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_047)
{
    // 1F549 0021;	
    // (🕉) OM SYMBOL	[1510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F549, 0x0021 };
    uint32_t const ces[9] = { 0x1510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_048)
{
    // 1F549 003F;	
    // (🕉) OM SYMBOL	[1510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F549, 0x003F };
    uint32_t const ces[9] = { 0x1510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_049)
{
    // 1F549 0061;	
    // (🕉) OM SYMBOL	[1510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F549, 0x0061 };
    uint32_t const ces[9] = { 0x1510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_050)
{
    // 1F549 0041;	
    // (🕉) OM SYMBOL	[1510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F549, 0x0041 };
    uint32_t const ces[9] = { 0x1510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_051)
{
    // 1F549 0062;	
    // (🕉) OM SYMBOL	[1510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F549, 0x0062 };
    uint32_t const ces[9] = { 0x1510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_052)
{
    // 1F54A 0021;	
    // (🕊) DOVE OF PEACE	[1511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54A, 0x0021 };
    uint32_t const ces[9] = { 0x1511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_053)
{
    // 1F54A 003F;	
    // (🕊) DOVE OF PEACE	[1511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54A, 0x003F };
    uint32_t const ces[9] = { 0x1511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_054)
{
    // 1F54A 0061;	
    // (🕊) DOVE OF PEACE	[1511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54A, 0x0061 };
    uint32_t const ces[9] = { 0x1511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_055)
{
    // 1F54A 0041;	
    // (🕊) DOVE OF PEACE	[1511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54A, 0x0041 };
    uint32_t const ces[9] = { 0x1511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_056)
{
    // 1F54A 0062;	
    // (🕊) DOVE OF PEACE	[1511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54A, 0x0062 };
    uint32_t const ces[9] = { 0x1511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_057)
{
    // 1F54B 0021;	
    // (🕋) KAABA	[1512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54B, 0x0021 };
    uint32_t const ces[9] = { 0x1512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_058)
{
    // 1F54B 003F;	
    // (🕋) KAABA	[1512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54B, 0x003F };
    uint32_t const ces[9] = { 0x1512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_059)
{
    // 1F54B 0061;	
    // (🕋) KAABA	[1512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54B, 0x0061 };
    uint32_t const ces[9] = { 0x1512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_060)
{
    // 1F54B 0041;	
    // (🕋) KAABA	[1512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54B, 0x0041 };
    uint32_t const ces[9] = { 0x1512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_061)
{
    // 1F54B 0062;	
    // (🕋) KAABA	[1512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54B, 0x0062 };
    uint32_t const ces[9] = { 0x1512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_062)
{
    // 1F54C 0021;	
    // (🕌) MOSQUE	[1513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54C, 0x0021 };
    uint32_t const ces[9] = { 0x1513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_063)
{
    // 1F54C 003F;	
    // (🕌) MOSQUE	[1513 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54C, 0x003F };
    uint32_t const ces[9] = { 0x1513, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_064)
{
    // 1F54C 0061;	
    // (🕌) MOSQUE	[1513 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54C, 0x0061 };
    uint32_t const ces[9] = { 0x1513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_065)
{
    // 1F54C 0041;	
    // (🕌) MOSQUE	[1513 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54C, 0x0041 };
    uint32_t const ces[9] = { 0x1513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_066)
{
    // 1F54C 0062;	
    // (🕌) MOSQUE	[1513 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54C, 0x0062 };
    uint32_t const ces[9] = { 0x1513, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_067)
{
    // 1F54D 0021;	
    // (🕍) SYNAGOGUE	[1514 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54D, 0x0021 };
    uint32_t const ces[9] = { 0x1514, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_068)
{
    // 1F54D 003F;	
    // (🕍) SYNAGOGUE	[1514 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54D, 0x003F };
    uint32_t const ces[9] = { 0x1514, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_069)
{
    // 1F54D 0061;	
    // (🕍) SYNAGOGUE	[1514 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54D, 0x0061 };
    uint32_t const ces[9] = { 0x1514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_070)
{
    // 1F54D 0041;	
    // (🕍) SYNAGOGUE	[1514 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54D, 0x0041 };
    uint32_t const ces[9] = { 0x1514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_071)
{
    // 1F54D 0062;	
    // (🕍) SYNAGOGUE	[1514 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54D, 0x0062 };
    uint32_t const ces[9] = { 0x1514, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_072)
{
    // 1F54E 0021;	
    // (🕎) MENORAH WITH NINE BRANCHES	[1515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54E, 0x0021 };
    uint32_t const ces[9] = { 0x1515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_073)
{
    // 1F54E 003F;	
    // (🕎) MENORAH WITH NINE BRANCHES	[1515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54E, 0x003F };
    uint32_t const ces[9] = { 0x1515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_074)
{
    // 1F54E 0061;	
    // (🕎) MENORAH WITH NINE BRANCHES	[1515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54E, 0x0061 };
    uint32_t const ces[9] = { 0x1515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_075)
{
    // 1F54E 0041;	
    // (🕎) MENORAH WITH NINE BRANCHES	[1515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54E, 0x0041 };
    uint32_t const ces[9] = { 0x1515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_076)
{
    // 1F54E 0062;	
    // (🕎) MENORAH WITH NINE BRANCHES	[1515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54E, 0x0062 };
    uint32_t const ces[9] = { 0x1515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_077)
{
    // 1F54F 0021;	
    // (🕏) BOWL OF HYGIEIA	[1516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54F, 0x0021 };
    uint32_t const ces[9] = { 0x1516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_078)
{
    // 1F54F 003F;	
    // (🕏) BOWL OF HYGIEIA	[1516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54F, 0x003F };
    uint32_t const ces[9] = { 0x1516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_079)
{
    // 1F54F 0061;	
    // (🕏) BOWL OF HYGIEIA	[1516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54F, 0x0061 };
    uint32_t const ces[9] = { 0x1516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_080)
{
    // 1F54F 0041;	
    // (🕏) BOWL OF HYGIEIA	[1516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F54F, 0x0041 };
    uint32_t const ces[9] = { 0x1516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_081)
{
    // 1F54F 0062;	
    // (🕏) BOWL OF HYGIEIA	[1516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F54F, 0x0062 };
    uint32_t const ces[9] = { 0x1516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_082)
{
    // 1F550 0021;	
    // (🕐) CLOCK FACE ONE OCLOCK	[1517 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F550, 0x0021 };
    uint32_t const ces[9] = { 0x1517, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_083)
{
    // 1F550 003F;	
    // (🕐) CLOCK FACE ONE OCLOCK	[1517 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F550, 0x003F };
    uint32_t const ces[9] = { 0x1517, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_084)
{
    // 1F550 0061;	
    // (🕐) CLOCK FACE ONE OCLOCK	[1517 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F550, 0x0061 };
    uint32_t const ces[9] = { 0x1517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_085)
{
    // 1F550 0041;	
    // (🕐) CLOCK FACE ONE OCLOCK	[1517 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F550, 0x0041 };
    uint32_t const ces[9] = { 0x1517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_086)
{
    // 1F550 0062;	
    // (🕐) CLOCK FACE ONE OCLOCK	[1517 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F550, 0x0062 };
    uint32_t const ces[9] = { 0x1517, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_087)
{
    // 1F551 0021;	
    // (🕑) CLOCK FACE TWO OCLOCK	[1518 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F551, 0x0021 };
    uint32_t const ces[9] = { 0x1518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_088)
{
    // 1F551 003F;	
    // (🕑) CLOCK FACE TWO OCLOCK	[1518 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F551, 0x003F };
    uint32_t const ces[9] = { 0x1518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_089)
{
    // 1F551 0061;	
    // (🕑) CLOCK FACE TWO OCLOCK	[1518 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F551, 0x0061 };
    uint32_t const ces[9] = { 0x1518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_090)
{
    // 1F551 0041;	
    // (🕑) CLOCK FACE TWO OCLOCK	[1518 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F551, 0x0041 };
    uint32_t const ces[9] = { 0x1518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_091)
{
    // 1F551 0062;	
    // (🕑) CLOCK FACE TWO OCLOCK	[1518 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F551, 0x0062 };
    uint32_t const ces[9] = { 0x1518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_092)
{
    // 1F552 0021;	
    // (🕒) CLOCK FACE THREE OCLOCK	[1519 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F552, 0x0021 };
    uint32_t const ces[9] = { 0x1519, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_093)
{
    // 1F552 003F;	
    // (🕒) CLOCK FACE THREE OCLOCK	[1519 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F552, 0x003F };
    uint32_t const ces[9] = { 0x1519, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_094)
{
    // 1F552 0061;	
    // (🕒) CLOCK FACE THREE OCLOCK	[1519 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F552, 0x0061 };
    uint32_t const ces[9] = { 0x1519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_095)
{
    // 1F552 0041;	
    // (🕒) CLOCK FACE THREE OCLOCK	[1519 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F552, 0x0041 };
    uint32_t const ces[9] = { 0x1519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_096)
{
    // 1F552 0062;	
    // (🕒) CLOCK FACE THREE OCLOCK	[1519 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F552, 0x0062 };
    uint32_t const ces[9] = { 0x1519, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_097)
{
    // 1F553 0021;	
    // (🕓) CLOCK FACE FOUR OCLOCK	[151A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F553, 0x0021 };
    uint32_t const ces[9] = { 0x151A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_098)
{
    // 1F553 003F;	
    // (🕓) CLOCK FACE FOUR OCLOCK	[151A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F553, 0x003F };
    uint32_t const ces[9] = { 0x151A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_099)
{
    // 1F553 0061;	
    // (🕓) CLOCK FACE FOUR OCLOCK	[151A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F553, 0x0061 };
    uint32_t const ces[9] = { 0x151A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_100)
{
    // 1F553 0041;	
    // (🕓) CLOCK FACE FOUR OCLOCK	[151A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F553, 0x0041 };
    uint32_t const ces[9] = { 0x151A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_101)
{
    // 1F553 0062;	
    // (🕓) CLOCK FACE FOUR OCLOCK	[151A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F553, 0x0062 };
    uint32_t const ces[9] = { 0x151A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_102)
{
    // 1F554 0021;	
    // (🕔) CLOCK FACE FIVE OCLOCK	[151B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F554, 0x0021 };
    uint32_t const ces[9] = { 0x151B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_103)
{
    // 1F554 003F;	
    // (🕔) CLOCK FACE FIVE OCLOCK	[151B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F554, 0x003F };
    uint32_t const ces[9] = { 0x151B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_104)
{
    // 1F554 0061;	
    // (🕔) CLOCK FACE FIVE OCLOCK	[151B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F554, 0x0061 };
    uint32_t const ces[9] = { 0x151B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_105)
{
    // 1F554 0041;	
    // (🕔) CLOCK FACE FIVE OCLOCK	[151B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F554, 0x0041 };
    uint32_t const ces[9] = { 0x151B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_106)
{
    // 1F554 0062;	
    // (🕔) CLOCK FACE FIVE OCLOCK	[151B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F554, 0x0062 };
    uint32_t const ces[9] = { 0x151B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_107)
{
    // 1F555 0021;	
    // (🕕) CLOCK FACE SIX OCLOCK	[151C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F555, 0x0021 };
    uint32_t const ces[9] = { 0x151C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_108)
{
    // 1F555 003F;	
    // (🕕) CLOCK FACE SIX OCLOCK	[151C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F555, 0x003F };
    uint32_t const ces[9] = { 0x151C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_109)
{
    // 1F555 0061;	
    // (🕕) CLOCK FACE SIX OCLOCK	[151C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F555, 0x0061 };
    uint32_t const ces[9] = { 0x151C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_110)
{
    // 1F555 0041;	
    // (🕕) CLOCK FACE SIX OCLOCK	[151C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F555, 0x0041 };
    uint32_t const ces[9] = { 0x151C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_111)
{
    // 1F555 0062;	
    // (🕕) CLOCK FACE SIX OCLOCK	[151C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F555, 0x0062 };
    uint32_t const ces[9] = { 0x151C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_112)
{
    // 1F556 0021;	
    // (🕖) CLOCK FACE SEVEN OCLOCK	[151D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F556, 0x0021 };
    uint32_t const ces[9] = { 0x151D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_113)
{
    // 1F556 003F;	
    // (🕖) CLOCK FACE SEVEN OCLOCK	[151D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F556, 0x003F };
    uint32_t const ces[9] = { 0x151D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_114)
{
    // 1F556 0061;	
    // (🕖) CLOCK FACE SEVEN OCLOCK	[151D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F556, 0x0061 };
    uint32_t const ces[9] = { 0x151D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_115)
{
    // 1F556 0041;	
    // (🕖) CLOCK FACE SEVEN OCLOCK	[151D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F556, 0x0041 };
    uint32_t const ces[9] = { 0x151D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_116)
{
    // 1F556 0062;	
    // (🕖) CLOCK FACE SEVEN OCLOCK	[151D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F556, 0x0062 };
    uint32_t const ces[9] = { 0x151D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_117)
{
    // 1F557 0021;	
    // (🕗) CLOCK FACE EIGHT OCLOCK	[151E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F557, 0x0021 };
    uint32_t const ces[9] = { 0x151E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_118)
{
    // 1F557 003F;	
    // (🕗) CLOCK FACE EIGHT OCLOCK	[151E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F557, 0x003F };
    uint32_t const ces[9] = { 0x151E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_119)
{
    // 1F557 0061;	
    // (🕗) CLOCK FACE EIGHT OCLOCK	[151E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F557, 0x0061 };
    uint32_t const ces[9] = { 0x151E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_120)
{
    // 1F557 0041;	
    // (🕗) CLOCK FACE EIGHT OCLOCK	[151E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F557, 0x0041 };
    uint32_t const ces[9] = { 0x151E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_121)
{
    // 1F557 0062;	
    // (🕗) CLOCK FACE EIGHT OCLOCK	[151E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F557, 0x0062 };
    uint32_t const ces[9] = { 0x151E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_122)
{
    // 1F558 0021;	
    // (🕘) CLOCK FACE NINE OCLOCK	[151F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F558, 0x0021 };
    uint32_t const ces[9] = { 0x151F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_123)
{
    // 1F558 003F;	
    // (🕘) CLOCK FACE NINE OCLOCK	[151F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F558, 0x003F };
    uint32_t const ces[9] = { 0x151F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_124)
{
    // 1F558 0061;	
    // (🕘) CLOCK FACE NINE OCLOCK	[151F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F558, 0x0061 };
    uint32_t const ces[9] = { 0x151F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_125)
{
    // 1F558 0041;	
    // (🕘) CLOCK FACE NINE OCLOCK	[151F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F558, 0x0041 };
    uint32_t const ces[9] = { 0x151F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_126)
{
    // 1F558 0062;	
    // (🕘) CLOCK FACE NINE OCLOCK	[151F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F558, 0x0062 };
    uint32_t const ces[9] = { 0x151F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_127)
{
    // 1F559 0021;	
    // (🕙) CLOCK FACE TEN OCLOCK	[1520 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F559, 0x0021 };
    uint32_t const ces[9] = { 0x1520, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_128)
{
    // 1F559 003F;	
    // (🕙) CLOCK FACE TEN OCLOCK	[1520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F559, 0x003F };
    uint32_t const ces[9] = { 0x1520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_129)
{
    // 1F559 0061;	
    // (🕙) CLOCK FACE TEN OCLOCK	[1520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F559, 0x0061 };
    uint32_t const ces[9] = { 0x1520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_130)
{
    // 1F559 0041;	
    // (🕙) CLOCK FACE TEN OCLOCK	[1520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F559, 0x0041 };
    uint32_t const ces[9] = { 0x1520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_131)
{
    // 1F559 0062;	
    // (🕙) CLOCK FACE TEN OCLOCK	[1520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F559, 0x0062 };
    uint32_t const ces[9] = { 0x1520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_132)
{
    // 1F55A 0021;	
    // (🕚) CLOCK FACE ELEVEN OCLOCK	[1521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55A, 0x0021 };
    uint32_t const ces[9] = { 0x1521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_133)
{
    // 1F55A 003F;	
    // (🕚) CLOCK FACE ELEVEN OCLOCK	[1521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55A, 0x003F };
    uint32_t const ces[9] = { 0x1521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_134)
{
    // 1F55A 0061;	
    // (🕚) CLOCK FACE ELEVEN OCLOCK	[1521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55A, 0x0061 };
    uint32_t const ces[9] = { 0x1521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_135)
{
    // 1F55A 0041;	
    // (🕚) CLOCK FACE ELEVEN OCLOCK	[1521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55A, 0x0041 };
    uint32_t const ces[9] = { 0x1521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_136)
{
    // 1F55A 0062;	
    // (🕚) CLOCK FACE ELEVEN OCLOCK	[1521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55A, 0x0062 };
    uint32_t const ces[9] = { 0x1521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_137)
{
    // 1F55B 0021;	
    // (🕛) CLOCK FACE TWELVE OCLOCK	[1522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55B, 0x0021 };
    uint32_t const ces[9] = { 0x1522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_138)
{
    // 1F55B 003F;	
    // (🕛) CLOCK FACE TWELVE OCLOCK	[1522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55B, 0x003F };
    uint32_t const ces[9] = { 0x1522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_139)
{
    // 1F55B 0061;	
    // (🕛) CLOCK FACE TWELVE OCLOCK	[1522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55B, 0x0061 };
    uint32_t const ces[9] = { 0x1522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_140)
{
    // 1F55B 0041;	
    // (🕛) CLOCK FACE TWELVE OCLOCK	[1522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55B, 0x0041 };
    uint32_t const ces[9] = { 0x1522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_141)
{
    // 1F55B 0062;	
    // (🕛) CLOCK FACE TWELVE OCLOCK	[1522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55B, 0x0062 };
    uint32_t const ces[9] = { 0x1522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_142)
{
    // 1F55C 0021;	
    // (🕜) CLOCK FACE ONE-THIRTY	[1523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55C, 0x0021 };
    uint32_t const ces[9] = { 0x1523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_143)
{
    // 1F55C 003F;	
    // (🕜) CLOCK FACE ONE-THIRTY	[1523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55C, 0x003F };
    uint32_t const ces[9] = { 0x1523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_144)
{
    // 1F55C 0061;	
    // (🕜) CLOCK FACE ONE-THIRTY	[1523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55C, 0x0061 };
    uint32_t const ces[9] = { 0x1523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_145)
{
    // 1F55C 0041;	
    // (🕜) CLOCK FACE ONE-THIRTY	[1523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55C, 0x0041 };
    uint32_t const ces[9] = { 0x1523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_146)
{
    // 1F55C 0062;	
    // (🕜) CLOCK FACE ONE-THIRTY	[1523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55C, 0x0062 };
    uint32_t const ces[9] = { 0x1523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_147)
{
    // 1F55D 0021;	
    // (🕝) CLOCK FACE TWO-THIRTY	[1524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55D, 0x0021 };
    uint32_t const ces[9] = { 0x1524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_148)
{
    // 1F55D 003F;	
    // (🕝) CLOCK FACE TWO-THIRTY	[1524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55D, 0x003F };
    uint32_t const ces[9] = { 0x1524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_149)
{
    // 1F55D 0061;	
    // (🕝) CLOCK FACE TWO-THIRTY	[1524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55D, 0x0061 };
    uint32_t const ces[9] = { 0x1524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_150)
{
    // 1F55D 0041;	
    // (🕝) CLOCK FACE TWO-THIRTY	[1524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55D, 0x0041 };
    uint32_t const ces[9] = { 0x1524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_151)
{
    // 1F55D 0062;	
    // (🕝) CLOCK FACE TWO-THIRTY	[1524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55D, 0x0062 };
    uint32_t const ces[9] = { 0x1524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_152)
{
    // 1F55E 0021;	
    // (🕞) CLOCK FACE THREE-THIRTY	[1525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55E, 0x0021 };
    uint32_t const ces[9] = { 0x1525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_153)
{
    // 1F55E 003F;	
    // (🕞) CLOCK FACE THREE-THIRTY	[1525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55E, 0x003F };
    uint32_t const ces[9] = { 0x1525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_154)
{
    // 1F55E 0061;	
    // (🕞) CLOCK FACE THREE-THIRTY	[1525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55E, 0x0061 };
    uint32_t const ces[9] = { 0x1525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_155)
{
    // 1F55E 0041;	
    // (🕞) CLOCK FACE THREE-THIRTY	[1525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55E, 0x0041 };
    uint32_t const ces[9] = { 0x1525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_156)
{
    // 1F55E 0062;	
    // (🕞) CLOCK FACE THREE-THIRTY	[1525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55E, 0x0062 };
    uint32_t const ces[9] = { 0x1525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_157)
{
    // 1F55F 0021;	
    // (🕟) CLOCK FACE FOUR-THIRTY	[1526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55F, 0x0021 };
    uint32_t const ces[9] = { 0x1526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_158)
{
    // 1F55F 003F;	
    // (🕟) CLOCK FACE FOUR-THIRTY	[1526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55F, 0x003F };
    uint32_t const ces[9] = { 0x1526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_159)
{
    // 1F55F 0061;	
    // (🕟) CLOCK FACE FOUR-THIRTY	[1526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55F, 0x0061 };
    uint32_t const ces[9] = { 0x1526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_160)
{
    // 1F55F 0041;	
    // (🕟) CLOCK FACE FOUR-THIRTY	[1526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F55F, 0x0041 };
    uint32_t const ces[9] = { 0x1526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_161)
{
    // 1F55F 0062;	
    // (🕟) CLOCK FACE FOUR-THIRTY	[1526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F55F, 0x0062 };
    uint32_t const ces[9] = { 0x1526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_162)
{
    // 1F560 0021;	
    // (🕠) CLOCK FACE FIVE-THIRTY	[1527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F560, 0x0021 };
    uint32_t const ces[9] = { 0x1527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_163)
{
    // 1F560 003F;	
    // (🕠) CLOCK FACE FIVE-THIRTY	[1527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F560, 0x003F };
    uint32_t const ces[9] = { 0x1527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_164)
{
    // 1F560 0061;	
    // (🕠) CLOCK FACE FIVE-THIRTY	[1527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F560, 0x0061 };
    uint32_t const ces[9] = { 0x1527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_165)
{
    // 1F560 0041;	
    // (🕠) CLOCK FACE FIVE-THIRTY	[1527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F560, 0x0041 };
    uint32_t const ces[9] = { 0x1527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_166)
{
    // 1F560 0062;	
    // (🕠) CLOCK FACE FIVE-THIRTY	[1527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F560, 0x0062 };
    uint32_t const ces[9] = { 0x1527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_167)
{
    // 1F561 0021;	
    // (🕡) CLOCK FACE SIX-THIRTY	[1528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F561, 0x0021 };
    uint32_t const ces[9] = { 0x1528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_168)
{
    // 1F561 003F;	
    // (🕡) CLOCK FACE SIX-THIRTY	[1528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F561, 0x003F };
    uint32_t const ces[9] = { 0x1528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_169)
{
    // 1F561 0061;	
    // (🕡) CLOCK FACE SIX-THIRTY	[1528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F561, 0x0061 };
    uint32_t const ces[9] = { 0x1528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_170)
{
    // 1F561 0041;	
    // (🕡) CLOCK FACE SIX-THIRTY	[1528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F561, 0x0041 };
    uint32_t const ces[9] = { 0x1528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_171)
{
    // 1F561 0062;	
    // (🕡) CLOCK FACE SIX-THIRTY	[1528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F561, 0x0062 };
    uint32_t const ces[9] = { 0x1528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_172)
{
    // 1F562 0021;	
    // (🕢) CLOCK FACE SEVEN-THIRTY	[1529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F562, 0x0021 };
    uint32_t const ces[9] = { 0x1529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_173)
{
    // 1F562 003F;	
    // (🕢) CLOCK FACE SEVEN-THIRTY	[1529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F562, 0x003F };
    uint32_t const ces[9] = { 0x1529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_174)
{
    // 1F562 0061;	
    // (🕢) CLOCK FACE SEVEN-THIRTY	[1529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F562, 0x0061 };
    uint32_t const ces[9] = { 0x1529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_175)
{
    // 1F562 0041;	
    // (🕢) CLOCK FACE SEVEN-THIRTY	[1529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F562, 0x0041 };
    uint32_t const ces[9] = { 0x1529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_176)
{
    // 1F562 0062;	
    // (🕢) CLOCK FACE SEVEN-THIRTY	[1529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F562, 0x0062 };
    uint32_t const ces[9] = { 0x1529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_177)
{
    // 1F563 0021;	
    // (🕣) CLOCK FACE EIGHT-THIRTY	[152A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F563, 0x0021 };
    uint32_t const ces[9] = { 0x152A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_178)
{
    // 1F563 003F;	
    // (🕣) CLOCK FACE EIGHT-THIRTY	[152A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F563, 0x003F };
    uint32_t const ces[9] = { 0x152A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_179)
{
    // 1F563 0061;	
    // (🕣) CLOCK FACE EIGHT-THIRTY	[152A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F563, 0x0061 };
    uint32_t const ces[9] = { 0x152A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_180)
{
    // 1F563 0041;	
    // (🕣) CLOCK FACE EIGHT-THIRTY	[152A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F563, 0x0041 };
    uint32_t const ces[9] = { 0x152A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_181)
{
    // 1F563 0062;	
    // (🕣) CLOCK FACE EIGHT-THIRTY	[152A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F563, 0x0062 };
    uint32_t const ces[9] = { 0x152A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_182)
{
    // 1F564 0021;	
    // (🕤) CLOCK FACE NINE-THIRTY	[152B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F564, 0x0021 };
    uint32_t const ces[9] = { 0x152B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_183)
{
    // 1F564 003F;	
    // (🕤) CLOCK FACE NINE-THIRTY	[152B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F564, 0x003F };
    uint32_t const ces[9] = { 0x152B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_184)
{
    // 1F564 0061;	
    // (🕤) CLOCK FACE NINE-THIRTY	[152B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F564, 0x0061 };
    uint32_t const ces[9] = { 0x152B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_185)
{
    // 1F564 0041;	
    // (🕤) CLOCK FACE NINE-THIRTY	[152B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F564, 0x0041 };
    uint32_t const ces[9] = { 0x152B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_186)
{
    // 1F564 0062;	
    // (🕤) CLOCK FACE NINE-THIRTY	[152B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F564, 0x0062 };
    uint32_t const ces[9] = { 0x152B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_187)
{
    // 1F565 0021;	
    // (🕥) CLOCK FACE TEN-THIRTY	[152C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F565, 0x0021 };
    uint32_t const ces[9] = { 0x152C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_188)
{
    // 1F565 003F;	
    // (🕥) CLOCK FACE TEN-THIRTY	[152C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F565, 0x003F };
    uint32_t const ces[9] = { 0x152C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_189)
{
    // 1F565 0061;	
    // (🕥) CLOCK FACE TEN-THIRTY	[152C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F565, 0x0061 };
    uint32_t const ces[9] = { 0x152C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_190)
{
    // 1F565 0041;	
    // (🕥) CLOCK FACE TEN-THIRTY	[152C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F565, 0x0041 };
    uint32_t const ces[9] = { 0x152C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_191)
{
    // 1F565 0062;	
    // (🕥) CLOCK FACE TEN-THIRTY	[152C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F565, 0x0062 };
    uint32_t const ces[9] = { 0x152C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_192)
{
    // 1F566 0021;	
    // (🕦) CLOCK FACE ELEVEN-THIRTY	[152D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F566, 0x0021 };
    uint32_t const ces[9] = { 0x152D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_193)
{
    // 1F566 003F;	
    // (🕦) CLOCK FACE ELEVEN-THIRTY	[152D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F566, 0x003F };
    uint32_t const ces[9] = { 0x152D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_194)
{
    // 1F566 0061;	
    // (🕦) CLOCK FACE ELEVEN-THIRTY	[152D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F566, 0x0061 };
    uint32_t const ces[9] = { 0x152D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_195)
{
    // 1F566 0041;	
    // (🕦) CLOCK FACE ELEVEN-THIRTY	[152D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F566, 0x0041 };
    uint32_t const ces[9] = { 0x152D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_196)
{
    // 1F566 0062;	
    // (🕦) CLOCK FACE ELEVEN-THIRTY	[152D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F566, 0x0062 };
    uint32_t const ces[9] = { 0x152D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_197)
{
    // 1F567 0021;	
    // (🕧) CLOCK FACE TWELVE-THIRTY	[152E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F567, 0x0021 };
    uint32_t const ces[9] = { 0x152E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_198)
{
    // 1F567 003F;	
    // (🕧) CLOCK FACE TWELVE-THIRTY	[152E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F567, 0x003F };
    uint32_t const ces[9] = { 0x152E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_199)
{
    // 1F567 0061;	
    // (🕧) CLOCK FACE TWELVE-THIRTY	[152E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F567, 0x0061 };
    uint32_t const ces[9] = { 0x152E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_200)
{
    // 1F567 0041;	
    // (🕧) CLOCK FACE TWELVE-THIRTY	[152E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F567, 0x0041 };
    uint32_t const ces[9] = { 0x152E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_201)
{
    // 1F567 0062;	
    // (🕧) CLOCK FACE TWELVE-THIRTY	[152E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F567, 0x0062 };
    uint32_t const ces[9] = { 0x152E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_202)
{
    // 1F568 0021;	
    // (🕨) RIGHT SPEAKER	[152F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F568, 0x0021 };
    uint32_t const ces[9] = { 0x152F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_203)
{
    // 1F568 003F;	
    // (🕨) RIGHT SPEAKER	[152F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F568, 0x003F };
    uint32_t const ces[9] = { 0x152F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_204)
{
    // 1F568 0061;	
    // (🕨) RIGHT SPEAKER	[152F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F568, 0x0061 };
    uint32_t const ces[9] = { 0x152F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_205)
{
    // 1F568 0041;	
    // (🕨) RIGHT SPEAKER	[152F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F568, 0x0041 };
    uint32_t const ces[9] = { 0x152F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_206)
{
    // 1F568 0062;	
    // (🕨) RIGHT SPEAKER	[152F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F568, 0x0062 };
    uint32_t const ces[9] = { 0x152F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_207)
{
    // 1F569 0021;	
    // (🕩) RIGHT SPEAKER WITH ONE SOUND WAVE	[1530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F569, 0x0021 };
    uint32_t const ces[9] = { 0x1530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_208)
{
    // 1F569 003F;	
    // (🕩) RIGHT SPEAKER WITH ONE SOUND WAVE	[1530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F569, 0x003F };
    uint32_t const ces[9] = { 0x1530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_209)
{
    // 1F569 0061;	
    // (🕩) RIGHT SPEAKER WITH ONE SOUND WAVE	[1530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F569, 0x0061 };
    uint32_t const ces[9] = { 0x1530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_210)
{
    // 1F569 0041;	
    // (🕩) RIGHT SPEAKER WITH ONE SOUND WAVE	[1530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F569, 0x0041 };
    uint32_t const ces[9] = { 0x1530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_211)
{
    // 1F569 0062;	
    // (🕩) RIGHT SPEAKER WITH ONE SOUND WAVE	[1530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F569, 0x0062 };
    uint32_t const ces[9] = { 0x1530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_212)
{
    // 1F56A 0021;	
    // (🕪) RIGHT SPEAKER WITH THREE SOUND WAVES	[1531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56A, 0x0021 };
    uint32_t const ces[9] = { 0x1531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_213)
{
    // 1F56A 003F;	
    // (🕪) RIGHT SPEAKER WITH THREE SOUND WAVES	[1531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56A, 0x003F };
    uint32_t const ces[9] = { 0x1531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_214)
{
    // 1F56A 0061;	
    // (🕪) RIGHT SPEAKER WITH THREE SOUND WAVES	[1531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56A, 0x0061 };
    uint32_t const ces[9] = { 0x1531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_215)
{
    // 1F56A 0041;	
    // (🕪) RIGHT SPEAKER WITH THREE SOUND WAVES	[1531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56A, 0x0041 };
    uint32_t const ces[9] = { 0x1531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_216)
{
    // 1F56A 0062;	
    // (🕪) RIGHT SPEAKER WITH THREE SOUND WAVES	[1531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56A, 0x0062 };
    uint32_t const ces[9] = { 0x1531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_217)
{
    // 1F56B 0021;	
    // (🕫) BULLHORN	[1532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56B, 0x0021 };
    uint32_t const ces[9] = { 0x1532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_218)
{
    // 1F56B 003F;	
    // (🕫) BULLHORN	[1532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56B, 0x003F };
    uint32_t const ces[9] = { 0x1532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_219)
{
    // 1F56B 0061;	
    // (🕫) BULLHORN	[1532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56B, 0x0061 };
    uint32_t const ces[9] = { 0x1532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_220)
{
    // 1F56B 0041;	
    // (🕫) BULLHORN	[1532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56B, 0x0041 };
    uint32_t const ces[9] = { 0x1532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_221)
{
    // 1F56B 0062;	
    // (🕫) BULLHORN	[1532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56B, 0x0062 };
    uint32_t const ces[9] = { 0x1532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_222)
{
    // 1F56C 0021;	
    // (🕬) BULLHORN WITH SOUND WAVES	[1533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56C, 0x0021 };
    uint32_t const ces[9] = { 0x1533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_223)
{
    // 1F56C 003F;	
    // (🕬) BULLHORN WITH SOUND WAVES	[1533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56C, 0x003F };
    uint32_t const ces[9] = { 0x1533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_224)
{
    // 1F56C 0061;	
    // (🕬) BULLHORN WITH SOUND WAVES	[1533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56C, 0x0061 };
    uint32_t const ces[9] = { 0x1533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_225)
{
    // 1F56C 0041;	
    // (🕬) BULLHORN WITH SOUND WAVES	[1533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56C, 0x0041 };
    uint32_t const ces[9] = { 0x1533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_226)
{
    // 1F56C 0062;	
    // (🕬) BULLHORN WITH SOUND WAVES	[1533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56C, 0x0062 };
    uint32_t const ces[9] = { 0x1533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_227)
{
    // 1F56D 0021;	
    // (🕭) RINGING BELL	[1534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56D, 0x0021 };
    uint32_t const ces[9] = { 0x1534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_228)
{
    // 1F56D 003F;	
    // (🕭) RINGING BELL	[1534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56D, 0x003F };
    uint32_t const ces[9] = { 0x1534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_229)
{
    // 1F56D 0061;	
    // (🕭) RINGING BELL	[1534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56D, 0x0061 };
    uint32_t const ces[9] = { 0x1534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_230)
{
    // 1F56D 0041;	
    // (🕭) RINGING BELL	[1534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56D, 0x0041 };
    uint32_t const ces[9] = { 0x1534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_231)
{
    // 1F56D 0062;	
    // (🕭) RINGING BELL	[1534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56D, 0x0062 };
    uint32_t const ces[9] = { 0x1534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_232)
{
    // 1F56E 0021;	
    // (🕮) BOOK	[1535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56E, 0x0021 };
    uint32_t const ces[9] = { 0x1535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_233)
{
    // 1F56E 003F;	
    // (🕮) BOOK	[1535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56E, 0x003F };
    uint32_t const ces[9] = { 0x1535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_234)
{
    // 1F56E 0061;	
    // (🕮) BOOK	[1535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56E, 0x0061 };
    uint32_t const ces[9] = { 0x1535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_235)
{
    // 1F56E 0041;	
    // (🕮) BOOK	[1535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56E, 0x0041 };
    uint32_t const ces[9] = { 0x1535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_236)
{
    // 1F56E 0062;	
    // (🕮) BOOK	[1535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56E, 0x0062 };
    uint32_t const ces[9] = { 0x1535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_237)
{
    // 1F56F 0021;	
    // (🕯) CANDLE	[1536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56F, 0x0021 };
    uint32_t const ces[9] = { 0x1536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_238)
{
    // 1F56F 003F;	
    // (🕯) CANDLE	[1536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56F, 0x003F };
    uint32_t const ces[9] = { 0x1536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_239)
{
    // 1F56F 0061;	
    // (🕯) CANDLE	[1536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56F, 0x0061 };
    uint32_t const ces[9] = { 0x1536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_240)
{
    // 1F56F 0041;	
    // (🕯) CANDLE	[1536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F56F, 0x0041 };
    uint32_t const ces[9] = { 0x1536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_241)
{
    // 1F56F 0062;	
    // (🕯) CANDLE	[1536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F56F, 0x0062 };
    uint32_t const ces[9] = { 0x1536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_242)
{
    // 1F570 0021;	
    // (🕰) MANTELPIECE CLOCK	[1537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F570, 0x0021 };
    uint32_t const ces[9] = { 0x1537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_243)
{
    // 1F570 003F;	
    // (🕰) MANTELPIECE CLOCK	[1537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F570, 0x003F };
    uint32_t const ces[9] = { 0x1537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_244)
{
    // 1F570 0061;	
    // (🕰) MANTELPIECE CLOCK	[1537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F570, 0x0061 };
    uint32_t const ces[9] = { 0x1537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_245)
{
    // 1F570 0041;	
    // (🕰) MANTELPIECE CLOCK	[1537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F570, 0x0041 };
    uint32_t const ces[9] = { 0x1537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_246)
{
    // 1F570 0062;	
    // (🕰) MANTELPIECE CLOCK	[1537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F570, 0x0062 };
    uint32_t const ces[9] = { 0x1537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_247)
{
    // 1F571 0021;	
    // (🕱) BLACK SKULL AND CROSSBONES	[1538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F571, 0x0021 };
    uint32_t const ces[9] = { 0x1538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_248)
{
    // 1F571 003F;	
    // (🕱) BLACK SKULL AND CROSSBONES	[1538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F571, 0x003F };
    uint32_t const ces[9] = { 0x1538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_249)
{
    // 1F571 0061;	
    // (🕱) BLACK SKULL AND CROSSBONES	[1538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F571, 0x0061 };
    uint32_t const ces[9] = { 0x1538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_250)
{
    // 1F571 0041;	
    // (🕱) BLACK SKULL AND CROSSBONES	[1538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F571, 0x0041 };
    uint32_t const ces[9] = { 0x1538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_251)
{
    // 1F571 0062;	
    // (🕱) BLACK SKULL AND CROSSBONES	[1538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F571, 0x0062 };
    uint32_t const ces[9] = { 0x1538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_252)
{
    // 1F572 0021;	
    // (🕲) NO PIRACY	[1539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F572, 0x0021 };
    uint32_t const ces[9] = { 0x1539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_253)
{
    // 1F572 003F;	
    // (🕲) NO PIRACY	[1539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F572, 0x003F };
    uint32_t const ces[9] = { 0x1539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_254)
{
    // 1F572 0061;	
    // (🕲) NO PIRACY	[1539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F572, 0x0061 };
    uint32_t const ces[9] = { 0x1539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_255)
{
    // 1F572 0041;	
    // (🕲) NO PIRACY	[1539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F572, 0x0041 };
    uint32_t const ces[9] = { 0x1539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_256)
{
    // 1F572 0062;	
    // (🕲) NO PIRACY	[1539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F572, 0x0062 };
    uint32_t const ces[9] = { 0x1539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_257)
{
    // 1F573 0021;	
    // (🕳) HOLE	[153A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F573, 0x0021 };
    uint32_t const ces[9] = { 0x153A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_258)
{
    // 1F573 003F;	
    // (🕳) HOLE	[153A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F573, 0x003F };
    uint32_t const ces[9] = { 0x153A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_259)
{
    // 1F573 0061;	
    // (🕳) HOLE	[153A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F573, 0x0061 };
    uint32_t const ces[9] = { 0x153A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_260)
{
    // 1F573 0041;	
    // (🕳) HOLE	[153A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F573, 0x0041 };
    uint32_t const ces[9] = { 0x153A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_261)
{
    // 1F573 0062;	
    // (🕳) HOLE	[153A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F573, 0x0062 };
    uint32_t const ces[9] = { 0x153A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_262)
{
    // 1F574 0021;	
    // (🕴) MAN IN BUSINESS SUIT LEVITATING	[153B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F574, 0x0021 };
    uint32_t const ces[9] = { 0x153B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_263)
{
    // 1F574 003F;	
    // (🕴) MAN IN BUSINESS SUIT LEVITATING	[153B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F574, 0x003F };
    uint32_t const ces[9] = { 0x153B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_264)
{
    // 1F574 0061;	
    // (🕴) MAN IN BUSINESS SUIT LEVITATING	[153B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F574, 0x0061 };
    uint32_t const ces[9] = { 0x153B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_265)
{
    // 1F574 0041;	
    // (🕴) MAN IN BUSINESS SUIT LEVITATING	[153B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F574, 0x0041 };
    uint32_t const ces[9] = { 0x153B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_266)
{
    // 1F574 0062;	
    // (🕴) MAN IN BUSINESS SUIT LEVITATING	[153B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F574, 0x0062 };
    uint32_t const ces[9] = { 0x153B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_267)
{
    // 1F575 0021;	
    // (🕵) SLEUTH OR SPY	[153C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F575, 0x0021 };
    uint32_t const ces[9] = { 0x153C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_268)
{
    // 1F575 003F;	
    // (🕵) SLEUTH OR SPY	[153C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F575, 0x003F };
    uint32_t const ces[9] = { 0x153C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_269)
{
    // 1F575 0061;	
    // (🕵) SLEUTH OR SPY	[153C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F575, 0x0061 };
    uint32_t const ces[9] = { 0x153C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_270)
{
    // 1F575 0041;	
    // (🕵) SLEUTH OR SPY	[153C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F575, 0x0041 };
    uint32_t const ces[9] = { 0x153C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_271)
{
    // 1F575 0062;	
    // (🕵) SLEUTH OR SPY	[153C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F575, 0x0062 };
    uint32_t const ces[9] = { 0x153C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_272)
{
    // 1F576 0021;	
    // (🕶) DARK SUNGLASSES	[153D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F576, 0x0021 };
    uint32_t const ces[9] = { 0x153D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_273)
{
    // 1F576 003F;	
    // (🕶) DARK SUNGLASSES	[153D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F576, 0x003F };
    uint32_t const ces[9] = { 0x153D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_274)
{
    // 1F576 0061;	
    // (🕶) DARK SUNGLASSES	[153D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F576, 0x0061 };
    uint32_t const ces[9] = { 0x153D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_275)
{
    // 1F576 0041;	
    // (🕶) DARK SUNGLASSES	[153D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F576, 0x0041 };
    uint32_t const ces[9] = { 0x153D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_276)
{
    // 1F576 0062;	
    // (🕶) DARK SUNGLASSES	[153D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F576, 0x0062 };
    uint32_t const ces[9] = { 0x153D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_277)
{
    // 1F577 0021;	
    // (🕷) SPIDER	[153E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F577, 0x0021 };
    uint32_t const ces[9] = { 0x153E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_278)
{
    // 1F577 003F;	
    // (🕷) SPIDER	[153E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F577, 0x003F };
    uint32_t const ces[9] = { 0x153E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_279)
{
    // 1F577 0061;	
    // (🕷) SPIDER	[153E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F577, 0x0061 };
    uint32_t const ces[9] = { 0x153E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_280)
{
    // 1F577 0041;	
    // (🕷) SPIDER	[153E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F577, 0x0041 };
    uint32_t const ces[9] = { 0x153E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_281)
{
    // 1F577 0062;	
    // (🕷) SPIDER	[153E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F577, 0x0062 };
    uint32_t const ces[9] = { 0x153E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_282)
{
    // 1F578 0021;	
    // (🕸) SPIDER WEB	[153F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F578, 0x0021 };
    uint32_t const ces[9] = { 0x153F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_283)
{
    // 1F578 003F;	
    // (🕸) SPIDER WEB	[153F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F578, 0x003F };
    uint32_t const ces[9] = { 0x153F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_284)
{
    // 1F578 0061;	
    // (🕸) SPIDER WEB	[153F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F578, 0x0061 };
    uint32_t const ces[9] = { 0x153F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_285)
{
    // 1F578 0041;	
    // (🕸) SPIDER WEB	[153F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F578, 0x0041 };
    uint32_t const ces[9] = { 0x153F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_286)
{
    // 1F578 0062;	
    // (🕸) SPIDER WEB	[153F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F578, 0x0062 };
    uint32_t const ces[9] = { 0x153F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_287)
{
    // 1F579 0021;	
    // (🕹) JOYSTICK	[1540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F579, 0x0021 };
    uint32_t const ces[9] = { 0x1540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_288)
{
    // 1F579 003F;	
    // (🕹) JOYSTICK	[1540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F579, 0x003F };
    uint32_t const ces[9] = { 0x1540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_289)
{
    // 1F579 0061;	
    // (🕹) JOYSTICK	[1540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F579, 0x0061 };
    uint32_t const ces[9] = { 0x1540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_290)
{
    // 1F579 0041;	
    // (🕹) JOYSTICK	[1540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F579, 0x0041 };
    uint32_t const ces[9] = { 0x1540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_291)
{
    // 1F579 0062;	
    // (🕹) JOYSTICK	[1540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F579, 0x0062 };
    uint32_t const ces[9] = { 0x1540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_292)
{
    // 1F57A 0021;	
    // (🕺) MAN DANCING	[1541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57A, 0x0021 };
    uint32_t const ces[9] = { 0x1541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_293)
{
    // 1F57A 003F;	
    // (🕺) MAN DANCING	[1541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57A, 0x003F };
    uint32_t const ces[9] = { 0x1541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_294)
{
    // 1F57A 0061;	
    // (🕺) MAN DANCING	[1541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57A, 0x0061 };
    uint32_t const ces[9] = { 0x1541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_295)
{
    // 1F57A 0041;	
    // (🕺) MAN DANCING	[1541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57A, 0x0041 };
    uint32_t const ces[9] = { 0x1541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_296)
{
    // 1F57A 0062;	
    // (🕺) MAN DANCING	[1541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57A, 0x0062 };
    uint32_t const ces[9] = { 0x1541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_297)
{
    // 1F57B 0021;	
    // (🕻) LEFT HAND TELEPHONE RECEIVER	[1542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57B, 0x0021 };
    uint32_t const ces[9] = { 0x1542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_298)
{
    // 1F57B 003F;	
    // (🕻) LEFT HAND TELEPHONE RECEIVER	[1542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57B, 0x003F };
    uint32_t const ces[9] = { 0x1542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_299)
{
    // 1F57B 0061;	
    // (🕻) LEFT HAND TELEPHONE RECEIVER	[1542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57B, 0x0061 };
    uint32_t const ces[9] = { 0x1542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_300)
{
    // 1F57B 0041;	
    // (🕻) LEFT HAND TELEPHONE RECEIVER	[1542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57B, 0x0041 };
    uint32_t const ces[9] = { 0x1542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_301)
{
    // 1F57B 0062;	
    // (🕻) LEFT HAND TELEPHONE RECEIVER	[1542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57B, 0x0062 };
    uint32_t const ces[9] = { 0x1542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_302)
{
    // 1F57C 0021;	
    // (🕼) TELEPHONE RECEIVER WITH PAGE	[1543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57C, 0x0021 };
    uint32_t const ces[9] = { 0x1543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_303)
{
    // 1F57C 003F;	
    // (🕼) TELEPHONE RECEIVER WITH PAGE	[1543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57C, 0x003F };
    uint32_t const ces[9] = { 0x1543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_304)
{
    // 1F57C 0061;	
    // (🕼) TELEPHONE RECEIVER WITH PAGE	[1543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57C, 0x0061 };
    uint32_t const ces[9] = { 0x1543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_305)
{
    // 1F57C 0041;	
    // (🕼) TELEPHONE RECEIVER WITH PAGE	[1543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57C, 0x0041 };
    uint32_t const ces[9] = { 0x1543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_306)
{
    // 1F57C 0062;	
    // (🕼) TELEPHONE RECEIVER WITH PAGE	[1543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57C, 0x0062 };
    uint32_t const ces[9] = { 0x1543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_307)
{
    // 1F57D 0021;	
    // (🕽) RIGHT HAND TELEPHONE RECEIVER	[1544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57D, 0x0021 };
    uint32_t const ces[9] = { 0x1544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_308)
{
    // 1F57D 003F;	
    // (🕽) RIGHT HAND TELEPHONE RECEIVER	[1544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57D, 0x003F };
    uint32_t const ces[9] = { 0x1544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_309)
{
    // 1F57D 0061;	
    // (🕽) RIGHT HAND TELEPHONE RECEIVER	[1544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57D, 0x0061 };
    uint32_t const ces[9] = { 0x1544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_310)
{
    // 1F57D 0041;	
    // (🕽) RIGHT HAND TELEPHONE RECEIVER	[1544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57D, 0x0041 };
    uint32_t const ces[9] = { 0x1544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_311)
{
    // 1F57D 0062;	
    // (🕽) RIGHT HAND TELEPHONE RECEIVER	[1544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57D, 0x0062 };
    uint32_t const ces[9] = { 0x1544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_312)
{
    // 1F57E 0021;	
    // (🕾) WHITE TOUCHTONE TELEPHONE	[1545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57E, 0x0021 };
    uint32_t const ces[9] = { 0x1545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_313)
{
    // 1F57E 003F;	
    // (🕾) WHITE TOUCHTONE TELEPHONE	[1545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57E, 0x003F };
    uint32_t const ces[9] = { 0x1545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_314)
{
    // 1F57E 0061;	
    // (🕾) WHITE TOUCHTONE TELEPHONE	[1545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57E, 0x0061 };
    uint32_t const ces[9] = { 0x1545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_315)
{
    // 1F57E 0041;	
    // (🕾) WHITE TOUCHTONE TELEPHONE	[1545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57E, 0x0041 };
    uint32_t const ces[9] = { 0x1545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_316)
{
    // 1F57E 0062;	
    // (🕾) WHITE TOUCHTONE TELEPHONE	[1545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57E, 0x0062 };
    uint32_t const ces[9] = { 0x1545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_317)
{
    // 1F57F 0021;	
    // (🕿) BLACK TOUCHTONE TELEPHONE	[1546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57F, 0x0021 };
    uint32_t const ces[9] = { 0x1546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_318)
{
    // 1F57F 003F;	
    // (🕿) BLACK TOUCHTONE TELEPHONE	[1546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57F, 0x003F };
    uint32_t const ces[9] = { 0x1546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_319)
{
    // 1F57F 0061;	
    // (🕿) BLACK TOUCHTONE TELEPHONE	[1546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57F, 0x0061 };
    uint32_t const ces[9] = { 0x1546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_320)
{
    // 1F57F 0041;	
    // (🕿) BLACK TOUCHTONE TELEPHONE	[1546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F57F, 0x0041 };
    uint32_t const ces[9] = { 0x1546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_321)
{
    // 1F57F 0062;	
    // (🕿) BLACK TOUCHTONE TELEPHONE	[1546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F57F, 0x0062 };
    uint32_t const ces[9] = { 0x1546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_322)
{
    // 1F580 0021;	
    // (🖀) TELEPHONE ON TOP OF MODEM	[1547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F580, 0x0021 };
    uint32_t const ces[9] = { 0x1547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_323)
{
    // 1F580 003F;	
    // (🖀) TELEPHONE ON TOP OF MODEM	[1547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F580, 0x003F };
    uint32_t const ces[9] = { 0x1547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_324)
{
    // 1F580 0061;	
    // (🖀) TELEPHONE ON TOP OF MODEM	[1547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F580, 0x0061 };
    uint32_t const ces[9] = { 0x1547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_325)
{
    // 1F580 0041;	
    // (🖀) TELEPHONE ON TOP OF MODEM	[1547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F580, 0x0041 };
    uint32_t const ces[9] = { 0x1547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_326)
{
    // 1F580 0062;	
    // (🖀) TELEPHONE ON TOP OF MODEM	[1547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F580, 0x0062 };
    uint32_t const ces[9] = { 0x1547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_327)
{
    // 1F581 0021;	
    // (🖁) CLAMSHELL MOBILE PHONE	[1548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F581, 0x0021 };
    uint32_t const ces[9] = { 0x1548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_328)
{
    // 1F581 003F;	
    // (🖁) CLAMSHELL MOBILE PHONE	[1548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F581, 0x003F };
    uint32_t const ces[9] = { 0x1548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_329)
{
    // 1F581 0061;	
    // (🖁) CLAMSHELL MOBILE PHONE	[1548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F581, 0x0061 };
    uint32_t const ces[9] = { 0x1548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_330)
{
    // 1F581 0041;	
    // (🖁) CLAMSHELL MOBILE PHONE	[1548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F581, 0x0041 };
    uint32_t const ces[9] = { 0x1548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_331)
{
    // 1F581 0062;	
    // (🖁) CLAMSHELL MOBILE PHONE	[1548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F581, 0x0062 };
    uint32_t const ces[9] = { 0x1548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_332)
{
    // 1F582 0021;	
    // (🖂) BACK OF ENVELOPE	[1549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F582, 0x0021 };
    uint32_t const ces[9] = { 0x1549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_333)
{
    // 1F582 003F;	
    // (🖂) BACK OF ENVELOPE	[1549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F582, 0x003F };
    uint32_t const ces[9] = { 0x1549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_334)
{
    // 1F582 0061;	
    // (🖂) BACK OF ENVELOPE	[1549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F582, 0x0061 };
    uint32_t const ces[9] = { 0x1549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_335)
{
    // 1F582 0041;	
    // (🖂) BACK OF ENVELOPE	[1549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F582, 0x0041 };
    uint32_t const ces[9] = { 0x1549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_336)
{
    // 1F582 0062;	
    // (🖂) BACK OF ENVELOPE	[1549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F582, 0x0062 };
    uint32_t const ces[9] = { 0x1549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_337)
{
    // 1F583 0021;	
    // (🖃) STAMPED ENVELOPE	[154A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F583, 0x0021 };
    uint32_t const ces[9] = { 0x154A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_338)
{
    // 1F583 003F;	
    // (🖃) STAMPED ENVELOPE	[154A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F583, 0x003F };
    uint32_t const ces[9] = { 0x154A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_339)
{
    // 1F583 0061;	
    // (🖃) STAMPED ENVELOPE	[154A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F583, 0x0061 };
    uint32_t const ces[9] = { 0x154A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_340)
{
    // 1F583 0041;	
    // (🖃) STAMPED ENVELOPE	[154A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F583, 0x0041 };
    uint32_t const ces[9] = { 0x154A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_341)
{
    // 1F583 0062;	
    // (🖃) STAMPED ENVELOPE	[154A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F583, 0x0062 };
    uint32_t const ces[9] = { 0x154A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_342)
{
    // 1F584 0021;	
    // (🖄) ENVELOPE WITH LIGHTNING	[154B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F584, 0x0021 };
    uint32_t const ces[9] = { 0x154B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_343)
{
    // 1F584 003F;	
    // (🖄) ENVELOPE WITH LIGHTNING	[154B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F584, 0x003F };
    uint32_t const ces[9] = { 0x154B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_344)
{
    // 1F584 0061;	
    // (🖄) ENVELOPE WITH LIGHTNING	[154B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F584, 0x0061 };
    uint32_t const ces[9] = { 0x154B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_345)
{
    // 1F584 0041;	
    // (🖄) ENVELOPE WITH LIGHTNING	[154B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F584, 0x0041 };
    uint32_t const ces[9] = { 0x154B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_346)
{
    // 1F584 0062;	
    // (🖄) ENVELOPE WITH LIGHTNING	[154B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F584, 0x0062 };
    uint32_t const ces[9] = { 0x154B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_347)
{
    // 1F585 0021;	
    // (🖅) FLYING ENVELOPE	[154C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F585, 0x0021 };
    uint32_t const ces[9] = { 0x154C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_348)
{
    // 1F585 003F;	
    // (🖅) FLYING ENVELOPE	[154C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F585, 0x003F };
    uint32_t const ces[9] = { 0x154C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_349)
{
    // 1F585 0061;	
    // (🖅) FLYING ENVELOPE	[154C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F585, 0x0061 };
    uint32_t const ces[9] = { 0x154C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_350)
{
    // 1F585 0041;	
    // (🖅) FLYING ENVELOPE	[154C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F585, 0x0041 };
    uint32_t const ces[9] = { 0x154C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_351)
{
    // 1F585 0062;	
    // (🖅) FLYING ENVELOPE	[154C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F585, 0x0062 };
    uint32_t const ces[9] = { 0x154C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_352)
{
    // 1F586 0021;	
    // (🖆) PEN OVER STAMPED ENVELOPE	[154D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F586, 0x0021 };
    uint32_t const ces[9] = { 0x154D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_353)
{
    // 1F586 003F;	
    // (🖆) PEN OVER STAMPED ENVELOPE	[154D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F586, 0x003F };
    uint32_t const ces[9] = { 0x154D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_354)
{
    // 1F586 0061;	
    // (🖆) PEN OVER STAMPED ENVELOPE	[154D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F586, 0x0061 };
    uint32_t const ces[9] = { 0x154D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_355)
{
    // 1F586 0041;	
    // (🖆) PEN OVER STAMPED ENVELOPE	[154D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F586, 0x0041 };
    uint32_t const ces[9] = { 0x154D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_356)
{
    // 1F586 0062;	
    // (🖆) PEN OVER STAMPED ENVELOPE	[154D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F586, 0x0062 };
    uint32_t const ces[9] = { 0x154D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_357)
{
    // 1F587 0021;	
    // (🖇) LINKED PAPERCLIPS	[154E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F587, 0x0021 };
    uint32_t const ces[9] = { 0x154E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_358)
{
    // 1F587 003F;	
    // (🖇) LINKED PAPERCLIPS	[154E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F587, 0x003F };
    uint32_t const ces[9] = { 0x154E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_359)
{
    // 1F587 0061;	
    // (🖇) LINKED PAPERCLIPS	[154E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F587, 0x0061 };
    uint32_t const ces[9] = { 0x154E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_360)
{
    // 1F587 0041;	
    // (🖇) LINKED PAPERCLIPS	[154E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F587, 0x0041 };
    uint32_t const ces[9] = { 0x154E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_361)
{
    // 1F587 0062;	
    // (🖇) LINKED PAPERCLIPS	[154E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F587, 0x0062 };
    uint32_t const ces[9] = { 0x154E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_362)
{
    // 1F588 0021;	
    // (🖈) BLACK PUSHPIN	[154F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F588, 0x0021 };
    uint32_t const ces[9] = { 0x154F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_363)
{
    // 1F588 003F;	
    // (🖈) BLACK PUSHPIN	[154F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F588, 0x003F };
    uint32_t const ces[9] = { 0x154F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_364)
{
    // 1F588 0061;	
    // (🖈) BLACK PUSHPIN	[154F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F588, 0x0061 };
    uint32_t const ces[9] = { 0x154F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_365)
{
    // 1F588 0041;	
    // (🖈) BLACK PUSHPIN	[154F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F588, 0x0041 };
    uint32_t const ces[9] = { 0x154F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_366)
{
    // 1F588 0062;	
    // (🖈) BLACK PUSHPIN	[154F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F588, 0x0062 };
    uint32_t const ces[9] = { 0x154F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_367)
{
    // 1F589 0021;	
    // (🖉) LOWER LEFT PENCIL	[1550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F589, 0x0021 };
    uint32_t const ces[9] = { 0x1550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_368)
{
    // 1F589 003F;	
    // (🖉) LOWER LEFT PENCIL	[1550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F589, 0x003F };
    uint32_t const ces[9] = { 0x1550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_369)
{
    // 1F589 0061;	
    // (🖉) LOWER LEFT PENCIL	[1550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F589, 0x0061 };
    uint32_t const ces[9] = { 0x1550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_370)
{
    // 1F589 0041;	
    // (🖉) LOWER LEFT PENCIL	[1550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F589, 0x0041 };
    uint32_t const ces[9] = { 0x1550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_371)
{
    // 1F589 0062;	
    // (🖉) LOWER LEFT PENCIL	[1550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F589, 0x0062 };
    uint32_t const ces[9] = { 0x1550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_372)
{
    // 1F58A 0021;	
    // (🖊) LOWER LEFT BALLPOINT PEN	[1551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58A, 0x0021 };
    uint32_t const ces[9] = { 0x1551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_373)
{
    // 1F58A 003F;	
    // (🖊) LOWER LEFT BALLPOINT PEN	[1551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58A, 0x003F };
    uint32_t const ces[9] = { 0x1551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_374)
{
    // 1F58A 0061;	
    // (🖊) LOWER LEFT BALLPOINT PEN	[1551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58A, 0x0061 };
    uint32_t const ces[9] = { 0x1551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_375)
{
    // 1F58A 0041;	
    // (🖊) LOWER LEFT BALLPOINT PEN	[1551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58A, 0x0041 };
    uint32_t const ces[9] = { 0x1551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_376)
{
    // 1F58A 0062;	
    // (🖊) LOWER LEFT BALLPOINT PEN	[1551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58A, 0x0062 };
    uint32_t const ces[9] = { 0x1551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_377)
{
    // 1F58B 0021;	
    // (🖋) LOWER LEFT FOUNTAIN PEN	[1552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58B, 0x0021 };
    uint32_t const ces[9] = { 0x1552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_378)
{
    // 1F58B 003F;	
    // (🖋) LOWER LEFT FOUNTAIN PEN	[1552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58B, 0x003F };
    uint32_t const ces[9] = { 0x1552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_379)
{
    // 1F58B 0061;	
    // (🖋) LOWER LEFT FOUNTAIN PEN	[1552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58B, 0x0061 };
    uint32_t const ces[9] = { 0x1552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_380)
{
    // 1F58B 0041;	
    // (🖋) LOWER LEFT FOUNTAIN PEN	[1552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58B, 0x0041 };
    uint32_t const ces[9] = { 0x1552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_381)
{
    // 1F58B 0062;	
    // (🖋) LOWER LEFT FOUNTAIN PEN	[1552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58B, 0x0062 };
    uint32_t const ces[9] = { 0x1552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_382)
{
    // 1F58C 0021;	
    // (🖌) LOWER LEFT PAINTBRUSH	[1553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58C, 0x0021 };
    uint32_t const ces[9] = { 0x1553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_383)
{
    // 1F58C 003F;	
    // (🖌) LOWER LEFT PAINTBRUSH	[1553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58C, 0x003F };
    uint32_t const ces[9] = { 0x1553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_384)
{
    // 1F58C 0061;	
    // (🖌) LOWER LEFT PAINTBRUSH	[1553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58C, 0x0061 };
    uint32_t const ces[9] = { 0x1553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_385)
{
    // 1F58C 0041;	
    // (🖌) LOWER LEFT PAINTBRUSH	[1553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58C, 0x0041 };
    uint32_t const ces[9] = { 0x1553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_386)
{
    // 1F58C 0062;	
    // (🖌) LOWER LEFT PAINTBRUSH	[1553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58C, 0x0062 };
    uint32_t const ces[9] = { 0x1553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_387)
{
    // 1F58D 0021;	
    // (🖍) LOWER LEFT CRAYON	[1554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58D, 0x0021 };
    uint32_t const ces[9] = { 0x1554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_388)
{
    // 1F58D 003F;	
    // (🖍) LOWER LEFT CRAYON	[1554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58D, 0x003F };
    uint32_t const ces[9] = { 0x1554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_389)
{
    // 1F58D 0061;	
    // (🖍) LOWER LEFT CRAYON	[1554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58D, 0x0061 };
    uint32_t const ces[9] = { 0x1554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_390)
{
    // 1F58D 0041;	
    // (🖍) LOWER LEFT CRAYON	[1554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58D, 0x0041 };
    uint32_t const ces[9] = { 0x1554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_391)
{
    // 1F58D 0062;	
    // (🖍) LOWER LEFT CRAYON	[1554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58D, 0x0062 };
    uint32_t const ces[9] = { 0x1554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_392)
{
    // 1F58E 0021;	
    // (🖎) LEFT WRITING HAND	[1555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58E, 0x0021 };
    uint32_t const ces[9] = { 0x1555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_393)
{
    // 1F58E 003F;	
    // (🖎) LEFT WRITING HAND	[1555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58E, 0x003F };
    uint32_t const ces[9] = { 0x1555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_394)
{
    // 1F58E 0061;	
    // (🖎) LEFT WRITING HAND	[1555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58E, 0x0061 };
    uint32_t const ces[9] = { 0x1555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_395)
{
    // 1F58E 0041;	
    // (🖎) LEFT WRITING HAND	[1555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58E, 0x0041 };
    uint32_t const ces[9] = { 0x1555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_396)
{
    // 1F58E 0062;	
    // (🖎) LEFT WRITING HAND	[1555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58E, 0x0062 };
    uint32_t const ces[9] = { 0x1555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_397)
{
    // 1F58F 0021;	
    // (🖏) TURNED OK HAND SIGN	[1556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58F, 0x0021 };
    uint32_t const ces[9] = { 0x1556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_398)
{
    // 1F58F 003F;	
    // (🖏) TURNED OK HAND SIGN	[1556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58F, 0x003F };
    uint32_t const ces[9] = { 0x1556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_399)
{
    // 1F58F 0061;	
    // (🖏) TURNED OK HAND SIGN	[1556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58F, 0x0061 };
    uint32_t const ces[9] = { 0x1556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_400)
{
    // 1F58F 0041;	
    // (🖏) TURNED OK HAND SIGN	[1556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F58F, 0x0041 };
    uint32_t const ces[9] = { 0x1556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_401)
{
    // 1F58F 0062;	
    // (🖏) TURNED OK HAND SIGN	[1556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F58F, 0x0062 };
    uint32_t const ces[9] = { 0x1556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_402)
{
    // 1F590 0021;	
    // (🖐) RAISED HAND WITH FINGERS SPLAYED	[1557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F590, 0x0021 };
    uint32_t const ces[9] = { 0x1557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_403)
{
    // 1F590 003F;	
    // (🖐) RAISED HAND WITH FINGERS SPLAYED	[1557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F590, 0x003F };
    uint32_t const ces[9] = { 0x1557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_404)
{
    // 1F590 0061;	
    // (🖐) RAISED HAND WITH FINGERS SPLAYED	[1557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F590, 0x0061 };
    uint32_t const ces[9] = { 0x1557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_405)
{
    // 1F590 0041;	
    // (🖐) RAISED HAND WITH FINGERS SPLAYED	[1557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F590, 0x0041 };
    uint32_t const ces[9] = { 0x1557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_406)
{
    // 1F590 0062;	
    // (🖐) RAISED HAND WITH FINGERS SPLAYED	[1557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F590, 0x0062 };
    uint32_t const ces[9] = { 0x1557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_407)
{
    // 1F591 0021;	
    // (🖑) REVERSED RAISED HAND WITH FINGERS SPLAYED	[1558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F591, 0x0021 };
    uint32_t const ces[9] = { 0x1558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_408)
{
    // 1F591 003F;	
    // (🖑) REVERSED RAISED HAND WITH FINGERS SPLAYED	[1558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F591, 0x003F };
    uint32_t const ces[9] = { 0x1558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_409)
{
    // 1F591 0061;	
    // (🖑) REVERSED RAISED HAND WITH FINGERS SPLAYED	[1558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F591, 0x0061 };
    uint32_t const ces[9] = { 0x1558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_410)
{
    // 1F591 0041;	
    // (🖑) REVERSED RAISED HAND WITH FINGERS SPLAYED	[1558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F591, 0x0041 };
    uint32_t const ces[9] = { 0x1558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_411)
{
    // 1F591 0062;	
    // (🖑) REVERSED RAISED HAND WITH FINGERS SPLAYED	[1558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F591, 0x0062 };
    uint32_t const ces[9] = { 0x1558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_412)
{
    // 1F592 0021;	
    // (🖒) REVERSED THUMBS UP SIGN	[1559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F592, 0x0021 };
    uint32_t const ces[9] = { 0x1559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_413)
{
    // 1F592 003F;	
    // (🖒) REVERSED THUMBS UP SIGN	[1559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F592, 0x003F };
    uint32_t const ces[9] = { 0x1559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_414)
{
    // 1F592 0061;	
    // (🖒) REVERSED THUMBS UP SIGN	[1559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F592, 0x0061 };
    uint32_t const ces[9] = { 0x1559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_415)
{
    // 1F592 0041;	
    // (🖒) REVERSED THUMBS UP SIGN	[1559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F592, 0x0041 };
    uint32_t const ces[9] = { 0x1559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_416)
{
    // 1F592 0062;	
    // (🖒) REVERSED THUMBS UP SIGN	[1559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F592, 0x0062 };
    uint32_t const ces[9] = { 0x1559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_417)
{
    // 1F593 0021;	
    // (🖓) REVERSED THUMBS DOWN SIGN	[155A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F593, 0x0021 };
    uint32_t const ces[9] = { 0x155A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_418)
{
    // 1F593 003F;	
    // (🖓) REVERSED THUMBS DOWN SIGN	[155A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F593, 0x003F };
    uint32_t const ces[9] = { 0x155A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_419)
{
    // 1F593 0061;	
    // (🖓) REVERSED THUMBS DOWN SIGN	[155A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F593, 0x0061 };
    uint32_t const ces[9] = { 0x155A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_420)
{
    // 1F593 0041;	
    // (🖓) REVERSED THUMBS DOWN SIGN	[155A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F593, 0x0041 };
    uint32_t const ces[9] = { 0x155A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_421)
{
    // 1F593 0062;	
    // (🖓) REVERSED THUMBS DOWN SIGN	[155A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F593, 0x0062 };
    uint32_t const ces[9] = { 0x155A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_422)
{
    // 1F594 0021;	
    // (🖔) REVERSED VICTORY HAND	[155B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F594, 0x0021 };
    uint32_t const ces[9] = { 0x155B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_423)
{
    // 1F594 003F;	
    // (🖔) REVERSED VICTORY HAND	[155B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F594, 0x003F };
    uint32_t const ces[9] = { 0x155B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_424)
{
    // 1F594 0061;	
    // (🖔) REVERSED VICTORY HAND	[155B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F594, 0x0061 };
    uint32_t const ces[9] = { 0x155B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_425)
{
    // 1F594 0041;	
    // (🖔) REVERSED VICTORY HAND	[155B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F594, 0x0041 };
    uint32_t const ces[9] = { 0x155B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_426)
{
    // 1F594 0062;	
    // (🖔) REVERSED VICTORY HAND	[155B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F594, 0x0062 };
    uint32_t const ces[9] = { 0x155B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_427)
{
    // 1F595 0021;	
    // (🖕) REVERSED HAND WITH MIDDLE FINGER EXTENDED	[155C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F595, 0x0021 };
    uint32_t const ces[9] = { 0x155C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_428)
{
    // 1F595 003F;	
    // (🖕) REVERSED HAND WITH MIDDLE FINGER EXTENDED	[155C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F595, 0x003F };
    uint32_t const ces[9] = { 0x155C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_429)
{
    // 1F595 0061;	
    // (🖕) REVERSED HAND WITH MIDDLE FINGER EXTENDED	[155C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F595, 0x0061 };
    uint32_t const ces[9] = { 0x155C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_430)
{
    // 1F595 0041;	
    // (🖕) REVERSED HAND WITH MIDDLE FINGER EXTENDED	[155C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F595, 0x0041 };
    uint32_t const ces[9] = { 0x155C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_431)
{
    // 1F595 0062;	
    // (🖕) REVERSED HAND WITH MIDDLE FINGER EXTENDED	[155C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F595, 0x0062 };
    uint32_t const ces[9] = { 0x155C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_432)
{
    // 1F596 0021;	
    // (🖖) RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS	[155D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F596, 0x0021 };
    uint32_t const ces[9] = { 0x155D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_433)
{
    // 1F596 003F;	
    // (🖖) RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS	[155D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F596, 0x003F };
    uint32_t const ces[9] = { 0x155D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_434)
{
    // 1F596 0061;	
    // (🖖) RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS	[155D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F596, 0x0061 };
    uint32_t const ces[9] = { 0x155D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_435)
{
    // 1F596 0041;	
    // (🖖) RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS	[155D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F596, 0x0041 };
    uint32_t const ces[9] = { 0x155D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_436)
{
    // 1F596 0062;	
    // (🖖) RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS	[155D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F596, 0x0062 };
    uint32_t const ces[9] = { 0x155D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_437)
{
    // 1F597 0021;	
    // (🖗) WHITE DOWN POINTING LEFT HAND INDEX	[155E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F597, 0x0021 };
    uint32_t const ces[9] = { 0x155E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_438)
{
    // 1F597 003F;	
    // (🖗) WHITE DOWN POINTING LEFT HAND INDEX	[155E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F597, 0x003F };
    uint32_t const ces[9] = { 0x155E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_439)
{
    // 1F597 0061;	
    // (🖗) WHITE DOWN POINTING LEFT HAND INDEX	[155E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F597, 0x0061 };
    uint32_t const ces[9] = { 0x155E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_440)
{
    // 1F597 0041;	
    // (🖗) WHITE DOWN POINTING LEFT HAND INDEX	[155E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F597, 0x0041 };
    uint32_t const ces[9] = { 0x155E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_441)
{
    // 1F597 0062;	
    // (🖗) WHITE DOWN POINTING LEFT HAND INDEX	[155E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F597, 0x0062 };
    uint32_t const ces[9] = { 0x155E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_442)
{
    // 1F598 0021;	
    // (🖘) SIDEWAYS WHITE LEFT POINTING INDEX	[155F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F598, 0x0021 };
    uint32_t const ces[9] = { 0x155F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_443)
{
    // 1F598 003F;	
    // (🖘) SIDEWAYS WHITE LEFT POINTING INDEX	[155F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F598, 0x003F };
    uint32_t const ces[9] = { 0x155F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_444)
{
    // 1F598 0061;	
    // (🖘) SIDEWAYS WHITE LEFT POINTING INDEX	[155F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F598, 0x0061 };
    uint32_t const ces[9] = { 0x155F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_445)
{
    // 1F598 0041;	
    // (🖘) SIDEWAYS WHITE LEFT POINTING INDEX	[155F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F598, 0x0041 };
    uint32_t const ces[9] = { 0x155F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_446)
{
    // 1F598 0062;	
    // (🖘) SIDEWAYS WHITE LEFT POINTING INDEX	[155F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F598, 0x0062 };
    uint32_t const ces[9] = { 0x155F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_447)
{
    // 1F599 0021;	
    // (🖙) SIDEWAYS WHITE RIGHT POINTING INDEX	[1560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F599, 0x0021 };
    uint32_t const ces[9] = { 0x1560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_448)
{
    // 1F599 003F;	
    // (🖙) SIDEWAYS WHITE RIGHT POINTING INDEX	[1560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F599, 0x003F };
    uint32_t const ces[9] = { 0x1560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_449)
{
    // 1F599 0061;	
    // (🖙) SIDEWAYS WHITE RIGHT POINTING INDEX	[1560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F599, 0x0061 };
    uint32_t const ces[9] = { 0x1560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_450)
{
    // 1F599 0041;	
    // (🖙) SIDEWAYS WHITE RIGHT POINTING INDEX	[1560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F599, 0x0041 };
    uint32_t const ces[9] = { 0x1560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_451)
{
    // 1F599 0062;	
    // (🖙) SIDEWAYS WHITE RIGHT POINTING INDEX	[1560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F599, 0x0062 };
    uint32_t const ces[9] = { 0x1560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_452)
{
    // 1F59A 0021;	
    // (🖚) SIDEWAYS BLACK LEFT POINTING INDEX	[1561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59A, 0x0021 };
    uint32_t const ces[9] = { 0x1561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_453)
{
    // 1F59A 003F;	
    // (🖚) SIDEWAYS BLACK LEFT POINTING INDEX	[1561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59A, 0x003F };
    uint32_t const ces[9] = { 0x1561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_454)
{
    // 1F59A 0061;	
    // (🖚) SIDEWAYS BLACK LEFT POINTING INDEX	[1561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59A, 0x0061 };
    uint32_t const ces[9] = { 0x1561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_455)
{
    // 1F59A 0041;	
    // (🖚) SIDEWAYS BLACK LEFT POINTING INDEX	[1561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59A, 0x0041 };
    uint32_t const ces[9] = { 0x1561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_456)
{
    // 1F59A 0062;	
    // (🖚) SIDEWAYS BLACK LEFT POINTING INDEX	[1561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59A, 0x0062 };
    uint32_t const ces[9] = { 0x1561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_457)
{
    // 1F59B 0021;	
    // (🖛) SIDEWAYS BLACK RIGHT POINTING INDEX	[1562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59B, 0x0021 };
    uint32_t const ces[9] = { 0x1562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_458)
{
    // 1F59B 003F;	
    // (🖛) SIDEWAYS BLACK RIGHT POINTING INDEX	[1562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59B, 0x003F };
    uint32_t const ces[9] = { 0x1562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_459)
{
    // 1F59B 0061;	
    // (🖛) SIDEWAYS BLACK RIGHT POINTING INDEX	[1562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59B, 0x0061 };
    uint32_t const ces[9] = { 0x1562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_460)
{
    // 1F59B 0041;	
    // (🖛) SIDEWAYS BLACK RIGHT POINTING INDEX	[1562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59B, 0x0041 };
    uint32_t const ces[9] = { 0x1562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_461)
{
    // 1F59B 0062;	
    // (🖛) SIDEWAYS BLACK RIGHT POINTING INDEX	[1562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59B, 0x0062 };
    uint32_t const ces[9] = { 0x1562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_462)
{
    // 1F59C 0021;	
    // (🖜) BLACK LEFT POINTING BACKHAND INDEX	[1563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59C, 0x0021 };
    uint32_t const ces[9] = { 0x1563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_463)
{
    // 1F59C 003F;	
    // (🖜) BLACK LEFT POINTING BACKHAND INDEX	[1563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59C, 0x003F };
    uint32_t const ces[9] = { 0x1563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_464)
{
    // 1F59C 0061;	
    // (🖜) BLACK LEFT POINTING BACKHAND INDEX	[1563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59C, 0x0061 };
    uint32_t const ces[9] = { 0x1563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_465)
{
    // 1F59C 0041;	
    // (🖜) BLACK LEFT POINTING BACKHAND INDEX	[1563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59C, 0x0041 };
    uint32_t const ces[9] = { 0x1563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_466)
{
    // 1F59C 0062;	
    // (🖜) BLACK LEFT POINTING BACKHAND INDEX	[1563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59C, 0x0062 };
    uint32_t const ces[9] = { 0x1563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_467)
{
    // 1F59D 0021;	
    // (🖝) BLACK RIGHT POINTING BACKHAND INDEX	[1564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59D, 0x0021 };
    uint32_t const ces[9] = { 0x1564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_468)
{
    // 1F59D 003F;	
    // (🖝) BLACK RIGHT POINTING BACKHAND INDEX	[1564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59D, 0x003F };
    uint32_t const ces[9] = { 0x1564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_469)
{
    // 1F59D 0061;	
    // (🖝) BLACK RIGHT POINTING BACKHAND INDEX	[1564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59D, 0x0061 };
    uint32_t const ces[9] = { 0x1564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_470)
{
    // 1F59D 0041;	
    // (🖝) BLACK RIGHT POINTING BACKHAND INDEX	[1564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59D, 0x0041 };
    uint32_t const ces[9] = { 0x1564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_471)
{
    // 1F59D 0062;	
    // (🖝) BLACK RIGHT POINTING BACKHAND INDEX	[1564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59D, 0x0062 };
    uint32_t const ces[9] = { 0x1564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_472)
{
    // 1F59E 0021;	
    // (🖞) SIDEWAYS WHITE UP POINTING INDEX	[1565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59E, 0x0021 };
    uint32_t const ces[9] = { 0x1565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_473)
{
    // 1F59E 003F;	
    // (🖞) SIDEWAYS WHITE UP POINTING INDEX	[1565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59E, 0x003F };
    uint32_t const ces[9] = { 0x1565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_474)
{
    // 1F59E 0061;	
    // (🖞) SIDEWAYS WHITE UP POINTING INDEX	[1565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59E, 0x0061 };
    uint32_t const ces[9] = { 0x1565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_475)
{
    // 1F59E 0041;	
    // (🖞) SIDEWAYS WHITE UP POINTING INDEX	[1565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59E, 0x0041 };
    uint32_t const ces[9] = { 0x1565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_476)
{
    // 1F59E 0062;	
    // (🖞) SIDEWAYS WHITE UP POINTING INDEX	[1565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59E, 0x0062 };
    uint32_t const ces[9] = { 0x1565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_477)
{
    // 1F59F 0021;	
    // (🖟) SIDEWAYS WHITE DOWN POINTING INDEX	[1566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59F, 0x0021 };
    uint32_t const ces[9] = { 0x1566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_478)
{
    // 1F59F 003F;	
    // (🖟) SIDEWAYS WHITE DOWN POINTING INDEX	[1566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59F, 0x003F };
    uint32_t const ces[9] = { 0x1566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_479)
{
    // 1F59F 0061;	
    // (🖟) SIDEWAYS WHITE DOWN POINTING INDEX	[1566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59F, 0x0061 };
    uint32_t const ces[9] = { 0x1566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_480)
{
    // 1F59F 0041;	
    // (🖟) SIDEWAYS WHITE DOWN POINTING INDEX	[1566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F59F, 0x0041 };
    uint32_t const ces[9] = { 0x1566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_481)
{
    // 1F59F 0062;	
    // (🖟) SIDEWAYS WHITE DOWN POINTING INDEX	[1566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F59F, 0x0062 };
    uint32_t const ces[9] = { 0x1566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_482)
{
    // 1F5A0 0021;	
    // (🖠) SIDEWAYS BLACK UP POINTING INDEX	[1567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A0, 0x0021 };
    uint32_t const ces[9] = { 0x1567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_483)
{
    // 1F5A0 003F;	
    // (🖠) SIDEWAYS BLACK UP POINTING INDEX	[1567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A0, 0x003F };
    uint32_t const ces[9] = { 0x1567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_484)
{
    // 1F5A0 0061;	
    // (🖠) SIDEWAYS BLACK UP POINTING INDEX	[1567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A0, 0x0061 };
    uint32_t const ces[9] = { 0x1567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_485)
{
    // 1F5A0 0041;	
    // (🖠) SIDEWAYS BLACK UP POINTING INDEX	[1567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A0, 0x0041 };
    uint32_t const ces[9] = { 0x1567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_486)
{
    // 1F5A0 0062;	
    // (🖠) SIDEWAYS BLACK UP POINTING INDEX	[1567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A0, 0x0062 };
    uint32_t const ces[9] = { 0x1567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_487)
{
    // 1F5A1 0021;	
    // (🖡) SIDEWAYS BLACK DOWN POINTING INDEX	[1568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A1, 0x0021 };
    uint32_t const ces[9] = { 0x1568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_488)
{
    // 1F5A1 003F;	
    // (🖡) SIDEWAYS BLACK DOWN POINTING INDEX	[1568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A1, 0x003F };
    uint32_t const ces[9] = { 0x1568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_489)
{
    // 1F5A1 0061;	
    // (🖡) SIDEWAYS BLACK DOWN POINTING INDEX	[1568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A1, 0x0061 };
    uint32_t const ces[9] = { 0x1568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_490)
{
    // 1F5A1 0041;	
    // (🖡) SIDEWAYS BLACK DOWN POINTING INDEX	[1568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A1, 0x0041 };
    uint32_t const ces[9] = { 0x1568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_491)
{
    // 1F5A1 0062;	
    // (🖡) SIDEWAYS BLACK DOWN POINTING INDEX	[1568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A1, 0x0062 };
    uint32_t const ces[9] = { 0x1568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_492)
{
    // 1F5A2 0021;	
    // (🖢) BLACK UP POINTING BACKHAND INDEX	[1569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A2, 0x0021 };
    uint32_t const ces[9] = { 0x1569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_493)
{
    // 1F5A2 003F;	
    // (🖢) BLACK UP POINTING BACKHAND INDEX	[1569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A2, 0x003F };
    uint32_t const ces[9] = { 0x1569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_494)
{
    // 1F5A2 0061;	
    // (🖢) BLACK UP POINTING BACKHAND INDEX	[1569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A2, 0x0061 };
    uint32_t const ces[9] = { 0x1569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_495)
{
    // 1F5A2 0041;	
    // (🖢) BLACK UP POINTING BACKHAND INDEX	[1569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F5A2, 0x0041 };
    uint32_t const ces[9] = { 0x1569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_496)
{
    // 1F5A2 0062;	
    // (🖢) BLACK UP POINTING BACKHAND INDEX	[1569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A2, 0x0062 };
    uint32_t const ces[9] = { 0x1569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_497)
{
    // 1F5A3 0021;	
    // (🖣) BLACK DOWN POINTING BACKHAND INDEX	[156A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A3, 0x0021 };
    uint32_t const ces[9] = { 0x156A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_498)
{
    // 1F5A3 003F;	
    // (🖣) BLACK DOWN POINTING BACKHAND INDEX	[156A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A3, 0x003F };
    uint32_t const ces[9] = { 0x156A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_061_499)
{
    // 1F5A3 0061;	
    // (🖣) BLACK DOWN POINTING BACKHAND INDEX	[156A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F5A3, 0x0061 };
    uint32_t const ces[9] = { 0x156A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

