// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_091_000)
{
    // 3360 0061;	
    // („ç†) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT	[1CAB FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3360, 0x0061 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_001)
{
    // 3360 0041;	
    // („ç†) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT	[1CAB FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x3360, 0x0041 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_002)
{
    // 3360 0062;	
    // („ç†) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT	[1CAB FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3360, 0x0062 };
    uint32_t const ces[13] = { 0x1CAB, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_003)
{
    // 1F10A 0021;	
    // (üÑä) DIGIT NINE COMMA	[1CAC 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F10A, 0x0021 };
    uint32_t const ces[12] = { 0x1CAC, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_004)
{
    // 1F10A 003F;	
    // (üÑä) DIGIT NINE COMMA	[1CAC 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F10A, 0x003F };
    uint32_t const ces[12] = { 0x1CAC, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_005)
{
    // 1F10A 0061;	
    // (üÑä) DIGIT NINE COMMA	[1CAC 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F10A, 0x0061 };
    uint32_t const ces[12] = { 0x1CAC, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_006)
{
    // 1F10A 0041;	
    // (üÑä) DIGIT NINE COMMA	[1CAC 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F10A, 0x0041 };
    uint32_t const ces[12] = { 0x1CAC, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_007)
{
    // 1F10A 0062;	
    // (üÑä) DIGIT NINE COMMA	[1CAC 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F10A, 0x0062 };
    uint32_t const ces[12] = { 0x1CAC, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_008)
{
    // 0039 0021;	
    // (9) DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0039, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_009)
{
    // 0669 0021;	
    // (‚ÄéŸ©‚Äé) ARABIC-INDIC DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0669, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_010)
{
    // 06F9 0021;	
    // (€π) EXTENDED ARABIC-INDIC DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_011)
{
    // 07C9 0021;	
    // (‚Äé‚Äéﬂâ‚Äé‚Äé) NKO DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_012)
{
    // 096F 0021;	
    // (‡•Ø) DEVANAGARI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_013)
{
    // 09EF 0021;	
    // (‡ßØ) BENGALI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_014)
{
    // 0A6F 0021;	
    // (‡©Ø) GURMUKHI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_015)
{
    // 0AEF 0021;	
    // (‡´Ø) GUJARATI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_016)
{
    // 0B6F 0021;	
    // (‡≠Ø) ORIYA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_017)
{
    // 0BEF 0021;	
    // (‡ØØ) TAMIL DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_018)
{
    // 0C6F 0021;	
    // (‡±Ø) TELUGU DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_019)
{
    // 0CEF 0021;	
    // (‡≥Ø) KANNADA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_020)
{
    // 0D6F 0021;	
    // (‡µØ) MALAYALAM DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_021)
{
    // 0DEF 0021;	
    // (‡∑Ø) SINHALA LITH DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_022)
{
    // 0E59 0021;	
    // (‡πô) THAI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_023)
{
    // 0ED9 0021;	
    // (‡ªô) LAO DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_024)
{
    // 0F29 0021;	
    // (‡º©) TIBETAN DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F29, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_025)
{
    // 1049 0021;	
    // (·Åâ) MYANMAR DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_026)
{
    // 1099 0021;	
    // (·Çô) MYANMAR SHAN DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_027)
{
    // 1371 0021;	
    // (·ç±) ETHIOPIC DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1371, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_028)
{
    // 17E9 0021;	
    // (·ü©) KHMER DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_029)
{
    // 17F9 0021;	
    // (·üπ) KHMER SYMBOL LEK ATTAK PRAM-BUON	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_030)
{
    // 1819 0021;	
    // (·†ô) MONGOLIAN DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1819, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_031)
{
    // 194F 0021;	
    // (·•è) LIMBU DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_032)
{
    // 19D9 0021;	
    // (·ßô) NEW TAI LUE DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_033)
{
    // 1A89 0021;	
    // (·™â) TAI THAM HORA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A89, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_034)
{
    // 1A99 0021;	
    // (·™ô) TAI THAM THAM DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A99, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_035)
{
    // 1B59 0021;	
    // (·≠ô) BALINESE DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_036)
{
    // 1BB9 0021;	
    // (·Æπ) SUNDANESE DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_037)
{
    // 1C49 0021;	
    // (·±â) LEPCHA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C49, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_038)
{
    // 1C59 0021;	
    // (·±ô) OL CHIKI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_039)
{
    // 3029 0021;	
    // („Ä©) HANGZHOU NUMERAL NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3029, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_040)
{
    // A629 0021;	
    // (Íò©) VAI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA629, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_041)
{
    // A8D9 0021;	
    // (Í£ô) SAURASHTRA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_042)
{
    // A909 0021;	
    // (Í§â) KAYAH LI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA909, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_043)
{
    // A9D9 0021;	
    // (Íßô) JAVANESE DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_044)
{
    // A9F9 0021;	
    // (Íßπ) MYANMAR TAI LAING DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_045)
{
    // AA59 0021;	
    // (Í©ô) CHAM DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_046)
{
    // ABF9 0021;	
    // (ÍØπ) MEETEI MAYEK DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_047)
{
    // 1010F 0021;	
    // (êÑè) AEGEAN NUMBER NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_048)
{
    // 102E9 0021;	
    // (êã©) COPTIC EPACT DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_049)
{
    // 104A9 0021;	
    // (êí©) OSMANYA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_050)
{
    // 109C8 0021;	
    // (‚Äé‚Äéêßà‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C8, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_051)
{
    // 10E68 0021;	
    // (‚Äéêπ®‚Äé) RUMI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E68, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_052)
{
    // 1105A 0021;	
    // (ëÅö) BRAHMI NUMBER NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1105A, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_053)
{
    // 1106F 0021;	
    // (ëÅØ) BRAHMI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_054)
{
    // 110F9 0021;	
    // (ëÉπ) SORA SOMPENG DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_055)
{
    // 1113F 0021;	
    // (ëÑø) CHAKMA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113F, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_056)
{
    // 111D9 0021;	
    // (ëáô) SHARADA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_057)
{
    // 111E9 0021;	
    // (ëá©) SINHALA ARCHAIC DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_058)
{
    // 112F9 0021;	
    // (ëãπ) KHUDAWADI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_059)
{
    // 11459 0021;	
    // (ëëô) NEWA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11459, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_060)
{
    // 114D9 0021;	
    // (ëìô) TIRHUTA DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_061)
{
    // 11659 0021;	
    // (ëôô) MODI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11659, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_062)
{
    // 116C9 0021;	
    // (ëõâ) TAKRI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_063)
{
    // 11739 0021;	
    // (ëúπ) AHOM DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11739, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_064)
{
    // 118E9 0021;	
    // (ë£©) WARANG CITI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E9, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_065)
{
    // 11C59 0021;	
    // (ë±ô) BHAIKSUKI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_066)
{
    // 11C62 0021;	
    // (ë±¢) BHAIKSUKI NUMBER NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C62, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_067)
{
    // 11D59 0021;	
    // (ëµô) MASARAM GONDI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_068)
{
    // 12407 0021;	
    // (íêá) CUNEIFORM NUMERIC SIGN NINE ASH	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12407, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_069)
{
    // 1240E 0021;	
    // (íêé) CUNEIFORM NUMERIC SIGN NINE DISH	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_070)
{
    // 12414 0021;	
    // (íêî) CUNEIFORM NUMERIC SIGN NINE U	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12414, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_071)
{
    // 1241D 0021;	
    // (íêù) CUNEIFORM NUMERIC SIGN NINE GESH2	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241D, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_072)
{
    // 1242B 0021;	
    // (íê´) CUNEIFORM NUMERIC SIGN NINE SHAR2	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242B, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_073)
{
    // 12446 0021;	
    // (íëÜ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12446, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_074)
{
    // 12447 0021;	
    // (íëá) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12447, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_075)
{
    // 12448 0021;	
    // (íëà) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12448, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_076)
{
    // 12449 0021;	
    // (íëâ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12449, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_077)
{
    // 1246E 0021;	
    // (íëÆ) CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_078)
{
    // 16A69 0021;	
    // (ñ©©) MRO DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A69, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_079)
{
    // 16B59 0021;	
    // (ñ≠ô) PAHAWH HMONG DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B59, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_080)
{
    // 1D368 0021;	
    // (ùç®) COUNTING ROD UNIT DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D368, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_081)
{
    // 1E8CF 0021;	
    // (‚Äé‚Äéû£è‚Äé‚Äé) MENDE KIKAKUI DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_082)
{
    // 1E959 0021;	
    // (‚Äé‚Äéû•ô‚Äé‚Äé) ADLAM DIGIT NINE	[1CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E959, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_083)
{
    // FF19 0021;	
    // (Ôºô) FULLWIDTH DIGIT NINE	[1CAC 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF19, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_084)
{
    // 0F32 0021;	
    // (‡º≤) TIBETAN DIGIT HALF NINE	[1CAC 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F32, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_085)
{
    // 1D7D7 0021;	
    // (ùüó) MATHEMATICAL BOLD DIGIT NINE	[1CAC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D7, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_086)
{
    // 1D7E1 0021;	
    // (ùü°) MATHEMATICAL DOUBLE-STRUCK DIGIT NINE	[1CAC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E1, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_087)
{
    // 1D7EB 0021;	
    // (ùü´) MATHEMATICAL SANS-SERIF DIGIT NINE	[1CAC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EB, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_088)
{
    // 1D7F5 0021;	
    // (ùüµ) MATHEMATICAL SANS-SERIF BOLD DIGIT NINE	[1CAC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_089)
{
    // 1D7FF 0021;	
    // (ùüø) MATHEMATICAL MONOSPACE DIGIT NINE	[1CAC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FF, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_090)
{
    // 2468 0021;	
    // (‚ë®) CIRCLED DIGIT NINE	[1CAC 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2468, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_091)
{
    // 24FD 0021;	
    // (‚ìΩ) DOUBLE CIRCLED DIGIT NINE	[1CAC 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FD, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_092)
{
    // 277E 0021;	
    // (‚ùæ) DINGBAT NEGATIVE CIRCLED DIGIT NINE	[1CAC 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277E, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_093)
{
    // 2788 0021;	
    // (‚ûà) DINGBAT CIRCLED SANS-SERIF DIGIT NINE	[1CAC 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2788, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_094)
{
    // 2792 0021;	
    // (‚ûí) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE	[1CAC 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2792, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_095)
{
    // 2079 0021;	
    // (‚Åπ) SUPERSCRIPT NINE	[1CAC 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2079, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_096)
{
    // 2089 0021;	
    // (‚Çâ) SUBSCRIPT NINE	[1CAC 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2089, 0x0021 };
    uint32_t const ces[9] = { 0x1CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_097)
{
    // 0039 003F;	
    // (9) DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0039, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_098)
{
    // 0669 003F;	
    // (‚ÄéŸ©‚Äé) ARABIC-INDIC DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0669, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_099)
{
    // 06F9 003F;	
    // (€π) EXTENDED ARABIC-INDIC DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_100)
{
    // 07C9 003F;	
    // (‚Äé‚Äéﬂâ‚Äé‚Äé) NKO DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_101)
{
    // 096F 003F;	
    // (‡•Ø) DEVANAGARI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_102)
{
    // 09EF 003F;	
    // (‡ßØ) BENGALI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_103)
{
    // 0A6F 003F;	
    // (‡©Ø) GURMUKHI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_104)
{
    // 0AEF 003F;	
    // (‡´Ø) GUJARATI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_105)
{
    // 0B6F 003F;	
    // (‡≠Ø) ORIYA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_106)
{
    // 0BEF 003F;	
    // (‡ØØ) TAMIL DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_107)
{
    // 0C6F 003F;	
    // (‡±Ø) TELUGU DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_108)
{
    // 0CEF 003F;	
    // (‡≥Ø) KANNADA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_109)
{
    // 0D6F 003F;	
    // (‡µØ) MALAYALAM DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_110)
{
    // 0DEF 003F;	
    // (‡∑Ø) SINHALA LITH DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_111)
{
    // 0E59 003F;	
    // (‡πô) THAI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_112)
{
    // 0ED9 003F;	
    // (‡ªô) LAO DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_113)
{
    // 0F29 003F;	
    // (‡º©) TIBETAN DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F29, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_114)
{
    // 1049 003F;	
    // (·Åâ) MYANMAR DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_115)
{
    // 1099 003F;	
    // (·Çô) MYANMAR SHAN DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_116)
{
    // 1371 003F;	
    // (·ç±) ETHIOPIC DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1371, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_117)
{
    // 17E9 003F;	
    // (·ü©) KHMER DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_118)
{
    // 17F9 003F;	
    // (·üπ) KHMER SYMBOL LEK ATTAK PRAM-BUON	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_119)
{
    // 1819 003F;	
    // (·†ô) MONGOLIAN DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1819, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_120)
{
    // 194F 003F;	
    // (·•è) LIMBU DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_121)
{
    // 19D9 003F;	
    // (·ßô) NEW TAI LUE DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_122)
{
    // 1A89 003F;	
    // (·™â) TAI THAM HORA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A89, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_123)
{
    // 1A99 003F;	
    // (·™ô) TAI THAM THAM DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A99, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_124)
{
    // 1B59 003F;	
    // (·≠ô) BALINESE DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_125)
{
    // 1BB9 003F;	
    // (·Æπ) SUNDANESE DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_126)
{
    // 1C49 003F;	
    // (·±â) LEPCHA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C49, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_127)
{
    // 1C59 003F;	
    // (·±ô) OL CHIKI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_128)
{
    // 3029 003F;	
    // („Ä©) HANGZHOU NUMERAL NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3029, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_129)
{
    // A629 003F;	
    // (Íò©) VAI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA629, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_130)
{
    // A8D9 003F;	
    // (Í£ô) SAURASHTRA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_131)
{
    // A909 003F;	
    // (Í§â) KAYAH LI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA909, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_132)
{
    // A9D9 003F;	
    // (Íßô) JAVANESE DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_133)
{
    // A9F9 003F;	
    // (Íßπ) MYANMAR TAI LAING DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_134)
{
    // AA59 003F;	
    // (Í©ô) CHAM DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_135)
{
    // ABF9 003F;	
    // (ÍØπ) MEETEI MAYEK DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_136)
{
    // 1010F 003F;	
    // (êÑè) AEGEAN NUMBER NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_137)
{
    // 102E9 003F;	
    // (êã©) COPTIC EPACT DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_138)
{
    // 104A9 003F;	
    // (êí©) OSMANYA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_139)
{
    // 109C8 003F;	
    // (‚Äé‚Äéêßà‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C8, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_140)
{
    // 10E68 003F;	
    // (‚Äéêπ®‚Äé) RUMI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E68, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_141)
{
    // 1105A 003F;	
    // (ëÅö) BRAHMI NUMBER NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1105A, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_142)
{
    // 1106F 003F;	
    // (ëÅØ) BRAHMI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_143)
{
    // 110F9 003F;	
    // (ëÉπ) SORA SOMPENG DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_144)
{
    // 1113F 003F;	
    // (ëÑø) CHAKMA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113F, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_145)
{
    // 111D9 003F;	
    // (ëáô) SHARADA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_146)
{
    // 111E9 003F;	
    // (ëá©) SINHALA ARCHAIC DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_147)
{
    // 112F9 003F;	
    // (ëãπ) KHUDAWADI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_148)
{
    // 11459 003F;	
    // (ëëô) NEWA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11459, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_149)
{
    // 114D9 003F;	
    // (ëìô) TIRHUTA DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_150)
{
    // 11659 003F;	
    // (ëôô) MODI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11659, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_151)
{
    // 116C9 003F;	
    // (ëõâ) TAKRI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_152)
{
    // 11739 003F;	
    // (ëúπ) AHOM DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11739, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_153)
{
    // 118E9 003F;	
    // (ë£©) WARANG CITI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E9, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_154)
{
    // 11C59 003F;	
    // (ë±ô) BHAIKSUKI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_155)
{
    // 11C62 003F;	
    // (ë±¢) BHAIKSUKI NUMBER NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C62, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_156)
{
    // 11D59 003F;	
    // (ëµô) MASARAM GONDI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_157)
{
    // 12407 003F;	
    // (íêá) CUNEIFORM NUMERIC SIGN NINE ASH	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12407, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_158)
{
    // 1240E 003F;	
    // (íêé) CUNEIFORM NUMERIC SIGN NINE DISH	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240E, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_159)
{
    // 12414 003F;	
    // (íêî) CUNEIFORM NUMERIC SIGN NINE U	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12414, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_160)
{
    // 1241D 003F;	
    // (íêù) CUNEIFORM NUMERIC SIGN NINE GESH2	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241D, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_161)
{
    // 1242B 003F;	
    // (íê´) CUNEIFORM NUMERIC SIGN NINE SHAR2	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242B, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_162)
{
    // 12446 003F;	
    // (íëÜ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12446, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_163)
{
    // 12447 003F;	
    // (íëá) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12447, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_164)
{
    // 12448 003F;	
    // (íëà) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12448, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_165)
{
    // 12449 003F;	
    // (íëâ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12449, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_166)
{
    // 1246E 003F;	
    // (íëÆ) CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246E, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_167)
{
    // 16A69 003F;	
    // (ñ©©) MRO DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A69, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_168)
{
    // 16B59 003F;	
    // (ñ≠ô) PAHAWH HMONG DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B59, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_169)
{
    // 1D368 003F;	
    // (ùç®) COUNTING ROD UNIT DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D368, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_170)
{
    // 1E8CF 003F;	
    // (‚Äé‚Äéû£è‚Äé‚Äé) MENDE KIKAKUI DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_171)
{
    // 1E959 003F;	
    // (‚Äé‚Äéû•ô‚Äé‚Äé) ADLAM DIGIT NINE	[1CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E959, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_172)
{
    // FF19 003F;	
    // (Ôºô) FULLWIDTH DIGIT NINE	[1CAC 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF19, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_173)
{
    // 0F32 003F;	
    // (‡º≤) TIBETAN DIGIT HALF NINE	[1CAC 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F32, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_174)
{
    // 1D7D7 003F;	
    // (ùüó) MATHEMATICAL BOLD DIGIT NINE	[1CAC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D7, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_175)
{
    // 1D7E1 003F;	
    // (ùü°) MATHEMATICAL DOUBLE-STRUCK DIGIT NINE	[1CAC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E1, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_176)
{
    // 1D7EB 003F;	
    // (ùü´) MATHEMATICAL SANS-SERIF DIGIT NINE	[1CAC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EB, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_177)
{
    // 1D7F5 003F;	
    // (ùüµ) MATHEMATICAL SANS-SERIF BOLD DIGIT NINE	[1CAC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F5, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_178)
{
    // 1D7FF 003F;	
    // (ùüø) MATHEMATICAL MONOSPACE DIGIT NINE	[1CAC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FF, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_179)
{
    // 2468 003F;	
    // (‚ë®) CIRCLED DIGIT NINE	[1CAC 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2468, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_180)
{
    // 24FD 003F;	
    // (‚ìΩ) DOUBLE CIRCLED DIGIT NINE	[1CAC 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FD, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_181)
{
    // 277E 003F;	
    // (‚ùæ) DINGBAT NEGATIVE CIRCLED DIGIT NINE	[1CAC 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277E, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_182)
{
    // 2788 003F;	
    // (‚ûà) DINGBAT CIRCLED SANS-SERIF DIGIT NINE	[1CAC 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2788, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_183)
{
    // 2792 003F;	
    // (‚ûí) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE	[1CAC 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2792, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_184)
{
    // 2079 003F;	
    // (‚Åπ) SUPERSCRIPT NINE	[1CAC 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2079, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_185)
{
    // 2089 003F;	
    // (‚Çâ) SUBSCRIPT NINE	[1CAC 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2089, 0x003F };
    uint32_t const ces[9] = { 0x1CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_186)
{
    // 2490 0021;	
    // (‚íê) DIGIT NINE FULL STOP	[1CAC 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2490, 0x0021 };
    uint32_t const ces[12] = { 0x1CAC, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_187)
{
    // 2490 003F;	
    // (‚íê) DIGIT NINE FULL STOP	[1CAC 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2490, 0x003F };
    uint32_t const ces[12] = { 0x1CAC, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_188)
{
    // 2490 0061;	
    // (‚íê) DIGIT NINE FULL STOP	[1CAC 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2490, 0x0061 };
    uint32_t const ces[12] = { 0x1CAC, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_189)
{
    // 2490 0041;	
    // (‚íê) DIGIT NINE FULL STOP	[1CAC 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2490, 0x0041 };
    uint32_t const ces[12] = { 0x1CAC, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_190)
{
    // 2490 0062;	
    // (‚íê) DIGIT NINE FULL STOP	[1CAC 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2490, 0x0062 };
    uint32_t const ces[12] = { 0x1CAC, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_191)
{
    // 0039 0061;	
    // (9) DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0039, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_192)
{
    // 0669 0061;	
    // (‚ÄéŸ©‚Äé) ARABIC-INDIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0669, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_193)
{
    // 06F9 0061;	
    // (€π) EXTENDED ARABIC-INDIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_194)
{
    // 07C9 0061;	
    // (‚Äé‚Äéﬂâ‚Äé‚Äé) NKO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_195)
{
    // 096F 0061;	
    // (‡•Ø) DEVANAGARI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_196)
{
    // 09EF 0061;	
    // (‡ßØ) BENGALI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_197)
{
    // 0A6F 0061;	
    // (‡©Ø) GURMUKHI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_198)
{
    // 0AEF 0061;	
    // (‡´Ø) GUJARATI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_199)
{
    // 0B6F 0061;	
    // (‡≠Ø) ORIYA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_200)
{
    // 0BEF 0061;	
    // (‡ØØ) TAMIL DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_201)
{
    // 0C6F 0061;	
    // (‡±Ø) TELUGU DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_202)
{
    // 0CEF 0061;	
    // (‡≥Ø) KANNADA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_203)
{
    // 0D6F 0061;	
    // (‡µØ) MALAYALAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_204)
{
    // 0DEF 0061;	
    // (‡∑Ø) SINHALA LITH DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_205)
{
    // 0E59 0061;	
    // (‡πô) THAI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_206)
{
    // 0ED9 0061;	
    // (‡ªô) LAO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_207)
{
    // 0F29 0061;	
    // (‡º©) TIBETAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F29, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_208)
{
    // 1049 0061;	
    // (·Åâ) MYANMAR DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_209)
{
    // 1099 0061;	
    // (·Çô) MYANMAR SHAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_210)
{
    // 1371 0061;	
    // (·ç±) ETHIOPIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1371, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_211)
{
    // 17E9 0061;	
    // (·ü©) KHMER DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_212)
{
    // 17F9 0061;	
    // (·üπ) KHMER SYMBOL LEK ATTAK PRAM-BUON	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_213)
{
    // 1819 0061;	
    // (·†ô) MONGOLIAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1819, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_214)
{
    // 194F 0061;	
    // (·•è) LIMBU DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_215)
{
    // 19D9 0061;	
    // (·ßô) NEW TAI LUE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_216)
{
    // 1A89 0061;	
    // (·™â) TAI THAM HORA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A89, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_217)
{
    // 1A99 0061;	
    // (·™ô) TAI THAM THAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A99, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_218)
{
    // 1B59 0061;	
    // (·≠ô) BALINESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_219)
{
    // 1BB9 0061;	
    // (·Æπ) SUNDANESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_220)
{
    // 1C49 0061;	
    // (·±â) LEPCHA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C49, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_221)
{
    // 1C59 0061;	
    // (·±ô) OL CHIKI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_222)
{
    // 3029 0061;	
    // („Ä©) HANGZHOU NUMERAL NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3029, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_223)
{
    // A629 0061;	
    // (Íò©) VAI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA629, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_224)
{
    // A8D9 0061;	
    // (Í£ô) SAURASHTRA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_225)
{
    // A909 0061;	
    // (Í§â) KAYAH LI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA909, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_226)
{
    // A9D9 0061;	
    // (Íßô) JAVANESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_227)
{
    // A9F9 0061;	
    // (Íßπ) MYANMAR TAI LAING DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_228)
{
    // AA59 0061;	
    // (Í©ô) CHAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_229)
{
    // ABF9 0061;	
    // (ÍØπ) MEETEI MAYEK DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_230)
{
    // 1010F 0061;	
    // (êÑè) AEGEAN NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_231)
{
    // 102E9 0061;	
    // (êã©) COPTIC EPACT DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_232)
{
    // 104A9 0061;	
    // (êí©) OSMANYA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_233)
{
    // 109C8 0061;	
    // (‚Äé‚Äéêßà‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C8, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_234)
{
    // 10E68 0061;	
    // (‚Äéêπ®‚Äé) RUMI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E68, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_235)
{
    // 1105A 0061;	
    // (ëÅö) BRAHMI NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1105A, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_236)
{
    // 1106F 0061;	
    // (ëÅØ) BRAHMI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_237)
{
    // 110F9 0061;	
    // (ëÉπ) SORA SOMPENG DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_238)
{
    // 1113F 0061;	
    // (ëÑø) CHAKMA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113F, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_239)
{
    // 111D9 0061;	
    // (ëáô) SHARADA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_240)
{
    // 111E9 0061;	
    // (ëá©) SINHALA ARCHAIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_241)
{
    // 112F9 0061;	
    // (ëãπ) KHUDAWADI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_242)
{
    // 11459 0061;	
    // (ëëô) NEWA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11459, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_243)
{
    // 114D9 0061;	
    // (ëìô) TIRHUTA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_244)
{
    // 11659 0061;	
    // (ëôô) MODI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11659, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_245)
{
    // 116C9 0061;	
    // (ëõâ) TAKRI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_246)
{
    // 11739 0061;	
    // (ëúπ) AHOM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11739, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_247)
{
    // 118E9 0061;	
    // (ë£©) WARANG CITI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E9, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_248)
{
    // 11C59 0061;	
    // (ë±ô) BHAIKSUKI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_249)
{
    // 11C62 0061;	
    // (ë±¢) BHAIKSUKI NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C62, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_250)
{
    // 11D59 0061;	
    // (ëµô) MASARAM GONDI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_251)
{
    // 12407 0061;	
    // (íêá) CUNEIFORM NUMERIC SIGN NINE ASH	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12407, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_252)
{
    // 1240E 0061;	
    // (íêé) CUNEIFORM NUMERIC SIGN NINE DISH	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_253)
{
    // 12414 0061;	
    // (íêî) CUNEIFORM NUMERIC SIGN NINE U	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12414, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_254)
{
    // 1241D 0061;	
    // (íêù) CUNEIFORM NUMERIC SIGN NINE GESH2	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241D, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_255)
{
    // 1242B 0061;	
    // (íê´) CUNEIFORM NUMERIC SIGN NINE SHAR2	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242B, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_256)
{
    // 12446 0061;	
    // (íëÜ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12446, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_257)
{
    // 12447 0061;	
    // (íëá) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12447, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_258)
{
    // 12448 0061;	
    // (íëà) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12448, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_259)
{
    // 12449 0061;	
    // (íëâ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12449, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_260)
{
    // 1246E 0061;	
    // (íëÆ) CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_261)
{
    // 16A69 0061;	
    // (ñ©©) MRO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A69, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_262)
{
    // 16B59 0061;	
    // (ñ≠ô) PAHAWH HMONG DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B59, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_263)
{
    // 1D368 0061;	
    // (ùç®) COUNTING ROD UNIT DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D368, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_264)
{
    // 1E8CF 0061;	
    // (‚Äé‚Äéû£è‚Äé‚Äé) MENDE KIKAKUI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_265)
{
    // 1E959 0061;	
    // (‚Äé‚Äéû•ô‚Äé‚Äé) ADLAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E959, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_266)
{
    // 0039 0041;	
    // (9) DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0039, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_267)
{
    // 0669 0041;	
    // (‚ÄéŸ©‚Äé) ARABIC-INDIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0669, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_268)
{
    // 06F9 0041;	
    // (€π) EXTENDED ARABIC-INDIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_269)
{
    // 07C9 0041;	
    // (‚Äé‚Äéﬂâ‚Äé‚Äé) NKO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_270)
{
    // 096F 0041;	
    // (‡•Ø) DEVANAGARI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x096F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_271)
{
    // 09EF 0041;	
    // (‡ßØ) BENGALI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09EF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_272)
{
    // 0A6F 0041;	
    // (‡©Ø) GURMUKHI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A6F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_273)
{
    // 0AEF 0041;	
    // (‡´Ø) GUJARATI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AEF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_274)
{
    // 0B6F 0041;	
    // (‡≠Ø) ORIYA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B6F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_275)
{
    // 0BEF 0041;	
    // (‡ØØ) TAMIL DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BEF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_276)
{
    // 0C6F 0041;	
    // (‡±Ø) TELUGU DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C6F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_277)
{
    // 0CEF 0041;	
    // (‡≥Ø) KANNADA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CEF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_278)
{
    // 0D6F 0041;	
    // (‡µØ) MALAYALAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D6F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_279)
{
    // 0DEF 0041;	
    // (‡∑Ø) SINHALA LITH DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DEF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_280)
{
    // 0E59 0041;	
    // (‡πô) THAI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_281)
{
    // 0ED9 0041;	
    // (‡ªô) LAO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_282)
{
    // 0F29 0041;	
    // (‡º©) TIBETAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F29, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_283)
{
    // 1049 0041;	
    // (·Åâ) MYANMAR DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1049, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_284)
{
    // 1099 0041;	
    // (·Çô) MYANMAR SHAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1099, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_285)
{
    // 1371 0041;	
    // (·ç±) ETHIOPIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1371, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_286)
{
    // 17E9 0041;	
    // (·ü©) KHMER DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_287)
{
    // 17F9 0041;	
    // (·üπ) KHMER SYMBOL LEK ATTAK PRAM-BUON	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_288)
{
    // 1819 0041;	
    // (·†ô) MONGOLIAN DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1819, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_289)
{
    // 194F 0041;	
    // (·•è) LIMBU DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x194F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_290)
{
    // 19D9 0041;	
    // (·ßô) NEW TAI LUE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_291)
{
    // 1A89 0041;	
    // (·™â) TAI THAM HORA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A89, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_292)
{
    // 1A99 0041;	
    // (·™ô) TAI THAM THAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A99, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_293)
{
    // 1B59 0041;	
    // (·≠ô) BALINESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_294)
{
    // 1BB9 0041;	
    // (·Æπ) SUNDANESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_295)
{
    // 1C49 0041;	
    // (·±â) LEPCHA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C49, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_296)
{
    // 1C59 0041;	
    // (·±ô) OL CHIKI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_297)
{
    // 3029 0041;	
    // („Ä©) HANGZHOU NUMERAL NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3029, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_298)
{
    // A629 0041;	
    // (Íò©) VAI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA629, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_299)
{
    // A8D9 0041;	
    // (Í£ô) SAURASHTRA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_300)
{
    // A909 0041;	
    // (Í§â) KAYAH LI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA909, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_301)
{
    // A9D9 0041;	
    // (Íßô) JAVANESE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_302)
{
    // A9F9 0041;	
    // (Íßπ) MYANMAR TAI LAING DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_303)
{
    // AA59 0041;	
    // (Í©ô) CHAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_304)
{
    // ABF9 0041;	
    // (ÍØπ) MEETEI MAYEK DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_305)
{
    // 1010F 0041;	
    // (êÑè) AEGEAN NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1010F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_306)
{
    // 102E9 0041;	
    // (êã©) COPTIC EPACT DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_307)
{
    // 104A9 0041;	
    // (êí©) OSMANYA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_308)
{
    // 109C8 0041;	
    // (‚Äé‚Äéêßà‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C8, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_309)
{
    // 10E68 0041;	
    // (‚Äéêπ®‚Äé) RUMI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E68, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_310)
{
    // 1105A 0041;	
    // (ëÅö) BRAHMI NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1105A, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_311)
{
    // 1106F 0041;	
    // (ëÅØ) BRAHMI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1106F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_312)
{
    // 110F9 0041;	
    // (ëÉπ) SORA SOMPENG DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_313)
{
    // 1113F 0041;	
    // (ëÑø) CHAKMA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1113F, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_314)
{
    // 111D9 0041;	
    // (ëáô) SHARADA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_315)
{
    // 111E9 0041;	
    // (ëá©) SINHALA ARCHAIC DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_316)
{
    // 112F9 0041;	
    // (ëãπ) KHUDAWADI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_317)
{
    // 11459 0041;	
    // (ëëô) NEWA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11459, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_318)
{
    // 114D9 0041;	
    // (ëìô) TIRHUTA DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_319)
{
    // 11659 0041;	
    // (ëôô) MODI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11659, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_320)
{
    // 116C9 0041;	
    // (ëõâ) TAKRI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_321)
{
    // 11739 0041;	
    // (ëúπ) AHOM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11739, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_322)
{
    // 118E9 0041;	
    // (ë£©) WARANG CITI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E9, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_323)
{
    // 11C59 0041;	
    // (ë±ô) BHAIKSUKI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_324)
{
    // 11C62 0041;	
    // (ë±¢) BHAIKSUKI NUMBER NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C62, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_325)
{
    // 11D59 0041;	
    // (ëµô) MASARAM GONDI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_326)
{
    // 12407 0041;	
    // (íêá) CUNEIFORM NUMERIC SIGN NINE ASH	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12407, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_327)
{
    // 1240E 0041;	
    // (íêé) CUNEIFORM NUMERIC SIGN NINE DISH	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_328)
{
    // 12414 0041;	
    // (íêî) CUNEIFORM NUMERIC SIGN NINE U	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12414, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_329)
{
    // 1241D 0041;	
    // (íêù) CUNEIFORM NUMERIC SIGN NINE GESH2	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241D, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_330)
{
    // 1242B 0041;	
    // (íê´) CUNEIFORM NUMERIC SIGN NINE SHAR2	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242B, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_331)
{
    // 12446 0041;	
    // (íëÜ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12446, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_332)
{
    // 12447 0041;	
    // (íëá) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12447, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_333)
{
    // 12448 0041;	
    // (íëà) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12448, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_334)
{
    // 12449 0041;	
    // (íëâ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12449, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_335)
{
    // 1246E 0041;	
    // (íëÆ) CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_336)
{
    // 16A69 0041;	
    // (ñ©©) MRO DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A69, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_337)
{
    // 16B59 0041;	
    // (ñ≠ô) PAHAWH HMONG DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B59, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_338)
{
    // 1D368 0041;	
    // (ùç®) COUNTING ROD UNIT DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D368, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_339)
{
    // 1E8CF 0041;	
    // (‚Äé‚Äéû£è‚Äé‚Äé) MENDE KIKAKUI DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8CF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_340)
{
    // 1E959 0041;	
    // (‚Äé‚Äéû•ô‚Äé‚Äé) ADLAM DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E959, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_341)
{
    // FF19 0061;	
    // (Ôºô) FULLWIDTH DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF19, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_342)
{
    // FF19 0041;	
    // (Ôºô) FULLWIDTH DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF19, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_343)
{
    // 0F32 0061;	
    // (‡º≤) TIBETAN DIGIT HALF NINE	[1CAC 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F32, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_344)
{
    // 0F32 0041;	
    // (‡º≤) TIBETAN DIGIT HALF NINE	[1CAC 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F32, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_345)
{
    // 1D7D7 0061;	
    // (ùüó) MATHEMATICAL BOLD DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D7, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_346)
{
    // 1D7E1 0061;	
    // (ùü°) MATHEMATICAL DOUBLE-STRUCK DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E1, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_347)
{
    // 1D7EB 0061;	
    // (ùü´) MATHEMATICAL SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EB, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_348)
{
    // 1D7F5 0061;	
    // (ùüµ) MATHEMATICAL SANS-SERIF BOLD DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_349)
{
    // 1D7FF 0061;	
    // (ùüø) MATHEMATICAL MONOSPACE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FF, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_350)
{
    // 1D7D7 0041;	
    // (ùüó) MATHEMATICAL BOLD DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D7, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_351)
{
    // 1D7E1 0041;	
    // (ùü°) MATHEMATICAL DOUBLE-STRUCK DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E1, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_352)
{
    // 1D7EB 0041;	
    // (ùü´) MATHEMATICAL SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7EB, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_353)
{
    // 1D7F5 0041;	
    // (ùüµ) MATHEMATICAL SANS-SERIF BOLD DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_354)
{
    // 1D7FF 0041;	
    // (ùüø) MATHEMATICAL MONOSPACE DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7FF, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_355)
{
    // 2468 0061;	
    // (‚ë®) CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2468, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_356)
{
    // 24FD 0061;	
    // (‚ìΩ) DOUBLE CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FD, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_357)
{
    // 277E 0061;	
    // (‚ùæ) DINGBAT NEGATIVE CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_358)
{
    // 2788 0061;	
    // (‚ûà) DINGBAT CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2788, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_359)
{
    // 2792 0061;	
    // (‚ûí) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2792, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_360)
{
    // 2468 0041;	
    // (‚ë®) CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2468, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_361)
{
    // 24FD 0041;	
    // (‚ìΩ) DOUBLE CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24FD, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_362)
{
    // 277E 0041;	
    // (‚ùæ) DINGBAT NEGATIVE CIRCLED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x277E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_363)
{
    // 2788 0041;	
    // (‚ûà) DINGBAT CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2788, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_364)
{
    // 2792 0041;	
    // (‚ûí) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2792, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_365)
{
    // 2079 0061;	
    // (‚Åπ) SUPERSCRIPT NINE	[1CAC 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2079, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_366)
{
    // 2079 0041;	
    // (‚Åπ) SUPERSCRIPT NINE	[1CAC 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2079, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_367)
{
    // 2089 0061;	
    // (‚Çâ) SUBSCRIPT NINE	[1CAC 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2089, 0x0061 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_368)
{
    // 2089 0041;	
    // (‚Çâ) SUBSCRIPT NINE	[1CAC 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2089, 0x0041 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_369)
{
    // 0039 0062;	
    // (9) DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0039, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_370)
{
    // 0669 0062;	
    // (‚ÄéŸ©‚Äé) ARABIC-INDIC DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0669, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_371)
{
    // 06F9 0062;	
    // (€π) EXTENDED ARABIC-INDIC DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_372)
{
    // 07C9 0062;	
    // (‚Äé‚Äéﬂâ‚Äé‚Äé) NKO DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_373)
{
    // 096F 0062;	
    // (‡•Ø) DEVANAGARI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_374)
{
    // 09EF 0062;	
    // (‡ßØ) BENGALI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_375)
{
    // 0A6F 0062;	
    // (‡©Ø) GURMUKHI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_376)
{
    // 0AEF 0062;	
    // (‡´Ø) GUJARATI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_377)
{
    // 0B6F 0062;	
    // (‡≠Ø) ORIYA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_378)
{
    // 0BEF 0062;	
    // (‡ØØ) TAMIL DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_379)
{
    // 0C6F 0062;	
    // (‡±Ø) TELUGU DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_380)
{
    // 0CEF 0062;	
    // (‡≥Ø) KANNADA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_381)
{
    // 0D6F 0062;	
    // (‡µØ) MALAYALAM DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_382)
{
    // 0DEF 0062;	
    // (‡∑Ø) SINHALA LITH DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_383)
{
    // 0E59 0062;	
    // (‡πô) THAI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_384)
{
    // 0ED9 0062;	
    // (‡ªô) LAO DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_385)
{
    // 0F29 0062;	
    // (‡º©) TIBETAN DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F29, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_386)
{
    // 1049 0062;	
    // (·Åâ) MYANMAR DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1049, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_387)
{
    // 1099 0062;	
    // (·Çô) MYANMAR SHAN DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1099, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_388)
{
    // 1371 0062;	
    // (·ç±) ETHIOPIC DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1371, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_389)
{
    // 17E9 0062;	
    // (·ü©) KHMER DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_390)
{
    // 17F9 0062;	
    // (·üπ) KHMER SYMBOL LEK ATTAK PRAM-BUON	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_391)
{
    // 1819 0062;	
    // (·†ô) MONGOLIAN DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1819, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_392)
{
    // 194F 0062;	
    // (·•è) LIMBU DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_393)
{
    // 19D9 0062;	
    // (·ßô) NEW TAI LUE DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_394)
{
    // 1A89 0062;	
    // (·™â) TAI THAM HORA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A89, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_395)
{
    // 1A99 0062;	
    // (·™ô) TAI THAM THAM DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A99, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_396)
{
    // 1B59 0062;	
    // (·≠ô) BALINESE DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_397)
{
    // 1BB9 0062;	
    // (·Æπ) SUNDANESE DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_398)
{
    // 1C49 0062;	
    // (·±â) LEPCHA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C49, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_399)
{
    // 1C59 0062;	
    // (·±ô) OL CHIKI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_400)
{
    // 3029 0062;	
    // („Ä©) HANGZHOU NUMERAL NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3029, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_401)
{
    // A629 0062;	
    // (Íò©) VAI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA629, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_402)
{
    // A8D9 0062;	
    // (Í£ô) SAURASHTRA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_403)
{
    // A909 0062;	
    // (Í§â) KAYAH LI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA909, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_404)
{
    // A9D9 0062;	
    // (Íßô) JAVANESE DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_405)
{
    // A9F9 0062;	
    // (Íßπ) MYANMAR TAI LAING DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_406)
{
    // AA59 0062;	
    // (Í©ô) CHAM DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_407)
{
    // ABF9 0062;	
    // (ÍØπ) MEETEI MAYEK DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_408)
{
    // 1010F 0062;	
    // (êÑè) AEGEAN NUMBER NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_409)
{
    // 102E9 0062;	
    // (êã©) COPTIC EPACT DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_410)
{
    // 104A9 0062;	
    // (êí©) OSMANYA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_411)
{
    // 109C8 0062;	
    // (‚Äé‚Äéêßà‚Äé‚Äé) MEROITIC CURSIVE NUMBER NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C8, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_412)
{
    // 10E68 0062;	
    // (‚Äéêπ®‚Äé) RUMI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E68, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_413)
{
    // 1105A 0062;	
    // (ëÅö) BRAHMI NUMBER NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1105A, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_414)
{
    // 1106F 0062;	
    // (ëÅØ) BRAHMI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_415)
{
    // 110F9 0062;	
    // (ëÉπ) SORA SOMPENG DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_416)
{
    // 1113F 0062;	
    // (ëÑø) CHAKMA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113F, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_417)
{
    // 111D9 0062;	
    // (ëáô) SHARADA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_418)
{
    // 111E9 0062;	
    // (ëá©) SINHALA ARCHAIC DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_419)
{
    // 112F9 0062;	
    // (ëãπ) KHUDAWADI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_420)
{
    // 11459 0062;	
    // (ëëô) NEWA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11459, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_421)
{
    // 114D9 0062;	
    // (ëìô) TIRHUTA DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_422)
{
    // 11659 0062;	
    // (ëôô) MODI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11659, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_423)
{
    // 116C9 0062;	
    // (ëõâ) TAKRI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_424)
{
    // 11739 0062;	
    // (ëúπ) AHOM DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11739, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_425)
{
    // 118E9 0062;	
    // (ë£©) WARANG CITI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E9, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_426)
{
    // 11C59 0062;	
    // (ë±ô) BHAIKSUKI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_427)
{
    // 11C62 0062;	
    // (ë±¢) BHAIKSUKI NUMBER NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C62, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_428)
{
    // 11D59 0062;	
    // (ëµô) MASARAM GONDI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_429)
{
    // 12407 0062;	
    // (íêá) CUNEIFORM NUMERIC SIGN NINE ASH	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12407, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_430)
{
    // 1240E 0062;	
    // (íêé) CUNEIFORM NUMERIC SIGN NINE DISH	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_431)
{
    // 12414 0062;	
    // (íêî) CUNEIFORM NUMERIC SIGN NINE U	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12414, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_432)
{
    // 1241D 0062;	
    // (íêù) CUNEIFORM NUMERIC SIGN NINE GESH2	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241D, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_433)
{
    // 1242B 0062;	
    // (íê´) CUNEIFORM NUMERIC SIGN NINE SHAR2	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242B, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_434)
{
    // 12446 0062;	
    // (íëÜ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12446, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_435)
{
    // 12447 0062;	
    // (íëá) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12447, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_436)
{
    // 12448 0062;	
    // (íëà) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12448, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_437)
{
    // 12449 0062;	
    // (íëâ) CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12449, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_438)
{
    // 1246E 0062;	
    // (íëÆ) CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_439)
{
    // 16A69 0062;	
    // (ñ©©) MRO DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A69, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_440)
{
    // 16B59 0062;	
    // (ñ≠ô) PAHAWH HMONG DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B59, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_441)
{
    // 1D368 0062;	
    // (ùç®) COUNTING ROD UNIT DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D368, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_442)
{
    // 1E8CF 0062;	
    // (‚Äé‚Äéû£è‚Äé‚Äé) MENDE KIKAKUI DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_443)
{
    // 1E959 0062;	
    // (‚Äé‚Äéû•ô‚Äé‚Äé) ADLAM DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E959, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_444)
{
    // FF19 0062;	
    // (Ôºô) FULLWIDTH DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF19, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_445)
{
    // 0F32 0062;	
    // (‡º≤) TIBETAN DIGIT HALF NINE	[1CAC 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F32, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_446)
{
    // 1D7D7 0062;	
    // (ùüó) MATHEMATICAL BOLD DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D7, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_447)
{
    // 1D7E1 0062;	
    // (ùü°) MATHEMATICAL DOUBLE-STRUCK DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E1, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_448)
{
    // 1D7EB 0062;	
    // (ùü´) MATHEMATICAL SANS-SERIF DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EB, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_449)
{
    // 1D7F5 0062;	
    // (ùüµ) MATHEMATICAL SANS-SERIF BOLD DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_450)
{
    // 1D7FF 0062;	
    // (ùüø) MATHEMATICAL MONOSPACE DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FF, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_451)
{
    // 2468 0062;	
    // (‚ë®) CIRCLED DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2468, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_452)
{
    // 24FD 0062;	
    // (‚ìΩ) DOUBLE CIRCLED DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FD, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_453)
{
    // 277E 0062;	
    // (‚ùæ) DINGBAT NEGATIVE CIRCLED DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_454)
{
    // 2788 0062;	
    // (‚ûà) DINGBAT CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2788, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_455)
{
    // 2792 0062;	
    // (‚ûí) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2792, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_456)
{
    // 2079 0062;	
    // (‚Åπ) SUPERSCRIPT NINE	[1CAC 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2079, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_457)
{
    // 2089 0062;	
    // (‚Çâ) SUBSCRIPT NINE	[1CAC 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2089, 0x0062 };
    uint32_t const ces[9] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_458)
{
    // 33E8 0021;	
    // („è®) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE	[1CAC FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E8, 0x0021 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_459)
{
    // 33E8 003F;	
    // („è®) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE	[1CAC FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E8, 0x003F };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_460)
{
    // 33E8 0061;	
    // („è®) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE	[1CAC FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E8, 0x0061 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_461)
{
    // 33E8 0041;	
    // („è®) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE	[1CAC FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E8, 0x0041 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_462)
{
    // 33E8 0062;	
    // („è®) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE	[1CAC FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E8, 0x0062 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_463)
{
    // 32C8 0021;	
    // („ãà) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER	[1CAC FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C8, 0x0021 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_464)
{
    // 32C8 003F;	
    // („ãà) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER	[1CAC FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C8, 0x003F };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_465)
{
    // 32C8 0061;	
    // („ãà) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER	[1CAC FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C8, 0x0061 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_466)
{
    // 32C8 0041;	
    // („ãà) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER	[1CAC FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C8, 0x0041 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_467)
{
    // 32C8 0062;	
    // („ãà) IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER	[1CAC FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C8, 0x0062 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_468)
{
    // 3361 0021;	
    // („ç°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE	[1CAC FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3361, 0x0021 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_469)
{
    // 3361 003F;	
    // („ç°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE	[1CAC FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3361, 0x003F };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_470)
{
    // 3361 0061;	
    // („ç°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE	[1CAC FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3361, 0x0061 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_471)
{
    // 3361 0041;	
    // („ç°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE	[1CAC FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x3361, 0x0041 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_472)
{
    // 3361 0062;	
    // („ç°) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE	[1CAC FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3361, 0x0062 };
    uint32_t const ces[13] = { 0x1CAC, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_473)
{
    // 0000 0061;	
    // ('\u0000') <NULL>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0000, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_474)
{
    // 0001 0061;	
    // ('\u0001') <START OF HEADING>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0001, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_475)
{
    // 0002 0061;	
    // ('\u0002') <START OF TEXT>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0002, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_476)
{
    // 0003 0061;	
    // ('\u0003') <END OF TEXT>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0003, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_477)
{
    // 0004 0061;	
    // ('\u0004') <END OF TRANSMISSION>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0004, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_478)
{
    // 0005 0061;	
    // ('\u0005') <ENQUIRY>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0005, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_479)
{
    // 0006 0061;	
    // ('\u0006') <ACKNOWLEDGE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0006, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_480)
{
    // 0007 0061;	
    // ('\u0007') <BELL>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0007, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_481)
{
    // 0008 0061;	
    // ('\u0008') <BACKSPACE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0008, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_482)
{
    // 000E 0061;	
    // ('\u000E') <SHIFT OUT>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000E, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_483)
{
    // 000F 0061;	
    // ('\u000F') <SHIFT IN>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000F, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_484)
{
    // 0010 0061;	
    // ('\u0010') <DATA LINK ESCAPE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0010, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_485)
{
    // 0011 0061;	
    // ('\u0011') <DEVICE CONTROL ONE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0011, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_486)
{
    // 0012 0061;	
    // ('\u0012') <DEVICE CONTROL TWO>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0012, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_487)
{
    // 0013 0061;	
    // ('\u0013') <DEVICE CONTROL THREE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0013, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_488)
{
    // 0014 0061;	
    // ('\u0014') <DEVICE CONTROL FOUR>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0014, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_489)
{
    // 0015 0061;	
    // ('\u0015') <NEGATIVE ACKNOWLEDGE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0015, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_490)
{
    // 0016 0061;	
    // ('\u0016') <SYNCHRONOUS IDLE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0016, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_491)
{
    // 0017 0061;	
    // ('\u0017') <END OF TRANSMISSION BLOCK>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0017, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_492)
{
    // 0018 0061;	
    // ('\u0018') <CANCEL>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0018, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_493)
{
    // 0019 0061;	
    // ('\u0019') <END OF MEDIUM>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0019, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_494)
{
    // 001A 0061;	
    // ('\u001A') <SUBSTITUTE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001A, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_495)
{
    // 001B 0061;	
    // ('\u001B') <ESCAPE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001B, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_496)
{
    // 001C 0061;	
    // ('\u001C') <INFORMATION SEPARATOR FOUR>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001C, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_497)
{
    // 001D 0061;	
    // ('\u001D') <INFORMATION SEPARATOR THREE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001D, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_498)
{
    // 001E 0061;	
    // ('\u001E') <INFORMATION SEPARATOR TWO>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001E, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_091_499)
{
    // 001F 0061;	
    // ('\u001F') <INFORMATION SEPARATOR ONE>	[1CAD | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001F, 0x0061 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

